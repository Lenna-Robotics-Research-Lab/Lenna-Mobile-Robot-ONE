
Lenna-Bardia-MCU-Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eaec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d0  0800ec80  0800ec80  0001ec80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f450  0800f450  00020460  2**0
                  CONTENTS
  4 .ARM          00000008  0800f450  0800f450  0001f450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f458  0800f458  00020460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f458  0800f458  0001f458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f45c  0800f45c  0001f45c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000460  20000000  0800f460  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020460  2**0
                  CONTENTS
 10 .bss          00000790  20000460  20000460  00020460  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000bf0  20000bf0  00020460  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020460  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d31f  00000000  00000000  00020490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a90  00000000  00000000  0003d7af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016a8  00000000  00000000  00041240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001518  00000000  00000000  000428e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000271da  00000000  00000000  00043e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dece  00000000  00000000  0006afda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5e04  00000000  00000000  00088ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016ecac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007668  00000000  00000000  0016ecfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000460 	.word	0x20000460
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ec64 	.word	0x0800ec64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000464 	.word	0x20000464
 80001cc:	0800ec64 	.word	0x0800ec64

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ffe:	463b      	mov	r3, r7
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800100a:	4b21      	ldr	r3, [pc, #132]	; (8001090 <MX_ADC1_Init+0x98>)
 800100c:	4a21      	ldr	r2, [pc, #132]	; (8001094 <MX_ADC1_Init+0x9c>)
 800100e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001010:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <MX_ADC1_Init+0x98>)
 8001012:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001016:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001018:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <MX_ADC1_Init+0x98>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800101e:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <MX_ADC1_Init+0x98>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001024:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <MX_ADC1_Init+0x98>)
 8001026:	2200      	movs	r2, #0
 8001028:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800102a:	4b19      	ldr	r3, [pc, #100]	; (8001090 <MX_ADC1_Init+0x98>)
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001032:	4b17      	ldr	r3, [pc, #92]	; (8001090 <MX_ADC1_Init+0x98>)
 8001034:	2200      	movs	r2, #0
 8001036:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001038:	4b15      	ldr	r3, [pc, #84]	; (8001090 <MX_ADC1_Init+0x98>)
 800103a:	4a17      	ldr	r2, [pc, #92]	; (8001098 <MX_ADC1_Init+0xa0>)
 800103c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <MX_ADC1_Init+0x98>)
 8001040:	2200      	movs	r2, #0
 8001042:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <MX_ADC1_Init+0x98>)
 8001046:	2201      	movs	r2, #1
 8001048:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800104a:	4b11      	ldr	r3, [pc, #68]	; (8001090 <MX_ADC1_Init+0x98>)
 800104c:	2200      	movs	r2, #0
 800104e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001052:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <MX_ADC1_Init+0x98>)
 8001054:	2201      	movs	r2, #1
 8001056:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001058:	480d      	ldr	r0, [pc, #52]	; (8001090 <MX_ADC1_Init+0x98>)
 800105a:	f003 f90d 	bl	8004278 <HAL_ADC_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001064:	f000 fcee 	bl	8001a44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001068:	2305      	movs	r3, #5
 800106a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800106c:	2301      	movs	r3, #1
 800106e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001070:	2300      	movs	r3, #0
 8001072:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001074:	463b      	mov	r3, r7
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_ADC1_Init+0x98>)
 800107a:	f003 f941 	bl	8004300 <HAL_ADC_ConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001084:	f000 fcde 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	2000047c 	.word	0x2000047c
 8001094:	40012000 	.word	0x40012000
 8001098:	0f000001 	.word	0x0f000001

0800109c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a17      	ldr	r2, [pc, #92]	; (8001118 <HAL_ADC_MspInit+0x7c>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d127      	bne.n	800110e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b16      	ldr	r3, [pc, #88]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	4a15      	ldr	r2, [pc, #84]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010cc:	6453      	str	r3, [r2, #68]	; 0x44
 80010ce:	4b13      	ldr	r3, [pc, #76]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a0e      	ldr	r2, [pc, #56]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = Battery_ADC_Pin;
 80010f6:	2320      	movs	r3, #32
 80010f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fa:	2303      	movs	r3, #3
 80010fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Battery_ADC_GPIO_Port, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	4805      	ldr	r0, [pc, #20]	; (8001120 <HAL_ADC_MspInit+0x84>)
 800110a:	f003 ffe3 	bl	80050d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800110e:	bf00      	nop
 8001110:	3728      	adds	r7, #40	; 0x28
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40012000 	.word	0x40012000
 800111c:	40023800 	.word	0x40023800
 8001120:	40020000 	.word	0x40020000

08001124 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001128:	4b1f      	ldr	r3, [pc, #124]	; (80011a8 <MX_ETH_Init+0x84>)
 800112a:	4a20      	ldr	r2, [pc, #128]	; (80011ac <MX_ETH_Init+0x88>)
 800112c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800112e:	4b20      	ldr	r3, [pc, #128]	; (80011b0 <MX_ETH_Init+0x8c>)
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001134:	4b1e      	ldr	r3, [pc, #120]	; (80011b0 <MX_ETH_Init+0x8c>)
 8001136:	2280      	movs	r2, #128	; 0x80
 8001138:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800113a:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <MX_ETH_Init+0x8c>)
 800113c:	22e1      	movs	r2, #225	; 0xe1
 800113e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001140:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <MX_ETH_Init+0x8c>)
 8001142:	2200      	movs	r2, #0
 8001144:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001146:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <MX_ETH_Init+0x8c>)
 8001148:	2200      	movs	r2, #0
 800114a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800114c:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <MX_ETH_Init+0x8c>)
 800114e:	2200      	movs	r2, #0
 8001150:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <MX_ETH_Init+0x84>)
 8001154:	4a16      	ldr	r2, [pc, #88]	; (80011b0 <MX_ETH_Init+0x8c>)
 8001156:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001158:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <MX_ETH_Init+0x84>)
 800115a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800115e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001160:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <MX_ETH_Init+0x84>)
 8001162:	4a14      	ldr	r2, [pc, #80]	; (80011b4 <MX_ETH_Init+0x90>)
 8001164:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <MX_ETH_Init+0x84>)
 8001168:	4a13      	ldr	r2, [pc, #76]	; (80011b8 <MX_ETH_Init+0x94>)
 800116a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800116c:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <MX_ETH_Init+0x84>)
 800116e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001172:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001174:	480c      	ldr	r0, [pc, #48]	; (80011a8 <MX_ETH_Init+0x84>)
 8001176:	f003 fc85 	bl	8004a84 <HAL_ETH_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001180:	f000 fc60 	bl	8001a44 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001184:	2238      	movs	r2, #56	; 0x38
 8001186:	2100      	movs	r1, #0
 8001188:	480c      	ldr	r0, [pc, #48]	; (80011bc <MX_ETH_Init+0x98>)
 800118a:	f008 fcd9 	bl	8009b40 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800118e:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <MX_ETH_Init+0x98>)
 8001190:	2221      	movs	r2, #33	; 0x21
 8001192:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001194:	4b09      	ldr	r3, [pc, #36]	; (80011bc <MX_ETH_Init+0x98>)
 8001196:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800119a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800119c:	4b07      	ldr	r3, [pc, #28]	; (80011bc <MX_ETH_Init+0x98>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	2000063c 	.word	0x2000063c
 80011ac:	40028000 	.word	0x40028000
 80011b0:	200006ec 	.word	0x200006ec
 80011b4:	20000564 	.word	0x20000564
 80011b8:	200004c4 	.word	0x200004c4
 80011bc:	20000604 	.word	0x20000604

080011c0 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08e      	sub	sp, #56	; 0x38
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a46      	ldr	r2, [pc, #280]	; (80012f8 <HAL_ETH_MspInit+0x138>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	f040 8085 	bne.w	80012ee <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80011e4:	2300      	movs	r3, #0
 80011e6:	623b      	str	r3, [r7, #32]
 80011e8:	4b44      	ldr	r3, [pc, #272]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 80011ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ec:	4a43      	ldr	r2, [pc, #268]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 80011ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011f2:	6313      	str	r3, [r2, #48]	; 0x30
 80011f4:	4b41      	ldr	r3, [pc, #260]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 80011f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011fc:	623b      	str	r3, [r7, #32]
 80011fe:	6a3b      	ldr	r3, [r7, #32]
 8001200:	2300      	movs	r3, #0
 8001202:	61fb      	str	r3, [r7, #28]
 8001204:	4b3d      	ldr	r3, [pc, #244]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 8001206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001208:	4a3c      	ldr	r2, [pc, #240]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 800120a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800120e:	6313      	str	r3, [r2, #48]	; 0x30
 8001210:	4b3a      	ldr	r3, [pc, #232]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 8001212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001214:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001218:	61fb      	str	r3, [r7, #28]
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	2300      	movs	r3, #0
 800121e:	61bb      	str	r3, [r7, #24]
 8001220:	4b36      	ldr	r3, [pc, #216]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 8001222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001224:	4a35      	ldr	r2, [pc, #212]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 8001226:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800122a:	6313      	str	r3, [r2, #48]	; 0x30
 800122c:	4b33      	ldr	r3, [pc, #204]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 800122e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001234:	61bb      	str	r3, [r7, #24]
 8001236:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	4b2f      	ldr	r3, [pc, #188]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 800123e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001240:	4a2e      	ldr	r2, [pc, #184]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 8001242:	f043 0304 	orr.w	r3, r3, #4
 8001246:	6313      	str	r3, [r2, #48]	; 0x30
 8001248:	4b2c      	ldr	r3, [pc, #176]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 800124a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124c:	f003 0304 	and.w	r3, r3, #4
 8001250:	617b      	str	r3, [r7, #20]
 8001252:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001254:	2300      	movs	r3, #0
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	4b28      	ldr	r3, [pc, #160]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 800125a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125c:	4a27      	ldr	r2, [pc, #156]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	6313      	str	r3, [r2, #48]	; 0x30
 8001264:	4b25      	ldr	r3, [pc, #148]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 8001266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	613b      	str	r3, [r7, #16]
 800126e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	4b21      	ldr	r3, [pc, #132]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 8001276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001278:	4a20      	ldr	r2, [pc, #128]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 800127a:	f043 0302 	orr.w	r3, r3, #2
 800127e:	6313      	str	r3, [r2, #48]	; 0x30
 8001280:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 8001282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800128c:	2332      	movs	r3, #50	; 0x32
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001298:	2303      	movs	r3, #3
 800129a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800129c:	230b      	movs	r3, #11
 800129e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a4:	4619      	mov	r1, r3
 80012a6:	4816      	ldr	r0, [pc, #88]	; (8001300 <HAL_ETH_MspInit+0x140>)
 80012a8:	f003 ff14 	bl	80050d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80012ac:	2386      	movs	r3, #134	; 0x86
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b8:	2303      	movs	r3, #3
 80012ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012bc:	230b      	movs	r3, #11
 80012be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c4:	4619      	mov	r1, r3
 80012c6:	480f      	ldr	r0, [pc, #60]	; (8001304 <HAL_ETH_MspInit+0x144>)
 80012c8:	f003 ff04 	bl	80050d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80012cc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012da:	2303      	movs	r3, #3
 80012dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012de:	230b      	movs	r3, #11
 80012e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e6:	4619      	mov	r1, r3
 80012e8:	4807      	ldr	r0, [pc, #28]	; (8001308 <HAL_ETH_MspInit+0x148>)
 80012ea:	f003 fef3 	bl	80050d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80012ee:	bf00      	nop
 80012f0:	3738      	adds	r7, #56	; 0x38
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40028000 	.word	0x40028000
 80012fc:	40023800 	.word	0x40023800
 8001300:	40020800 	.word	0x40020800
 8001304:	40020000 	.word	0x40020000
 8001308:	40020400 	.word	0x40020400

0800130c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08c      	sub	sp, #48	; 0x30
 8001310:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001312:	f107 031c 	add.w	r3, r7, #28
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
 8001320:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	61bb      	str	r3, [r7, #24]
 8001326:	4b63      	ldr	r3, [pc, #396]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4a62      	ldr	r2, [pc, #392]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 800132c:	f043 0310 	orr.w	r3, r3, #16
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4b60      	ldr	r3, [pc, #384]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f003 0310 	and.w	r3, r3, #16
 800133a:	61bb      	str	r3, [r7, #24]
 800133c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]
 8001342:	4b5c      	ldr	r3, [pc, #368]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a5b      	ldr	r2, [pc, #364]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 8001348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b59      	ldr	r3, [pc, #356]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	4b55      	ldr	r3, [pc, #340]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a54      	ldr	r2, [pc, #336]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 8001364:	f043 0304 	orr.w	r3, r3, #4
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b52      	ldr	r3, [pc, #328]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0304 	and.w	r3, r3, #4
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	4b4e      	ldr	r3, [pc, #312]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a4d      	ldr	r2, [pc, #308]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b4b      	ldr	r3, [pc, #300]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	4b47      	ldr	r3, [pc, #284]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a46      	ldr	r2, [pc, #280]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b44      	ldr	r3, [pc, #272]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	4b40      	ldr	r3, [pc, #256]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a3f      	ldr	r2, [pc, #252]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 80013b8:	f043 0308 	orr.w	r3, r3, #8
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b3d      	ldr	r3, [pc, #244]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TRIG_HC_3_Pin|TRIG_HC_4_Pin|GPIO_PIN_7|GPIO_PIN_8
 80013ca:	2200      	movs	r2, #0
 80013cc:	f64f 719b 	movw	r1, #65435	; 0xff9b
 80013d0:	4839      	ldr	r0, [pc, #228]	; (80014b8 <MX_GPIO_Init+0x1ac>)
 80013d2:	f004 f81b 	bl	800540c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|TRIG_HC_1_Pin
                          |TRIG_HC_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Buzzer_Pin|GPIO_PIN_11, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	f44f 6101 	mov.w	r1, #2064	; 0x810
 80013dc:	4837      	ldr	r0, [pc, #220]	; (80014bc <MX_GPIO_Init+0x1b0>)
 80013de:	f004 f815 	bl	800540c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80013e2:	2200      	movs	r2, #0
 80013e4:	f24c 0103 	movw	r1, #49155	; 0xc003
 80013e8:	4835      	ldr	r0, [pc, #212]	; (80014c0 <MX_GPIO_Init+0x1b4>)
 80013ea:	f004 f80f 	bl	800540c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80013ee:	2200      	movs	r2, #0
 80013f0:	f643 711b 	movw	r1, #16155	; 0x3f1b
 80013f4:	4833      	ldr	r0, [pc, #204]	; (80014c4 <MX_GPIO_Init+0x1b8>)
 80013f6:	f004 f809 	bl	800540c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PE7 PE8
                           PE9 PE10 PE11 PE12
                           PE13 PE14 PE15 PEPin
                           PEPin */
  GPIO_InitStruct.Pin = TRIG_HC_3_Pin|TRIG_HC_4_Pin|GPIO_PIN_7|GPIO_PIN_8
 80013fa:	f64f 739b 	movw	r3, #65435	; 0xff9b
 80013fe:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|TRIG_HC_1_Pin
                          |TRIG_HC_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001400:	2301      	movs	r3, #1
 8001402:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	2300      	movs	r3, #0
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800140c:	f107 031c 	add.w	r3, r7, #28
 8001410:	4619      	mov	r1, r3
 8001412:	4829      	ldr	r0, [pc, #164]	; (80014b8 <MX_GPIO_Init+0x1ac>)
 8001414:	f003 fe5e 	bl	80050d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8001418:	2310      	movs	r3, #16
 800141a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141c:	2301      	movs	r3, #1
 800141e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001420:	2302      	movs	r3, #2
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001424:	2300      	movs	r3, #0
 8001426:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001428:	f107 031c 	add.w	r3, r7, #28
 800142c:	4619      	mov	r1, r3
 800142e:	4823      	ldr	r0, [pc, #140]	; (80014bc <MX_GPIO_Init+0x1b0>)
 8001430:	f003 fe50 	bl	80050d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_15;
 8001434:	f24c 0303 	movw	r3, #49155	; 0xc003
 8001438:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143a:	2301      	movs	r3, #1
 800143c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	2300      	movs	r3, #0
 8001444:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001446:	f107 031c 	add.w	r3, r7, #28
 800144a:	4619      	mov	r1, r3
 800144c:	481c      	ldr	r0, [pc, #112]	; (80014c0 <MX_GPIO_Init+0x1b4>)
 800144e:	f003 fe41 	bl	80050d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001452:	f643 731b 	movw	r3, #16155	; 0x3f1b
 8001456:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|MOTOR2_B_Pin|MOTOR2_A_Pin
                          |MOTOR1_B_Pin|MOTOR1_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001458:	2301      	movs	r3, #1
 800145a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2300      	movs	r3, #0
 8001462:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001464:	f107 031c 	add.w	r3, r7, #28
 8001468:	4619      	mov	r1, r3
 800146a:	4816      	ldr	r0, [pc, #88]	; (80014c4 <MX_GPIO_Init+0x1b8>)
 800146c:	f003 fe32 	bl	80050d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001470:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001474:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001476:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800147a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001480:	f107 031c 	add.w	r3, r7, #28
 8001484:	4619      	mov	r1, r3
 8001486:	480f      	ldr	r0, [pc, #60]	; (80014c4 <MX_GPIO_Init+0x1b8>)
 8001488:	f003 fe24 	bl	80050d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800148c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001492:	2301      	movs	r3, #1
 8001494:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2300      	movs	r3, #0
 800149c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149e:	f107 031c 	add.w	r3, r7, #28
 80014a2:	4619      	mov	r1, r3
 80014a4:	4805      	ldr	r0, [pc, #20]	; (80014bc <MX_GPIO_Init+0x1b0>)
 80014a6:	f003 fe15 	bl	80050d4 <HAL_GPIO_Init>

}
 80014aa:	bf00      	nop
 80014ac:	3730      	adds	r7, #48	; 0x30
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40020000 	.word	0x40020000
 80014c0:	40020400 	.word	0x40020400
 80014c4:	40020c00 	.word	0x40020c00

080014c8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <MX_I2C1_Init+0x50>)
 80014ce:	4a13      	ldr	r2, [pc, #76]	; (800151c <MX_I2C1_Init+0x54>)
 80014d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014d2:	4b11      	ldr	r3, [pc, #68]	; (8001518 <MX_I2C1_Init+0x50>)
 80014d4:	4a12      	ldr	r2, [pc, #72]	; (8001520 <MX_I2C1_Init+0x58>)
 80014d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014d8:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <MX_I2C1_Init+0x50>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014de:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <MX_I2C1_Init+0x50>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <MX_I2C1_Init+0x50>)
 80014e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014ec:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <MX_I2C1_Init+0x50>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014f2:	4b09      	ldr	r3, [pc, #36]	; (8001518 <MX_I2C1_Init+0x50>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014f8:	4b07      	ldr	r3, [pc, #28]	; (8001518 <MX_I2C1_Init+0x50>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <MX_I2C1_Init+0x50>)
 8001500:	2200      	movs	r2, #0
 8001502:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001504:	4804      	ldr	r0, [pc, #16]	; (8001518 <MX_I2C1_Init+0x50>)
 8001506:	f003 ff9b 	bl	8005440 <HAL_I2C_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001510:	f000 fa98 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}
 8001518:	200006f4 	.word	0x200006f4
 800151c:	40005400 	.word	0x40005400
 8001520:	000186a0 	.word	0x000186a0

08001524 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001528:	4b12      	ldr	r3, [pc, #72]	; (8001574 <MX_I2C3_Init+0x50>)
 800152a:	4a13      	ldr	r2, [pc, #76]	; (8001578 <MX_I2C3_Init+0x54>)
 800152c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <MX_I2C3_Init+0x50>)
 8001530:	4a12      	ldr	r2, [pc, #72]	; (800157c <MX_I2C3_Init+0x58>)
 8001532:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <MX_I2C3_Init+0x50>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800153a:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <MX_I2C3_Init+0x50>)
 800153c:	2200      	movs	r2, #0
 800153e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <MX_I2C3_Init+0x50>)
 8001542:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001546:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001548:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <MX_I2C3_Init+0x50>)
 800154a:	2200      	movs	r2, #0
 800154c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800154e:	4b09      	ldr	r3, [pc, #36]	; (8001574 <MX_I2C3_Init+0x50>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001554:	4b07      	ldr	r3, [pc, #28]	; (8001574 <MX_I2C3_Init+0x50>)
 8001556:	2200      	movs	r2, #0
 8001558:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800155a:	4b06      	ldr	r3, [pc, #24]	; (8001574 <MX_I2C3_Init+0x50>)
 800155c:	2200      	movs	r2, #0
 800155e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001560:	4804      	ldr	r0, [pc, #16]	; (8001574 <MX_I2C3_Init+0x50>)
 8001562:	f003 ff6d 	bl	8005440 <HAL_I2C_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800156c:	f000 fa6a 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20000748 	.word	0x20000748
 8001578:	40005c00 	.word	0x40005c00
 800157c:	000186a0 	.word	0x000186a0

08001580 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08c      	sub	sp, #48	; 0x30
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 031c 	add.w	r3, r7, #28
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a42      	ldr	r2, [pc, #264]	; (80016a8 <HAL_I2C_MspInit+0x128>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d12c      	bne.n	80015fc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	61bb      	str	r3, [r7, #24]
 80015a6:	4b41      	ldr	r3, [pc, #260]	; (80016ac <HAL_I2C_MspInit+0x12c>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a40      	ldr	r2, [pc, #256]	; (80016ac <HAL_I2C_MspInit+0x12c>)
 80015ac:	f043 0302 	orr.w	r3, r3, #2
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b3e      	ldr	r3, [pc, #248]	; (80016ac <HAL_I2C_MspInit+0x12c>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	61bb      	str	r3, [r7, #24]
 80015bc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = JET_I2C_SCL_Pin|JET_I2C_SDA_Pin;
 80015be:	23c0      	movs	r3, #192	; 0xc0
 80015c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015c2:	2312      	movs	r3, #18
 80015c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ca:	2303      	movs	r3, #3
 80015cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015ce:	2304      	movs	r3, #4
 80015d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d2:	f107 031c 	add.w	r3, r7, #28
 80015d6:	4619      	mov	r1, r3
 80015d8:	4835      	ldr	r0, [pc, #212]	; (80016b0 <HAL_I2C_MspInit+0x130>)
 80015da:	f003 fd7b 	bl	80050d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
 80015e2:	4b32      	ldr	r3, [pc, #200]	; (80016ac <HAL_I2C_MspInit+0x12c>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	4a31      	ldr	r2, [pc, #196]	; (80016ac <HAL_I2C_MspInit+0x12c>)
 80015e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015ec:	6413      	str	r3, [r2, #64]	; 0x40
 80015ee:	4b2f      	ldr	r3, [pc, #188]	; (80016ac <HAL_I2C_MspInit+0x12c>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f6:	617b      	str	r3, [r7, #20]
 80015f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80015fa:	e050      	b.n	800169e <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a2c      	ldr	r2, [pc, #176]	; (80016b4 <HAL_I2C_MspInit+0x134>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d14b      	bne.n	800169e <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
 800160a:	4b28      	ldr	r3, [pc, #160]	; (80016ac <HAL_I2C_MspInit+0x12c>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4a27      	ldr	r2, [pc, #156]	; (80016ac <HAL_I2C_MspInit+0x12c>)
 8001610:	f043 0304 	orr.w	r3, r3, #4
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4b25      	ldr	r3, [pc, #148]	; (80016ac <HAL_I2C_MspInit+0x12c>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0304 	and.w	r3, r3, #4
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	4b21      	ldr	r3, [pc, #132]	; (80016ac <HAL_I2C_MspInit+0x12c>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a20      	ldr	r2, [pc, #128]	; (80016ac <HAL_I2C_MspInit+0x12c>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b1e      	ldr	r3, [pc, #120]	; (80016ac <HAL_I2C_MspInit+0x12c>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUS_SDA_Pin;
 800163e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001644:	2312      	movs	r3, #18
 8001646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164c:	2303      	movs	r3, #3
 800164e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001650:	2304      	movs	r3, #4
 8001652:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BUS_SDA_GPIO_Port, &GPIO_InitStruct);
 8001654:	f107 031c 	add.w	r3, r7, #28
 8001658:	4619      	mov	r1, r3
 800165a:	4817      	ldr	r0, [pc, #92]	; (80016b8 <HAL_I2C_MspInit+0x138>)
 800165c:	f003 fd3a 	bl	80050d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BUS_SCL_Pin;
 8001660:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001666:	2312      	movs	r3, #18
 8001668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166e:	2303      	movs	r3, #3
 8001670:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001672:	2304      	movs	r3, #4
 8001674:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BUS_SCL_GPIO_Port, &GPIO_InitStruct);
 8001676:	f107 031c 	add.w	r3, r7, #28
 800167a:	4619      	mov	r1, r3
 800167c:	480f      	ldr	r0, [pc, #60]	; (80016bc <HAL_I2C_MspInit+0x13c>)
 800167e:	f003 fd29 	bl	80050d4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <HAL_I2C_MspInit+0x12c>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	4a08      	ldr	r2, [pc, #32]	; (80016ac <HAL_I2C_MspInit+0x12c>)
 800168c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001690:	6413      	str	r3, [r2, #64]	; 0x40
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <HAL_I2C_MspInit+0x12c>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	68bb      	ldr	r3, [r7, #8]
}
 800169e:	bf00      	nop
 80016a0:	3730      	adds	r7, #48	; 0x30
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40005400 	.word	0x40005400
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40020400 	.word	0x40020400
 80016b4:	40005c00 	.word	0x40005c00
 80016b8:	40020800 	.word	0x40020800
 80016bc:	40020000 	.word	0x40020000

080016c0 <__io_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// ####################   UART Tx -> printf   ####################
PUTCHAR_PROTOTYPE
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80016c8:	1d39      	adds	r1, r7, #4
 80016ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016ce:	2201      	movs	r2, #1
 80016d0:	4803      	ldr	r0, [pc, #12]	; (80016e0 <__io_putchar+0x20>)
 80016d2:	f007 f8fa 	bl	80088ca <HAL_UART_Transmit>

  return ch;
 80016d6:	687b      	ldr	r3, [r7, #4]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000b54 	.word	0x20000b54

080016e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016e6:	b091      	sub	sp, #68	; 0x44
 80016e8:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016ea:	f002 fd2f 	bl	800414c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016ee:	f000 f905 	bl	80018fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016f2:	f7ff fe0b 	bl	800130c <MX_GPIO_Init>
  MX_ADC1_Init();
 80016f6:	f7ff fc7f 	bl	8000ff8 <MX_ADC1_Init>
  MX_ETH_Init();
 80016fa:	f7ff fd13 	bl	8001124 <MX_ETH_Init>
  MX_I2C1_Init();
 80016fe:	f7ff fee3 	bl	80014c8 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001702:	f7ff ff0f 	bl	8001524 <MX_I2C3_Init>
  MX_SPI2_Init();
 8001706:	f001 fd4b 	bl	80031a0 <MX_SPI2_Init>
  MX_SPI3_Init();
 800170a:	f001 fd7f 	bl	800320c <MX_SPI3_Init>
  MX_TIM2_Init();
 800170e:	f001 fff3 	bl	80036f8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001712:	f002 f845 	bl	80037a0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001716:	f002 f897 	bl	8003848 <MX_TIM4_Init>
  MX_TIM8_Init();
 800171a:	f002 f95f 	bl	80039dc <MX_TIM8_Init>
  MX_TIM9_Init();
 800171e:	f002 fa09 	bl	8003b34 <MX_TIM9_Init>
  MX_USART1_UART_Init();
 8001722:	f002 fc07 	bl	8003f34 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001726:	f002 fc2f 	bl	8003f88 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800172a:	f001 ff95 	bl	8003658 <MX_TIM1_Init>
  MX_TIM5_Init();
 800172e:	f002 f907 	bl	8003940 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001732:	2100      	movs	r1, #0
 8001734:	485f      	ldr	r0, [pc, #380]	; (80018b4 <main+0x1d0>)
 8001736:	f005 fdbd 	bl	80072b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800173a:	2104      	movs	r1, #4
 800173c:	485d      	ldr	r0, [pc, #372]	; (80018b4 <main+0x1d0>)
 800173e:	f005 fdb9 	bl	80072b4 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001742:	213c      	movs	r1, #60	; 0x3c
 8001744:	485c      	ldr	r0, [pc, #368]	; (80018b8 <main+0x1d4>)
 8001746:	f005 ff72 	bl	800762e <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800174a:	213c      	movs	r1, #60	; 0x3c
 800174c:	485b      	ldr	r0, [pc, #364]	; (80018bc <main+0x1d8>)
 800174e:	f005 ff6e 	bl	800762e <HAL_TIM_Encoder_Start>
//  HAL_TIM_Base_Init(&htim5);
  HAL_TIM_Base_Start_IT(&htim5);
 8001752:	485b      	ldr	r0, [pc, #364]	; (80018c0 <main+0x1dc>)
 8001754:	f005 fce4 	bl	8007120 <HAL_TIM_Base_Start_IT>
  HAL_I2C_Init(&hi2c3);
 8001758:	485a      	ldr	r0, [pc, #360]	; (80018c4 <main+0x1e0>)
 800175a:	f003 fe71 	bl	8005440 <HAL_I2C_Init>

// #################### Initializations   ####################

//  /* main code initialization

  LRL_PID_Init(&pid_motor_left,  1);
 800175e:	2101      	movs	r1, #1
 8001760:	4859      	ldr	r0, [pc, #356]	; (80018c8 <main+0x1e4>)
 8001762:	f001 fc25 	bl	8002fb0 <LRL_PID_Init>
  LRL_PID_Init(&pid_motor_right, 1);
 8001766:	2101      	movs	r1, #1
 8001768:	4858      	ldr	r0, [pc, #352]	; (80018cc <main+0x1e8>)
 800176a:	f001 fc21 	bl	8002fb0 <LRL_PID_Init>

  LRL_Encoder_Init(&odom);
 800176e:	4858      	ldr	r0, [pc, #352]	; (80018d0 <main+0x1ec>)
 8001770:	f001 f8ec 	bl	800294c <LRL_Encoder_Init>

  LRL_MPU6050_Init(&odom);
 8001774:	4856      	ldr	r0, [pc, #344]	; (80018d0 <main+0x1ec>)
 8001776:	f000 fb5d 	bl	8001e34 <LRL_MPU6050_Init>

  LRL_HMC5883L_Init(&odom);
 800177a:	4855      	ldr	r0, [pc, #340]	; (80018d0 <main+0x1ec>)
 800177c:	f000 f9f0 	bl	8001b60 <LRL_HMC5883L_Init>

  int16_t motor_speed_left = 0, motor_speed_right = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	80fb      	strh	r3, [r7, #6]
 8001784:	2300      	movs	r3, #0
 8001786:	80bb      	strh	r3, [r7, #4]
//  HAL_UART_Transmit(&huart1, msgBuffer, 32, 100);

//  HAL_Delay(1000);
  for(int c = 0; c< 3 ; c++)
 8001788:	2300      	movs	r3, #0
 800178a:	603b      	str	r3, [r7, #0]
 800178c:	e016      	b.n	80017bc <main+0xd8>
  {
	  HAL_GPIO_WritePin(BLINK_LED_PORT, BLINK_LED_PIN, 1);
 800178e:	2201      	movs	r2, #1
 8001790:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001794:	484f      	ldr	r0, [pc, #316]	; (80018d4 <main+0x1f0>)
 8001796:	f003 fe39 	bl	800540c <HAL_GPIO_WritePin>
	  HAL_Delay(300);
 800179a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800179e:	f002 fd47 	bl	8004230 <HAL_Delay>
	  HAL_GPIO_WritePin(BLINK_LED_PORT, BLINK_LED_PIN, 0);
 80017a2:	2200      	movs	r2, #0
 80017a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017a8:	484a      	ldr	r0, [pc, #296]	; (80018d4 <main+0x1f0>)
 80017aa:	f003 fe2f 	bl	800540c <HAL_GPIO_WritePin>
	  HAL_Delay(300);
 80017ae:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80017b2:	f002 fd3d 	bl	8004230 <HAL_Delay>
  for(int c = 0; c< 3 ; c++)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	3301      	adds	r3, #1
 80017ba:	603b      	str	r3, [r7, #0]
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	2b02      	cmp	r3, #2
 80017c0:	dde5      	ble.n	800178e <main+0xaa>
  }

  LRL_handShake(&rx_packet);
 80017c2:	4845      	ldr	r0, [pc, #276]	; (80018d8 <main+0x1f4>)
 80017c4:	f001 fbc2 	bl	8002f4c <LRL_handShake>

//  LRL_RX_Init(&rx_packet);
//  LRL_Packet_Init(&rx_packet);

  HAL_UART_Receive_IT(&huart2, testBuffer, 10);
 80017c8:	220a      	movs	r2, #10
 80017ca:	4944      	ldr	r1, [pc, #272]	; (80018dc <main+0x1f8>)
 80017cc:	4844      	ldr	r0, [pc, #272]	; (80018e0 <main+0x1fc>)
 80017ce:	f007 f9f5 	bl	8008bbc <HAL_UART_Receive_IT>

  txBuffer[0] = 0xFF;
 80017d2:	4b44      	ldr	r3, [pc, #272]	; (80018e4 <main+0x200>)
 80017d4:	22ff      	movs	r2, #255	; 0xff
 80017d6:	701a      	strb	r2, [r3, #0]
  txBuffer[1] = 0xFF;
 80017d8:	4b42      	ldr	r3, [pc, #264]	; (80018e4 <main+0x200>)
 80017da:	22ff      	movs	r2, #255	; 0xff
 80017dc:	705a      	strb	r2, [r3, #1]

  odom.dist.right = 0;
 80017de:	4b3c      	ldr	r3, [pc, #240]	; (80018d0 <main+0x1ec>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
  odom.dist.left = 0;
 80017e6:	4b3a      	ldr	r3, [pc, #232]	; (80018d0 <main+0x1ec>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
		LRL_Motion_Control(diff_robot, pid_motor_left.Control_Signal,pid_motor_right.Control_Signal);
		pid_tim_flag = 0;
	  }
	*/
	  /* this part is for the problem handling and debugging  */
	  if(serial_flag == 1)
 80017ee:	4b3e      	ldr	r3, [pc, #248]	; (80018e8 <main+0x204>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d11f      	bne.n	8001836 <main+0x152>
	  {
		  HAL_UART_Receive_IT(&huart2, testBuffer, 10);
 80017f6:	220a      	movs	r2, #10
 80017f8:	4938      	ldr	r1, [pc, #224]	; (80018dc <main+0x1f8>)
 80017fa:	4839      	ldr	r0, [pc, #228]	; (80018e0 <main+0x1fc>)
 80017fc:	f007 f9de 	bl	8008bbc <HAL_UART_Receive_IT>
	  	  HAL_UART_Transmit(&huart1, testBuffer,sizeof(testBuffer),1);
 8001800:	2301      	movs	r3, #1
 8001802:	220a      	movs	r2, #10
 8001804:	4935      	ldr	r1, [pc, #212]	; (80018dc <main+0x1f8>)
 8001806:	4839      	ldr	r0, [pc, #228]	; (80018ec <main+0x208>)
 8001808:	f007 f85f 	bl	80088ca <HAL_UART_Transmit>
		  motor_speed_left = (int16_t)((testBuffer[4] << 8) | testBuffer[5]);
 800180c:	4b33      	ldr	r3, [pc, #204]	; (80018dc <main+0x1f8>)
 800180e:	791b      	ldrb	r3, [r3, #4]
 8001810:	021b      	lsls	r3, r3, #8
 8001812:	b21a      	sxth	r2, r3
 8001814:	4b31      	ldr	r3, [pc, #196]	; (80018dc <main+0x1f8>)
 8001816:	795b      	ldrb	r3, [r3, #5]
 8001818:	b21b      	sxth	r3, r3
 800181a:	4313      	orrs	r3, r2
 800181c:	80fb      	strh	r3, [r7, #6]
		  motor_speed_right = (int16_t)((testBuffer[6] << 8) | testBuffer[7]);
 800181e:	4b2f      	ldr	r3, [pc, #188]	; (80018dc <main+0x1f8>)
 8001820:	799b      	ldrb	r3, [r3, #6]
 8001822:	021b      	lsls	r3, r3, #8
 8001824:	b21a      	sxth	r2, r3
 8001826:	4b2d      	ldr	r3, [pc, #180]	; (80018dc <main+0x1f8>)
 8001828:	79db      	ldrb	r3, [r3, #7]
 800182a:	b21b      	sxth	r3, r3
 800182c:	4313      	orrs	r3, r2
 800182e:	80bb      	strh	r3, [r7, #4]

	  	  serial_flag = 0;
 8001830:	4b2d      	ldr	r3, [pc, #180]	; (80018e8 <main+0x204>)
 8001832:	2200      	movs	r2, #0
 8001834:	701a      	strb	r2, [r3, #0]
//	  	  HAL_Delay(10);
	  }
	  if(pid_tim_flag == 1)
 8001836:	4b2e      	ldr	r3, [pc, #184]	; (80018f0 <main+0x20c>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d1d7      	bne.n	80017ee <main+0x10a>
	  {
		  LRL_MPU6050_ReadAll(&odom);
 800183e:	4824      	ldr	r0, [pc, #144]	; (80018d0 <main+0x1ec>)
 8001840:	f000 fe14 	bl	800246c <LRL_MPU6050_ReadAll>
		  LRL_HMC5883L_ReadHeading(&odom);
 8001844:	4822      	ldr	r0, [pc, #136]	; (80018d0 <main+0x1ec>)
 8001846:	f000 fa13 	bl	8001c70 <LRL_HMC5883L_ReadHeading>
		  LRL_Encoder_ReadAngularSpeed(&odom);
 800184a:	4821      	ldr	r0, [pc, #132]	; (80018d0 <main+0x1ec>)
 800184c:	f001 f8a0 	bl	8002990 <LRL_Encoder_ReadAngularSpeed>
		  LRL_PID_Update(&pid_motor_left, odom.vel.left, motor_speed_left);
 8001850:	4b1f      	ldr	r3, [pc, #124]	; (80018d0 <main+0x1ec>)
 8001852:	f9b3 30c6 	ldrsh.w	r3, [r3, #198]	; 0xc6
 8001856:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800185a:	4619      	mov	r1, r3
 800185c:	481a      	ldr	r0, [pc, #104]	; (80018c8 <main+0x1e4>)
 800185e:	f001 fbc7 	bl	8002ff0 <LRL_PID_Update>
		  LRL_PID_Update(&pid_motor_right, odom.vel.right,motor_speed_right);
 8001862:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <main+0x1ec>)
 8001864:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	; 0xc4
 8001868:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800186c:	4619      	mov	r1, r3
 800186e:	4817      	ldr	r0, [pc, #92]	; (80018cc <main+0x1e8>)
 8001870:	f001 fbbe 	bl	8002ff0 <LRL_PID_Update>
		  LRL_Motion_Control(diff_robot, pid_motor_left.Control_Signal,pid_motor_right.Control_Signal);
 8001874:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <main+0x1e4>)
 8001876:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 800187a:	4a14      	ldr	r2, [pc, #80]	; (80018cc <main+0x1e8>)
 800187c:	f992 2024 	ldrsb.w	r2, [r2, #36]	; 0x24
 8001880:	4e1c      	ldr	r6, [pc, #112]	; (80018f4 <main+0x210>)
 8001882:	920d      	str	r2, [sp, #52]	; 0x34
 8001884:	930c      	str	r3, [sp, #48]	; 0x30
 8001886:	466d      	mov	r5, sp
 8001888:	f106 0410 	add.w	r4, r6, #16
 800188c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800188e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001890:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001892:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001894:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001898:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800189c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80018a0:	f000 f930 	bl	8001b04 <LRL_Motion_Control>

		  LRL_txPacket(&tx_packet, &odom);
 80018a4:	490a      	ldr	r1, [pc, #40]	; (80018d0 <main+0x1ec>)
 80018a6:	4814      	ldr	r0, [pc, #80]	; (80018f8 <main+0x214>)
 80018a8:	f001 fa62 	bl	8002d70 <LRL_txPacket>
		  pid_tim_flag = 0;
 80018ac:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <main+0x20c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]
	  if(serial_flag == 1)
 80018b2:	e79c      	b.n	80017ee <main+0x10a>
 80018b4:	20000ac4 	.word	0x20000ac4
 80018b8:	200009ec 	.word	0x200009ec
 80018bc:	200009a4 	.word	0x200009a4
 80018c0:	20000a7c 	.word	0x20000a7c
 80018c4:	20000748 	.word	0x20000748
 80018c8:	200000cc 	.word	0x200000cc
 80018cc:	20000100 	.word	0x20000100
 80018d0:	20000000 	.word	0x20000000
 80018d4:	40020c00 	.word	0x40020c00
 80018d8:	20000134 	.word	0x20000134
 80018dc:	20000830 	.word	0x20000830
 80018e0:	20000b98 	.word	0x20000b98
 80018e4:	2000079c 	.word	0x2000079c
 80018e8:	2000082d 	.word	0x2000082d
 80018ec:	20000b54 	.word	0x20000b54
 80018f0:	2000082c 	.word	0x2000082c
 80018f4:	0800eca8 	.word	0x0800eca8
 80018f8:	200001d4 	.word	0x200001d4

080018fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b094      	sub	sp, #80	; 0x50
 8001900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001902:	f107 0320 	add.w	r3, r7, #32
 8001906:	2230      	movs	r2, #48	; 0x30
 8001908:	2100      	movs	r1, #0
 800190a:	4618      	mov	r0, r3
 800190c:	f008 f918 	bl	8009b40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001910:	f107 030c 	add.w	r3, r7, #12
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001920:	2300      	movs	r3, #0
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	4b28      	ldr	r3, [pc, #160]	; (80019c8 <SystemClock_Config+0xcc>)
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	4a27      	ldr	r2, [pc, #156]	; (80019c8 <SystemClock_Config+0xcc>)
 800192a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800192e:	6413      	str	r3, [r2, #64]	; 0x40
 8001930:	4b25      	ldr	r3, [pc, #148]	; (80019c8 <SystemClock_Config+0xcc>)
 8001932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800193c:	2300      	movs	r3, #0
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	4b22      	ldr	r3, [pc, #136]	; (80019cc <SystemClock_Config+0xd0>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a21      	ldr	r2, [pc, #132]	; (80019cc <SystemClock_Config+0xd0>)
 8001946:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800194a:	6013      	str	r3, [r2, #0]
 800194c:	4b1f      	ldr	r3, [pc, #124]	; (80019cc <SystemClock_Config+0xd0>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001954:	607b      	str	r3, [r7, #4]
 8001956:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001958:	2301      	movs	r3, #1
 800195a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800195c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001962:	2302      	movs	r3, #2
 8001964:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001966:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800196a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800196c:	2319      	movs	r3, #25
 800196e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001970:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001974:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001976:	2302      	movs	r3, #2
 8001978:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800197a:	2304      	movs	r3, #4
 800197c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800197e:	f107 0320 	add.w	r3, r7, #32
 8001982:	4618      	mov	r0, r3
 8001984:	f004 fe9c 	bl	80066c0 <HAL_RCC_OscConfig>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800198e:	f000 f859 	bl	8001a44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001992:	230f      	movs	r3, #15
 8001994:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001996:	2302      	movs	r3, #2
 8001998:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800199e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80019aa:	f107 030c 	add.w	r3, r7, #12
 80019ae:	2105      	movs	r1, #5
 80019b0:	4618      	mov	r0, r3
 80019b2:	f005 f8fd 	bl	8006bb0 <HAL_RCC_ClockConfig>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80019bc:	f000 f842 	bl	8001a44 <Error_Handler>
  }
}
 80019c0:	bf00      	nop
 80019c2:	3750      	adds	r7, #80	; 0x50
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40023800 	.word	0x40023800
 80019cc:	40007000 	.word	0x40007000

080019d0 <HAL_UART_RxCpltCallback>:
//	LRL_US_TMR_IC_ISR(htim, us_front);
//}

// ####################   UART Receive Callback   ####################

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]

	USART_TypeDef *inst = huart->Instance;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	60fb      	str	r3, [r7, #12]
	if(inst == USART2){
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	4a09      	ldr	r2, [pc, #36]	; (8001a08 <HAL_UART_RxCpltCallback+0x38>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d10b      	bne.n	80019fe <HAL_UART_RxCpltCallback+0x2e>
		HAL_GPIO_WritePin(BLINK_LED_PORT, BLINK_LED_PIN, GPIO_PIN_SET);
 80019e6:	2201      	movs	r2, #1
 80019e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019ec:	4807      	ldr	r0, [pc, #28]	; (8001a0c <HAL_UART_RxCpltCallback+0x3c>)
 80019ee:	f003 fd0d 	bl	800540c <HAL_GPIO_WritePin>
		rx_packet.rx_byteReady = 1;
 80019f2:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <HAL_UART_RxCpltCallback+0x40>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	71da      	strb	r2, [r3, #7]
		serial_flag = 1;
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_UART_RxCpltCallback+0x44>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	701a      	strb	r2, [r3, #0]
//	{
//		HAL_UART_Receive_IT(&huart1,&input_speed, 1);
//		flag_tx = 1;
//	}

}
 80019fe:	bf00      	nop
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40004400 	.word	0x40004400
 8001a0c:	40020c00 	.word	0x40020c00
 8001a10:	20000134 	.word	0x20000134
 8001a14:	2000082d 	.word	0x2000082d

08001a18 <HAL_TIM_PeriodElapsedCallback>:

// ####################   Timer To Creat 0.01 Delay Callback   ####################

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a06      	ldr	r2, [pc, #24]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d102      	bne.n	8001a2e <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		pid_tim_flag = 1;
 8001a28:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	701a      	strb	r2, [r3, #0]
	}

}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	20000a7c 	.word	0x20000a7c
 8001a40:	2000082c 	.word	0x2000082c

08001a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a48:	b672      	cpsid	i
}
 8001a4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a4c:	e7fe      	b.n	8001a4c <Error_Handler+0x8>
	...

08001a50 <LRL_Motor_Speed>:
//	HAL_TIM_Encoder_Start(motor_left.TIM_ENC_Handle, TIM_CHANNEL_ALL);
//	HAL_TIM_Encoder_Start(motor_right.TIM_ENC_Handle, TIM_CHANNEL_ALL);
//}

void LRL_Motor_Speed(motor_cfgType motor, int8_t duty_cycle)
{
 8001a50:	b084      	sub	sp, #16
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	f107 0c10 	add.w	ip, r7, #16
 8001a5c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	bool dir;
	uint32_t motor_pwm;

	dir = (duty_cycle >> 7) & 0x01;	// if MSB is 1 -> neg
 8001a60:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8001a64:	11db      	asrs	r3, r3, #7
 8001a66:	b25b      	sxtb	r3, r3
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	bf14      	ite	ne
 8001a72:	2301      	movne	r3, #1
 8001a74:	2300      	moveq	r3, #0
 8001a76:	71fb      	strb	r3, [r7, #7]
	duty_cycle = abs(duty_cycle);
 8001a78:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	bfb8      	it	lt
 8001a80:	425b      	neglt	r3, r3
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	motor_pwm = (uint32_t) ((motor.MAX_ARR * duty_cycle) / 100);
 8001a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a8a:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 8001a8e:	fb02 f303 	mul.w	r3, r2, r3
 8001a92:	4a1b      	ldr	r2, [pc, #108]	; (8001b00 <LRL_Motor_Speed+0xb0>)
 8001a94:	fba2 2303 	umull	r2, r3, r2, r3
 8001a98:	095b      	lsrs	r3, r3, #5
 8001a9a:	603b      	str	r3, [r7, #0]

    HAL_GPIO_WritePin(motor.MOTOR_1_GPIO, motor.MOTOR_1_PIN, !dir);
 8001a9c:	6938      	ldr	r0, [r7, #16]
 8001a9e:	8ab9      	ldrh	r1, [r7, #20]
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	f083 0301 	eor.w	r3, r3, #1
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	f003 fcaf 	bl	800540c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(motor.MOTOR_2_GPIO, motor.MOTOR_2_PIN, dir);
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	8bb9      	ldrh	r1, [r7, #28]
 8001ab2:	79fa      	ldrb	r2, [r7, #7]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f003 fca9 	bl	800540c <HAL_GPIO_WritePin>

    if (motor.TIM_PWM_Channel == TIM_CHANNEL_1)
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d104      	bne.n	8001aca <LRL_Motor_Speed+0x7a>
    	motor.TIM_PWM_Handle->Instance->CCR1 = motor_pwm;
 8001ac0:	6a3b      	ldr	r3, [r7, #32]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	635a      	str	r2, [r3, #52]	; 0x34
    	motor.TIM_PWM_Handle->Instance->CCR2 = motor_pwm;
    else if (motor.TIM_PWM_Channel == TIM_CHANNEL_3)
    	motor.TIM_PWM_Handle->Instance->CCR3 = motor_pwm;
    else
    	motor.TIM_PWM_Handle->Instance->CCR4 = motor_pwm;
}
 8001ac8:	e013      	b.n	8001af2 <LRL_Motor_Speed+0xa2>
    else if (motor.TIM_PWM_Channel == TIM_CHANNEL_2)
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	2b04      	cmp	r3, #4
 8001ace:	d104      	bne.n	8001ada <LRL_Motor_Speed+0x8a>
    	motor.TIM_PWM_Handle->Instance->CCR2 = motor_pwm;
 8001ad0:	6a3b      	ldr	r3, [r7, #32]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001ad8:	e00b      	b.n	8001af2 <LRL_Motor_Speed+0xa2>
    else if (motor.TIM_PWM_Channel == TIM_CHANNEL_3)
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	2b08      	cmp	r3, #8
 8001ade:	d104      	bne.n	8001aea <LRL_Motor_Speed+0x9a>
    	motor.TIM_PWM_Handle->Instance->CCR3 = motor_pwm;
 8001ae0:	6a3b      	ldr	r3, [r7, #32]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001ae8:	e003      	b.n	8001af2 <LRL_Motor_Speed+0xa2>
    	motor.TIM_PWM_Handle->Instance->CCR4 = motor_pwm;
 8001aea:	6a3b      	ldr	r3, [r7, #32]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001afc:	b004      	add	sp, #16
 8001afe:	4770      	bx	lr
 8001b00:	51eb851f 	.word	0x51eb851f

08001b04 <LRL_Motion_Control>:

void LRL_Motion_Control(diffDrive_cfgType diffRobot, int8_t duty_cycle_left, int8_t duty_cycle_right)
{
 8001b04:	b084      	sub	sp, #16
 8001b06:	b590      	push	{r4, r7, lr}
 8001b08:	b085      	sub	sp, #20
 8001b0a:	af04      	add	r7, sp, #16
 8001b0c:	f107 0410 	add.w	r4, r7, #16
 8001b10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LRL_Motor_Speed(diffRobot.MOTOR_LEFT, duty_cycle_left);
 8001b14:	f997 3050 	ldrsb.w	r3, [r7, #80]	; 0x50
 8001b18:	9303      	str	r3, [sp, #12]
 8001b1a:	466c      	mov	r4, sp
 8001b1c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b20:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001b24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001b28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b2e:	f7ff ff8f 	bl	8001a50 <LRL_Motor_Speed>
	LRL_Motor_Speed(diffRobot.MOTOR_RIGHT, duty_cycle_right);
 8001b32:	f997 3054 	ldrsb.w	r3, [r7, #84]	; 0x54
 8001b36:	9303      	str	r3, [sp, #12]
 8001b38:	466c      	mov	r4, sp
 8001b3a:	f107 0320 	add.w	r3, r7, #32
 8001b3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001b42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001b46:	f107 0310 	add.w	r3, r7, #16
 8001b4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b4c:	f7ff ff80 	bl	8001a50 <LRL_Motor_Speed>
}
 8001b50:	bf00      	nop
 8001b52:	3704      	adds	r7, #4
 8001b54:	46bd      	mov	sp, r7
 8001b56:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001b5a:	b004      	add	sp, #16
 8001b5c:	4770      	bx	lr
	...

08001b60 <LRL_HMC5883L_Init>:
// ############################################################
// ####################  HMC MAGNETOMETER  ####################
// ############################################################

void LRL_HMC5883L_Init(odom_cfgType * odom)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b088      	sub	sp, #32
 8001b64:	af04      	add	r7, sp, #16
 8001b66:	6078      	str	r0, [r7, #4]
	_LRL_MPU6050_EnableBypass(odom, 1);
 8001b68:	2101      	movs	r1, #1
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 fc90 	bl	8002490 <_LRL_MPU6050_EnableBypass>
    // write CONFIG_A register
	HAL_I2C_Master_Transmit(odom->imu.hi2c, HMC5883L_ADDRESS, (uint8_t *)HMC5883L_ADDRESS_WRITE, 1, DELAY_TIMEOUT);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6818      	ldr	r0, [r3, #0]
 8001b74:	230a      	movs	r3, #10
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	2301      	movs	r3, #1
 8001b7a:	223c      	movs	r2, #60	; 0x3c
 8001b7c:	213c      	movs	r1, #60	; 0x3c
 8001b7e:	f003 fda3 	bl	80056c8 <HAL_I2C_Master_Transmit>
	_i2c_reg_data = 0x10;
 8001b82:	4b37      	ldr	r3, [pc, #220]	; (8001c60 <LRL_HMC5883L_Init+0x100>)
 8001b84:	2210      	movs	r2, #16
 8001b86:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(odom->imu.hi2c, HMC5883L_ADDRESS, HMC5883L_RA_CONFIG_A, 1, &_i2c_reg_data, 1, DELAY_TIMEOUT);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6818      	ldr	r0, [r3, #0]
 8001b8c:	230a      	movs	r3, #10
 8001b8e:	9302      	str	r3, [sp, #8]
 8001b90:	2301      	movs	r3, #1
 8001b92:	9301      	str	r3, [sp, #4]
 8001b94:	4b32      	ldr	r3, [pc, #200]	; (8001c60 <LRL_HMC5883L_Init+0x100>)
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	2301      	movs	r3, #1
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	213c      	movs	r1, #60	; 0x3c
 8001b9e:	f003 fe91 	bl	80058c4 <HAL_I2C_Mem_Write>

	// write CONFIG_B register
	HAL_I2C_Master_Transmit(odom->imu.hi2c, HMC5883L_ADDRESS, (uint8_t *)HMC5883L_ADDRESS_WRITE, 1, DELAY_TIMEOUT);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6818      	ldr	r0, [r3, #0]
 8001ba6:	230a      	movs	r3, #10
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	2301      	movs	r3, #1
 8001bac:	223c      	movs	r2, #60	; 0x3c
 8001bae:	213c      	movs	r1, #60	; 0x3c
 8001bb0:	f003 fd8a 	bl	80056c8 <HAL_I2C_Master_Transmit>
	_i2c_reg_data = 0xE0;
 8001bb4:	4b2a      	ldr	r3, [pc, #168]	; (8001c60 <LRL_HMC5883L_Init+0x100>)
 8001bb6:	22e0      	movs	r2, #224	; 0xe0
 8001bb8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(odom->imu.hi2c, HMC5883L_ADDRESS, HMC5883L_RA_CONFIG_B, 1, &_i2c_reg_data, 1, DELAY_TIMEOUT);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6818      	ldr	r0, [r3, #0]
 8001bbe:	230a      	movs	r3, #10
 8001bc0:	9302      	str	r3, [sp, #8]
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	9301      	str	r3, [sp, #4]
 8001bc6:	4b26      	ldr	r3, [pc, #152]	; (8001c60 <LRL_HMC5883L_Init+0x100>)
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	2301      	movs	r3, #1
 8001bcc:	2201      	movs	r2, #1
 8001bce:	213c      	movs	r1, #60	; 0x3c
 8001bd0:	f003 fe78 	bl	80058c4 <HAL_I2C_Mem_Write>

	// write MODE register
	HAL_I2C_Master_Transmit(odom->imu.hi2c, HMC5883L_ADDRESS, (uint8_t *)HMC5883L_ADDRESS_WRITE, 1, DELAY_TIMEOUT);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6818      	ldr	r0, [r3, #0]
 8001bd8:	230a      	movs	r3, #10
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	2301      	movs	r3, #1
 8001bde:	223c      	movs	r2, #60	; 0x3c
 8001be0:	213c      	movs	r1, #60	; 0x3c
 8001be2:	f003 fd71 	bl	80056c8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Mem_Write(odom->imu.hi2c, HMC5883L_ADDRESS, HMC5883L_RA_MODE, 1, (uint8_t *)HMC5883L_MODE_SINGLE, 1, DELAY_TIMEOUT);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6818      	ldr	r0, [r3, #0]
 8001bea:	230a      	movs	r3, #10
 8001bec:	9302      	str	r3, [sp, #8]
 8001bee:	2301      	movs	r3, #1
 8001bf0:	9301      	str	r3, [sp, #4]
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	213c      	movs	r1, #60	; 0x3c
 8001bfc:	f003 fe62 	bl	80058c4 <HAL_I2C_Mem_Write>

	HAL_Delay(10);
 8001c00:	200a      	movs	r0, #10
 8001c02:	f002 fb15 	bl	8004230 <HAL_Delay>

	odom->mag.offset_heading = 0;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2

	for(int i = 0; i<100; i++)
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	e012      	b.n	8001c3a <LRL_HMC5883L_Init+0xda>
	{
		LRL_HMC5883L_ReadHeading(odom);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f82b 	bl	8001c70 <LRL_HMC5883L_ReadHeading>
		_tmp_cal_mag += odom->mag.heading;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	4b10      	ldr	r3, [pc, #64]	; (8001c64 <LRL_HMC5883L_Init+0x104>)
 8001c24:	881b      	ldrh	r3, [r3, #0]
 8001c26:	4413      	add	r3, r2
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <LRL_HMC5883L_Init+0x104>)
 8001c2c:	801a      	strh	r2, [r3, #0]
		HAL_Delay(10);
 8001c2e:	200a      	movs	r0, #10
 8001c30:	f002 fafe 	bl	8004230 <HAL_Delay>
	for(int i = 0; i<100; i++)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	3301      	adds	r3, #1
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2b63      	cmp	r3, #99	; 0x63
 8001c3e:	dde9      	ble.n	8001c14 <LRL_HMC5883L_Init+0xb4>
	}

	odom->mag.offset_heading = (_tmp_cal_mag / 100);
 8001c40:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <LRL_HMC5883L_Init+0x104>)
 8001c42:	881b      	ldrh	r3, [r3, #0]
 8001c44:	4a08      	ldr	r2, [pc, #32]	; (8001c68 <LRL_HMC5883L_Init+0x108>)
 8001c46:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4a:	095b      	lsrs	r3, r3, #5
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	b21a      	sxth	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
}
 8001c56:	bf00      	nop
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	2000083a 	.word	0x2000083a
 8001c64:	2000089c 	.word	0x2000089c
 8001c68:	51eb851f 	.word	0x51eb851f
 8001c6c:	00000000 	.word	0x00000000

08001c70 <LRL_HMC5883L_ReadHeading>:

	return ((_dir)* ( declination_degs + (1/60 * declination_mins)) * (M_PI / 180));
}

void LRL_HMC5883L_ReadHeading(odom_cfgType * odom)
{
 8001c70:	b5b0      	push	{r4, r5, r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af04      	add	r7, sp, #16
 8001c76:	6078      	str	r0, [r7, #4]
	_LRL_MPU6050_EnableBypass(odom, 1);
 8001c78:	2101      	movs	r1, #1
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 fc08 	bl	8002490 <_LRL_MPU6050_EnableBypass>
	HAL_I2C_Master_Transmit(odom->imu.hi2c, HMC5883L_ADDRESS, (uint8_t *)HMC5883L_ADDRESS_READ, 1, DELAY_TIMEOUT);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6818      	ldr	r0, [r3, #0]
 8001c84:	230a      	movs	r3, #10
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	2301      	movs	r3, #1
 8001c8a:	223d      	movs	r2, #61	; 0x3d
 8001c8c:	213c      	movs	r1, #60	; 0x3c
 8001c8e:	f003 fd1b 	bl	80056c8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Mem_Read(odom->imu.hi2c, HMC5883L_ADDRESS, HMC5883L_RA_DATAX_H, 1, (uint8_t *)&_mag_buffer, 6, DELAY_TIMEOUT);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6818      	ldr	r0, [r3, #0]
 8001c96:	230a      	movs	r3, #10
 8001c98:	9302      	str	r3, [sp, #8]
 8001c9a:	2306      	movs	r3, #6
 8001c9c:	9301      	str	r3, [sp, #4]
 8001c9e:	4b62      	ldr	r3, [pc, #392]	; (8001e28 <LRL_HMC5883L_ReadHeading+0x1b8>)
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	2203      	movs	r2, #3
 8001ca6:	213c      	movs	r1, #60	; 0x3c
 8001ca8:	f003 ff06 	bl	8005ab8 <HAL_I2C_Mem_Read>

	odom->mag.x = (int16_t)((_mag_buffer[0] << 8) | _mag_buffer[1]);
 8001cac:	4b5e      	ldr	r3, [pc, #376]	; (8001e28 <LRL_HMC5883L_ReadHeading+0x1b8>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	021b      	lsls	r3, r3, #8
 8001cb2:	b21a      	sxth	r2, r3
 8001cb4:	4b5c      	ldr	r3, [pc, #368]	; (8001e28 <LRL_HMC5883L_ReadHeading+0x1b8>)
 8001cb6:	785b      	ldrb	r3, [r3, #1]
 8001cb8:	b21b      	sxth	r3, r3
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	b21b      	sxth	r3, r3
 8001cbe:	ee07 3a90 	vmov	s15, r3
 8001cc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
	odom->mag.y = (int16_t)((_mag_buffer[4] << 8) | _mag_buffer[5]);
 8001ccc:	4b56      	ldr	r3, [pc, #344]	; (8001e28 <LRL_HMC5883L_ReadHeading+0x1b8>)
 8001cce:	791b      	ldrb	r3, [r3, #4]
 8001cd0:	021b      	lsls	r3, r3, #8
 8001cd2:	b21a      	sxth	r2, r3
 8001cd4:	4b54      	ldr	r3, [pc, #336]	; (8001e28 <LRL_HMC5883L_ReadHeading+0x1b8>)
 8001cd6:	795b      	ldrb	r3, [r3, #5]
 8001cd8:	b21b      	sxth	r3, r3
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	b21b      	sxth	r3, r3
 8001cde:	ee07 3a90 	vmov	s15, r3
 8001ce2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8
	odom->mag.z = (int16_t)((_mag_buffer[2] << 8) | _mag_buffer[3]);
 8001cec:	4b4e      	ldr	r3, [pc, #312]	; (8001e28 <LRL_HMC5883L_ReadHeading+0x1b8>)
 8001cee:	789b      	ldrb	r3, [r3, #2]
 8001cf0:	021b      	lsls	r3, r3, #8
 8001cf2:	b21a      	sxth	r2, r3
 8001cf4:	4b4c      	ldr	r3, [pc, #304]	; (8001e28 <LRL_HMC5883L_ReadHeading+0x1b8>)
 8001cf6:	78db      	ldrb	r3, [r3, #3]
 8001cf8:	b21b      	sxth	r3, r3
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	b21b      	sxth	r3, r3
 8001cfe:	ee07 3a90 	vmov	s15, r3
 8001d02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc

	// Evaluate Heading and Correcting Declination (IRAN Coordinates)
	_mag_heading_temp = atan2(odom->mag.x, odom->mag.y) + MAGNETIC_DECLINATION;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe fc18 	bl	8000548 <__aeabi_f2d>
 8001d18:	4604      	mov	r4, r0
 8001d1a:	460d      	mov	r5, r1
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7fe fc10 	bl	8000548 <__aeabi_f2d>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	ec43 2b11 	vmov	d1, r2, r3
 8001d30:	ec45 4b10 	vmov	d0, r4, r5
 8001d34:	f00c fb7c 	bl	800e430 <atan2>
 8001d38:	ec51 0b10 	vmov	r0, r1, d0
 8001d3c:	a336      	add	r3, pc, #216	; (adr r3, 8001e18 <LRL_HMC5883L_ReadHeading+0x1a8>)
 8001d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d42:	f7fe faa3 	bl	800028c <__adddf3>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f7fe ff4b 	bl	8000be8 <__aeabi_d2f>
 8001d52:	4603      	mov	r3, r0
 8001d54:	4a35      	ldr	r2, [pc, #212]	; (8001e2c <LRL_HMC5883L_ReadHeading+0x1bc>)
 8001d56:	6013      	str	r3, [r2, #0]

    // Convert radians to degrees for readability.
    odom->mag.heading = _mag_heading_temp * 180/M_PI;
 8001d58:	4b34      	ldr	r3, [pc, #208]	; (8001e2c <LRL_HMC5883L_ReadHeading+0x1bc>)
 8001d5a:	edd3 7a00 	vldr	s15, [r3]
 8001d5e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001e30 <LRL_HMC5883L_ReadHeading+0x1c0>
 8001d62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d66:	ee17 0a90 	vmov	r0, s15
 8001d6a:	f7fe fbed 	bl	8000548 <__aeabi_f2d>
 8001d6e:	a32c      	add	r3, pc, #176	; (adr r3, 8001e20 <LRL_HMC5883L_ReadHeading+0x1b0>)
 8001d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d74:	f7fe fd6a 	bl	800084c <__aeabi_ddiv>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	4619      	mov	r1, r3
 8001d80:	f7fe feea 	bl	8000b58 <__aeabi_d2iz>
 8001d84:	4603      	mov	r3, r0
 8001d86:	b21a      	sxth	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0

	// Correct for when signs are reversed.
    if(odom->mag.heading < 0)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	da0a      	bge.n	8001dae <LRL_HMC5883L_ReadHeading+0x13e>
    	odom->mag.heading += 360;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	b21a      	sxth	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0

    // Check for wrap due to addition of declination.
    if(odom->mag.heading > 360)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 8001db4:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001db8:	dd0a      	ble.n	8001dd0 <LRL_HMC5883L_ReadHeading+0x160>
    	odom->mag.heading -= 360;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	b21a      	sxth	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0

    // Evaluate the effect of calibration offset
    odom->mag.heading -= odom->mag.offset_heading;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	; 0xc2
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	b21a      	sxth	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    if(odom->mag.heading < 0)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	da0a      	bge.n	8001e0c <LRL_HMC5883L_ReadHeading+0x19c>
    	odom->mag.heading += 360;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	b21a      	sxth	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
}
 8001e0c:	bf00      	nop
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bdb0      	pop	{r4, r5, r7, pc}
 8001e14:	f3af 8000 	nop.w
 8001e18:	bac710cb 	.word	0xbac710cb
 8001e1c:	3fb68db8 	.word	0x3fb68db8
 8001e20:	54442d18 	.word	0x54442d18
 8001e24:	400921fb 	.word	0x400921fb
 8001e28:	2000083c 	.word	0x2000083c
 8001e2c:	20000844 	.word	0x20000844
 8001e30:	43340000 	.word	0x43340000

08001e34 <LRL_MPU6050_Init>:
// #######################################################
// ####################  IMU MPU6050  ####################
// #######################################################

void LRL_MPU6050_Init(odom_cfgType * odom)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b088      	sub	sp, #32
 8001e38:	af04      	add	r7, sp, #16
 8001e3a:	6078      	str	r0, [r7, #4]
	_LRL_MPU6050_EnableBypass(odom, 0);
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 fb26 	bl	8002490 <_LRL_MPU6050_EnableBypass>
    HAL_I2C_Mem_Read(odom->imu.hi2c, MPU_ADDR, WHO_AM_I, 1, &_imu_addr_check, 1, DELAY_TIMEOUT);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6818      	ldr	r0, [r3, #0]
 8001e48:	230a      	movs	r3, #10
 8001e4a:	9302      	str	r3, [sp, #8]
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	9301      	str	r3, [sp, #4]
 8001e50:	4b94      	ldr	r3, [pc, #592]	; (80020a4 <LRL_MPU6050_Init+0x270>)
 8001e52:	9300      	str	r3, [sp, #0]
 8001e54:	2301      	movs	r3, #1
 8001e56:	2275      	movs	r2, #117	; 0x75
 8001e58:	21d0      	movs	r1, #208	; 0xd0
 8001e5a:	f003 fe2d 	bl	8005ab8 <HAL_I2C_Mem_Read>

    if (_imu_addr_check == 0x68) // 0x68 will be returned by the sensor if everything goes well
 8001e5e:	4b91      	ldr	r3, [pc, #580]	; (80020a4 <LRL_MPU6050_Init+0x270>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b68      	cmp	r3, #104	; 0x68
 8001e64:	d13f      	bne.n	8001ee6 <LRL_MPU6050_Init+0xb2>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        _i2c_reg_data = 0x00;
 8001e66:	4b90      	ldr	r3, [pc, #576]	; (80020a8 <LRL_MPU6050_Init+0x274>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(odom->imu.hi2c, MPU_ADDR, PWR_MGMT_1, 1, &_i2c_reg_data, 1, DELAY_TIMEOUT);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6818      	ldr	r0, [r3, #0]
 8001e70:	230a      	movs	r3, #10
 8001e72:	9302      	str	r3, [sp, #8]
 8001e74:	2301      	movs	r3, #1
 8001e76:	9301      	str	r3, [sp, #4]
 8001e78:	4b8b      	ldr	r3, [pc, #556]	; (80020a8 <LRL_MPU6050_Init+0x274>)
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	226b      	movs	r2, #107	; 0x6b
 8001e80:	21d0      	movs	r1, #208	; 0xd0
 8001e82:	f003 fd1f 	bl	80058c4 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        _i2c_reg_data = 0x07;
 8001e86:	4b88      	ldr	r3, [pc, #544]	; (80020a8 <LRL_MPU6050_Init+0x274>)
 8001e88:	2207      	movs	r2, #7
 8001e8a:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(odom->imu.hi2c, MPU_ADDR, SMPLRT_DIV, 1, &_i2c_reg_data, 1, DELAY_TIMEOUT);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6818      	ldr	r0, [r3, #0]
 8001e90:	230a      	movs	r3, #10
 8001e92:	9302      	str	r3, [sp, #8]
 8001e94:	2301      	movs	r3, #1
 8001e96:	9301      	str	r3, [sp, #4]
 8001e98:	4b83      	ldr	r3, [pc, #524]	; (80020a8 <LRL_MPU6050_Init+0x274>)
 8001e9a:	9300      	str	r3, [sp, #0]
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	2219      	movs	r2, #25
 8001ea0:	21d0      	movs	r1, #208	; 0xd0
 8001ea2:	f003 fd0f 	bl	80058c4 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        _i2c_reg_data = 0x00;
 8001ea6:	4b80      	ldr	r3, [pc, #512]	; (80020a8 <LRL_MPU6050_Init+0x274>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(odom->imu.hi2c, MPU_ADDR, ACCEL_CONFIG, 1, &_i2c_reg_data, 1, DELAY_TIMEOUT);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6818      	ldr	r0, [r3, #0]
 8001eb0:	230a      	movs	r3, #10
 8001eb2:	9302      	str	r3, [sp, #8]
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	9301      	str	r3, [sp, #4]
 8001eb8:	4b7b      	ldr	r3, [pc, #492]	; (80020a8 <LRL_MPU6050_Init+0x274>)
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	221c      	movs	r2, #28
 8001ec0:	21d0      	movs	r1, #208	; 0xd0
 8001ec2:	f003 fcff 	bl	80058c4 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 ->  250 �/s
        _i2c_reg_data = 0x00;
 8001ec6:	4b78      	ldr	r3, [pc, #480]	; (80020a8 <LRL_MPU6050_Init+0x274>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(odom->imu.hi2c, MPU_ADDR, GYRO_CONFIG, 1, &_i2c_reg_data, 1, DELAY_TIMEOUT);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6818      	ldr	r0, [r3, #0]
 8001ed0:	230a      	movs	r3, #10
 8001ed2:	9302      	str	r3, [sp, #8]
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	4b73      	ldr	r3, [pc, #460]	; (80020a8 <LRL_MPU6050_Init+0x274>)
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	2301      	movs	r3, #1
 8001ede:	221b      	movs	r2, #27
 8001ee0:	21d0      	movs	r1, #208	; 0xd0
 8001ee2:	f003 fcef 	bl	80058c4 <HAL_I2C_Mem_Write>
    }

    odom->imu.offset_gyro_x = 0;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	809a      	strh	r2, [r3, #4]
    odom->imu.offset_gyro_y = 0;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	80da      	strh	r2, [r3, #6]
    odom->imu.offset_gyro_z = 0;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	811a      	strh	r2, [r3, #8]

    odom->imu.offset_accel_x = 0;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	815a      	strh	r2, [r3, #10]
    odom->imu.offset_accel_y = 0;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	819a      	strh	r2, [r3, #12]
    odom->imu.offset_accel_z = 0;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	81da      	strh	r2, [r3, #14]

    for(int i = 0; i<500; i++)
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	e062      	b.n	8001fd6 <LRL_MPU6050_Init+0x1a2>
    {
    	LRL_MPU6050_ReadAll(odom);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 faab 	bl	800246c <LRL_MPU6050_ReadAll>
    	_tmp_cal_gy_x += odom->gyro.x;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f9b3 30a6 	ldrsh.w	r3, [r3, #166]	; 0xa6
 8001f1c:	ee07 3a90 	vmov	s15, r3
 8001f20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f24:	4b61      	ldr	r3, [pc, #388]	; (80020ac <LRL_MPU6050_Init+0x278>)
 8001f26:	edd3 7a00 	vldr	s15, [r3]
 8001f2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f2e:	4b5f      	ldr	r3, [pc, #380]	; (80020ac <LRL_MPU6050_Init+0x278>)
 8001f30:	edc3 7a00 	vstr	s15, [r3]
    	_tmp_cal_gy_y += odom->gyro.y;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f9b3 30a8 	ldrsh.w	r3, [r3, #168]	; 0xa8
 8001f3a:	ee07 3a90 	vmov	s15, r3
 8001f3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f42:	4b5b      	ldr	r3, [pc, #364]	; (80020b0 <LRL_MPU6050_Init+0x27c>)
 8001f44:	edd3 7a00 	vldr	s15, [r3]
 8001f48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f4c:	4b58      	ldr	r3, [pc, #352]	; (80020b0 <LRL_MPU6050_Init+0x27c>)
 8001f4e:	edc3 7a00 	vstr	s15, [r3]
    	_tmp_cal_gy_z += odom->gyro.z;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f9b3 30aa 	ldrsh.w	r3, [r3, #170]	; 0xaa
 8001f58:	ee07 3a90 	vmov	s15, r3
 8001f5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f60:	4b54      	ldr	r3, [pc, #336]	; (80020b4 <LRL_MPU6050_Init+0x280>)
 8001f62:	edd3 7a00 	vldr	s15, [r3]
 8001f66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f6a:	4b52      	ldr	r3, [pc, #328]	; (80020b4 <LRL_MPU6050_Init+0x280>)
 8001f6c:	edc3 7a00 	vstr	s15, [r3]

    	_tmp_cal_ac_x += odom->accel.x;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 8001f76:	ee07 3a90 	vmov	s15, r3
 8001f7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f7e:	4b4e      	ldr	r3, [pc, #312]	; (80020b8 <LRL_MPU6050_Init+0x284>)
 8001f80:	edd3 7a00 	vldr	s15, [r3]
 8001f84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f88:	4b4b      	ldr	r3, [pc, #300]	; (80020b8 <LRL_MPU6050_Init+0x284>)
 8001f8a:	edc3 7a00 	vstr	s15, [r3]
    	_tmp_cal_ac_y += odom->accel.y;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
 8001f94:	ee07 3a90 	vmov	s15, r3
 8001f98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f9c:	4b47      	ldr	r3, [pc, #284]	; (80020bc <LRL_MPU6050_Init+0x288>)
 8001f9e:	edd3 7a00 	vldr	s15, [r3]
 8001fa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fa6:	4b45      	ldr	r3, [pc, #276]	; (80020bc <LRL_MPU6050_Init+0x288>)
 8001fa8:	edc3 7a00 	vstr	s15, [r3]
    	_tmp_cal_ac_z += odom->accel.z;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	; 0x9e
 8001fb2:	ee07 3a90 	vmov	s15, r3
 8001fb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fba:	4b41      	ldr	r3, [pc, #260]	; (80020c0 <LRL_MPU6050_Init+0x28c>)
 8001fbc:	edd3 7a00 	vldr	s15, [r3]
 8001fc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fc4:	4b3e      	ldr	r3, [pc, #248]	; (80020c0 <LRL_MPU6050_Init+0x28c>)
 8001fc6:	edc3 7a00 	vstr	s15, [r3]

    	HAL_Delay(5);
 8001fca:	2005      	movs	r0, #5
 8001fcc:	f002 f930 	bl	8004230 <HAL_Delay>
    for(int i = 0; i<500; i++)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001fdc:	db98      	blt.n	8001f10 <LRL_MPU6050_Init+0xdc>
    }

    odom->imu.offset_accel_x = (_tmp_cal_ac_x/500);
 8001fde:	4b36      	ldr	r3, [pc, #216]	; (80020b8 <LRL_MPU6050_Init+0x284>)
 8001fe0:	ed93 7a00 	vldr	s14, [r3]
 8001fe4:	eddf 6a37 	vldr	s13, [pc, #220]	; 80020c4 <LRL_MPU6050_Init+0x290>
 8001fe8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ff0:	ee17 3a90 	vmov	r3, s15
 8001ff4:	b21a      	sxth	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	815a      	strh	r2, [r3, #10]
    odom->imu.offset_accel_y = (_tmp_cal_ac_y/500);
 8001ffa:	4b30      	ldr	r3, [pc, #192]	; (80020bc <LRL_MPU6050_Init+0x288>)
 8001ffc:	ed93 7a00 	vldr	s14, [r3]
 8002000:	eddf 6a30 	vldr	s13, [pc, #192]	; 80020c4 <LRL_MPU6050_Init+0x290>
 8002004:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002008:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800200c:	ee17 3a90 	vmov	r3, s15
 8002010:	b21a      	sxth	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	819a      	strh	r2, [r3, #12]
    odom->imu.offset_accel_z = (_tmp_cal_ac_z/500);
 8002016:	4b2a      	ldr	r3, [pc, #168]	; (80020c0 <LRL_MPU6050_Init+0x28c>)
 8002018:	ed93 7a00 	vldr	s14, [r3]
 800201c:	eddf 6a29 	vldr	s13, [pc, #164]	; 80020c4 <LRL_MPU6050_Init+0x290>
 8002020:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002024:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002028:	ee17 3a90 	vmov	r3, s15
 800202c:	b21a      	sxth	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	81da      	strh	r2, [r3, #14]

    odom->imu.offset_gyro_x = (_tmp_cal_gy_x/500);
 8002032:	4b1e      	ldr	r3, [pc, #120]	; (80020ac <LRL_MPU6050_Init+0x278>)
 8002034:	ed93 7a00 	vldr	s14, [r3]
 8002038:	eddf 6a22 	vldr	s13, [pc, #136]	; 80020c4 <LRL_MPU6050_Init+0x290>
 800203c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002040:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002044:	ee17 3a90 	vmov	r3, s15
 8002048:	b21a      	sxth	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	809a      	strh	r2, [r3, #4]
    odom->imu.offset_gyro_y = (_tmp_cal_gy_y/500);
 800204e:	4b18      	ldr	r3, [pc, #96]	; (80020b0 <LRL_MPU6050_Init+0x27c>)
 8002050:	ed93 7a00 	vldr	s14, [r3]
 8002054:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80020c4 <LRL_MPU6050_Init+0x290>
 8002058:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800205c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002060:	ee17 3a90 	vmov	r3, s15
 8002064:	b21a      	sxth	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	80da      	strh	r2, [r3, #6]
    odom->imu.offset_gyro_z = (_tmp_cal_gy_z/500);
 800206a:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <LRL_MPU6050_Init+0x280>)
 800206c:	ed93 7a00 	vldr	s14, [r3]
 8002070:	eddf 6a14 	vldr	s13, [pc, #80]	; 80020c4 <LRL_MPU6050_Init+0x290>
 8002074:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002078:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800207c:	ee17 3a90 	vmov	r3, s15
 8002080:	b21a      	sxth	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	811a      	strh	r2, [r3, #8]

///* run this if you want to calibrate complementary filter
	odom->imu.offset_calibration_x = 0;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f04f 0200 	mov.w	r2, #0
 800208c:	611a      	str	r2, [r3, #16]
    odom->imu.offset_calibration_y = 0;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f04f 0200 	mov.w	r2, #0
 8002094:	615a      	str	r2, [r3, #20]
    odom->imu.offset_calibration_z = 0;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f04f 0200 	mov.w	r2, #0
 800209c:	619a      	str	r2, [r3, #24]

    for(int i = 0; i<500 ; i++)
 800209e:	2300      	movs	r3, #0
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	e04e      	b.n	8002142 <LRL_MPU6050_Init+0x30e>
 80020a4:	20000848 	.word	0x20000848
 80020a8:	2000083a 	.word	0x2000083a
 80020ac:	20000884 	.word	0x20000884
 80020b0:	20000888 	.word	0x20000888
 80020b4:	2000088c 	.word	0x2000088c
 80020b8:	20000890 	.word	0x20000890
 80020bc:	20000894 	.word	0x20000894
 80020c0:	20000898 	.word	0x20000898
 80020c4:	43fa0000 	.word	0x43fa0000
 80020c8:	3c23d70a 	.word	0x3c23d70a
    {
    	LRL_MPU6050_ReadAll(odom);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 f9cd 	bl	800246c <LRL_MPU6050_ReadAll>
    	LRL_MPU6050_ComplementaryFilter(odom,0.01);
 80020d2:	ed1f 0a03 	vldr	s0, [pc, #-12]	; 80020c8 <LRL_MPU6050_Init+0x294>
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 fa1a 	bl	8002510 <LRL_MPU6050_ComplementaryFilter>

    	_tmp_cal_cf_x += odom->angle.x;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 80020e2:	ee07 3a90 	vmov	s15, r3
 80020e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020ea:	4b35      	ldr	r3, [pc, #212]	; (80021c0 <LRL_MPU6050_Init+0x38c>)
 80020ec:	edd3 7a00 	vldr	s15, [r3]
 80020f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020f4:	4b32      	ldr	r3, [pc, #200]	; (80021c0 <LRL_MPU6050_Init+0x38c>)
 80020f6:	edc3 7a00 	vstr	s15, [r3]
    	_tmp_cal_cf_y += odom->angle.y;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 8002100:	ee07 3a90 	vmov	s15, r3
 8002104:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002108:	4b2e      	ldr	r3, [pc, #184]	; (80021c4 <LRL_MPU6050_Init+0x390>)
 800210a:	edd3 7a00 	vldr	s15, [r3]
 800210e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002112:	4b2c      	ldr	r3, [pc, #176]	; (80021c4 <LRL_MPU6050_Init+0x390>)
 8002114:	edc3 7a00 	vstr	s15, [r3]
    	_tmp_cal_cf_z += odom->angle.z;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
 800211e:	ee07 3a90 	vmov	s15, r3
 8002122:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002126:	4b28      	ldr	r3, [pc, #160]	; (80021c8 <LRL_MPU6050_Init+0x394>)
 8002128:	edd3 7a00 	vldr	s15, [r3]
 800212c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002130:	4b25      	ldr	r3, [pc, #148]	; (80021c8 <LRL_MPU6050_Init+0x394>)
 8002132:	edc3 7a00 	vstr	s15, [r3]

    	HAL_Delay(10);
 8002136:	200a      	movs	r0, #10
 8002138:	f002 f87a 	bl	8004230 <HAL_Delay>
    for(int i = 0; i<500 ; i++)
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	3301      	adds	r3, #1
 8002140:	60bb      	str	r3, [r7, #8]
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002148:	dbc0      	blt.n	80020cc <LRL_MPU6050_Init+0x298>
    }

	odom->imu.offset_calibration_x = (_tmp_cal_cf_x/500);
 800214a:	4b1d      	ldr	r3, [pc, #116]	; (80021c0 <LRL_MPU6050_Init+0x38c>)
 800214c:	ed93 7a00 	vldr	s14, [r3]
 8002150:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80021cc <LRL_MPU6050_Init+0x398>
 8002154:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	edc3 7a04 	vstr	s15, [r3, #16]
    odom->imu.offset_calibration_y = (_tmp_cal_cf_y/500);
 800215e:	4b19      	ldr	r3, [pc, #100]	; (80021c4 <LRL_MPU6050_Init+0x390>)
 8002160:	ed93 7a00 	vldr	s14, [r3]
 8002164:	eddf 6a19 	vldr	s13, [pc, #100]	; 80021cc <LRL_MPU6050_Init+0x398>
 8002168:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	edc3 7a05 	vstr	s15, [r3, #20]
    odom->imu.offset_calibration_z = (_tmp_cal_cf_z/500);
 8002172:	4b15      	ldr	r3, [pc, #84]	; (80021c8 <LRL_MPU6050_Init+0x394>)
 8002174:	ed93 7a00 	vldr	s14, [r3]
 8002178:	eddf 6a14 	vldr	s13, [pc, #80]	; 80021cc <LRL_MPU6050_Init+0x398>
 800217c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	edc3 7a06 	vstr	s15, [r3, #24]

    prev_acc_x = 0;
 8002186:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <LRL_MPU6050_Init+0x39c>)
 8002188:	f04f 0200 	mov.w	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
    prev_acc_y = 0;
 800218e:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <LRL_MPU6050_Init+0x3a0>)
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
    prev_acc_z = 0;
 8002196:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <LRL_MPU6050_Init+0x3a4>)
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
    prev_gyr_x = 0;
 800219e:	4b0f      	ldr	r3, [pc, #60]	; (80021dc <LRL_MPU6050_Init+0x3a8>)
 80021a0:	f04f 0200 	mov.w	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
    prev_gyr_y = 0;
 80021a6:	4b0e      	ldr	r3, [pc, #56]	; (80021e0 <LRL_MPU6050_Init+0x3ac>)
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
    prev_gyr_z = 0;
 80021ae:	4b0d      	ldr	r3, [pc, #52]	; (80021e4 <LRL_MPU6050_Init+0x3b0>)
 80021b0:	f04f 0200 	mov.w	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
}
 80021b6:	bf00      	nop
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20000878 	.word	0x20000878
 80021c4:	2000087c 	.word	0x2000087c
 80021c8:	20000880 	.word	0x20000880
 80021cc:	43fa0000 	.word	0x43fa0000
 80021d0:	2000086c 	.word	0x2000086c
 80021d4:	20000870 	.word	0x20000870
 80021d8:	20000874 	.word	0x20000874
 80021dc:	20000860 	.word	0x20000860
 80021e0:	20000864 	.word	0x20000864
 80021e4:	20000868 	.word	0x20000868

080021e8 <LRL_MPU6050_ReadAccel>:

void LRL_MPU6050_ReadAccel(odom_cfgType * odom)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af04      	add	r7, sp, #16
 80021ee:	6078      	str	r0, [r7, #4]
	_LRL_MPU6050_EnableBypass(odom, 0);
 80021f0:	2100      	movs	r1, #0
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f94c 	bl	8002490 <_LRL_MPU6050_EnableBypass>
    // Read 6 BYTES of data starting from ACCEL_XOUT_H register
    HAL_I2C_Mem_Read(odom->imu.hi2c, MPU_ADDR, ACCEL_XOUT_H, 1, (uint8_t *)&_imu_buffer, 6, DELAY_TIMEOUT);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6818      	ldr	r0, [r3, #0]
 80021fc:	230a      	movs	r3, #10
 80021fe:	9302      	str	r3, [sp, #8]
 8002200:	2306      	movs	r3, #6
 8002202:	9301      	str	r3, [sp, #4]
 8002204:	4b3e      	ldr	r3, [pc, #248]	; (8002300 <LRL_MPU6050_ReadAccel+0x118>)
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	2301      	movs	r3, #1
 800220a:	223b      	movs	r2, #59	; 0x3b
 800220c:	21d0      	movs	r1, #208	; 0xd0
 800220e:	f003 fc53 	bl	8005ab8 <HAL_I2C_Mem_Read>

    odom->accel.x = (int16_t)(_imu_buffer[0] << 8 | _imu_buffer[1]);
 8002212:	4b3b      	ldr	r3, [pc, #236]	; (8002300 <LRL_MPU6050_ReadAccel+0x118>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	021b      	lsls	r3, r3, #8
 8002218:	b21a      	sxth	r2, r3
 800221a:	4b39      	ldr	r3, [pc, #228]	; (8002300 <LRL_MPU6050_ReadAccel+0x118>)
 800221c:	785b      	ldrb	r3, [r3, #1]
 800221e:	b21b      	sxth	r3, r3
 8002220:	4313      	orrs	r3, r2
 8002222:	b21a      	sxth	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    odom->accel.y = (int16_t)(_imu_buffer[2] << 8 | _imu_buffer[3]);
 800222a:	4b35      	ldr	r3, [pc, #212]	; (8002300 <LRL_MPU6050_ReadAccel+0x118>)
 800222c:	789b      	ldrb	r3, [r3, #2]
 800222e:	021b      	lsls	r3, r3, #8
 8002230:	b21a      	sxth	r2, r3
 8002232:	4b33      	ldr	r3, [pc, #204]	; (8002300 <LRL_MPU6050_ReadAccel+0x118>)
 8002234:	78db      	ldrb	r3, [r3, #3]
 8002236:	b21b      	sxth	r3, r3
 8002238:	4313      	orrs	r3, r2
 800223a:	b21a      	sxth	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    odom->accel.z = (int16_t)(_imu_buffer[4] << 8 | _imu_buffer[5]);
 8002242:	4b2f      	ldr	r3, [pc, #188]	; (8002300 <LRL_MPU6050_ReadAccel+0x118>)
 8002244:	791b      	ldrb	r3, [r3, #4]
 8002246:	021b      	lsls	r3, r3, #8
 8002248:	b21a      	sxth	r2, r3
 800224a:	4b2d      	ldr	r3, [pc, #180]	; (8002300 <LRL_MPU6050_ReadAccel+0x118>)
 800224c:	795b      	ldrb	r3, [r3, #5]
 800224e:	b21b      	sxth	r3, r3
 8002250:	4313      	orrs	r3, r2
 8002252:	b21a      	sxth	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
     * we have to divide according to the Full scale value set in FS_SEL
     * I have configured FS_SEL = 0. So I am dividing by 16384.0
     * for more details check ACCEL_CONFIG Register
    ****/

    odom->accel.x /= (ACCEL_X_CORRECTOR / FLOAT_SCALING);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 8002260:	2b00      	cmp	r3, #0
 8002262:	da00      	bge.n	8002266 <LRL_MPU6050_ReadAccel+0x7e>
 8002264:	330f      	adds	r3, #15
 8002266:	111b      	asrs	r3, r3, #4
 8002268:	b21a      	sxth	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    odom->accel.y /= (ACCEL_Y_CORRECTOR / FLOAT_SCALING);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
 8002276:	2b00      	cmp	r3, #0
 8002278:	da00      	bge.n	800227c <LRL_MPU6050_ReadAccel+0x94>
 800227a:	330f      	adds	r3, #15
 800227c:	111b      	asrs	r3, r3, #4
 800227e:	b21a      	sxth	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    odom->accel.z /= (ACCEL_Z_CORRECTOR / FLOAT_SCALING);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	; 0x9e
 800228c:	4a1d      	ldr	r2, [pc, #116]	; (8002304 <LRL_MPU6050_ReadAccel+0x11c>)
 800228e:	fb82 1203 	smull	r1, r2, r2, r3
 8002292:	441a      	add	r2, r3
 8002294:	10d2      	asrs	r2, r2, #3
 8002296:	17db      	asrs	r3, r3, #31
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	b21a      	sxth	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e

    odom->accel.x_calibrated = odom->accel.x - odom->imu.offset_accel_x;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	b21a      	sxth	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    odom->accel.y_calibrated = odom->accel.y - odom->imu.offset_accel_y;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	b21a      	sxth	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
    odom->accel.z_calibrated = odom->accel.z - odom->imu.offset_accel_z;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	; 0x9e
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	b21a      	sxth	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	2000084c 	.word	0x2000084c
 8002304:	92492493 	.word	0x92492493

08002308 <LRL_MPU6050_ReadGyro>:

void LRL_MPU6050_ReadGyro(odom_cfgType *odom)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af04      	add	r7, sp, #16
 800230e:	6078      	str	r0, [r7, #4]
	_LRL_MPU6050_EnableBypass(odom, 0);
 8002310:	2100      	movs	r1, #0
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f8bc 	bl	8002490 <_LRL_MPU6050_EnableBypass>
	HAL_I2C_Mem_Read(odom->imu.hi2c, MPU_ADDR, GYRO_XOUT_H, 1, (uint8_t *)_imu_buffer, 6, DELAY_TIMEOUT);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6818      	ldr	r0, [r3, #0]
 800231c:	230a      	movs	r3, #10
 800231e:	9302      	str	r3, [sp, #8]
 8002320:	2306      	movs	r3, #6
 8002322:	9301      	str	r3, [sp, #4]
 8002324:	4b50      	ldr	r3, [pc, #320]	; (8002468 <LRL_MPU6050_ReadGyro+0x160>)
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	2301      	movs	r3, #1
 800232a:	2243      	movs	r2, #67	; 0x43
 800232c:	21d0      	movs	r1, #208	; 0xd0
 800232e:	f003 fbc3 	bl	8005ab8 <HAL_I2C_Mem_Read>

	odom->gyro.x = (int16_t)(_imu_buffer[0] << 8 | _imu_buffer[1]);
 8002332:	4b4d      	ldr	r3, [pc, #308]	; (8002468 <LRL_MPU6050_ReadGyro+0x160>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	021b      	lsls	r3, r3, #8
 8002338:	b21a      	sxth	r2, r3
 800233a:	4b4b      	ldr	r3, [pc, #300]	; (8002468 <LRL_MPU6050_ReadGyro+0x160>)
 800233c:	785b      	ldrb	r3, [r3, #1]
 800233e:	b21b      	sxth	r3, r3
 8002340:	4313      	orrs	r3, r2
 8002342:	b21a      	sxth	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	odom->gyro.y = (int16_t)(_imu_buffer[2] << 8 | _imu_buffer[3]);
 800234a:	4b47      	ldr	r3, [pc, #284]	; (8002468 <LRL_MPU6050_ReadGyro+0x160>)
 800234c:	789b      	ldrb	r3, [r3, #2]
 800234e:	021b      	lsls	r3, r3, #8
 8002350:	b21a      	sxth	r2, r3
 8002352:	4b45      	ldr	r3, [pc, #276]	; (8002468 <LRL_MPU6050_ReadGyro+0x160>)
 8002354:	78db      	ldrb	r3, [r3, #3]
 8002356:	b21b      	sxth	r3, r3
 8002358:	4313      	orrs	r3, r2
 800235a:	b21a      	sxth	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	odom->gyro.z = (int16_t)(_imu_buffer[4] << 8 | _imu_buffer[5]);
 8002362:	4b41      	ldr	r3, [pc, #260]	; (8002468 <LRL_MPU6050_ReadGyro+0x160>)
 8002364:	791b      	ldrb	r3, [r3, #4]
 8002366:	021b      	lsls	r3, r3, #8
 8002368:	b21a      	sxth	r2, r3
 800236a:	4b3f      	ldr	r3, [pc, #252]	; (8002468 <LRL_MPU6050_ReadGyro+0x160>)
 800236c:	795b      	ldrb	r3, [r3, #5]
 800236e:	b21b      	sxth	r3, r3
 8002370:	4313      	orrs	r3, r2
 8002372:	b21a      	sxth	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa

	odom->gyro.x /= (GYRO_CORRECTOR / FLOAT_SCALING);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f9b3 30a6 	ldrsh.w	r3, [r3, #166]	; 0xa6
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe f8cf 	bl	8000524 <__aeabi_i2d>
 8002386:	a336      	add	r3, pc, #216	; (adr r3, 8002460 <LRL_MPU6050_ReadGyro+0x158>)
 8002388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238c:	f7fe fa5e 	bl	800084c <__aeabi_ddiv>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	4610      	mov	r0, r2
 8002396:	4619      	mov	r1, r3
 8002398:	f7fe fbde 	bl	8000b58 <__aeabi_d2iz>
 800239c:	4603      	mov	r3, r0
 800239e:	b21a      	sxth	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	odom->gyro.y /= (GYRO_CORRECTOR / FLOAT_SCALING);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f9b3 30a8 	ldrsh.w	r3, [r3, #168]	; 0xa8
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fe f8b9 	bl	8000524 <__aeabi_i2d>
 80023b2:	a32b      	add	r3, pc, #172	; (adr r3, 8002460 <LRL_MPU6050_ReadGyro+0x158>)
 80023b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b8:	f7fe fa48 	bl	800084c <__aeabi_ddiv>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	4610      	mov	r0, r2
 80023c2:	4619      	mov	r1, r3
 80023c4:	f7fe fbc8 	bl	8000b58 <__aeabi_d2iz>
 80023c8:	4603      	mov	r3, r0
 80023ca:	b21a      	sxth	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	odom->gyro.z /= (GYRO_CORRECTOR / FLOAT_SCALING);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f9b3 30aa 	ldrsh.w	r3, [r3, #170]	; 0xaa
 80023d8:	4618      	mov	r0, r3
 80023da:	f7fe f8a3 	bl	8000524 <__aeabi_i2d>
 80023de:	a320      	add	r3, pc, #128	; (adr r3, 8002460 <LRL_MPU6050_ReadGyro+0x158>)
 80023e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e4:	f7fe fa32 	bl	800084c <__aeabi_ddiv>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	4610      	mov	r0, r2
 80023ee:	4619      	mov	r1, r3
 80023f0:	f7fe fbb2 	bl	8000b58 <__aeabi_d2iz>
 80023f4:	4603      	mov	r3, r0
 80023f6:	b21a      	sxth	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa

	odom->gyro.x_calibrated = odom->gyro.x - odom->imu.offset_gyro_x;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f9b3 30a6 	ldrsh.w	r3, [r3, #166]	; 0xa6
 8002404:	b29a      	uxth	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800240c:	b29b      	uxth	r3, r3
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	b29b      	uxth	r3, r3
 8002412:	b21a      	sxth	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	odom->gyro.y_calibrated = odom->gyro.y - odom->imu.offset_gyro_y;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f9b3 30a8 	ldrsh.w	r3, [r3, #168]	; 0xa8
 8002420:	b29a      	uxth	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002428:	b29b      	uxth	r3, r3
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	b29b      	uxth	r3, r3
 800242e:	b21a      	sxth	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	odom->gyro.z_calibrated = odom->gyro.z - odom->imu.offset_gyro_z;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f9b3 30aa 	ldrsh.w	r3, [r3, #170]	; 0xaa
 800243c:	b29a      	uxth	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002444:	b29b      	uxth	r3, r3
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	b29b      	uxth	r3, r3
 800244a:	b21a      	sxth	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
}
 8002452:	bf00      	nop
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	f3af 8000 	nop.w
 8002460:	a5e353f8 	.word	0xa5e353f8
 8002464:	3fc0c49b 	.word	0x3fc0c49b
 8002468:	2000084c 	.word	0x2000084c

0800246c <LRL_MPU6050_ReadAll>:

void LRL_MPU6050_ReadAll(odom_cfgType *odom)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
	_LRL_MPU6050_EnableBypass(odom, 0);
 8002474:	2100      	movs	r1, #0
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f80a 	bl	8002490 <_LRL_MPU6050_EnableBypass>
	LRL_MPU6050_ReadAccel(odom);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f7ff feb3 	bl	80021e8 <LRL_MPU6050_ReadAccel>
	LRL_MPU6050_ReadGyro(odom);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7ff ff40 	bl	8002308 <LRL_MPU6050_ReadGyro>
}
 8002488:	bf00      	nop
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <_LRL_MPU6050_EnableBypass>:

void _LRL_MPU6050_EnableBypass(odom_cfgType * odom, uint8_t enable)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af04      	add	r7, sp, #16
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	460b      	mov	r3, r1
 800249a:	70fb      	strb	r3, [r7, #3]
	_i2c_reg_data = 0x00;
 800249c:	4b1a      	ldr	r3, [pc, #104]	; (8002508 <_LRL_MPU6050_EnableBypass+0x78>)
 800249e:	2200      	movs	r2, #0
 80024a0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(odom->imu.hi2c, MPU_ADDR, USER_CTRL, 1, &_i2c_reg_data, 1, DELAY_TIMEOUT);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6818      	ldr	r0, [r3, #0]
 80024a6:	230a      	movs	r3, #10
 80024a8:	9302      	str	r3, [sp, #8]
 80024aa:	2301      	movs	r3, #1
 80024ac:	9301      	str	r3, [sp, #4]
 80024ae:	4b16      	ldr	r3, [pc, #88]	; (8002508 <_LRL_MPU6050_EnableBypass+0x78>)
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	2301      	movs	r3, #1
 80024b4:	226a      	movs	r2, #106	; 0x6a
 80024b6:	21d0      	movs	r1, #208	; 0xd0
 80024b8:	f003 fa04 	bl	80058c4 <HAL_I2C_Mem_Write>
	_i2c_reg_data = 0x02 * enable;
 80024bc:	78fb      	ldrb	r3, [r7, #3]
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	4b11      	ldr	r3, [pc, #68]	; (8002508 <_LRL_MPU6050_EnableBypass+0x78>)
 80024c4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(odom->imu.hi2c, MPU_ADDR, INT_PIN_CFG, 1, &_i2c_reg_data, 1, DELAY_TIMEOUT);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6818      	ldr	r0, [r3, #0]
 80024ca:	230a      	movs	r3, #10
 80024cc:	9302      	str	r3, [sp, #8]
 80024ce:	2301      	movs	r3, #1
 80024d0:	9301      	str	r3, [sp, #4]
 80024d2:	4b0d      	ldr	r3, [pc, #52]	; (8002508 <_LRL_MPU6050_EnableBypass+0x78>)
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	2301      	movs	r3, #1
 80024d8:	2237      	movs	r2, #55	; 0x37
 80024da:	21d0      	movs	r1, #208	; 0xd0
 80024dc:	f003 f9f2 	bl	80058c4 <HAL_I2C_Mem_Write>
	_i2c_reg_data = 0x00;
 80024e0:	4b09      	ldr	r3, [pc, #36]	; (8002508 <_LRL_MPU6050_EnableBypass+0x78>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(odom->imu.hi2c, MPU_ADDR, PWR_MGMT_1, 1, &_i2c_reg_data, 1, DELAY_TIMEOUT);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6818      	ldr	r0, [r3, #0]
 80024ea:	230a      	movs	r3, #10
 80024ec:	9302      	str	r3, [sp, #8]
 80024ee:	2301      	movs	r3, #1
 80024f0:	9301      	str	r3, [sp, #4]
 80024f2:	4b05      	ldr	r3, [pc, #20]	; (8002508 <_LRL_MPU6050_EnableBypass+0x78>)
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	2301      	movs	r3, #1
 80024f8:	226b      	movs	r2, #107	; 0x6b
 80024fa:	21d0      	movs	r1, #208	; 0xd0
 80024fc:	f003 f9e2 	bl	80058c4 <HAL_I2C_Mem_Write>
}
 8002500:	bf00      	nop
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	2000083a 	.word	0x2000083a
 800250c:	00000000 	.word	0x00000000

08002510 <LRL_MPU6050_ComplementaryFilter>:

void LRL_MPU6050_ComplementaryFilter(odom_cfgType *odom, float dt)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08a      	sub	sp, #40	; 0x28
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	ed87 0a00 	vstr	s0, [r7]
	_LRL_MPU6050_EnableBypass(odom, 0);
 800251c:	2100      	movs	r1, #0
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff ffb6 	bl	8002490 <_LRL_MPU6050_EnableBypass>

    // Low-pass filter accelerometer data
    _tmp_accx = ALPHA * prev_acc_x + (1 - ALPHA) * odom->accel.x/FLOAT_SCALING;
 8002524:	4bde      	ldr	r3, [pc, #888]	; (80028a0 <LRL_MPU6050_ComplementaryFilter+0x390>)
 8002526:	edd3 7a00 	vldr	s15, [r3]
 800252a:	ed9f 7ade 	vldr	s14, [pc, #888]	; 80028a4 <LRL_MPU6050_ComplementaryFilter+0x394>
 800252e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 8002538:	ee07 3a90 	vmov	s15, r3
 800253c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002540:	eddf 6ad9 	vldr	s13, [pc, #868]	; 80028a8 <LRL_MPU6050_ComplementaryFilter+0x398>
 8002544:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002548:	ed9f 6ad8 	vldr	s12, [pc, #864]	; 80028ac <LRL_MPU6050_ComplementaryFilter+0x39c>
 800254c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002550:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002554:	4bd6      	ldr	r3, [pc, #856]	; (80028b0 <LRL_MPU6050_ComplementaryFilter+0x3a0>)
 8002556:	edc3 7a00 	vstr	s15, [r3]
    _tmp_accy = ALPHA * prev_acc_y + (1 - ALPHA) * odom->accel.y/FLOAT_SCALING;
 800255a:	4bd6      	ldr	r3, [pc, #856]	; (80028b4 <LRL_MPU6050_ComplementaryFilter+0x3a4>)
 800255c:	edd3 7a00 	vldr	s15, [r3]
 8002560:	ed9f 7ad0 	vldr	s14, [pc, #832]	; 80028a4 <LRL_MPU6050_ComplementaryFilter+0x394>
 8002564:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
 800256e:	ee07 3a90 	vmov	s15, r3
 8002572:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002576:	eddf 6acc 	vldr	s13, [pc, #816]	; 80028a8 <LRL_MPU6050_ComplementaryFilter+0x398>
 800257a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800257e:	ed9f 6acb 	vldr	s12, [pc, #812]	; 80028ac <LRL_MPU6050_ComplementaryFilter+0x39c>
 8002582:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002586:	ee77 7a27 	vadd.f32	s15, s14, s15
 800258a:	4bcb      	ldr	r3, [pc, #812]	; (80028b8 <LRL_MPU6050_ComplementaryFilter+0x3a8>)
 800258c:	edc3 7a00 	vstr	s15, [r3]
    _tmp_accz = ALPHA * prev_acc_z + (1 - ALPHA) * odom->accel.z/FLOAT_SCALING;
 8002590:	4bca      	ldr	r3, [pc, #808]	; (80028bc <LRL_MPU6050_ComplementaryFilter+0x3ac>)
 8002592:	edd3 7a00 	vldr	s15, [r3]
 8002596:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 80028a4 <LRL_MPU6050_ComplementaryFilter+0x394>
 800259a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	; 0x9e
 80025a4:	ee07 3a90 	vmov	s15, r3
 80025a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025ac:	eddf 6abe 	vldr	s13, [pc, #760]	; 80028a8 <LRL_MPU6050_ComplementaryFilter+0x398>
 80025b0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80025b4:	ed9f 6abd 	vldr	s12, [pc, #756]	; 80028ac <LRL_MPU6050_ComplementaryFilter+0x39c>
 80025b8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80025bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025c0:	4bbf      	ldr	r3, [pc, #764]	; (80028c0 <LRL_MPU6050_ComplementaryFilter+0x3b0>)
 80025c2:	edc3 7a00 	vstr	s15, [r3]

    // Normalize accelerometer data
    float acc_norm = sqrtf(_tmp_accx * _tmp_accx + _tmp_accy * _tmp_accy + _tmp_accz * _tmp_accz);
 80025c6:	4bba      	ldr	r3, [pc, #744]	; (80028b0 <LRL_MPU6050_ComplementaryFilter+0x3a0>)
 80025c8:	ed93 7a00 	vldr	s14, [r3]
 80025cc:	4bb8      	ldr	r3, [pc, #736]	; (80028b0 <LRL_MPU6050_ComplementaryFilter+0x3a0>)
 80025ce:	edd3 7a00 	vldr	s15, [r3]
 80025d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025d6:	4bb8      	ldr	r3, [pc, #736]	; (80028b8 <LRL_MPU6050_ComplementaryFilter+0x3a8>)
 80025d8:	edd3 6a00 	vldr	s13, [r3]
 80025dc:	4bb6      	ldr	r3, [pc, #728]	; (80028b8 <LRL_MPU6050_ComplementaryFilter+0x3a8>)
 80025de:	edd3 7a00 	vldr	s15, [r3]
 80025e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025ea:	4bb5      	ldr	r3, [pc, #724]	; (80028c0 <LRL_MPU6050_ComplementaryFilter+0x3b0>)
 80025ec:	edd3 6a00 	vldr	s13, [r3]
 80025f0:	4bb3      	ldr	r3, [pc, #716]	; (80028c0 <LRL_MPU6050_ComplementaryFilter+0x3b0>)
 80025f2:	edd3 7a00 	vldr	s15, [r3]
 80025f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002602:	f00b ff19 	bl	800e438 <sqrtf>
 8002606:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    _tmp_accx /= acc_norm;
 800260a:	4ba9      	ldr	r3, [pc, #676]	; (80028b0 <LRL_MPU6050_ComplementaryFilter+0x3a0>)
 800260c:	edd3 6a00 	vldr	s13, [r3]
 8002610:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002614:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002618:	4ba5      	ldr	r3, [pc, #660]	; (80028b0 <LRL_MPU6050_ComplementaryFilter+0x3a0>)
 800261a:	edc3 7a00 	vstr	s15, [r3]
    _tmp_accy /= acc_norm;
 800261e:	4ba6      	ldr	r3, [pc, #664]	; (80028b8 <LRL_MPU6050_ComplementaryFilter+0x3a8>)
 8002620:	edd3 6a00 	vldr	s13, [r3]
 8002624:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002628:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800262c:	4ba2      	ldr	r3, [pc, #648]	; (80028b8 <LRL_MPU6050_ComplementaryFilter+0x3a8>)
 800262e:	edc3 7a00 	vstr	s15, [r3]
    _tmp_accz /= acc_norm;
 8002632:	4ba3      	ldr	r3, [pc, #652]	; (80028c0 <LRL_MPU6050_ComplementaryFilter+0x3b0>)
 8002634:	edd3 6a00 	vldr	s13, [r3]
 8002638:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800263c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002640:	4b9f      	ldr	r3, [pc, #636]	; (80028c0 <LRL_MPU6050_ComplementaryFilter+0x3b0>)
 8002642:	edc3 7a00 	vstr	s15, [r3]

    // Update angle using accelerometer
    float acc_angle_x = atan2f(_tmp_accy, _tmp_accz) * (180.0f / M_PI);
 8002646:	4b9c      	ldr	r3, [pc, #624]	; (80028b8 <LRL_MPU6050_ComplementaryFilter+0x3a8>)
 8002648:	edd3 7a00 	vldr	s15, [r3]
 800264c:	4b9c      	ldr	r3, [pc, #624]	; (80028c0 <LRL_MPU6050_ComplementaryFilter+0x3b0>)
 800264e:	ed93 7a00 	vldr	s14, [r3]
 8002652:	eef0 0a47 	vmov.f32	s1, s14
 8002656:	eeb0 0a67 	vmov.f32	s0, s15
 800265a:	f00b feeb 	bl	800e434 <atan2f>
 800265e:	ee10 3a10 	vmov	r3, s0
 8002662:	4618      	mov	r0, r3
 8002664:	f7fd ff70 	bl	8000548 <__aeabi_f2d>
 8002668:	a38b      	add	r3, pc, #556	; (adr r3, 8002898 <LRL_MPU6050_ComplementaryFilter+0x388>)
 800266a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266e:	f7fd ffc3 	bl	80005f8 <__aeabi_dmul>
 8002672:	4602      	mov	r2, r0
 8002674:	460b      	mov	r3, r1
 8002676:	4610      	mov	r0, r2
 8002678:	4619      	mov	r1, r3
 800267a:	f7fe fab5 	bl	8000be8 <__aeabi_d2f>
 800267e:	4603      	mov	r3, r0
 8002680:	623b      	str	r3, [r7, #32]
    float acc_angle_y = atan2f(_tmp_accx, _tmp_accz) * (180.0f / M_PI);
 8002682:	4b8b      	ldr	r3, [pc, #556]	; (80028b0 <LRL_MPU6050_ComplementaryFilter+0x3a0>)
 8002684:	edd3 7a00 	vldr	s15, [r3]
 8002688:	4b8d      	ldr	r3, [pc, #564]	; (80028c0 <LRL_MPU6050_ComplementaryFilter+0x3b0>)
 800268a:	ed93 7a00 	vldr	s14, [r3]
 800268e:	eef0 0a47 	vmov.f32	s1, s14
 8002692:	eeb0 0a67 	vmov.f32	s0, s15
 8002696:	f00b fecd 	bl	800e434 <atan2f>
 800269a:	ee10 3a10 	vmov	r3, s0
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fd ff52 	bl	8000548 <__aeabi_f2d>
 80026a4:	a37c      	add	r3, pc, #496	; (adr r3, 8002898 <LRL_MPU6050_ComplementaryFilter+0x388>)
 80026a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026aa:	f7fd ffa5 	bl	80005f8 <__aeabi_dmul>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	4610      	mov	r0, r2
 80026b4:	4619      	mov	r1, r3
 80026b6:	f7fe fa97 	bl	8000be8 <__aeabi_d2f>
 80026ba:	4603      	mov	r3, r0
 80026bc:	61fb      	str	r3, [r7, #28]
    float acc_angle_z = atan2f(_tmp_accy, _tmp_accx) * (180.0f / M_PI);
 80026be:	4b7e      	ldr	r3, [pc, #504]	; (80028b8 <LRL_MPU6050_ComplementaryFilter+0x3a8>)
 80026c0:	edd3 7a00 	vldr	s15, [r3]
 80026c4:	4b7a      	ldr	r3, [pc, #488]	; (80028b0 <LRL_MPU6050_ComplementaryFilter+0x3a0>)
 80026c6:	ed93 7a00 	vldr	s14, [r3]
 80026ca:	eef0 0a47 	vmov.f32	s1, s14
 80026ce:	eeb0 0a67 	vmov.f32	s0, s15
 80026d2:	f00b feaf 	bl	800e434 <atan2f>
 80026d6:	ee10 3a10 	vmov	r3, s0
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fd ff34 	bl	8000548 <__aeabi_f2d>
 80026e0:	a36d      	add	r3, pc, #436	; (adr r3, 8002898 <LRL_MPU6050_ComplementaryFilter+0x388>)
 80026e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e6:	f7fd ff87 	bl	80005f8 <__aeabi_dmul>
 80026ea:	4602      	mov	r2, r0
 80026ec:	460b      	mov	r3, r1
 80026ee:	4610      	mov	r0, r2
 80026f0:	4619      	mov	r1, r3
 80026f2:	f7fe fa79 	bl	8000be8 <__aeabi_d2f>
 80026f6:	4603      	mov	r3, r0
 80026f8:	61bb      	str	r3, [r7, #24]

    // Low-pass filter gyroscope data
    float gyr_x_filtered = ALPHA * prev_gyr_x + (1 - ALPHA) * odom->gyro.x/FLOAT_SCALING;
 80026fa:	4b72      	ldr	r3, [pc, #456]	; (80028c4 <LRL_MPU6050_ComplementaryFilter+0x3b4>)
 80026fc:	edd3 7a00 	vldr	s15, [r3]
 8002700:	ed9f 7a68 	vldr	s14, [pc, #416]	; 80028a4 <LRL_MPU6050_ComplementaryFilter+0x394>
 8002704:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f9b3 30a6 	ldrsh.w	r3, [r3, #166]	; 0xa6
 800270e:	ee07 3a90 	vmov	s15, r3
 8002712:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002716:	eddf 6a64 	vldr	s13, [pc, #400]	; 80028a8 <LRL_MPU6050_ComplementaryFilter+0x398>
 800271a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800271e:	ed9f 6a63 	vldr	s12, [pc, #396]	; 80028ac <LRL_MPU6050_ComplementaryFilter+0x39c>
 8002722:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002726:	ee77 7a27 	vadd.f32	s15, s14, s15
 800272a:	edc7 7a05 	vstr	s15, [r7, #20]
    float gyr_y_filtered = ALPHA * prev_gyr_y + (1 - ALPHA) * odom->gyro.y/FLOAT_SCALING;
 800272e:	4b66      	ldr	r3, [pc, #408]	; (80028c8 <LRL_MPU6050_ComplementaryFilter+0x3b8>)
 8002730:	edd3 7a00 	vldr	s15, [r3]
 8002734:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80028a4 <LRL_MPU6050_ComplementaryFilter+0x394>
 8002738:	ee27 7a87 	vmul.f32	s14, s15, s14
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f9b3 30a8 	ldrsh.w	r3, [r3, #168]	; 0xa8
 8002742:	ee07 3a90 	vmov	s15, r3
 8002746:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800274a:	eddf 6a57 	vldr	s13, [pc, #348]	; 80028a8 <LRL_MPU6050_ComplementaryFilter+0x398>
 800274e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002752:	ed9f 6a56 	vldr	s12, [pc, #344]	; 80028ac <LRL_MPU6050_ComplementaryFilter+0x39c>
 8002756:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800275a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800275e:	edc7 7a04 	vstr	s15, [r7, #16]
    float gyr_z_filtered = ALPHA * prev_gyr_z + (1 - ALPHA) * odom->gyro.z/FLOAT_SCALING;
 8002762:	4b5a      	ldr	r3, [pc, #360]	; (80028cc <LRL_MPU6050_ComplementaryFilter+0x3bc>)
 8002764:	edd3 7a00 	vldr	s15, [r3]
 8002768:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80028a4 <LRL_MPU6050_ComplementaryFilter+0x394>
 800276c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f9b3 30aa 	ldrsh.w	r3, [r3, #170]	; 0xaa
 8002776:	ee07 3a90 	vmov	s15, r3
 800277a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800277e:	eddf 6a4a 	vldr	s13, [pc, #296]	; 80028a8 <LRL_MPU6050_ComplementaryFilter+0x398>
 8002782:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002786:	ed9f 6a49 	vldr	s12, [pc, #292]	; 80028ac <LRL_MPU6050_ComplementaryFilter+0x39c>
 800278a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800278e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002792:	edc7 7a03 	vstr	s15, [r7, #12]

    // Update angle using gyroscope
    odom->imu.roll_temp += gyr_x_filtered * dt;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	ed93 7a07 	vldr	s14, [r3, #28]
 800279c:	edd7 6a05 	vldr	s13, [r7, #20]
 80027a0:	edd7 7a00 	vldr	s15, [r7]
 80027a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	edc3 7a07 	vstr	s15, [r3, #28]
    odom->imu.pitch_temp -= gyr_y_filtered * dt;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	ed93 7a08 	vldr	s14, [r3, #32]
 80027b8:	edd7 6a04 	vldr	s13, [r7, #16]
 80027bc:	edd7 7a00 	vldr	s15, [r7]
 80027c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	edc3 7a08 	vstr	s15, [r3, #32]
    odom->imu.yaw_temp += gyr_z_filtered * dt;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80027d4:	edd7 6a03 	vldr	s13, [r7, #12]
 80027d8:	edd7 7a00 	vldr	s15, [r7]
 80027dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    // Complementary filter
    odom->imu.roll_temp = (ALPHA * odom->imu.roll_temp + (1 - ALPHA) * acc_angle_x) ;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	edd3 7a07 	vldr	s15, [r3, #28]
 80027f0:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80028a4 <LRL_MPU6050_ComplementaryFilter+0x394>
 80027f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027f8:	edd7 7a08 	vldr	s15, [r7, #32]
 80027fc:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80028a8 <LRL_MPU6050_ComplementaryFilter+0x398>
 8002800:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002804:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	edc3 7a07 	vstr	s15, [r3, #28]
    odom->imu.pitch_temp = ((ALPHA * odom->imu.pitch_temp) - (1 - ALPHA) * acc_angle_y);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	edd3 7a08 	vldr	s15, [r3, #32]
 8002814:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80028a4 <LRL_MPU6050_ComplementaryFilter+0x394>
 8002818:	ee27 7a87 	vmul.f32	s14, s15, s14
 800281c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002820:	eddf 6a21 	vldr	s13, [pc, #132]	; 80028a8 <LRL_MPU6050_ComplementaryFilter+0x398>
 8002824:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002828:	ee77 7a67 	vsub.f32	s15, s14, s15
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	edc3 7a08 	vstr	s15, [r3, #32]
    odom->imu.yaw_temp = (ALPHA * odom->imu.yaw_temp + (1 - ALPHA) * acc_angle_z);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002838:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80028a4 <LRL_MPU6050_ComplementaryFilter+0x394>
 800283c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002840:	edd7 7a06 	vldr	s15, [r7, #24]
 8002844:	eddf 6a18 	vldr	s13, [pc, #96]	; 80028a8 <LRL_MPU6050_ComplementaryFilter+0x398>
 8002848:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800284c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    odom->angle.x = odom->imu.roll_temp - odom->imu.offset_calibration_x;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	ed93 7a07 	vldr	s14, [r3, #28]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002862:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002866:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800286a:	ee17 3a90 	vmov	r3, s15
 800286e:	b21a      	sxth	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
    odom->angle.y = odom->imu.pitch_temp - odom->imu.offset_calibration_y;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	ed93 7a08 	vldr	s14, [r3, #32]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002882:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002886:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800288a:	ee17 3a90 	vmov	r3, s15
 800288e:	b21a      	sxth	r2, r3
 8002890:	e01e      	b.n	80028d0 <LRL_MPU6050_ComplementaryFilter+0x3c0>
 8002892:	bf00      	nop
 8002894:	f3af 8000 	nop.w
 8002898:	1a63c1f8 	.word	0x1a63c1f8
 800289c:	404ca5dc 	.word	0x404ca5dc
 80028a0:	2000086c 	.word	0x2000086c
 80028a4:	3f666666 	.word	0x3f666666
 80028a8:	3dccccd0 	.word	0x3dccccd0
 80028ac:	447a0000 	.word	0x447a0000
 80028b0:	20000854 	.word	0x20000854
 80028b4:	20000870 	.word	0x20000870
 80028b8:	20000858 	.word	0x20000858
 80028bc:	20000874 	.word	0x20000874
 80028c0:	2000085c 	.word	0x2000085c
 80028c4:	20000860 	.word	0x20000860
 80028c8:	20000864 	.word	0x20000864
 80028cc:	20000868 	.word	0x20000868
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
    odom->angle.z = odom->imu.yaw_temp - odom->imu.offset_calibration_z;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	edd3 7a06 	vldr	s15, [r3, #24]
 80028e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028ea:	ee17 3a90 	vmov	r3, s15
 80028ee:	b21a      	sxth	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98

    // Update previous values
    prev_acc_x = _tmp_accx;
 80028f6:	4b0c      	ldr	r3, [pc, #48]	; (8002928 <LRL_MPU6050_ComplementaryFilter+0x418>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a0c      	ldr	r2, [pc, #48]	; (800292c <LRL_MPU6050_ComplementaryFilter+0x41c>)
 80028fc:	6013      	str	r3, [r2, #0]
    prev_acc_y = _tmp_accy;
 80028fe:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <LRL_MPU6050_ComplementaryFilter+0x420>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a0c      	ldr	r2, [pc, #48]	; (8002934 <LRL_MPU6050_ComplementaryFilter+0x424>)
 8002904:	6013      	str	r3, [r2, #0]
    prev_acc_z = _tmp_accz;
 8002906:	4b0c      	ldr	r3, [pc, #48]	; (8002938 <LRL_MPU6050_ComplementaryFilter+0x428>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a0c      	ldr	r2, [pc, #48]	; (800293c <LRL_MPU6050_ComplementaryFilter+0x42c>)
 800290c:	6013      	str	r3, [r2, #0]

    prev_gyr_x = gyr_x_filtered;
 800290e:	4a0c      	ldr	r2, [pc, #48]	; (8002940 <LRL_MPU6050_ComplementaryFilter+0x430>)
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	6013      	str	r3, [r2, #0]
    prev_gyr_y = gyr_y_filtered;
 8002914:	4a0b      	ldr	r2, [pc, #44]	; (8002944 <LRL_MPU6050_ComplementaryFilter+0x434>)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	6013      	str	r3, [r2, #0]
    prev_gyr_z = gyr_z_filtered;
 800291a:	4a0b      	ldr	r2, [pc, #44]	; (8002948 <LRL_MPU6050_ComplementaryFilter+0x438>)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6013      	str	r3, [r2, #0]
}
 8002920:	bf00      	nop
 8002922:	3728      	adds	r7, #40	; 0x28
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	20000854 	.word	0x20000854
 800292c:	2000086c 	.word	0x2000086c
 8002930:	20000858 	.word	0x20000858
 8002934:	20000870 	.word	0x20000870
 8002938:	2000085c 	.word	0x2000085c
 800293c:	20000874 	.word	0x20000874
 8002940:	20000860 	.word	0x20000860
 8002944:	20000864 	.word	0x20000864
 8002948:	20000868 	.word	0x20000868

0800294c <LRL_Encoder_Init>:
// #########################################################
// ####################  MOTOR ENCODER  ####################
// #########################################################

void LRL_Encoder_Init(odom_cfgType * odom)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(odom->enc_right.htim, 0);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2200      	movs	r2, #0
 800295c:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(odom->enc_left.htim, 0);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2200      	movs	r2, #0
 8002966:	625a      	str	r2, [r3, #36]	; 0x24

	odom->enc_right.tick = 0;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	869a      	strh	r2, [r3, #52]	; 0x34
	odom->enc_left.tick = 0;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	odom->enc_right.tick_prev = 0;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	86da      	strh	r2, [r3, #54]	; 0x36
	odom->enc_left.tick_prev = 0;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <LRL_Encoder_ReadAngularSpeed>:

void LRL_Encoder_ReadAngularSpeed(odom_cfgType * odom)
{
 8002990:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002994:	b084      	sub	sp, #16
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]

	odom->enc_right.tick = __HAL_TIM_GET_COUNTER(odom->enc_right.htim);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	869a      	strh	r2, [r3, #52]	; 0x34
	odom->enc_left.tick = __HAL_TIM_GET_COUNTER(odom->enc_left.htim);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	int _dir_r,_dir_l;


	if(__HAL_TIM_IS_TIM_COUNTING_DOWN(odom->enc_right.htim) == 0)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0310 	and.w	r3, r3, #16
 80029c4:	2b10      	cmp	r3, #16
 80029c6:	d027      	beq.n	8002a18 <LRL_Encoder_ReadAngularSpeed+0x88>
	{
	  if(odom->enc_right.tick - odom->enc_right.tick_prev >= 0)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80029cc:	461a      	mov	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	db0a      	blt.n	80029ee <LRL_Encoder_ReadAngularSpeed+0x5e>
	  {
		  odom->vel.right = odom->enc_right.tick - odom->enc_right.tick_prev;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	b21a      	sxth	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
 80029ec:	e00d      	b.n	8002a0a <LRL_Encoder_ReadAngularSpeed+0x7a>
	  }
	  else
	  {
		  odom->vel.right = (odom->enc_right.MAX_ARR - odom->enc_right.tick_prev) + odom->enc_right.tick;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80029fe:	4413      	add	r3, r2
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	b21a      	sxth	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
	  }
	  odom->enc_right.tick_prev = odom->enc_right.tick;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	86da      	strh	r2, [r3, #54]	; 0x36
	  _dir_r = 1;
 8002a12:	2301      	movs	r3, #1
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	e027      	b.n	8002a68 <LRL_Encoder_ReadAngularSpeed+0xd8>
	}
	else
	{
	  if(odom->enc_right.tick_prev - odom->enc_right.tick >= 0)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	db0a      	blt.n	8002a3e <LRL_Encoder_ReadAngularSpeed+0xae>
	  {
		  odom->vel.right = -(odom->enc_right.tick - odom->enc_right.tick_prev);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	b21a      	sxth	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
 8002a3c:	e00d      	b.n	8002a5a <LRL_Encoder_ReadAngularSpeed+0xca>
	  }
	  else
	  {
		  odom->vel.right = (odom->enc_right.MAX_ARR - odom->enc_right.tick) + odom->enc_right.tick_prev;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a4e:	4413      	add	r3, r2
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	b21a      	sxth	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
	  }
	  _dir_r = -1;
 8002a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5e:	60fb      	str	r3, [r7, #12]
	  odom->enc_right.tick_prev = odom->enc_right.tick;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	86da      	strh	r2, [r3, #54]	; 0x36
	}



	if(__HAL_TIM_IS_TIM_COUNTING_DOWN(odom->enc_left.htim) == 0)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0310 	and.w	r3, r3, #16
 8002a74:	2b10      	cmp	r3, #16
 8002a76:	d02f      	beq.n	8002ad8 <LRL_Encoder_ReadAngularSpeed+0x148>
	{
	  if(odom->enc_left.tick - odom->enc_left.tick_prev >= 0)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a7e:	461a      	mov	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	db0c      	blt.n	8002aa6 <LRL_Encoder_ReadAngularSpeed+0x116>
	  {
		  odom->vel.left = odom->enc_left.tick - odom->enc_left.tick_prev;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	b21a      	sxth	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 8002aa4:	e00f      	b.n	8002ac6 <LRL_Encoder_ReadAngularSpeed+0x136>
	  }
	  else
	  {
		  odom->vel.left = (odom->enc_left.MAX_ARR - odom->enc_left.tick_prev) + odom->enc_left.tick;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002aba:	4413      	add	r3, r2
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	b21a      	sxth	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
	  }
	  odom->enc_left.tick_prev = odom->enc_left.tick;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	  _dir_l = 1;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	60bb      	str	r3, [r7, #8]
 8002ad6:	e02f      	b.n	8002b38 <LRL_Encoder_ReadAngularSpeed+0x1a8>
	}
	else
	{
	  if(odom->enc_left.tick_prev - odom->enc_left.tick >= 0)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ade:	461a      	mov	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	db0c      	blt.n	8002b06 <LRL_Encoder_ReadAngularSpeed+0x176>
	  {
		  odom->vel.left = -(odom->enc_left.tick - odom->enc_left.tick_prev);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	b21a      	sxth	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 8002b04:	e00f      	b.n	8002b26 <LRL_Encoder_ReadAngularSpeed+0x196>
	  }
	  else
	  {
		  odom->vel.left = (odom->enc_left.MAX_ARR - odom->enc_left.tick) + odom->enc_left.tick_prev;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b1a:	4413      	add	r3, r2
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	b21a      	sxth	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
	  }
	  odom->enc_left.tick_prev = odom->enc_left.tick;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	  _dir_l = -1;
 8002b32:	f04f 33ff 	mov.w	r3, #4294967295
 8002b36:	60bb      	str	r3, [r7, #8]

	}

	_temp_dist_right += _dir_r * odom->vel.right*(2*M_PI*odom->diff_robot.WHEEL_RADIUS) / odom->enc_right.MAX_ARR;
 8002b38:	4b6f      	ldr	r3, [pc, #444]	; (8002cf8 <LRL_Encoder_ReadAngularSpeed+0x368>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7fd fd03 	bl	8000548 <__aeabi_f2d>
 8002b42:	4604      	mov	r4, r0
 8002b44:	460d      	mov	r5, r1
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	; 0xc4
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	fb02 f303 	mul.w	r3, r2, r3
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fd fce5 	bl	8000524 <__aeabi_i2d>
 8002b5a:	4680      	mov	r8, r0
 8002b5c:	4689      	mov	r9, r1
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7fd fcef 	bl	8000548 <__aeabi_f2d>
 8002b6a:	a361      	add	r3, pc, #388	; (adr r3, 8002cf0 <LRL_Encoder_ReadAngularSpeed+0x360>)
 8002b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b70:	f7fd fd42 	bl	80005f8 <__aeabi_dmul>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	4640      	mov	r0, r8
 8002b7a:	4649      	mov	r1, r9
 8002b7c:	f7fd fd3c 	bl	80005f8 <__aeabi_dmul>
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	4690      	mov	r8, r2
 8002b86:	4699      	mov	r9, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7fd fcc9 	bl	8000524 <__aeabi_i2d>
 8002b92:	4602      	mov	r2, r0
 8002b94:	460b      	mov	r3, r1
 8002b96:	4640      	mov	r0, r8
 8002b98:	4649      	mov	r1, r9
 8002b9a:	f7fd fe57 	bl	800084c <__aeabi_ddiv>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	4620      	mov	r0, r4
 8002ba4:	4629      	mov	r1, r5
 8002ba6:	f7fd fb71 	bl	800028c <__adddf3>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	4610      	mov	r0, r2
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	f7fe f819 	bl	8000be8 <__aeabi_d2f>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	4a4f      	ldr	r2, [pc, #316]	; (8002cf8 <LRL_Encoder_ReadAngularSpeed+0x368>)
 8002bba:	6013      	str	r3, [r2, #0]
	_temp_dist_left += _dir_l * odom->vel.left*(2*M_PI*odom->diff_robot.WHEEL_RADIUS) / odom->enc_left.MAX_ARR ;
 8002bbc:	4b4f      	ldr	r3, [pc, #316]	; (8002cfc <LRL_Encoder_ReadAngularSpeed+0x36c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7fd fcc1 	bl	8000548 <__aeabi_f2d>
 8002bc6:	4604      	mov	r4, r0
 8002bc8:	460d      	mov	r5, r1
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f9b3 30c6 	ldrsh.w	r3, [r3, #198]	; 0xc6
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	fb02 f303 	mul.w	r3, r2, r3
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7fd fca3 	bl	8000524 <__aeabi_i2d>
 8002bde:	4680      	mov	r8, r0
 8002be0:	4689      	mov	r9, r1
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7fd fcad 	bl	8000548 <__aeabi_f2d>
 8002bee:	a340      	add	r3, pc, #256	; (adr r3, 8002cf0 <LRL_Encoder_ReadAngularSpeed+0x360>)
 8002bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf4:	f7fd fd00 	bl	80005f8 <__aeabi_dmul>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4640      	mov	r0, r8
 8002bfe:	4649      	mov	r1, r9
 8002c00:	f7fd fcfa 	bl	80005f8 <__aeabi_dmul>
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	4690      	mov	r8, r2
 8002c0a:	4699      	mov	r9, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7fd fc87 	bl	8000524 <__aeabi_i2d>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	4640      	mov	r0, r8
 8002c1c:	4649      	mov	r1, r9
 8002c1e:	f7fd fe15 	bl	800084c <__aeabi_ddiv>
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	4620      	mov	r0, r4
 8002c28:	4629      	mov	r1, r5
 8002c2a:	f7fd fb2f 	bl	800028c <__adddf3>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	4610      	mov	r0, r2
 8002c34:	4619      	mov	r1, r3
 8002c36:	f7fd ffd7 	bl	8000be8 <__aeabi_d2f>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	4a2f      	ldr	r2, [pc, #188]	; (8002cfc <LRL_Encoder_ReadAngularSpeed+0x36c>)
 8002c3e:	6013      	str	r3, [r2, #0]
	odom->dist.right = (int16_t)_temp_dist_right;
 8002c40:	4b2d      	ldr	r3, [pc, #180]	; (8002cf8 <LRL_Encoder_ReadAngularSpeed+0x368>)
 8002c42:	edd3 7a00 	vldr	s15, [r3]
 8002c46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c4a:	ee17 3a90 	vmov	r3, s15
 8002c4e:	b21a      	sxth	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
	odom->dist.left  = (int16_t)_temp_dist_left;
 8002c56:	4b29      	ldr	r3, [pc, #164]	; (8002cfc <LRL_Encoder_ReadAngularSpeed+0x36c>)
 8002c58:	edd3 7a00 	vldr	s15, [r3]
 8002c5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c60:	ee17 3a90 	vmov	r3, s15
 8002c64:	b21a      	sxth	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca

	odom->vel.right = _dir_r * odom->vel.right * odom->enc_right.TICK2RPM;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	; 0xc4
 8002c72:	461a      	mov	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	fb02 f303 	mul.w	r3, r2, r3
 8002c7a:	ee07 3a90 	vmov	s15, r3
 8002c7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002c88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c90:	ee17 3a90 	vmov	r3, s15
 8002c94:	b21a      	sxth	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
	odom->vel.left = _dir_l * odom->vel.left * odom->enc_left.TICK2RPM;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f9b3 30c6 	ldrsh.w	r3, [r3, #198]	; 0xc6
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	fb02 f303 	mul.w	r3, r2, r3
 8002caa:	ee07 3a90 	vmov	s15, r3
 8002cae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002cb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cc0:	ee17 3a90 	vmov	r3, s15
 8002cc4:	b21a      	sxth	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6

	odom->enc_right.tick_prev = odom->enc_right.tick;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	86da      	strh	r2, [r3, #54]	; 0x36
	odom->enc_left.tick_prev = odom->enc_left.tick;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
}
 8002ce0:	bf00      	nop
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002cea:	bf00      	nop
 8002cec:	f3af 8000 	nop.w
 8002cf0:	54442d18 	.word	0x54442d18
 8002cf4:	401921fb 	.word	0x401921fb
 8002cf8:	200008a0 	.word	0x200008a0
 8002cfc:	200008a4 	.word	0x200008a4

08002d00 <LRL_UpdateCRC>:
#include "mcu_config.h"

uint8_t _ack_data[10] = {0x4C, 0x45, 0x4E, 0x4E, 0x41};

void LRL_UpdateCRC(uint16_t crc_accum, uint8_t *data_blk_ptr, uint16_t data_blk_size, unsigned short crc_final )
{
 8002d00:	b480      	push	{r7}
 8002d02:	b087      	sub	sp, #28
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60b9      	str	r1, [r7, #8]
 8002d08:	4611      	mov	r1, r2
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	81fb      	strh	r3, [r7, #14]
 8002d10:	460b      	mov	r3, r1
 8002d12:	81bb      	strh	r3, [r7, #12]
 8002d14:	4613      	mov	r3, r2
 8002d16:	80fb      	strh	r3, [r7, #6]
    0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264,
    0x8261, 0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E,
    0x0234, 0x8231, 0x8213, 0x0216, 0x021C, 0x8219, 0x0208,
    0x820D, 0x8207, 0x0202 };

  for (j = 0; j < data_blk_size; j++)
 8002d18:	2300      	movs	r3, #0
 8002d1a:	82fb      	strh	r3, [r7, #22]
 8002d1c:	e019      	b.n	8002d52 <LRL_UpdateCRC+0x52>
  {
    i = ((uint16_t)(crc_accum >> 8) ^ *data_blk_ptr++) & 0xFF;
 8002d1e:	89fb      	ldrh	r3, [r7, #14]
 8002d20:	0a1b      	lsrs	r3, r3, #8
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	1c59      	adds	r1, r3, #1
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	4053      	eors	r3, r2
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	82bb      	strh	r3, [r7, #20]
    crc_accum = (crc_accum << 8) ^ crc_table[i];
 8002d36:	89fb      	ldrh	r3, [r7, #14]
 8002d38:	021b      	lsls	r3, r3, #8
 8002d3a:	b21a      	sxth	r2, r3
 8002d3c:	8abb      	ldrh	r3, [r7, #20]
 8002d3e:	490b      	ldr	r1, [pc, #44]	; (8002d6c <LRL_UpdateCRC+0x6c>)
 8002d40:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002d44:	b21b      	sxth	r3, r3
 8002d46:	4053      	eors	r3, r2
 8002d48:	b21b      	sxth	r3, r3
 8002d4a:	81fb      	strh	r3, [r7, #14]
  for (j = 0; j < data_blk_size; j++)
 8002d4c:	8afb      	ldrh	r3, [r7, #22]
 8002d4e:	3301      	adds	r3, #1
 8002d50:	82fb      	strh	r3, [r7, #22]
 8002d52:	8afa      	ldrh	r2, [r7, #22]
 8002d54:	89bb      	ldrh	r3, [r7, #12]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d3e1      	bcc.n	8002d1e <LRL_UpdateCRC+0x1e>
  }
  crc_final = crc_accum;
 8002d5a:	89fb      	ldrh	r3, [r7, #14]
 8002d5c:	80fb      	strh	r3, [r7, #6]
}
 8002d5e:	bf00      	nop
 8002d60:	371c      	adds	r7, #28
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	0800ece8 	.word	0x0800ece8

08002d70 <LRL_txPacket>:


void LRL_txPacket(packet_cfgType *packet,odom_cfgType *odom)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
	unsigned short _tmp_crc;

	packet->buffer[0] = 0xFF;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	22ff      	movs	r2, #255	; 0xff
 8002d7e:	721a      	strb	r2, [r3, #8]
	packet->buffer[1] = 0xFF;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	22ff      	movs	r2, #255	; 0xff
 8002d84:	725a      	strb	r2, [r3, #9]

	packet->buffer[2] = 0x01;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	729a      	strb	r2, [r3, #10]
	packet->buffer[3] = 0x20; //this is the size of the bytes
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2220      	movs	r2, #32
 8002d90:	72da      	strb	r2, [r3, #11]

	packet->buffer[4] = (uint8_t)(odom->vel.left >> 8);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	f9b3 30c6 	ldrsh.w	r3, [r3, #198]	; 0xc6
 8002d98:	121b      	asrs	r3, r3, #8
 8002d9a:	b21b      	sxth	r3, r3
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	731a      	strb	r2, [r3, #12]
	packet->buffer[5] = (uint8_t)(odom->vel.left & 0x00FF);
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	f9b3 30c6 	ldrsh.w	r3, [r3, #198]	; 0xc6
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	735a      	strb	r2, [r3, #13]

	packet->buffer[6] = (uint8_t)(odom->vel.right >> 8);
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	; 0xc4
 8002db4:	121b      	asrs	r3, r3, #8
 8002db6:	b21b      	sxth	r3, r3
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	739a      	strb	r2, [r3, #14]
	packet->buffer[7] = (uint8_t)(odom->vel.right & 0x00FF);
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	; 0xc4
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	73da      	strb	r2, [r3, #15]

	packet->buffer[8] = (uint8_t)(odom->dist.left >> 8);
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 8002dd0:	121b      	asrs	r3, r3, #8
 8002dd2:	b21b      	sxth	r3, r3
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	741a      	strb	r2, [r3, #16]
	packet->buffer[9] = (uint8_t)(odom->dist.left & 0x00FF);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	745a      	strb	r2, [r3, #17]

	packet->buffer[10] = (uint8_t)(odom->dist.right >> 8);
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	; 0xc8
 8002dec:	121b      	asrs	r3, r3, #8
 8002dee:	b21b      	sxth	r3, r3
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	749a      	strb	r2, [r3, #18]
	packet->buffer[11] = (uint8_t)(odom->dist.right & 0x00FF);
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	; 0xc8
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	74da      	strb	r2, [r3, #19]

	packet->buffer[12] = (uint8_t)(odom->accel.x_calibrated >> 8);
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	; 0xa0
 8002e08:	121b      	asrs	r3, r3, #8
 8002e0a:	b21b      	sxth	r3, r3
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	751a      	strb	r2, [r3, #20]
	packet->buffer[13] = (uint8_t)(odom->accel.x_calibrated & 0x00FF);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	; 0xa0
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	755a      	strb	r2, [r3, #21]

	packet->buffer[14] = (uint8_t)(odom->accel.y_calibrated >> 8);
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 8002e24:	121b      	asrs	r3, r3, #8
 8002e26:	b21b      	sxth	r3, r3
 8002e28:	b2da      	uxtb	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	759a      	strb	r2, [r3, #22]
	packet->buffer[15] = (uint8_t)(odom->accel.y_calibrated & 0x00FF);
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	75da      	strb	r2, [r3, #23]

	packet->buffer[16] = (uint8_t)(odom->accel.z_calibrated >> 8);
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	; 0xa4
 8002e40:	121b      	asrs	r3, r3, #8
 8002e42:	b21b      	sxth	r3, r3
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	761a      	strb	r2, [r3, #24]
	packet->buffer[17] = (uint8_t)(odom->accel.z_calibrated & 0x00FF);
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	; 0xa4
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	765a      	strb	r2, [r3, #25]

	packet->buffer[18] = (uint8_t)(odom->gyro.x_calibrated >> 8);
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	; 0xac
 8002e5c:	121b      	asrs	r3, r3, #8
 8002e5e:	b21b      	sxth	r3, r3
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	769a      	strb	r2, [r3, #26]
	packet->buffer[19] = (uint8_t)(odom->gyro.x_calibrated & 0x00FF);
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	; 0xac
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	76da      	strb	r2, [r3, #27]

	packet->buffer[20] = (uint8_t)(odom->gyro.y_calibrated >> 8);
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	f9b3 30ae 	ldrsh.w	r3, [r3, #174]	; 0xae
 8002e78:	121b      	asrs	r3, r3, #8
 8002e7a:	b21b      	sxth	r3, r3
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	771a      	strb	r2, [r3, #28]
	packet->buffer[21] = (uint8_t)(odom->gyro.y_calibrated & 0x00FF);
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	f9b3 30ae 	ldrsh.w	r3, [r3, #174]	; 0xae
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	775a      	strb	r2, [r3, #29]

	packet->buffer[22] = (uint8_t)(odom->gyro.z_calibrated >> 8);
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	f9b3 30b0 	ldrsh.w	r3, [r3, #176]	; 0xb0
 8002e94:	121b      	asrs	r3, r3, #8
 8002e96:	b21b      	sxth	r3, r3
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	779a      	strb	r2, [r3, #30]
	packet->buffer[23] = (uint8_t)(odom->gyro.z_calibrated & 0x00FF);
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	f9b3 30b0 	ldrsh.w	r3, [r3, #176]	; 0xb0
 8002ea4:	b2da      	uxtb	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	77da      	strb	r2, [r3, #31]

	packet->buffer[24] = (uint8_t)(odom->angle.x >> 8);
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 8002eb0:	121b      	asrs	r3, r3, #8
 8002eb2:	b21b      	sxth	r3, r3
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f883 2020 	strb.w	r2, [r3, #32]
	packet->buffer[25] = (uint8_t)(odom->angle.x & 0x00FF);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	packet->buffer[26] = (uint8_t)(odom->angle.y >> 8);
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 8002ed0:	121b      	asrs	r3, r3, #8
 8002ed2:	b21b      	sxth	r3, r3
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	packet->buffer[27] = (uint8_t)(odom->angle.y & 0x00FF);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	packet->buffer[28] = (uint8_t)(odom->mag.heading >> 8);
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 8002ef0:	121b      	asrs	r3, r3, #8
 8002ef2:	b21b      	sxth	r3, r3
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	packet->buffer[29] = (uint8_t)(odom->mag.heading & 0x00FF);
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	LRL_UpdateCRC(0, packet->buffer, 30,_tmp_crc);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f103 0108 	add.w	r1, r3, #8
 8002f10:	89fb      	ldrh	r3, [r7, #14]
 8002f12:	221e      	movs	r2, #30
 8002f14:	2000      	movs	r0, #0
 8002f16:	f7ff fef3 	bl	8002d00 <LRL_UpdateCRC>

	packet->buffer[30] = (uint8_t)(_tmp_crc >> 8);
 8002f1a:	89fb      	ldrh	r3, [r7, #14]
 8002f1c:	0a1b      	lsrs	r3, r3, #8
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	b2da      	uxtb	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	packet->buffer[31] = (uint8_t)(_tmp_crc & 0x00FF);
 8002f28:	89fb      	ldrh	r3, [r7, #14]
 8002f2a:	b2da      	uxtb	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	HAL_UART_Transmit_IT(packet->huart, packet->buffer, 32);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6818      	ldr	r0, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	3308      	adds	r3, #8
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	f005 fdf8 	bl	8008b32 <HAL_UART_Transmit_IT>
//	HAL_UART_Transmit(&huart1, _buffer, 26,10);

}
 8002f42:	bf00      	nop
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
	...

08002f4c <LRL_handShake>:

	}
}

void LRL_handShake(packet_cfgType *packet)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
	int _out = 0;
 8002f54:	2300      	movs	r3, #0
 8002f56:	60fb      	str	r3, [r7, #12]
	while(_out != 1)
 8002f58:	e016      	b.n	8002f88 <LRL_handShake+0x3c>
	{
		HAL_UART_Transmit(packet->huart,&_ack_data,5,10);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6818      	ldr	r0, [r3, #0]
 8002f5e:	230a      	movs	r3, #10
 8002f60:	2205      	movs	r2, #5
 8002f62:	4910      	ldr	r1, [pc, #64]	; (8002fa4 <LRL_handShake+0x58>)
 8002f64:	f005 fcb1 	bl	80088ca <HAL_UART_Transmit>
		HAL_UART_Receive(packet->huart, &packet->ack, 1,10);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6818      	ldr	r0, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f103 0198 	add.w	r1, r3, #152	; 0x98
 8002f72:	230a      	movs	r3, #10
 8002f74:	2201      	movs	r2, #1
 8002f76:	f005 fd3a 	bl	80089ee <HAL_UART_Receive>
		if(packet->ack == 0x45)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002f80:	2b45      	cmp	r3, #69	; 0x45
 8002f82:	d101      	bne.n	8002f88 <LRL_handShake+0x3c>
		{
			_out = 1;
 8002f84:	2301      	movs	r3, #1
 8002f86:	60fb      	str	r3, [r7, #12]
	while(_out != 1)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d1e5      	bne.n	8002f5a <LRL_handShake+0xe>
		}
//		HAL_Delay(500);
	}
	// this is for connection establishment alert
	HAL_UART_Transmit(&huart1,"The transmission has been established",sizeof("The transmission has been established"),10);
 8002f8e:	230a      	movs	r3, #10
 8002f90:	2226      	movs	r2, #38	; 0x26
 8002f92:	4905      	ldr	r1, [pc, #20]	; (8002fa8 <LRL_handShake+0x5c>)
 8002f94:	4805      	ldr	r0, [pc, #20]	; (8002fac <LRL_handShake+0x60>)
 8002f96:	f005 fc98 	bl	80088ca <HAL_UART_Transmit>

}
 8002f9a:	bf00      	nop
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	20000274 	.word	0x20000274
 8002fa8:	0800ec80 	.word	0x0800ec80
 8002fac:	20000b54 	.word	0x20000b54

08002fb0 <LRL_PID_Init>:
#include "pid.h"
#include "main.h"


void LRL_PID_Init(pid_cfgType *pid_cfg,uint8_t AntiWindup)
	{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	70fb      	strb	r3, [r7, #3]
	// Resetting the PID parameters
	pid_cfg->Anti_windup_EN = AntiWindup;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	78fa      	ldrb	r2, [r7, #3]
 8002fc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pid_cfg->Prev_Measurement = 0.0f;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	839a      	strh	r2, [r3, #28]
	pid_cfg->Integrator_Amount = 0;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	615a      	str	r2, [r3, #20]
	pid_cfg->Prev_Error = 0.0f;// initial error you can change it if by default you have an error
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	621a      	str	r2, [r3, #32]
	pid_cfg->Control_Signal = 0;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
	...

08002ff0 <LRL_PID_Update>:

void LRL_PID_Update(pid_cfgType *pid_cfg, int16_t measurement, int16_t set_point)
	{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b087      	sub	sp, #28
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	817b      	strh	r3, [r7, #10]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	813b      	strh	r3, [r7, #8]
	int8_t _dir;

	_dir = set_point / abs(set_point);
 8003000:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003004:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003008:	2a00      	cmp	r2, #0
 800300a:	bfb8      	it	lt
 800300c:	4252      	neglt	r2, r2
 800300e:	b292      	uxth	r2, r2
 8003010:	fb93 f3f2 	sdiv	r3, r3, r2
 8003014:	75fb      	strb	r3, [r7, #23]

	measurement = abs(measurement);
 8003016:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800301a:	2b00      	cmp	r3, #0
 800301c:	bfb8      	it	lt
 800301e:	425b      	neglt	r3, r3
 8003020:	b29b      	uxth	r3, r3
 8003022:	817b      	strh	r3, [r7, #10]
	set_point = abs(set_point);
 8003024:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003028:	2b00      	cmp	r3, #0
 800302a:	bfb8      	it	lt
 800302c:	425b      	neglt	r3, r3
 800302e:	b29b      	uxth	r3, r3
 8003030:	813b      	strh	r3, [r7, #8]

	pid_cfg->Error = set_point - measurement;
 8003032:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003036:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	ee07 3a90 	vmov	s15, r3
 8003040:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	pid_cfg->Error = pid_cfg->Error * Speed2PWM_Rate;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003050:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8003198 <LRL_PID_Update+0x1a8>
 8003054:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003058:	eddf 6a50 	vldr	s13, [pc, #320]	; 800319c <LRL_PID_Update+0x1ac>
 800305c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c


	// Setting Values
//	float P = pid_cfg->Kp * pid_cfg->Error;
	pid_cfg->Integrator_Amount += (pid_cfg->Ts*(pid_cfg->Ki * (pid_cfg->Error + pid_cfg->Prev_Error)));
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	ed93 7a05 	vldr	s14, [r3, #20]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	edd3 6a03 	vldr	s13, [r3, #12]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	ed93 6a01 	vldr	s12, [r3, #4]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	edd3 5a0b 	vldr	s11, [r3, #44]	; 0x2c
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	edd3 7a08 	vldr	s15, [r3, #32]
 8003084:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8003088:	ee66 7a27 	vmul.f32	s15, s12, s15
 800308c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003090:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	edc3 7a05 	vstr	s15, [r3, #20]
//	float I = pid_cfg->Integrator_Amount;
	pid_cfg->Differentiator_Amount = 0;//pid_cfg->Kd * (measurement - pid_cfg->Prev_Measurement)/(pid_cfg->Ts);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f04f 0200 	mov.w	r2, #0
 80030a0:	619a      	str	r2, [r3, #24]
                        + (2.0f * pid->tau - pid->T) * pid->differentiator)
                        / (2.0f * pid->tau + pid->T);
     */


	pid_cfg->Control_Signal = (pid_cfg->Kp * pid_cfg->Error) + pid_cfg->Integrator_Amount + pid_cfg->Differentiator_Amount;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	ed93 7a00 	vldr	s14, [r3]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80030ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	edd3 7a05 	vldr	s15, [r3, #20]
 80030b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	edd3 7a06 	vldr	s15, [r3, #24]
 80030c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030ca:	edc7 7a01 	vstr	s15, [r7, #4]
 80030ce:	793b      	ldrb	r3, [r7, #4]
 80030d0:	b25a      	sxtb	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if(pid_cfg->Anti_windup_EN == 1)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d124      	bne.n	800312c <LRL_PID_Update+0x13c>
	{

		if(pid_cfg->Control_Signal <= Upper_Saturation_Limit)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 80030e8:	2b64      	cmp	r3, #100	; 0x64
 80030ea:	dc04      	bgt.n	80030f6 <LRL_PID_Update+0x106>
			{
			//pid_cfg->Integrator_Amount += (pid_cfg->Ts*(pid_cfg->Ki * (pid_cfg->Error + pid_cfg->Prev_Error)));
			pid_cfg->Wind_Up_Amount = pid_cfg->Integrator_Amount;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	695a      	ldr	r2, [r3, #20]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	629a      	str	r2, [r3, #40]	; 0x28
 80030f4:	e01a      	b.n	800312c <LRL_PID_Update+0x13c>
			}
		else
			{
			pid_cfg->Control_Signal = (pid_cfg->Kp * pid_cfg->Error) + pid_cfg->Wind_Up_Amount + pid_cfg->Differentiator_Amount;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	ed93 7a00 	vldr	s14, [r3]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003102:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800310c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	edd3 7a06 	vldr	s15, [r3, #24]
 8003116:	ee77 7a27 	vadd.f32	s15, s14, s15
 800311a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800311e:	edc7 7a01 	vstr	s15, [r7, #4]
 8003122:	793b      	ldrb	r3, [r7, #4]
 8003124:	b25a      	sxtb	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}


	//pid_cfg->Control_Signal = (pid_cfg->Kp * pid_cfg->Error) + pid_cfg->Integrator_Amount + pid_cfg->Differentiator_Amount;

	if(pid_cfg->Control_Signal > pid_cfg->Upper_Limit_Saturation)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f993 2024 	ldrsb.w	r2, [r3, #36]	; 0x24
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8003138:	429a      	cmp	r2, r3
 800313a:	dd06      	ble.n	800314a <LRL_PID_Update+0x15a>
	  {
		pid_cfg->Control_Signal = pid_cfg->Upper_Limit_Saturation;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f993 2011 	ldrsb.w	r2, [r3, #17]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003148:	e00d      	b.n	8003166 <LRL_PID_Update+0x176>
	  }
	else if(pid_cfg->Control_Signal < pid_cfg->Lower_Limit_Saturation)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f993 2024 	ldrsb.w	r2, [r3, #36]	; 0x24
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8003156:	429a      	cmp	r2, r3
 8003158:	da05      	bge.n	8003166 <LRL_PID_Update+0x176>
	  {
		pid_cfg->Control_Signal = pid_cfg->Lower_Limit_Saturation;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f993 2010 	ldrsb.w	r2, [r3, #16]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  }

	pid_cfg->Control_Signal = pid_cfg->Control_Signal * _dir;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 800316c:	b2da      	uxtb	r2, r3
 800316e:	7dfb      	ldrb	r3, [r7, #23]
 8003170:	fb12 f303 	smulbb	r3, r2, r3
 8003174:	b2db      	uxtb	r3, r3
 8003176:	b25a      	sxtb	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pid_cfg->Prev_Measurement = measurement;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	897a      	ldrh	r2, [r7, #10]
 8003182:	839a      	strh	r2, [r3, #28]
	pid_cfg->Prev_Error = pid_cfg->Error;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	621a      	str	r2, [r3, #32]


	}
 800318c:	bf00      	nop
 800318e:	371c      	adds	r7, #28
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr
 8003198:	42960000 	.word	0x42960000
 800319c:	435a0000 	.word	0x435a0000

080031a0 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80031a4:	4b17      	ldr	r3, [pc, #92]	; (8003204 <MX_SPI2_Init+0x64>)
 80031a6:	4a18      	ldr	r2, [pc, #96]	; (8003208 <MX_SPI2_Init+0x68>)
 80031a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80031aa:	4b16      	ldr	r3, [pc, #88]	; (8003204 <MX_SPI2_Init+0x64>)
 80031ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80031b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80031b2:	4b14      	ldr	r3, [pc, #80]	; (8003204 <MX_SPI2_Init+0x64>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80031b8:	4b12      	ldr	r3, [pc, #72]	; (8003204 <MX_SPI2_Init+0x64>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80031be:	4b11      	ldr	r3, [pc, #68]	; (8003204 <MX_SPI2_Init+0x64>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80031c4:	4b0f      	ldr	r3, [pc, #60]	; (8003204 <MX_SPI2_Init+0x64>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80031ca:	4b0e      	ldr	r3, [pc, #56]	; (8003204 <MX_SPI2_Init+0x64>)
 80031cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031d0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031d2:	4b0c      	ldr	r3, [pc, #48]	; (8003204 <MX_SPI2_Init+0x64>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80031d8:	4b0a      	ldr	r3, [pc, #40]	; (8003204 <MX_SPI2_Init+0x64>)
 80031da:	2200      	movs	r2, #0
 80031dc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80031de:	4b09      	ldr	r3, [pc, #36]	; (8003204 <MX_SPI2_Init+0x64>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031e4:	4b07      	ldr	r3, [pc, #28]	; (8003204 <MX_SPI2_Init+0x64>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80031ea:	4b06      	ldr	r3, [pc, #24]	; (8003204 <MX_SPI2_Init+0x64>)
 80031ec:	220a      	movs	r2, #10
 80031ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80031f0:	4804      	ldr	r0, [pc, #16]	; (8003204 <MX_SPI2_Init+0x64>)
 80031f2:	f003 febd 	bl	8006f70 <HAL_SPI_Init>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80031fc:	f7fe fc22 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003200:	bf00      	nop
 8003202:	bd80      	pop	{r7, pc}
 8003204:	200008a8 	.word	0x200008a8
 8003208:	40003800 	.word	0x40003800

0800320c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8003210:	4b17      	ldr	r3, [pc, #92]	; (8003270 <MX_SPI3_Init+0x64>)
 8003212:	4a18      	ldr	r2, [pc, #96]	; (8003274 <MX_SPI3_Init+0x68>)
 8003214:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003216:	4b16      	ldr	r3, [pc, #88]	; (8003270 <MX_SPI3_Init+0x64>)
 8003218:	f44f 7282 	mov.w	r2, #260	; 0x104
 800321c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800321e:	4b14      	ldr	r3, [pc, #80]	; (8003270 <MX_SPI3_Init+0x64>)
 8003220:	2200      	movs	r2, #0
 8003222:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003224:	4b12      	ldr	r3, [pc, #72]	; (8003270 <MX_SPI3_Init+0x64>)
 8003226:	2200      	movs	r2, #0
 8003228:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800322a:	4b11      	ldr	r3, [pc, #68]	; (8003270 <MX_SPI3_Init+0x64>)
 800322c:	2200      	movs	r2, #0
 800322e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003230:	4b0f      	ldr	r3, [pc, #60]	; (8003270 <MX_SPI3_Init+0x64>)
 8003232:	2200      	movs	r2, #0
 8003234:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003236:	4b0e      	ldr	r3, [pc, #56]	; (8003270 <MX_SPI3_Init+0x64>)
 8003238:	f44f 7200 	mov.w	r2, #512	; 0x200
 800323c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800323e:	4b0c      	ldr	r3, [pc, #48]	; (8003270 <MX_SPI3_Init+0x64>)
 8003240:	2200      	movs	r2, #0
 8003242:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003244:	4b0a      	ldr	r3, [pc, #40]	; (8003270 <MX_SPI3_Init+0x64>)
 8003246:	2200      	movs	r2, #0
 8003248:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800324a:	4b09      	ldr	r3, [pc, #36]	; (8003270 <MX_SPI3_Init+0x64>)
 800324c:	2200      	movs	r2, #0
 800324e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003250:	4b07      	ldr	r3, [pc, #28]	; (8003270 <MX_SPI3_Init+0x64>)
 8003252:	2200      	movs	r2, #0
 8003254:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003256:	4b06      	ldr	r3, [pc, #24]	; (8003270 <MX_SPI3_Init+0x64>)
 8003258:	220a      	movs	r2, #10
 800325a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800325c:	4804      	ldr	r0, [pc, #16]	; (8003270 <MX_SPI3_Init+0x64>)
 800325e:	f003 fe87 	bl	8006f70 <HAL_SPI_Init>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003268:	f7fe fbec 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800326c:	bf00      	nop
 800326e:	bd80      	pop	{r7, pc}
 8003270:	20000900 	.word	0x20000900
 8003274:	40003c00 	.word	0x40003c00

08003278 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b08c      	sub	sp, #48	; 0x30
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003280:	f107 031c 	add.w	r3, r7, #28
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	605a      	str	r2, [r3, #4]
 800328a:	609a      	str	r2, [r3, #8]
 800328c:	60da      	str	r2, [r3, #12]
 800328e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a42      	ldr	r2, [pc, #264]	; (80033a0 <HAL_SPI_MspInit+0x128>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d14b      	bne.n	8003332 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800329a:	2300      	movs	r3, #0
 800329c:	61bb      	str	r3, [r7, #24]
 800329e:	4b41      	ldr	r3, [pc, #260]	; (80033a4 <HAL_SPI_MspInit+0x12c>)
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	4a40      	ldr	r2, [pc, #256]	; (80033a4 <HAL_SPI_MspInit+0x12c>)
 80032a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032a8:	6413      	str	r3, [r2, #64]	; 0x40
 80032aa:	4b3e      	ldr	r3, [pc, #248]	; (80033a4 <HAL_SPI_MspInit+0x12c>)
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032b2:	61bb      	str	r3, [r7, #24]
 80032b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032b6:	2300      	movs	r3, #0
 80032b8:	617b      	str	r3, [r7, #20]
 80032ba:	4b3a      	ldr	r3, [pc, #232]	; (80033a4 <HAL_SPI_MspInit+0x12c>)
 80032bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032be:	4a39      	ldr	r2, [pc, #228]	; (80033a4 <HAL_SPI_MspInit+0x12c>)
 80032c0:	f043 0304 	orr.w	r3, r3, #4
 80032c4:	6313      	str	r3, [r2, #48]	; 0x30
 80032c6:	4b37      	ldr	r3, [pc, #220]	; (80033a4 <HAL_SPI_MspInit+0x12c>)
 80032c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ca:	f003 0304 	and.w	r3, r3, #4
 80032ce:	617b      	str	r3, [r7, #20]
 80032d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032d2:	2300      	movs	r3, #0
 80032d4:	613b      	str	r3, [r7, #16]
 80032d6:	4b33      	ldr	r3, [pc, #204]	; (80033a4 <HAL_SPI_MspInit+0x12c>)
 80032d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032da:	4a32      	ldr	r2, [pc, #200]	; (80033a4 <HAL_SPI_MspInit+0x12c>)
 80032dc:	f043 0302 	orr.w	r3, r3, #2
 80032e0:	6313      	str	r3, [r2, #48]	; 0x30
 80032e2:	4b30      	ldr	r3, [pc, #192]	; (80033a4 <HAL_SPI_MspInit+0x12c>)
 80032e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	613b      	str	r3, [r7, #16]
 80032ec:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = JET_SPI_MISO_Pin|JET_SPI_MOSI_Pin;
 80032ee:	230c      	movs	r3, #12
 80032f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f2:	2302      	movs	r3, #2
 80032f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f6:	2300      	movs	r3, #0
 80032f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032fa:	2303      	movs	r3, #3
 80032fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80032fe:	2305      	movs	r3, #5
 8003300:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003302:	f107 031c 	add.w	r3, r7, #28
 8003306:	4619      	mov	r1, r3
 8003308:	4827      	ldr	r0, [pc, #156]	; (80033a8 <HAL_SPI_MspInit+0x130>)
 800330a:	f001 fee3 	bl	80050d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = JET_SPI_SCK_Pin;
 800330e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003314:	2302      	movs	r3, #2
 8003316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003318:	2300      	movs	r3, #0
 800331a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800331c:	2303      	movs	r3, #3
 800331e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003320:	2305      	movs	r3, #5
 8003322:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(JET_SPI_SCK_GPIO_Port, &GPIO_InitStruct);
 8003324:	f107 031c 	add.w	r3, r7, #28
 8003328:	4619      	mov	r1, r3
 800332a:	4820      	ldr	r0, [pc, #128]	; (80033ac <HAL_SPI_MspInit+0x134>)
 800332c:	f001 fed2 	bl	80050d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8003330:	e031      	b.n	8003396 <HAL_SPI_MspInit+0x11e>
  else if(spiHandle->Instance==SPI3)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a1e      	ldr	r2, [pc, #120]	; (80033b0 <HAL_SPI_MspInit+0x138>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d12c      	bne.n	8003396 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800333c:	2300      	movs	r3, #0
 800333e:	60fb      	str	r3, [r7, #12]
 8003340:	4b18      	ldr	r3, [pc, #96]	; (80033a4 <HAL_SPI_MspInit+0x12c>)
 8003342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003344:	4a17      	ldr	r2, [pc, #92]	; (80033a4 <HAL_SPI_MspInit+0x12c>)
 8003346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800334a:	6413      	str	r3, [r2, #64]	; 0x40
 800334c:	4b15      	ldr	r3, [pc, #84]	; (80033a4 <HAL_SPI_MspInit+0x12c>)
 800334e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003350:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003354:	60fb      	str	r3, [r7, #12]
 8003356:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003358:	2300      	movs	r3, #0
 800335a:	60bb      	str	r3, [r7, #8]
 800335c:	4b11      	ldr	r3, [pc, #68]	; (80033a4 <HAL_SPI_MspInit+0x12c>)
 800335e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003360:	4a10      	ldr	r2, [pc, #64]	; (80033a4 <HAL_SPI_MspInit+0x12c>)
 8003362:	f043 0304 	orr.w	r3, r3, #4
 8003366:	6313      	str	r3, [r2, #48]	; 0x30
 8003368:	4b0e      	ldr	r3, [pc, #56]	; (80033a4 <HAL_SPI_MspInit+0x12c>)
 800336a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	60bb      	str	r3, [r7, #8]
 8003372:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003374:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800337a:	2302      	movs	r3, #2
 800337c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337e:	2300      	movs	r3, #0
 8003380:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003382:	2303      	movs	r3, #3
 8003384:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003386:	2306      	movs	r3, #6
 8003388:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800338a:	f107 031c 	add.w	r3, r7, #28
 800338e:	4619      	mov	r1, r3
 8003390:	4805      	ldr	r0, [pc, #20]	; (80033a8 <HAL_SPI_MspInit+0x130>)
 8003392:	f001 fe9f 	bl	80050d4 <HAL_GPIO_Init>
}
 8003396:	bf00      	nop
 8003398:	3730      	adds	r7, #48	; 0x30
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	40003800 	.word	0x40003800
 80033a4:	40023800 	.word	0x40023800
 80033a8:	40020800 	.word	0x40020800
 80033ac:	40020400 	.word	0x40020400
 80033b0:	40003c00 	.word	0x40003c00

080033b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ba:	2300      	movs	r3, #0
 80033bc:	607b      	str	r3, [r7, #4]
 80033be:	4b10      	ldr	r3, [pc, #64]	; (8003400 <HAL_MspInit+0x4c>)
 80033c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c2:	4a0f      	ldr	r2, [pc, #60]	; (8003400 <HAL_MspInit+0x4c>)
 80033c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033c8:	6453      	str	r3, [r2, #68]	; 0x44
 80033ca:	4b0d      	ldr	r3, [pc, #52]	; (8003400 <HAL_MspInit+0x4c>)
 80033cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033d2:	607b      	str	r3, [r7, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033d6:	2300      	movs	r3, #0
 80033d8:	603b      	str	r3, [r7, #0]
 80033da:	4b09      	ldr	r3, [pc, #36]	; (8003400 <HAL_MspInit+0x4c>)
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	4a08      	ldr	r2, [pc, #32]	; (8003400 <HAL_MspInit+0x4c>)
 80033e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033e4:	6413      	str	r3, [r2, #64]	; 0x40
 80033e6:	4b06      	ldr	r3, [pc, #24]	; (8003400 <HAL_MspInit+0x4c>)
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ee:	603b      	str	r3, [r7, #0]
 80033f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	40023800 	.word	0x40023800

08003404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003408:	e7fe      	b.n	8003408 <NMI_Handler+0x4>

0800340a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800340a:	b480      	push	{r7}
 800340c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800340e:	e7fe      	b.n	800340e <HardFault_Handler+0x4>

08003410 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003414:	e7fe      	b.n	8003414 <MemManage_Handler+0x4>

08003416 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003416:	b480      	push	{r7}
 8003418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800341a:	e7fe      	b.n	800341a <BusFault_Handler+0x4>

0800341c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003420:	e7fe      	b.n	8003420 <UsageFault_Handler+0x4>

08003422 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003422:	b480      	push	{r7}
 8003424:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003426:	bf00      	nop
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003434:	bf00      	nop
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800343e:	b480      	push	{r7}
 8003440:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003442:	bf00      	nop
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003450:	f000 fece 	bl	80041f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003454:	bf00      	nop
 8003456:	bd80      	pop	{r7, pc}

08003458 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800345c:	4802      	ldr	r0, [pc, #8]	; (8003468 <TIM4_IRQHandler+0x10>)
 800345e:	f004 f974 	bl	800774a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003462:	bf00      	nop
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	20000a34 	.word	0x20000a34

0800346c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003470:	4802      	ldr	r0, [pc, #8]	; (800347c <USART1_IRQHandler+0x10>)
 8003472:	f005 fbd3 	bl	8008c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003476:	bf00      	nop
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	20000b54 	.word	0x20000b54

08003480 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003484:	4802      	ldr	r0, [pc, #8]	; (8003490 <USART2_IRQHandler+0x10>)
 8003486:	f005 fbc9 	bl	8008c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800348a:	bf00      	nop
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	20000b98 	.word	0x20000b98

08003494 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003498:	4802      	ldr	r0, [pc, #8]	; (80034a4 <TIM5_IRQHandler+0x10>)
 800349a:	f004 f956 	bl	800774a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800349e:	bf00      	nop
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	20000a7c 	.word	0x20000a7c

080034a8 <_getpid>:
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	2301      	movs	r3, #1
 80034ae:	4618      	mov	r0, r3
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <_kill>:
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
 80034c2:	f006 fb13 	bl	8009aec <__errno>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2216      	movs	r2, #22
 80034ca:	601a      	str	r2, [r3, #0]
 80034cc:	f04f 33ff 	mov.w	r3, #4294967295
 80034d0:	4618      	mov	r0, r3
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <_exit>:
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	f04f 31ff 	mov.w	r1, #4294967295
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7ff ffe7 	bl	80034b8 <_kill>
 80034ea:	e7fe      	b.n	80034ea <_exit+0x12>

080034ec <_read>:
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
 80034f8:	2300      	movs	r3, #0
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	e00a      	b.n	8003514 <_read+0x28>
 80034fe:	f3af 8000 	nop.w
 8003502:	4601      	mov	r1, r0
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	1c5a      	adds	r2, r3, #1
 8003508:	60ba      	str	r2, [r7, #8]
 800350a:	b2ca      	uxtb	r2, r1
 800350c:	701a      	strb	r2, [r3, #0]
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	3301      	adds	r3, #1
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	429a      	cmp	r2, r3
 800351a:	dbf0      	blt.n	80034fe <_read+0x12>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4618      	mov	r0, r3
 8003520:	3718      	adds	r7, #24
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <_write>:
 8003526:	b580      	push	{r7, lr}
 8003528:	b086      	sub	sp, #24
 800352a:	af00      	add	r7, sp, #0
 800352c:	60f8      	str	r0, [r7, #12]
 800352e:	60b9      	str	r1, [r7, #8]
 8003530:	607a      	str	r2, [r7, #4]
 8003532:	2300      	movs	r3, #0
 8003534:	617b      	str	r3, [r7, #20]
 8003536:	e009      	b.n	800354c <_write+0x26>
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	1c5a      	adds	r2, r3, #1
 800353c:	60ba      	str	r2, [r7, #8]
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	4618      	mov	r0, r3
 8003542:	f7fe f8bd 	bl	80016c0 <__io_putchar>
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	3301      	adds	r3, #1
 800354a:	617b      	str	r3, [r7, #20]
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	429a      	cmp	r2, r3
 8003552:	dbf1      	blt.n	8003538 <_write+0x12>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4618      	mov	r0, r3
 8003558:	3718      	adds	r7, #24
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <_close>:
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
 8003566:	f04f 33ff 	mov.w	r3, #4294967295
 800356a:	4618      	mov	r0, r3
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <_fstat>:
 8003576:	b480      	push	{r7}
 8003578:	b083      	sub	sp, #12
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
 800357e:	6039      	str	r1, [r7, #0]
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003586:	605a      	str	r2, [r3, #4]
 8003588:	2300      	movs	r3, #0
 800358a:	4618      	mov	r0, r3
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <_isatty>:
 8003596:	b480      	push	{r7}
 8003598:	b083      	sub	sp, #12
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
 800359e:	2301      	movs	r3, #1
 80035a0:	4618      	mov	r0, r3
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <_lseek>:
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
 80035b8:	2300      	movs	r3, #0
 80035ba:	4618      	mov	r0, r3
 80035bc:	3714      	adds	r7, #20
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
	...

080035c8 <_sbrk>:
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	4a14      	ldr	r2, [pc, #80]	; (8003624 <_sbrk+0x5c>)
 80035d2:	4b15      	ldr	r3, [pc, #84]	; (8003628 <_sbrk+0x60>)
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	617b      	str	r3, [r7, #20]
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	613b      	str	r3, [r7, #16]
 80035dc:	4b13      	ldr	r3, [pc, #76]	; (800362c <_sbrk+0x64>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d102      	bne.n	80035ea <_sbrk+0x22>
 80035e4:	4b11      	ldr	r3, [pc, #68]	; (800362c <_sbrk+0x64>)
 80035e6:	4a12      	ldr	r2, [pc, #72]	; (8003630 <_sbrk+0x68>)
 80035e8:	601a      	str	r2, [r3, #0]
 80035ea:	4b10      	ldr	r3, [pc, #64]	; (800362c <_sbrk+0x64>)
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4413      	add	r3, r2
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d207      	bcs.n	8003608 <_sbrk+0x40>
 80035f8:	f006 fa78 	bl	8009aec <__errno>
 80035fc:	4603      	mov	r3, r0
 80035fe:	220c      	movs	r2, #12
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	f04f 33ff 	mov.w	r3, #4294967295
 8003606:	e009      	b.n	800361c <_sbrk+0x54>
 8003608:	4b08      	ldr	r3, [pc, #32]	; (800362c <_sbrk+0x64>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	60fb      	str	r3, [r7, #12]
 800360e:	4b07      	ldr	r3, [pc, #28]	; (800362c <_sbrk+0x64>)
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4413      	add	r3, r2
 8003616:	4a05      	ldr	r2, [pc, #20]	; (800362c <_sbrk+0x64>)
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	4618      	mov	r0, r3
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	20020000 	.word	0x20020000
 8003628:	00000400 	.word	0x00000400
 800362c:	20000958 	.word	0x20000958
 8003630:	20000bf0 	.word	0x20000bf0

08003634 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003638:	4b06      	ldr	r3, [pc, #24]	; (8003654 <SystemInit+0x20>)
 800363a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800363e:	4a05      	ldr	r2, [pc, #20]	; (8003654 <SystemInit+0x20>)
 8003640:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003644:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003648:	bf00      	nop
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	e000ed00 	.word	0xe000ed00

08003658 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800365e:	f107 0308 	add.w	r3, r7, #8
 8003662:	2200      	movs	r2, #0
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	605a      	str	r2, [r3, #4]
 8003668:	609a      	str	r2, [r3, #8]
 800366a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800366c:	463b      	mov	r3, r7
 800366e:	2200      	movs	r2, #0
 8003670:	601a      	str	r2, [r3, #0]
 8003672:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003674:	4b1e      	ldr	r3, [pc, #120]	; (80036f0 <MX_TIM1_Init+0x98>)
 8003676:	4a1f      	ldr	r2, [pc, #124]	; (80036f4 <MX_TIM1_Init+0x9c>)
 8003678:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 800367a:	4b1d      	ldr	r3, [pc, #116]	; (80036f0 <MX_TIM1_Init+0x98>)
 800367c:	22a7      	movs	r2, #167	; 0xa7
 800367e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003680:	4b1b      	ldr	r3, [pc, #108]	; (80036f0 <MX_TIM1_Init+0x98>)
 8003682:	2200      	movs	r2, #0
 8003684:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003686:	4b1a      	ldr	r3, [pc, #104]	; (80036f0 <MX_TIM1_Init+0x98>)
 8003688:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800368c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800368e:	4b18      	ldr	r3, [pc, #96]	; (80036f0 <MX_TIM1_Init+0x98>)
 8003690:	2200      	movs	r2, #0
 8003692:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003694:	4b16      	ldr	r3, [pc, #88]	; (80036f0 <MX_TIM1_Init+0x98>)
 8003696:	2200      	movs	r2, #0
 8003698:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800369a:	4b15      	ldr	r3, [pc, #84]	; (80036f0 <MX_TIM1_Init+0x98>)
 800369c:	2200      	movs	r2, #0
 800369e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80036a0:	4813      	ldr	r0, [pc, #76]	; (80036f0 <MX_TIM1_Init+0x98>)
 80036a2:	f003 fcee 	bl	8007082 <HAL_TIM_Base_Init>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80036ac:	f7fe f9ca 	bl	8001a44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80036b6:	f107 0308 	add.w	r3, r7, #8
 80036ba:	4619      	mov	r1, r3
 80036bc:	480c      	ldr	r0, [pc, #48]	; (80036f0 <MX_TIM1_Init+0x98>)
 80036be:	f004 faab 	bl	8007c18 <HAL_TIM_ConfigClockSource>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80036c8:	f7fe f9bc 	bl	8001a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036cc:	2300      	movs	r3, #0
 80036ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036d0:	2300      	movs	r3, #0
 80036d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80036d4:	463b      	mov	r3, r7
 80036d6:	4619      	mov	r1, r3
 80036d8:	4805      	ldr	r0, [pc, #20]	; (80036f0 <MX_TIM1_Init+0x98>)
 80036da:	f004 ffc7 	bl	800866c <HAL_TIMEx_MasterConfigSynchronization>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80036e4:	f7fe f9ae 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80036e8:	bf00      	nop
 80036ea:	3718      	adds	r7, #24
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	2000095c 	.word	0x2000095c
 80036f4:	40010000 	.word	0x40010000

080036f8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b08c      	sub	sp, #48	; 0x30
 80036fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80036fe:	f107 030c 	add.w	r3, r7, #12
 8003702:	2224      	movs	r2, #36	; 0x24
 8003704:	2100      	movs	r1, #0
 8003706:	4618      	mov	r0, r3
 8003708:	f006 fa1a 	bl	8009b40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800370c:	1d3b      	adds	r3, r7, #4
 800370e:	2200      	movs	r2, #0
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003714:	4b21      	ldr	r3, [pc, #132]	; (800379c <MX_TIM2_Init+0xa4>)
 8003716:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800371a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800371c:	4b1f      	ldr	r3, [pc, #124]	; (800379c <MX_TIM2_Init+0xa4>)
 800371e:	2200      	movs	r2, #0
 8003720:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003722:	4b1e      	ldr	r3, [pc, #120]	; (800379c <MX_TIM2_Init+0xa4>)
 8003724:	2200      	movs	r2, #0
 8003726:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 48960;
 8003728:	4b1c      	ldr	r3, [pc, #112]	; (800379c <MX_TIM2_Init+0xa4>)
 800372a:	f64b 7240 	movw	r2, #48960	; 0xbf40
 800372e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003730:	4b1a      	ldr	r3, [pc, #104]	; (800379c <MX_TIM2_Init+0xa4>)
 8003732:	2200      	movs	r2, #0
 8003734:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003736:	4b19      	ldr	r3, [pc, #100]	; (800379c <MX_TIM2_Init+0xa4>)
 8003738:	2280      	movs	r2, #128	; 0x80
 800373a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800373c:	2303      	movs	r3, #3
 800373e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003740:	2300      	movs	r3, #0
 8003742:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003744:	2301      	movs	r3, #1
 8003746:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003748:	2300      	movs	r3, #0
 800374a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800374c:	230a      	movs	r3, #10
 800374e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003750:	2300      	movs	r3, #0
 8003752:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003754:	2301      	movs	r3, #1
 8003756:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003758:	2300      	movs	r3, #0
 800375a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800375c:	230a      	movs	r3, #10
 800375e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003760:	f107 030c 	add.w	r3, r7, #12
 8003764:	4619      	mov	r1, r3
 8003766:	480d      	ldr	r0, [pc, #52]	; (800379c <MX_TIM2_Init+0xa4>)
 8003768:	f003 febb 	bl	80074e2 <HAL_TIM_Encoder_Init>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8003772:	f7fe f967 	bl	8001a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003776:	2300      	movs	r3, #0
 8003778:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800377a:	2300      	movs	r3, #0
 800377c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800377e:	1d3b      	adds	r3, r7, #4
 8003780:	4619      	mov	r1, r3
 8003782:	4806      	ldr	r0, [pc, #24]	; (800379c <MX_TIM2_Init+0xa4>)
 8003784:	f004 ff72 	bl	800866c <HAL_TIMEx_MasterConfigSynchronization>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800378e:	f7fe f959 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003792:	bf00      	nop
 8003794:	3730      	adds	r7, #48	; 0x30
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	200009a4 	.word	0x200009a4

080037a0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b08c      	sub	sp, #48	; 0x30
 80037a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80037a6:	f107 030c 	add.w	r3, r7, #12
 80037aa:	2224      	movs	r2, #36	; 0x24
 80037ac:	2100      	movs	r1, #0
 80037ae:	4618      	mov	r0, r3
 80037b0:	f006 f9c6 	bl	8009b40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037b4:	1d3b      	adds	r3, r7, #4
 80037b6:	2200      	movs	r2, #0
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80037bc:	4b20      	ldr	r3, [pc, #128]	; (8003840 <MX_TIM3_Init+0xa0>)
 80037be:	4a21      	ldr	r2, [pc, #132]	; (8003844 <MX_TIM3_Init+0xa4>)
 80037c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80037c2:	4b1f      	ldr	r3, [pc, #124]	; (8003840 <MX_TIM3_Init+0xa0>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037c8:	4b1d      	ldr	r3, [pc, #116]	; (8003840 <MX_TIM3_Init+0xa0>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 48960;
 80037ce:	4b1c      	ldr	r3, [pc, #112]	; (8003840 <MX_TIM3_Init+0xa0>)
 80037d0:	f64b 7240 	movw	r2, #48960	; 0xbf40
 80037d4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037d6:	4b1a      	ldr	r3, [pc, #104]	; (8003840 <MX_TIM3_Init+0xa0>)
 80037d8:	2200      	movs	r2, #0
 80037da:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80037dc:	4b18      	ldr	r3, [pc, #96]	; (8003840 <MX_TIM3_Init+0xa0>)
 80037de:	2280      	movs	r2, #128	; 0x80
 80037e0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80037e2:	2303      	movs	r3, #3
 80037e4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80037e6:	2300      	movs	r3, #0
 80037e8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80037ea:	2301      	movs	r3, #1
 80037ec:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80037ee:	2300      	movs	r3, #0
 80037f0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80037f2:	230a      	movs	r3, #10
 80037f4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80037f6:	2300      	movs	r3, #0
 80037f8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80037fa:	2301      	movs	r3, #1
 80037fc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80037fe:	2300      	movs	r3, #0
 8003800:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8003802:	230a      	movs	r3, #10
 8003804:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003806:	f107 030c 	add.w	r3, r7, #12
 800380a:	4619      	mov	r1, r3
 800380c:	480c      	ldr	r0, [pc, #48]	; (8003840 <MX_TIM3_Init+0xa0>)
 800380e:	f003 fe68 	bl	80074e2 <HAL_TIM_Encoder_Init>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003818:	f7fe f914 	bl	8001a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800381c:	2300      	movs	r3, #0
 800381e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003820:	2300      	movs	r3, #0
 8003822:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003824:	1d3b      	adds	r3, r7, #4
 8003826:	4619      	mov	r1, r3
 8003828:	4805      	ldr	r0, [pc, #20]	; (8003840 <MX_TIM3_Init+0xa0>)
 800382a:	f004 ff1f 	bl	800866c <HAL_TIMEx_MasterConfigSynchronization>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003834:	f7fe f906 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003838:	bf00      	nop
 800383a:	3730      	adds	r7, #48	; 0x30
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	200009ec 	.word	0x200009ec
 8003844:	40000400 	.word	0x40000400

08003848 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b08a      	sub	sp, #40	; 0x28
 800384c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800384e:	f107 0318 	add.w	r3, r7, #24
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	605a      	str	r2, [r3, #4]
 8003858:	609a      	str	r2, [r3, #8]
 800385a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800385c:	f107 0310 	add.w	r3, r7, #16
 8003860:	2200      	movs	r2, #0
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003866:	463b      	mov	r3, r7
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	605a      	str	r2, [r3, #4]
 800386e:	609a      	str	r2, [r3, #8]
 8003870:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003872:	4b31      	ldr	r3, [pc, #196]	; (8003938 <MX_TIM4_Init+0xf0>)
 8003874:	4a31      	ldr	r2, [pc, #196]	; (800393c <MX_TIM4_Init+0xf4>)
 8003876:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003878:	4b2f      	ldr	r3, [pc, #188]	; (8003938 <MX_TIM4_Init+0xf0>)
 800387a:	2200      	movs	r2, #0
 800387c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800387e:	4b2e      	ldr	r3, [pc, #184]	; (8003938 <MX_TIM4_Init+0xf0>)
 8003880:	2200      	movs	r2, #0
 8003882:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003884:	4b2c      	ldr	r3, [pc, #176]	; (8003938 <MX_TIM4_Init+0xf0>)
 8003886:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800388a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800388c:	4b2a      	ldr	r3, [pc, #168]	; (8003938 <MX_TIM4_Init+0xf0>)
 800388e:	2200      	movs	r2, #0
 8003890:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003892:	4b29      	ldr	r3, [pc, #164]	; (8003938 <MX_TIM4_Init+0xf0>)
 8003894:	2200      	movs	r2, #0
 8003896:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003898:	4827      	ldr	r0, [pc, #156]	; (8003938 <MX_TIM4_Init+0xf0>)
 800389a:	f003 fbf2 	bl	8007082 <HAL_TIM_Base_Init>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 80038a4:	f7fe f8ce 	bl	8001a44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038ac:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80038ae:	f107 0318 	add.w	r3, r7, #24
 80038b2:	4619      	mov	r1, r3
 80038b4:	4820      	ldr	r0, [pc, #128]	; (8003938 <MX_TIM4_Init+0xf0>)
 80038b6:	f004 f9af 	bl	8007c18 <HAL_TIM_ConfigClockSource>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80038c0:	f7fe f8c0 	bl	8001a44 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80038c4:	481c      	ldr	r0, [pc, #112]	; (8003938 <MX_TIM4_Init+0xf0>)
 80038c6:	f003 fdbd 	bl	8007444 <HAL_TIM_IC_Init>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80038d0:	f7fe f8b8 	bl	8001a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038d4:	2300      	movs	r3, #0
 80038d6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038d8:	2300      	movs	r3, #0
 80038da:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80038dc:	f107 0310 	add.w	r3, r7, #16
 80038e0:	4619      	mov	r1, r3
 80038e2:	4815      	ldr	r0, [pc, #84]	; (8003938 <MX_TIM4_Init+0xf0>)
 80038e4:	f004 fec2 	bl	800866c <HAL_TIMEx_MasterConfigSynchronization>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 80038ee:	f7fe f8a9 	bl	8001a44 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80038f2:	2300      	movs	r3, #0
 80038f4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80038f6:	2301      	movs	r3, #1
 80038f8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80038fa:	2300      	movs	r3, #0
 80038fc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80038fe:	2300      	movs	r3, #0
 8003900:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8003902:	463b      	mov	r3, r7
 8003904:	2208      	movs	r2, #8
 8003906:	4619      	mov	r1, r3
 8003908:	480b      	ldr	r0, [pc, #44]	; (8003938 <MX_TIM4_Init+0xf0>)
 800390a:	f004 f826 	bl	800795a <HAL_TIM_IC_ConfigChannel>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8003914:	f7fe f896 	bl	8001a44 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8003918:	463b      	mov	r3, r7
 800391a:	220c      	movs	r2, #12
 800391c:	4619      	mov	r1, r3
 800391e:	4806      	ldr	r0, [pc, #24]	; (8003938 <MX_TIM4_Init+0xf0>)
 8003920:	f004 f81b 	bl	800795a <HAL_TIM_IC_ConfigChannel>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <MX_TIM4_Init+0xe6>
  {
    Error_Handler();
 800392a:	f7fe f88b 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800392e:	bf00      	nop
 8003930:	3728      	adds	r7, #40	; 0x28
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	20000a34 	.word	0x20000a34
 800393c:	40000800 	.word	0x40000800

08003940 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003946:	f107 0308 	add.w	r3, r7, #8
 800394a:	2200      	movs	r2, #0
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	605a      	str	r2, [r3, #4]
 8003950:	609a      	str	r2, [r3, #8]
 8003952:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003954:	463b      	mov	r3, r7
 8003956:	2200      	movs	r2, #0
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800395c:	4b1d      	ldr	r3, [pc, #116]	; (80039d4 <MX_TIM5_Init+0x94>)
 800395e:	4a1e      	ldr	r2, [pc, #120]	; (80039d8 <MX_TIM5_Init+0x98>)
 8003960:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 10000;
 8003962:	4b1c      	ldr	r3, [pc, #112]	; (80039d4 <MX_TIM5_Init+0x94>)
 8003964:	f242 7210 	movw	r2, #10000	; 0x2710
 8003968:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800396a:	4b1a      	ldr	r3, [pc, #104]	; (80039d4 <MX_TIM5_Init+0x94>)
 800396c:	2200      	movs	r2, #0
 800396e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 83;
 8003970:	4b18      	ldr	r3, [pc, #96]	; (80039d4 <MX_TIM5_Init+0x94>)
 8003972:	2253      	movs	r2, #83	; 0x53
 8003974:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003976:	4b17      	ldr	r3, [pc, #92]	; (80039d4 <MX_TIM5_Init+0x94>)
 8003978:	2200      	movs	r2, #0
 800397a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800397c:	4b15      	ldr	r3, [pc, #84]	; (80039d4 <MX_TIM5_Init+0x94>)
 800397e:	2200      	movs	r2, #0
 8003980:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003982:	4814      	ldr	r0, [pc, #80]	; (80039d4 <MX_TIM5_Init+0x94>)
 8003984:	f003 fb7d 	bl	8007082 <HAL_TIM_Base_Init>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800398e:	f7fe f859 	bl	8001a44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003992:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003996:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003998:	f107 0308 	add.w	r3, r7, #8
 800399c:	4619      	mov	r1, r3
 800399e:	480d      	ldr	r0, [pc, #52]	; (80039d4 <MX_TIM5_Init+0x94>)
 80039a0:	f004 f93a 	bl	8007c18 <HAL_TIM_ConfigClockSource>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80039aa:	f7fe f84b 	bl	8001a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039ae:	2300      	movs	r3, #0
 80039b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039b2:	2300      	movs	r3, #0
 80039b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80039b6:	463b      	mov	r3, r7
 80039b8:	4619      	mov	r1, r3
 80039ba:	4806      	ldr	r0, [pc, #24]	; (80039d4 <MX_TIM5_Init+0x94>)
 80039bc:	f004 fe56 	bl	800866c <HAL_TIMEx_MasterConfigSynchronization>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80039c6:	f7fe f83d 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80039ca:	bf00      	nop
 80039cc:	3718      	adds	r7, #24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	20000a7c 	.word	0x20000a7c
 80039d8:	40000c00 	.word	0x40000c00

080039dc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b096      	sub	sp, #88	; 0x58
 80039e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80039e6:	2200      	movs	r2, #0
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	605a      	str	r2, [r3, #4]
 80039ec:	609a      	str	r2, [r3, #8]
 80039ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80039fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039fe:	2200      	movs	r2, #0
 8003a00:	601a      	str	r2, [r3, #0]
 8003a02:	605a      	str	r2, [r3, #4]
 8003a04:	609a      	str	r2, [r3, #8]
 8003a06:	60da      	str	r2, [r3, #12]
 8003a08:	611a      	str	r2, [r3, #16]
 8003a0a:	615a      	str	r2, [r3, #20]
 8003a0c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003a0e:	1d3b      	adds	r3, r7, #4
 8003a10:	2220      	movs	r2, #32
 8003a12:	2100      	movs	r1, #0
 8003a14:	4618      	mov	r0, r3
 8003a16:	f006 f893 	bl	8009b40 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003a1a:	4b44      	ldr	r3, [pc, #272]	; (8003b2c <MX_TIM8_Init+0x150>)
 8003a1c:	4a44      	ldr	r2, [pc, #272]	; (8003b30 <MX_TIM8_Init+0x154>)
 8003a1e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 8-1;
 8003a20:	4b42      	ldr	r3, [pc, #264]	; (8003b2c <MX_TIM8_Init+0x150>)
 8003a22:	2207      	movs	r2, #7
 8003a24:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a26:	4b41      	ldr	r3, [pc, #260]	; (8003b2c <MX_TIM8_Init+0x150>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000;
 8003a2c:	4b3f      	ldr	r3, [pc, #252]	; (8003b2c <MX_TIM8_Init+0x150>)
 8003a2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a32:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a34:	4b3d      	ldr	r3, [pc, #244]	; (8003b2c <MX_TIM8_Init+0x150>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003a3a:	4b3c      	ldr	r3, [pc, #240]	; (8003b2c <MX_TIM8_Init+0x150>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003a40:	4b3a      	ldr	r3, [pc, #232]	; (8003b2c <MX_TIM8_Init+0x150>)
 8003a42:	2280      	movs	r2, #128	; 0x80
 8003a44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003a46:	4839      	ldr	r0, [pc, #228]	; (8003b2c <MX_TIM8_Init+0x150>)
 8003a48:	f003 fb1b 	bl	8007082 <HAL_TIM_Base_Init>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8003a52:	f7fd fff7 	bl	8001a44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a5a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003a5c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003a60:	4619      	mov	r1, r3
 8003a62:	4832      	ldr	r0, [pc, #200]	; (8003b2c <MX_TIM8_Init+0x150>)
 8003a64:	f004 f8d8 	bl	8007c18 <HAL_TIM_ConfigClockSource>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8003a6e:	f7fd ffe9 	bl	8001a44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003a72:	482e      	ldr	r0, [pc, #184]	; (8003b2c <MX_TIM8_Init+0x150>)
 8003a74:	f003 fbc4 	bl	8007200 <HAL_TIM_PWM_Init>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8003a7e:	f7fd ffe1 	bl	8001a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a82:	2300      	movs	r3, #0
 8003a84:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a86:	2300      	movs	r3, #0
 8003a88:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003a8a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a8e:	4619      	mov	r1, r3
 8003a90:	4826      	ldr	r0, [pc, #152]	; (8003b2c <MX_TIM8_Init+0x150>)
 8003a92:	f004 fdeb 	bl	800866c <HAL_TIMEx_MasterConfigSynchronization>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8003a9c:	f7fd ffd2 	bl	8001a44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003aa0:	2360      	movs	r3, #96	; 0x60
 8003aa2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003aac:	2300      	movs	r3, #0
 8003aae:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	4819      	ldr	r0, [pc, #100]	; (8003b2c <MX_TIM8_Init+0x150>)
 8003ac6:	f003 ffe5 	bl	8007a94 <HAL_TIM_PWM_ConfigChannel>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8003ad0:	f7fd ffb8 	bl	8001a44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ad8:	2204      	movs	r2, #4
 8003ada:	4619      	mov	r1, r3
 8003adc:	4813      	ldr	r0, [pc, #76]	; (8003b2c <MX_TIM8_Init+0x150>)
 8003ade:	f003 ffd9 	bl	8007a94 <HAL_TIM_PWM_ConfigChannel>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d001      	beq.n	8003aec <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8003ae8:	f7fd ffac 	bl	8001a44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003aec:	2300      	movs	r3, #0
 8003aee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003af0:	2300      	movs	r3, #0
 8003af2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003af4:	2300      	movs	r3, #0
 8003af6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003af8:	2300      	movs	r3, #0
 8003afa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003afc:	2300      	movs	r3, #0
 8003afe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003b00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b04:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003b06:	2300      	movs	r3, #0
 8003b08:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003b0a:	1d3b      	adds	r3, r7, #4
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	4807      	ldr	r0, [pc, #28]	; (8003b2c <MX_TIM8_Init+0x150>)
 8003b10:	f004 fe28 	bl	8008764 <HAL_TIMEx_ConfigBreakDeadTime>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8003b1a:	f7fd ff93 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003b1e:	4803      	ldr	r0, [pc, #12]	; (8003b2c <MX_TIM8_Init+0x150>)
 8003b20:	f000 f9ce 	bl	8003ec0 <HAL_TIM_MspPostInit>

}
 8003b24:	bf00      	nop
 8003b26:	3758      	adds	r7, #88	; 0x58
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	20000ac4 	.word	0x20000ac4
 8003b30:	40010400 	.word	0x40010400

08003b34 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8003b3a:	463b      	mov	r3, r7
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	601a      	str	r2, [r3, #0]
 8003b40:	605a      	str	r2, [r3, #4]
 8003b42:	609a      	str	r2, [r3, #8]
 8003b44:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003b46:	4b1e      	ldr	r3, [pc, #120]	; (8003bc0 <MX_TIM9_Init+0x8c>)
 8003b48:	4a1e      	ldr	r2, [pc, #120]	; (8003bc4 <MX_TIM9_Init+0x90>)
 8003b4a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8003b4c:	4b1c      	ldr	r3, [pc, #112]	; (8003bc0 <MX_TIM9_Init+0x8c>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b52:	4b1b      	ldr	r3, [pc, #108]	; (8003bc0 <MX_TIM9_Init+0x8c>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8003b58:	4b19      	ldr	r3, [pc, #100]	; (8003bc0 <MX_TIM9_Init+0x8c>)
 8003b5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b5e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b60:	4b17      	ldr	r3, [pc, #92]	; (8003bc0 <MX_TIM9_Init+0x8c>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b66:	4b16      	ldr	r3, [pc, #88]	; (8003bc0 <MX_TIM9_Init+0x8c>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 8003b6c:	4814      	ldr	r0, [pc, #80]	; (8003bc0 <MX_TIM9_Init+0x8c>)
 8003b6e:	f003 fc69 	bl	8007444 <HAL_TIM_IC_Init>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8003b78:	f7fd ff64 	bl	8001a44 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003b80:	2301      	movs	r3, #1
 8003b82:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003b84:	2300      	movs	r3, #0
 8003b86:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003b8c:	463b      	mov	r3, r7
 8003b8e:	2200      	movs	r2, #0
 8003b90:	4619      	mov	r1, r3
 8003b92:	480b      	ldr	r0, [pc, #44]	; (8003bc0 <MX_TIM9_Init+0x8c>)
 8003b94:	f003 fee1 	bl	800795a <HAL_TIM_IC_ConfigChannel>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <MX_TIM9_Init+0x6e>
  {
    Error_Handler();
 8003b9e:	f7fd ff51 	bl	8001a44 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003ba2:	463b      	mov	r3, r7
 8003ba4:	2204      	movs	r2, #4
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	4805      	ldr	r0, [pc, #20]	; (8003bc0 <MX_TIM9_Init+0x8c>)
 8003baa:	f003 fed6 	bl	800795a <HAL_TIM_IC_ConfigChannel>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <MX_TIM9_Init+0x84>
  {
    Error_Handler();
 8003bb4:	f7fd ff46 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8003bb8:	bf00      	nop
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	20000b0c 	.word	0x20000b0c
 8003bc4:	40014000 	.word	0x40014000

08003bc8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b08c      	sub	sp, #48	; 0x30
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bd0:	f107 031c 	add.w	r3, r7, #28
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	605a      	str	r2, [r3, #4]
 8003bda:	609a      	str	r2, [r3, #8]
 8003bdc:	60da      	str	r2, [r3, #12]
 8003bde:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a3f      	ldr	r2, [pc, #252]	; (8003ce4 <HAL_TIM_Base_MspInit+0x11c>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d10e      	bne.n	8003c08 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003bea:	2300      	movs	r3, #0
 8003bec:	61bb      	str	r3, [r7, #24]
 8003bee:	4b3e      	ldr	r3, [pc, #248]	; (8003ce8 <HAL_TIM_Base_MspInit+0x120>)
 8003bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf2:	4a3d      	ldr	r2, [pc, #244]	; (8003ce8 <HAL_TIM_Base_MspInit+0x120>)
 8003bf4:	f043 0301 	orr.w	r3, r3, #1
 8003bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8003bfa:	4b3b      	ldr	r3, [pc, #236]	; (8003ce8 <HAL_TIM_Base_MspInit+0x120>)
 8003bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	61bb      	str	r3, [r7, #24]
 8003c04:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003c06:	e069      	b.n	8003cdc <HAL_TIM_Base_MspInit+0x114>
  else if(tim_baseHandle->Instance==TIM4)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a37      	ldr	r2, [pc, #220]	; (8003cec <HAL_TIM_Base_MspInit+0x124>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d135      	bne.n	8003c7e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003c12:	2300      	movs	r3, #0
 8003c14:	617b      	str	r3, [r7, #20]
 8003c16:	4b34      	ldr	r3, [pc, #208]	; (8003ce8 <HAL_TIM_Base_MspInit+0x120>)
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	4a33      	ldr	r2, [pc, #204]	; (8003ce8 <HAL_TIM_Base_MspInit+0x120>)
 8003c1c:	f043 0304 	orr.w	r3, r3, #4
 8003c20:	6413      	str	r3, [r2, #64]	; 0x40
 8003c22:	4b31      	ldr	r3, [pc, #196]	; (8003ce8 <HAL_TIM_Base_MspInit+0x120>)
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	f003 0304 	and.w	r3, r3, #4
 8003c2a:	617b      	str	r3, [r7, #20]
 8003c2c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c2e:	2300      	movs	r3, #0
 8003c30:	613b      	str	r3, [r7, #16]
 8003c32:	4b2d      	ldr	r3, [pc, #180]	; (8003ce8 <HAL_TIM_Base_MspInit+0x120>)
 8003c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c36:	4a2c      	ldr	r2, [pc, #176]	; (8003ce8 <HAL_TIM_Base_MspInit+0x120>)
 8003c38:	f043 0302 	orr.w	r3, r3, #2
 8003c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c3e:	4b2a      	ldr	r3, [pc, #168]	; (8003ce8 <HAL_TIM_Base_MspInit+0x120>)
 8003c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	613b      	str	r3, [r7, #16]
 8003c48:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ECHO_HC_1_Pin|ECHO_HC_2_Pin;
 8003c4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c50:	2302      	movs	r3, #2
 8003c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c54:	2300      	movs	r3, #0
 8003c56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c60:	f107 031c 	add.w	r3, r7, #28
 8003c64:	4619      	mov	r1, r3
 8003c66:	4822      	ldr	r0, [pc, #136]	; (8003cf0 <HAL_TIM_Base_MspInit+0x128>)
 8003c68:	f001 fa34 	bl	80050d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	2100      	movs	r1, #0
 8003c70:	201e      	movs	r0, #30
 8003c72:	f000 fe3e 	bl	80048f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003c76:	201e      	movs	r0, #30
 8003c78:	f000 fe57 	bl	800492a <HAL_NVIC_EnableIRQ>
}
 8003c7c:	e02e      	b.n	8003cdc <HAL_TIM_Base_MspInit+0x114>
  else if(tim_baseHandle->Instance==TIM5)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a1c      	ldr	r2, [pc, #112]	; (8003cf4 <HAL_TIM_Base_MspInit+0x12c>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d116      	bne.n	8003cb6 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003c88:	2300      	movs	r3, #0
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	4b16      	ldr	r3, [pc, #88]	; (8003ce8 <HAL_TIM_Base_MspInit+0x120>)
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c90:	4a15      	ldr	r2, [pc, #84]	; (8003ce8 <HAL_TIM_Base_MspInit+0x120>)
 8003c92:	f043 0308 	orr.w	r3, r3, #8
 8003c96:	6413      	str	r3, [r2, #64]	; 0x40
 8003c98:	4b13      	ldr	r3, [pc, #76]	; (8003ce8 <HAL_TIM_Base_MspInit+0x120>)
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9c:	f003 0308 	and.w	r3, r3, #8
 8003ca0:	60fb      	str	r3, [r7, #12]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	2032      	movs	r0, #50	; 0x32
 8003caa:	f000 fe22 	bl	80048f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003cae:	2032      	movs	r0, #50	; 0x32
 8003cb0:	f000 fe3b 	bl	800492a <HAL_NVIC_EnableIRQ>
}
 8003cb4:	e012      	b.n	8003cdc <HAL_TIM_Base_MspInit+0x114>
  else if(tim_baseHandle->Instance==TIM8)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a0f      	ldr	r2, [pc, #60]	; (8003cf8 <HAL_TIM_Base_MspInit+0x130>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d10d      	bne.n	8003cdc <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	60bb      	str	r3, [r7, #8]
 8003cc4:	4b08      	ldr	r3, [pc, #32]	; (8003ce8 <HAL_TIM_Base_MspInit+0x120>)
 8003cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc8:	4a07      	ldr	r2, [pc, #28]	; (8003ce8 <HAL_TIM_Base_MspInit+0x120>)
 8003cca:	f043 0302 	orr.w	r3, r3, #2
 8003cce:	6453      	str	r3, [r2, #68]	; 0x44
 8003cd0:	4b05      	ldr	r3, [pc, #20]	; (8003ce8 <HAL_TIM_Base_MspInit+0x120>)
 8003cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	60bb      	str	r3, [r7, #8]
 8003cda:	68bb      	ldr	r3, [r7, #8]
}
 8003cdc:	bf00      	nop
 8003cde:	3730      	adds	r7, #48	; 0x30
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40010000 	.word	0x40010000
 8003ce8:	40023800 	.word	0x40023800
 8003cec:	40000800 	.word	0x40000800
 8003cf0:	40020400 	.word	0x40020400
 8003cf4:	40000c00 	.word	0x40000c00
 8003cf8:	40010400 	.word	0x40010400

08003cfc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b08c      	sub	sp, #48	; 0x30
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d04:	f107 031c 	add.w	r3, r7, #28
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	605a      	str	r2, [r3, #4]
 8003d0e:	609a      	str	r2, [r3, #8]
 8003d10:	60da      	str	r2, [r3, #12]
 8003d12:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d1c:	d14b      	bne.n	8003db6 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d1e:	2300      	movs	r3, #0
 8003d20:	61bb      	str	r3, [r7, #24]
 8003d22:	4b3f      	ldr	r3, [pc, #252]	; (8003e20 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	4a3e      	ldr	r2, [pc, #248]	; (8003e20 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d28:	f043 0301 	orr.w	r3, r3, #1
 8003d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d2e:	4b3c      	ldr	r3, [pc, #240]	; (8003e20 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	61bb      	str	r3, [r7, #24]
 8003d38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	617b      	str	r3, [r7, #20]
 8003d3e:	4b38      	ldr	r3, [pc, #224]	; (8003e20 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d42:	4a37      	ldr	r2, [pc, #220]	; (8003e20 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d44:	f043 0301 	orr.w	r3, r3, #1
 8003d48:	6313      	str	r3, [r2, #48]	; 0x30
 8003d4a:	4b35      	ldr	r3, [pc, #212]	; (8003e20 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	617b      	str	r3, [r7, #20]
 8003d54:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d56:	2300      	movs	r3, #0
 8003d58:	613b      	str	r3, [r7, #16]
 8003d5a:	4b31      	ldr	r3, [pc, #196]	; (8003e20 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5e:	4a30      	ldr	r2, [pc, #192]	; (8003e20 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d60:	f043 0302 	orr.w	r3, r3, #2
 8003d64:	6313      	str	r3, [r2, #48]	; 0x30
 8003d66:	4b2e      	ldr	r3, [pc, #184]	; (8003e20 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	613b      	str	r3, [r7, #16]
 8003d70:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER2_A_Pin;
 8003d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d78:	2302      	movs	r3, #2
 8003d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d80:	2300      	movs	r3, #0
 8003d82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003d84:	2301      	movs	r3, #1
 8003d86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENCODER2_A_GPIO_Port, &GPIO_InitStruct);
 8003d88:	f107 031c 	add.w	r3, r7, #28
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	4825      	ldr	r0, [pc, #148]	; (8003e24 <HAL_TIM_Encoder_MspInit+0x128>)
 8003d90:	f001 f9a0 	bl	80050d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENCODER2_B_Pin;
 8003d94:	2308      	movs	r3, #8
 8003d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d98:	2302      	movs	r3, #2
 8003d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003da0:	2300      	movs	r3, #0
 8003da2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003da4:	2301      	movs	r3, #1
 8003da6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENCODER2_B_GPIO_Port, &GPIO_InitStruct);
 8003da8:	f107 031c 	add.w	r3, r7, #28
 8003dac:	4619      	mov	r1, r3
 8003dae:	481e      	ldr	r0, [pc, #120]	; (8003e28 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003db0:	f001 f990 	bl	80050d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003db4:	e030      	b.n	8003e18 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(tim_encoderHandle->Instance==TIM3)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a1c      	ldr	r2, [pc, #112]	; (8003e2c <HAL_TIM_Encoder_MspInit+0x130>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d12b      	bne.n	8003e18 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	4b16      	ldr	r3, [pc, #88]	; (8003e20 <HAL_TIM_Encoder_MspInit+0x124>)
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc8:	4a15      	ldr	r2, [pc, #84]	; (8003e20 <HAL_TIM_Encoder_MspInit+0x124>)
 8003dca:	f043 0302 	orr.w	r3, r3, #2
 8003dce:	6413      	str	r3, [r2, #64]	; 0x40
 8003dd0:	4b13      	ldr	r3, [pc, #76]	; (8003e20 <HAL_TIM_Encoder_MspInit+0x124>)
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ddc:	2300      	movs	r3, #0
 8003dde:	60bb      	str	r3, [r7, #8]
 8003de0:	4b0f      	ldr	r3, [pc, #60]	; (8003e20 <HAL_TIM_Encoder_MspInit+0x124>)
 8003de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de4:	4a0e      	ldr	r2, [pc, #56]	; (8003e20 <HAL_TIM_Encoder_MspInit+0x124>)
 8003de6:	f043 0302 	orr.w	r3, r3, #2
 8003dea:	6313      	str	r3, [r2, #48]	; 0x30
 8003dec:	4b0c      	ldr	r3, [pc, #48]	; (8003e20 <HAL_TIM_Encoder_MspInit+0x124>)
 8003dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	60bb      	str	r3, [r7, #8]
 8003df6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER1_A_Pin|ENCODER1_B_Pin;
 8003df8:	2330      	movs	r3, #48	; 0x30
 8003dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e00:	2300      	movs	r3, #0
 8003e02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e04:	2300      	movs	r3, #0
 8003e06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003e08:	2302      	movs	r3, #2
 8003e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e0c:	f107 031c 	add.w	r3, r7, #28
 8003e10:	4619      	mov	r1, r3
 8003e12:	4805      	ldr	r0, [pc, #20]	; (8003e28 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003e14:	f001 f95e 	bl	80050d4 <HAL_GPIO_Init>
}
 8003e18:	bf00      	nop
 8003e1a:	3730      	adds	r7, #48	; 0x30
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	40023800 	.word	0x40023800
 8003e24:	40020000 	.word	0x40020000
 8003e28:	40020400 	.word	0x40020400
 8003e2c:	40000400 	.word	0x40000400

08003e30 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b08a      	sub	sp, #40	; 0x28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e38:	f107 0314 	add.w	r3, r7, #20
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	605a      	str	r2, [r3, #4]
 8003e42:	609a      	str	r2, [r3, #8]
 8003e44:	60da      	str	r2, [r3, #12]
 8003e46:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM9)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a19      	ldr	r2, [pc, #100]	; (8003eb4 <HAL_TIM_IC_MspInit+0x84>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d12b      	bne.n	8003eaa <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003e52:	2300      	movs	r3, #0
 8003e54:	613b      	str	r3, [r7, #16]
 8003e56:	4b18      	ldr	r3, [pc, #96]	; (8003eb8 <HAL_TIM_IC_MspInit+0x88>)
 8003e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5a:	4a17      	ldr	r2, [pc, #92]	; (8003eb8 <HAL_TIM_IC_MspInit+0x88>)
 8003e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e60:	6453      	str	r3, [r2, #68]	; 0x44
 8003e62:	4b15      	ldr	r3, [pc, #84]	; (8003eb8 <HAL_TIM_IC_MspInit+0x88>)
 8003e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e6a:	613b      	str	r3, [r7, #16]
 8003e6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e6e:	2300      	movs	r3, #0
 8003e70:	60fb      	str	r3, [r7, #12]
 8003e72:	4b11      	ldr	r3, [pc, #68]	; (8003eb8 <HAL_TIM_IC_MspInit+0x88>)
 8003e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e76:	4a10      	ldr	r2, [pc, #64]	; (8003eb8 <HAL_TIM_IC_MspInit+0x88>)
 8003e78:	f043 0310 	orr.w	r3, r3, #16
 8003e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e7e:	4b0e      	ldr	r3, [pc, #56]	; (8003eb8 <HAL_TIM_IC_MspInit+0x88>)
 8003e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e82:	f003 0310 	and.w	r3, r3, #16
 8003e86:	60fb      	str	r3, [r7, #12]
 8003e88:	68fb      	ldr	r3, [r7, #12]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    PE6     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = ECHO_HC_3_Pin|ECHO_HC_4_Pin;
 8003e8a:	2360      	movs	r3, #96	; 0x60
 8003e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e8e:	2302      	movs	r3, #2
 8003e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e92:	2300      	movs	r3, #0
 8003e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e96:	2300      	movs	r3, #0
 8003e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e9e:	f107 0314 	add.w	r3, r7, #20
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	4805      	ldr	r0, [pc, #20]	; (8003ebc <HAL_TIM_IC_MspInit+0x8c>)
 8003ea6:	f001 f915 	bl	80050d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8003eaa:	bf00      	nop
 8003eac:	3728      	adds	r7, #40	; 0x28
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	40014000 	.word	0x40014000
 8003eb8:	40023800 	.word	0x40023800
 8003ebc:	40021000 	.word	0x40021000

08003ec0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b088      	sub	sp, #32
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ec8:	f107 030c 	add.w	r3, r7, #12
 8003ecc:	2200      	movs	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	605a      	str	r2, [r3, #4]
 8003ed2:	609a      	str	r2, [r3, #8]
 8003ed4:	60da      	str	r2, [r3, #12]
 8003ed6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a12      	ldr	r2, [pc, #72]	; (8003f28 <HAL_TIM_MspPostInit+0x68>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d11d      	bne.n	8003f1e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	60bb      	str	r3, [r7, #8]
 8003ee6:	4b11      	ldr	r3, [pc, #68]	; (8003f2c <HAL_TIM_MspPostInit+0x6c>)
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eea:	4a10      	ldr	r2, [pc, #64]	; (8003f2c <HAL_TIM_MspPostInit+0x6c>)
 8003eec:	f043 0304 	orr.w	r3, r3, #4
 8003ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ef2:	4b0e      	ldr	r3, [pc, #56]	; (8003f2c <HAL_TIM_MspPostInit+0x6c>)
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	f003 0304 	and.w	r3, r3, #4
 8003efa:	60bb      	str	r3, [r7, #8]
 8003efc:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = MOTOR1_PWM_Pin|MOTOR2_PWM_Pin;
 8003efe:	23c0      	movs	r3, #192	; 0xc0
 8003f00:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f02:	2302      	movs	r3, #2
 8003f04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f06:	2300      	movs	r3, #0
 8003f08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f12:	f107 030c 	add.w	r3, r7, #12
 8003f16:	4619      	mov	r1, r3
 8003f18:	4805      	ldr	r0, [pc, #20]	; (8003f30 <HAL_TIM_MspPostInit+0x70>)
 8003f1a:	f001 f8db 	bl	80050d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003f1e:	bf00      	nop
 8003f20:	3720      	adds	r7, #32
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	40010400 	.word	0x40010400
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	40020800 	.word	0x40020800

08003f34 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003f38:	4b11      	ldr	r3, [pc, #68]	; (8003f80 <MX_USART1_UART_Init+0x4c>)
 8003f3a:	4a12      	ldr	r2, [pc, #72]	; (8003f84 <MX_USART1_UART_Init+0x50>)
 8003f3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003f3e:	4b10      	ldr	r3, [pc, #64]	; (8003f80 <MX_USART1_UART_Init+0x4c>)
 8003f40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003f46:	4b0e      	ldr	r3, [pc, #56]	; (8003f80 <MX_USART1_UART_Init+0x4c>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003f4c:	4b0c      	ldr	r3, [pc, #48]	; (8003f80 <MX_USART1_UART_Init+0x4c>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003f52:	4b0b      	ldr	r3, [pc, #44]	; (8003f80 <MX_USART1_UART_Init+0x4c>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003f58:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <MX_USART1_UART_Init+0x4c>)
 8003f5a:	220c      	movs	r2, #12
 8003f5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f5e:	4b08      	ldr	r3, [pc, #32]	; (8003f80 <MX_USART1_UART_Init+0x4c>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f64:	4b06      	ldr	r3, [pc, #24]	; (8003f80 <MX_USART1_UART_Init+0x4c>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003f6a:	4805      	ldr	r0, [pc, #20]	; (8003f80 <MX_USART1_UART_Init+0x4c>)
 8003f6c:	f004 fc60 	bl	8008830 <HAL_UART_Init>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003f76:	f7fd fd65 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003f7a:	bf00      	nop
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	20000b54 	.word	0x20000b54
 8003f84:	40011000 	.word	0x40011000

08003f88 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003f8c:	4b11      	ldr	r3, [pc, #68]	; (8003fd4 <MX_USART2_UART_Init+0x4c>)
 8003f8e:	4a12      	ldr	r2, [pc, #72]	; (8003fd8 <MX_USART2_UART_Init+0x50>)
 8003f90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003f92:	4b10      	ldr	r3, [pc, #64]	; (8003fd4 <MX_USART2_UART_Init+0x4c>)
 8003f94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003f9a:	4b0e      	ldr	r3, [pc, #56]	; (8003fd4 <MX_USART2_UART_Init+0x4c>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003fa0:	4b0c      	ldr	r3, [pc, #48]	; (8003fd4 <MX_USART2_UART_Init+0x4c>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003fa6:	4b0b      	ldr	r3, [pc, #44]	; (8003fd4 <MX_USART2_UART_Init+0x4c>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003fac:	4b09      	ldr	r3, [pc, #36]	; (8003fd4 <MX_USART2_UART_Init+0x4c>)
 8003fae:	220c      	movs	r2, #12
 8003fb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fb2:	4b08      	ldr	r3, [pc, #32]	; (8003fd4 <MX_USART2_UART_Init+0x4c>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fb8:	4b06      	ldr	r3, [pc, #24]	; (8003fd4 <MX_USART2_UART_Init+0x4c>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003fbe:	4805      	ldr	r0, [pc, #20]	; (8003fd4 <MX_USART2_UART_Init+0x4c>)
 8003fc0:	f004 fc36 	bl	8008830 <HAL_UART_Init>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003fca:	f7fd fd3b 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003fce:	bf00      	nop
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	20000b98 	.word	0x20000b98
 8003fd8:	40004400 	.word	0x40004400

08003fdc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b08c      	sub	sp, #48	; 0x30
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fe4:	f107 031c 	add.w	r3, r7, #28
 8003fe8:	2200      	movs	r2, #0
 8003fea:	601a      	str	r2, [r3, #0]
 8003fec:	605a      	str	r2, [r3, #4]
 8003fee:	609a      	str	r2, [r3, #8]
 8003ff0:	60da      	str	r2, [r3, #12]
 8003ff2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a3a      	ldr	r2, [pc, #232]	; (80040e4 <HAL_UART_MspInit+0x108>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d135      	bne.n	800406a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ffe:	2300      	movs	r3, #0
 8004000:	61bb      	str	r3, [r7, #24]
 8004002:	4b39      	ldr	r3, [pc, #228]	; (80040e8 <HAL_UART_MspInit+0x10c>)
 8004004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004006:	4a38      	ldr	r2, [pc, #224]	; (80040e8 <HAL_UART_MspInit+0x10c>)
 8004008:	f043 0310 	orr.w	r3, r3, #16
 800400c:	6453      	str	r3, [r2, #68]	; 0x44
 800400e:	4b36      	ldr	r3, [pc, #216]	; (80040e8 <HAL_UART_MspInit+0x10c>)
 8004010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004012:	f003 0310 	and.w	r3, r3, #16
 8004016:	61bb      	str	r3, [r7, #24]
 8004018:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800401a:	2300      	movs	r3, #0
 800401c:	617b      	str	r3, [r7, #20]
 800401e:	4b32      	ldr	r3, [pc, #200]	; (80040e8 <HAL_UART_MspInit+0x10c>)
 8004020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004022:	4a31      	ldr	r2, [pc, #196]	; (80040e8 <HAL_UART_MspInit+0x10c>)
 8004024:	f043 0301 	orr.w	r3, r3, #1
 8004028:	6313      	str	r3, [r2, #48]	; 0x30
 800402a:	4b2f      	ldr	r3, [pc, #188]	; (80040e8 <HAL_UART_MspInit+0x10c>)
 800402c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	617b      	str	r3, [r7, #20]
 8004034:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USB2Serial_TX_Pin|USB2Serial_RX_Pin;
 8004036:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800403a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800403c:	2302      	movs	r3, #2
 800403e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004040:	2300      	movs	r3, #0
 8004042:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004044:	2303      	movs	r3, #3
 8004046:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004048:	2307      	movs	r3, #7
 800404a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800404c:	f107 031c 	add.w	r3, r7, #28
 8004050:	4619      	mov	r1, r3
 8004052:	4826      	ldr	r0, [pc, #152]	; (80040ec <HAL_UART_MspInit+0x110>)
 8004054:	f001 f83e 	bl	80050d4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8004058:	2200      	movs	r2, #0
 800405a:	2102      	movs	r1, #2
 800405c:	2025      	movs	r0, #37	; 0x25
 800405e:	f000 fc48 	bl	80048f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004062:	2025      	movs	r0, #37	; 0x25
 8004064:	f000 fc61 	bl	800492a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004068:	e038      	b.n	80040dc <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a20      	ldr	r2, [pc, #128]	; (80040f0 <HAL_UART_MspInit+0x114>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d133      	bne.n	80040dc <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004074:	2300      	movs	r3, #0
 8004076:	613b      	str	r3, [r7, #16]
 8004078:	4b1b      	ldr	r3, [pc, #108]	; (80040e8 <HAL_UART_MspInit+0x10c>)
 800407a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407c:	4a1a      	ldr	r2, [pc, #104]	; (80040e8 <HAL_UART_MspInit+0x10c>)
 800407e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004082:	6413      	str	r3, [r2, #64]	; 0x40
 8004084:	4b18      	ldr	r3, [pc, #96]	; (80040e8 <HAL_UART_MspInit+0x10c>)
 8004086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408c:	613b      	str	r3, [r7, #16]
 800408e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004090:	2300      	movs	r3, #0
 8004092:	60fb      	str	r3, [r7, #12]
 8004094:	4b14      	ldr	r3, [pc, #80]	; (80040e8 <HAL_UART_MspInit+0x10c>)
 8004096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004098:	4a13      	ldr	r2, [pc, #76]	; (80040e8 <HAL_UART_MspInit+0x10c>)
 800409a:	f043 0308 	orr.w	r3, r3, #8
 800409e:	6313      	str	r3, [r2, #48]	; 0x30
 80040a0:	4b11      	ldr	r3, [pc, #68]	; (80040e8 <HAL_UART_MspInit+0x10c>)
 80040a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a4:	f003 0308 	and.w	r3, r3, #8
 80040a8:	60fb      	str	r3, [r7, #12]
 80040aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80040ac:	2360      	movs	r3, #96	; 0x60
 80040ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040b0:	2302      	movs	r3, #2
 80040b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b4:	2300      	movs	r3, #0
 80040b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040b8:	2303      	movs	r3, #3
 80040ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80040bc:	2307      	movs	r3, #7
 80040be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040c0:	f107 031c 	add.w	r3, r7, #28
 80040c4:	4619      	mov	r1, r3
 80040c6:	480b      	ldr	r0, [pc, #44]	; (80040f4 <HAL_UART_MspInit+0x118>)
 80040c8:	f001 f804 	bl	80050d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80040cc:	2200      	movs	r2, #0
 80040ce:	2101      	movs	r1, #1
 80040d0:	2026      	movs	r0, #38	; 0x26
 80040d2:	f000 fc0e 	bl	80048f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80040d6:	2026      	movs	r0, #38	; 0x26
 80040d8:	f000 fc27 	bl	800492a <HAL_NVIC_EnableIRQ>
}
 80040dc:	bf00      	nop
 80040de:	3730      	adds	r7, #48	; 0x30
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	40011000 	.word	0x40011000
 80040e8:	40023800 	.word	0x40023800
 80040ec:	40020000 	.word	0x40020000
 80040f0:	40004400 	.word	0x40004400
 80040f4:	40020c00 	.word	0x40020c00

080040f8 <Reset_Handler>:
 80040f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004130 <LoopFillZerobss+0x12>
 80040fc:	480d      	ldr	r0, [pc, #52]	; (8004134 <LoopFillZerobss+0x16>)
 80040fe:	490e      	ldr	r1, [pc, #56]	; (8004138 <LoopFillZerobss+0x1a>)
 8004100:	4a0e      	ldr	r2, [pc, #56]	; (800413c <LoopFillZerobss+0x1e>)
 8004102:	2300      	movs	r3, #0
 8004104:	e002      	b.n	800410c <LoopCopyDataInit>

08004106 <CopyDataInit>:
 8004106:	58d4      	ldr	r4, [r2, r3]
 8004108:	50c4      	str	r4, [r0, r3]
 800410a:	3304      	adds	r3, #4

0800410c <LoopCopyDataInit>:
 800410c:	18c4      	adds	r4, r0, r3
 800410e:	428c      	cmp	r4, r1
 8004110:	d3f9      	bcc.n	8004106 <CopyDataInit>
 8004112:	4a0b      	ldr	r2, [pc, #44]	; (8004140 <LoopFillZerobss+0x22>)
 8004114:	4c0b      	ldr	r4, [pc, #44]	; (8004144 <LoopFillZerobss+0x26>)
 8004116:	2300      	movs	r3, #0
 8004118:	e001      	b.n	800411e <LoopFillZerobss>

0800411a <FillZerobss>:
 800411a:	6013      	str	r3, [r2, #0]
 800411c:	3204      	adds	r2, #4

0800411e <LoopFillZerobss>:
 800411e:	42a2      	cmp	r2, r4
 8004120:	d3fb      	bcc.n	800411a <FillZerobss>
 8004122:	f7ff fa87 	bl	8003634 <SystemInit>
 8004126:	f005 fce7 	bl	8009af8 <__libc_init_array>
 800412a:	f7fd fadb 	bl	80016e4 <main>
 800412e:	4770      	bx	lr
 8004130:	20020000 	.word	0x20020000
 8004134:	20000000 	.word	0x20000000
 8004138:	20000460 	.word	0x20000460
 800413c:	0800f460 	.word	0x0800f460
 8004140:	20000460 	.word	0x20000460
 8004144:	20000bf0 	.word	0x20000bf0

08004148 <ADC_IRQHandler>:
 8004148:	e7fe      	b.n	8004148 <ADC_IRQHandler>
	...

0800414c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004150:	4b0e      	ldr	r3, [pc, #56]	; (800418c <HAL_Init+0x40>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a0d      	ldr	r2, [pc, #52]	; (800418c <HAL_Init+0x40>)
 8004156:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800415a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800415c:	4b0b      	ldr	r3, [pc, #44]	; (800418c <HAL_Init+0x40>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a0a      	ldr	r2, [pc, #40]	; (800418c <HAL_Init+0x40>)
 8004162:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004166:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004168:	4b08      	ldr	r3, [pc, #32]	; (800418c <HAL_Init+0x40>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a07      	ldr	r2, [pc, #28]	; (800418c <HAL_Init+0x40>)
 800416e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004172:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004174:	2003      	movs	r0, #3
 8004176:	f000 fbb1 	bl	80048dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800417a:	200f      	movs	r0, #15
 800417c:	f000 f808 	bl	8004190 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004180:	f7ff f918 	bl	80033b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	40023c00 	.word	0x40023c00

08004190 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004198:	4b12      	ldr	r3, [pc, #72]	; (80041e4 <HAL_InitTick+0x54>)
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	4b12      	ldr	r3, [pc, #72]	; (80041e8 <HAL_InitTick+0x58>)
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	4619      	mov	r1, r3
 80041a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80041aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 fbc9 	bl	8004946 <HAL_SYSTICK_Config>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e00e      	b.n	80041dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2b0f      	cmp	r3, #15
 80041c2:	d80a      	bhi.n	80041da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041c4:	2200      	movs	r2, #0
 80041c6:	6879      	ldr	r1, [r7, #4]
 80041c8:	f04f 30ff 	mov.w	r0, #4294967295
 80041cc:	f000 fb91 	bl	80048f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80041d0:	4a06      	ldr	r2, [pc, #24]	; (80041ec <HAL_InitTick+0x5c>)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
 80041d8:	e000      	b.n	80041dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	20000280 	.word	0x20000280
 80041e8:	20000288 	.word	0x20000288
 80041ec:	20000284 	.word	0x20000284

080041f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80041f4:	4b06      	ldr	r3, [pc, #24]	; (8004210 <HAL_IncTick+0x20>)
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	461a      	mov	r2, r3
 80041fa:	4b06      	ldr	r3, [pc, #24]	; (8004214 <HAL_IncTick+0x24>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4413      	add	r3, r2
 8004200:	4a04      	ldr	r2, [pc, #16]	; (8004214 <HAL_IncTick+0x24>)
 8004202:	6013      	str	r3, [r2, #0]
}
 8004204:	bf00      	nop
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	20000288 	.word	0x20000288
 8004214:	20000bdc 	.word	0x20000bdc

08004218 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  return uwTick;
 800421c:	4b03      	ldr	r3, [pc, #12]	; (800422c <HAL_GetTick+0x14>)
 800421e:	681b      	ldr	r3, [r3, #0]
}
 8004220:	4618      	mov	r0, r3
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	20000bdc 	.word	0x20000bdc

08004230 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004238:	f7ff ffee 	bl	8004218 <HAL_GetTick>
 800423c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004248:	d005      	beq.n	8004256 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800424a:	4b0a      	ldr	r3, [pc, #40]	; (8004274 <HAL_Delay+0x44>)
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	461a      	mov	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	4413      	add	r3, r2
 8004254:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004256:	bf00      	nop
 8004258:	f7ff ffde 	bl	8004218 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	429a      	cmp	r2, r3
 8004266:	d8f7      	bhi.n	8004258 <HAL_Delay+0x28>
  {
  }
}
 8004268:	bf00      	nop
 800426a:	bf00      	nop
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	20000288 	.word	0x20000288

08004278 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004280:	2300      	movs	r3, #0
 8004282:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e033      	b.n	80042f6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	2b00      	cmp	r3, #0
 8004294:	d109      	bne.n	80042aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7fc ff00 	bl	800109c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	f003 0310 	and.w	r3, r3, #16
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d118      	bne.n	80042e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80042be:	f023 0302 	bic.w	r3, r3, #2
 80042c2:	f043 0202 	orr.w	r2, r3, #2
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f93a 	bl	8004544 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	f023 0303 	bic.w	r3, r3, #3
 80042de:	f043 0201 	orr.w	r2, r3, #1
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	641a      	str	r2, [r3, #64]	; 0x40
 80042e6:	e001      	b.n	80042ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
	...

08004300 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800430a:	2300      	movs	r3, #0
 800430c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004314:	2b01      	cmp	r3, #1
 8004316:	d101      	bne.n	800431c <HAL_ADC_ConfigChannel+0x1c>
 8004318:	2302      	movs	r3, #2
 800431a:	e105      	b.n	8004528 <HAL_ADC_ConfigChannel+0x228>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b09      	cmp	r3, #9
 800432a:	d925      	bls.n	8004378 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68d9      	ldr	r1, [r3, #12]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	b29b      	uxth	r3, r3
 8004338:	461a      	mov	r2, r3
 800433a:	4613      	mov	r3, r2
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	4413      	add	r3, r2
 8004340:	3b1e      	subs	r3, #30
 8004342:	2207      	movs	r2, #7
 8004344:	fa02 f303 	lsl.w	r3, r2, r3
 8004348:	43da      	mvns	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	400a      	ands	r2, r1
 8004350:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68d9      	ldr	r1, [r3, #12]
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	689a      	ldr	r2, [r3, #8]
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	b29b      	uxth	r3, r3
 8004362:	4618      	mov	r0, r3
 8004364:	4603      	mov	r3, r0
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	4403      	add	r3, r0
 800436a:	3b1e      	subs	r3, #30
 800436c:	409a      	lsls	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	430a      	orrs	r2, r1
 8004374:	60da      	str	r2, [r3, #12]
 8004376:	e022      	b.n	80043be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6919      	ldr	r1, [r3, #16]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	b29b      	uxth	r3, r3
 8004384:	461a      	mov	r2, r3
 8004386:	4613      	mov	r3, r2
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	4413      	add	r3, r2
 800438c:	2207      	movs	r2, #7
 800438e:	fa02 f303 	lsl.w	r3, r2, r3
 8004392:	43da      	mvns	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	400a      	ands	r2, r1
 800439a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6919      	ldr	r1, [r3, #16]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	689a      	ldr	r2, [r3, #8]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	4618      	mov	r0, r3
 80043ae:	4603      	mov	r3, r0
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	4403      	add	r3, r0
 80043b4:	409a      	lsls	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	2b06      	cmp	r3, #6
 80043c4:	d824      	bhi.n	8004410 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	4613      	mov	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4413      	add	r3, r2
 80043d6:	3b05      	subs	r3, #5
 80043d8:	221f      	movs	r2, #31
 80043da:	fa02 f303 	lsl.w	r3, r2, r3
 80043de:	43da      	mvns	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	400a      	ands	r2, r1
 80043e6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	4618      	mov	r0, r3
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685a      	ldr	r2, [r3, #4]
 80043fa:	4613      	mov	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4413      	add	r3, r2
 8004400:	3b05      	subs	r3, #5
 8004402:	fa00 f203 	lsl.w	r2, r0, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	635a      	str	r2, [r3, #52]	; 0x34
 800440e:	e04c      	b.n	80044aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	2b0c      	cmp	r3, #12
 8004416:	d824      	bhi.n	8004462 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	4613      	mov	r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4413      	add	r3, r2
 8004428:	3b23      	subs	r3, #35	; 0x23
 800442a:	221f      	movs	r2, #31
 800442c:	fa02 f303 	lsl.w	r3, r2, r3
 8004430:	43da      	mvns	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	400a      	ands	r2, r1
 8004438:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	b29b      	uxth	r3, r3
 8004446:	4618      	mov	r0, r3
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	4613      	mov	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	3b23      	subs	r3, #35	; 0x23
 8004454:	fa00 f203 	lsl.w	r2, r0, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	430a      	orrs	r2, r1
 800445e:	631a      	str	r2, [r3, #48]	; 0x30
 8004460:	e023      	b.n	80044aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	4613      	mov	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	3b41      	subs	r3, #65	; 0x41
 8004474:	221f      	movs	r2, #31
 8004476:	fa02 f303 	lsl.w	r3, r2, r3
 800447a:	43da      	mvns	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	400a      	ands	r2, r1
 8004482:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	b29b      	uxth	r3, r3
 8004490:	4618      	mov	r0, r3
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	4613      	mov	r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	4413      	add	r3, r2
 800449c:	3b41      	subs	r3, #65	; 0x41
 800449e:	fa00 f203 	lsl.w	r2, r0, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	430a      	orrs	r2, r1
 80044a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80044aa:	4b22      	ldr	r3, [pc, #136]	; (8004534 <HAL_ADC_ConfigChannel+0x234>)
 80044ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a21      	ldr	r2, [pc, #132]	; (8004538 <HAL_ADC_ConfigChannel+0x238>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d109      	bne.n	80044cc <HAL_ADC_ConfigChannel+0x1cc>
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2b12      	cmp	r3, #18
 80044be:	d105      	bne.n	80044cc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a19      	ldr	r2, [pc, #100]	; (8004538 <HAL_ADC_ConfigChannel+0x238>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d123      	bne.n	800451e <HAL_ADC_ConfigChannel+0x21e>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2b10      	cmp	r3, #16
 80044dc:	d003      	beq.n	80044e6 <HAL_ADC_ConfigChannel+0x1e6>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2b11      	cmp	r3, #17
 80044e4:	d11b      	bne.n	800451e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2b10      	cmp	r3, #16
 80044f8:	d111      	bne.n	800451e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80044fa:	4b10      	ldr	r3, [pc, #64]	; (800453c <HAL_ADC_ConfigChannel+0x23c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a10      	ldr	r2, [pc, #64]	; (8004540 <HAL_ADC_ConfigChannel+0x240>)
 8004500:	fba2 2303 	umull	r2, r3, r2, r3
 8004504:	0c9a      	lsrs	r2, r3, #18
 8004506:	4613      	mov	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	4413      	add	r3, r2
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004510:	e002      	b.n	8004518 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	3b01      	subs	r3, #1
 8004516:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1f9      	bne.n	8004512 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3714      	adds	r7, #20
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	40012300 	.word	0x40012300
 8004538:	40012000 	.word	0x40012000
 800453c:	20000280 	.word	0x20000280
 8004540:	431bde83 	.word	0x431bde83

08004544 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800454c:	4b79      	ldr	r3, [pc, #484]	; (8004734 <ADC_Init+0x1f0>)
 800454e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	431a      	orrs	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004578:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6859      	ldr	r1, [r3, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	021a      	lsls	r2, r3, #8
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800459c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	6859      	ldr	r1, [r3, #4]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689a      	ldr	r2, [r3, #8]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	430a      	orrs	r2, r1
 80045ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689a      	ldr	r2, [r3, #8]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6899      	ldr	r1, [r3, #8]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68da      	ldr	r2, [r3, #12]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d6:	4a58      	ldr	r2, [pc, #352]	; (8004738 <ADC_Init+0x1f4>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d022      	beq.n	8004622 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	689a      	ldr	r2, [r3, #8]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80045ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6899      	ldr	r1, [r3, #8]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689a      	ldr	r2, [r3, #8]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800460c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6899      	ldr	r1, [r3, #8]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	430a      	orrs	r2, r1
 800461e:	609a      	str	r2, [r3, #8]
 8004620:	e00f      	b.n	8004642 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	689a      	ldr	r2, [r3, #8]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004630:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	689a      	ldr	r2, [r3, #8]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004640:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	689a      	ldr	r2, [r3, #8]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 0202 	bic.w	r2, r2, #2
 8004650:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	6899      	ldr	r1, [r3, #8]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	7e1b      	ldrb	r3, [r3, #24]
 800465c:	005a      	lsls	r2, r3, #1
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 3020 	ldrb.w	r3, [r3, #32]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d01b      	beq.n	80046a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800467e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800468e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	6859      	ldr	r1, [r3, #4]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469a:	3b01      	subs	r3, #1
 800469c:	035a      	lsls	r2, r3, #13
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	430a      	orrs	r2, r1
 80046a4:	605a      	str	r2, [r3, #4]
 80046a6:	e007      	b.n	80046b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80046c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	3b01      	subs	r3, #1
 80046d4:	051a      	lsls	r2, r3, #20
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	430a      	orrs	r2, r1
 80046dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689a      	ldr	r2, [r3, #8]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80046ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6899      	ldr	r1, [r3, #8]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80046fa:	025a      	lsls	r2, r3, #9
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	430a      	orrs	r2, r1
 8004702:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689a      	ldr	r2, [r3, #8]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004712:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6899      	ldr	r1, [r3, #8]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	029a      	lsls	r2, r3, #10
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	609a      	str	r2, [r3, #8]
}
 8004728:	bf00      	nop
 800472a:	3714      	adds	r7, #20
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr
 8004734:	40012300 	.word	0x40012300
 8004738:	0f000001 	.word	0x0f000001

0800473c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f003 0307 	and.w	r3, r3, #7
 800474a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800474c:	4b0c      	ldr	r3, [pc, #48]	; (8004780 <__NVIC_SetPriorityGrouping+0x44>)
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004758:	4013      	ands	r3, r2
 800475a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004764:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800476c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800476e:	4a04      	ldr	r2, [pc, #16]	; (8004780 <__NVIC_SetPriorityGrouping+0x44>)
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	60d3      	str	r3, [r2, #12]
}
 8004774:	bf00      	nop
 8004776:	3714      	adds	r7, #20
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr
 8004780:	e000ed00 	.word	0xe000ed00

08004784 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004788:	4b04      	ldr	r3, [pc, #16]	; (800479c <__NVIC_GetPriorityGrouping+0x18>)
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	0a1b      	lsrs	r3, r3, #8
 800478e:	f003 0307 	and.w	r3, r3, #7
}
 8004792:	4618      	mov	r0, r3
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	e000ed00 	.word	0xe000ed00

080047a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	4603      	mov	r3, r0
 80047a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	db0b      	blt.n	80047ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047b2:	79fb      	ldrb	r3, [r7, #7]
 80047b4:	f003 021f 	and.w	r2, r3, #31
 80047b8:	4907      	ldr	r1, [pc, #28]	; (80047d8 <__NVIC_EnableIRQ+0x38>)
 80047ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047be:	095b      	lsrs	r3, r3, #5
 80047c0:	2001      	movs	r0, #1
 80047c2:	fa00 f202 	lsl.w	r2, r0, r2
 80047c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	e000e100 	.word	0xe000e100

080047dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	4603      	mov	r3, r0
 80047e4:	6039      	str	r1, [r7, #0]
 80047e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	db0a      	blt.n	8004806 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	b2da      	uxtb	r2, r3
 80047f4:	490c      	ldr	r1, [pc, #48]	; (8004828 <__NVIC_SetPriority+0x4c>)
 80047f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047fa:	0112      	lsls	r2, r2, #4
 80047fc:	b2d2      	uxtb	r2, r2
 80047fe:	440b      	add	r3, r1
 8004800:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004804:	e00a      	b.n	800481c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	b2da      	uxtb	r2, r3
 800480a:	4908      	ldr	r1, [pc, #32]	; (800482c <__NVIC_SetPriority+0x50>)
 800480c:	79fb      	ldrb	r3, [r7, #7]
 800480e:	f003 030f 	and.w	r3, r3, #15
 8004812:	3b04      	subs	r3, #4
 8004814:	0112      	lsls	r2, r2, #4
 8004816:	b2d2      	uxtb	r2, r2
 8004818:	440b      	add	r3, r1
 800481a:	761a      	strb	r2, [r3, #24]
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr
 8004828:	e000e100 	.word	0xe000e100
 800482c:	e000ed00 	.word	0xe000ed00

08004830 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004830:	b480      	push	{r7}
 8004832:	b089      	sub	sp, #36	; 0x24
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f003 0307 	and.w	r3, r3, #7
 8004842:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	f1c3 0307 	rsb	r3, r3, #7
 800484a:	2b04      	cmp	r3, #4
 800484c:	bf28      	it	cs
 800484e:	2304      	movcs	r3, #4
 8004850:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	3304      	adds	r3, #4
 8004856:	2b06      	cmp	r3, #6
 8004858:	d902      	bls.n	8004860 <NVIC_EncodePriority+0x30>
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	3b03      	subs	r3, #3
 800485e:	e000      	b.n	8004862 <NVIC_EncodePriority+0x32>
 8004860:	2300      	movs	r3, #0
 8004862:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004864:	f04f 32ff 	mov.w	r2, #4294967295
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	fa02 f303 	lsl.w	r3, r2, r3
 800486e:	43da      	mvns	r2, r3
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	401a      	ands	r2, r3
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004878:	f04f 31ff 	mov.w	r1, #4294967295
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	fa01 f303 	lsl.w	r3, r1, r3
 8004882:	43d9      	mvns	r1, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004888:	4313      	orrs	r3, r2
         );
}
 800488a:	4618      	mov	r0, r3
 800488c:	3724      	adds	r7, #36	; 0x24
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
	...

08004898 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	3b01      	subs	r3, #1
 80048a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048a8:	d301      	bcc.n	80048ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048aa:	2301      	movs	r3, #1
 80048ac:	e00f      	b.n	80048ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048ae:	4a0a      	ldr	r2, [pc, #40]	; (80048d8 <SysTick_Config+0x40>)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3b01      	subs	r3, #1
 80048b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048b6:	210f      	movs	r1, #15
 80048b8:	f04f 30ff 	mov.w	r0, #4294967295
 80048bc:	f7ff ff8e 	bl	80047dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048c0:	4b05      	ldr	r3, [pc, #20]	; (80048d8 <SysTick_Config+0x40>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048c6:	4b04      	ldr	r3, [pc, #16]	; (80048d8 <SysTick_Config+0x40>)
 80048c8:	2207      	movs	r2, #7
 80048ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3708      	adds	r7, #8
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	e000e010 	.word	0xe000e010

080048dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f7ff ff29 	bl	800473c <__NVIC_SetPriorityGrouping>
}
 80048ea:	bf00      	nop
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b086      	sub	sp, #24
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	4603      	mov	r3, r0
 80048fa:	60b9      	str	r1, [r7, #8]
 80048fc:	607a      	str	r2, [r7, #4]
 80048fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004900:	2300      	movs	r3, #0
 8004902:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004904:	f7ff ff3e 	bl	8004784 <__NVIC_GetPriorityGrouping>
 8004908:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	68b9      	ldr	r1, [r7, #8]
 800490e:	6978      	ldr	r0, [r7, #20]
 8004910:	f7ff ff8e 	bl	8004830 <NVIC_EncodePriority>
 8004914:	4602      	mov	r2, r0
 8004916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800491a:	4611      	mov	r1, r2
 800491c:	4618      	mov	r0, r3
 800491e:	f7ff ff5d 	bl	80047dc <__NVIC_SetPriority>
}
 8004922:	bf00      	nop
 8004924:	3718      	adds	r7, #24
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b082      	sub	sp, #8
 800492e:	af00      	add	r7, sp, #0
 8004930:	4603      	mov	r3, r0
 8004932:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004938:	4618      	mov	r0, r3
 800493a:	f7ff ff31 	bl	80047a0 <__NVIC_EnableIRQ>
}
 800493e:	bf00      	nop
 8004940:	3708      	adds	r7, #8
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b082      	sub	sp, #8
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7ff ffa2 	bl	8004898 <SysTick_Config>
 8004954:	4603      	mov	r3, r0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3708      	adds	r7, #8
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b084      	sub	sp, #16
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800496c:	f7ff fc54 	bl	8004218 <HAL_GetTick>
 8004970:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d008      	beq.n	8004990 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2280      	movs	r2, #128	; 0x80
 8004982:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e052      	b.n	8004a36 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 0216 	bic.w	r2, r2, #22
 800499e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	695a      	ldr	r2, [r3, #20]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049ae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d103      	bne.n	80049c0 <HAL_DMA_Abort+0x62>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d007      	beq.n	80049d0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f022 0208 	bic.w	r2, r2, #8
 80049ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 0201 	bic.w	r2, r2, #1
 80049de:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049e0:	e013      	b.n	8004a0a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049e2:	f7ff fc19 	bl	8004218 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b05      	cmp	r3, #5
 80049ee:	d90c      	bls.n	8004a0a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2220      	movs	r2, #32
 80049f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2203      	movs	r2, #3
 80049fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e015      	b.n	8004a36 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1e4      	bne.n	80049e2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a1c:	223f      	movs	r2, #63	; 0x3f
 8004a1e:	409a      	lsls	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d004      	beq.n	8004a5c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2280      	movs	r2, #128	; 0x80
 8004a56:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e00c      	b.n	8004a76 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2205      	movs	r2, #5
 8004a60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f022 0201 	bic.w	r2, r2, #1
 8004a72:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
	...

08004a84 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e06c      	b.n	8004b70 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d106      	bne.n	8004aae <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2223      	movs	r2, #35	; 0x23
 8004aa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7fc fb89 	bl	80011c0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004aae:	2300      	movs	r3, #0
 8004ab0:	60bb      	str	r3, [r7, #8]
 8004ab2:	4b31      	ldr	r3, [pc, #196]	; (8004b78 <HAL_ETH_Init+0xf4>)
 8004ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab6:	4a30      	ldr	r2, [pc, #192]	; (8004b78 <HAL_ETH_Init+0xf4>)
 8004ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004abc:	6453      	str	r3, [r2, #68]	; 0x44
 8004abe:	4b2e      	ldr	r3, [pc, #184]	; (8004b78 <HAL_ETH_Init+0xf4>)
 8004ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ac6:	60bb      	str	r3, [r7, #8]
 8004ac8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004aca:	4b2c      	ldr	r3, [pc, #176]	; (8004b7c <HAL_ETH_Init+0xf8>)
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	4a2b      	ldr	r2, [pc, #172]	; (8004b7c <HAL_ETH_Init+0xf8>)
 8004ad0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004ad4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004ad6:	4b29      	ldr	r3, [pc, #164]	; (8004b7c <HAL_ETH_Init+0xf8>)
 8004ad8:	685a      	ldr	r2, [r3, #4]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	4927      	ldr	r1, [pc, #156]	; (8004b7c <HAL_ETH_Init+0xf8>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8004ae4:	4b25      	ldr	r3, [pc, #148]	; (8004b7c <HAL_ETH_Init+0xf8>)
 8004ae6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	6812      	ldr	r2, [r2, #0]
 8004af6:	f043 0301 	orr.w	r3, r3, #1
 8004afa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004afe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b00:	f7ff fb8a 	bl	8004218 <HAL_GetTick>
 8004b04:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004b06:	e011      	b.n	8004b2c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004b08:	f7ff fb86 	bl	8004218 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004b16:	d909      	bls.n	8004b2c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2204      	movs	r2, #4
 8004b1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	22e0      	movs	r2, #224	; 0xe0
 8004b24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e021      	b.n	8004b70 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1e4      	bne.n	8004b08 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f958 	bl	8004df4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 f9ff 	bl	8004f48 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 fa55 	bl	8004ffa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	461a      	mov	r2, r3
 8004b56:	2100      	movs	r1, #0
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f9bd 	bl	8004ed8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2210      	movs	r2, #16
 8004b6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	40023800 	.word	0x40023800
 8004b7c:	40013800 	.word	0x40013800

08004b80 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	4b51      	ldr	r3, [pc, #324]	; (8004cdc <ETH_SetMACConfig+0x15c>)
 8004b96:	4013      	ands	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	7c1b      	ldrb	r3, [r3, #16]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d102      	bne.n	8004ba8 <ETH_SetMACConfig+0x28>
 8004ba2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004ba6:	e000      	b.n	8004baa <ETH_SetMACConfig+0x2a>
 8004ba8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	7c5b      	ldrb	r3, [r3, #17]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d102      	bne.n	8004bb8 <ETH_SetMACConfig+0x38>
 8004bb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004bb6:	e000      	b.n	8004bba <ETH_SetMACConfig+0x3a>
 8004bb8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004bba:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004bc0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	7fdb      	ldrb	r3, [r3, #31]
 8004bc6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004bc8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004bce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	7f92      	ldrb	r2, [r2, #30]
 8004bd4:	2a00      	cmp	r2, #0
 8004bd6:	d102      	bne.n	8004bde <ETH_SetMACConfig+0x5e>
 8004bd8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004bdc:	e000      	b.n	8004be0 <ETH_SetMACConfig+0x60>
 8004bde:	2200      	movs	r2, #0
                        macconf->Speed |
 8004be0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	7f1b      	ldrb	r3, [r3, #28]
 8004be6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004be8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004bee:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	791b      	ldrb	r3, [r3, #4]
 8004bf4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004bf6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004bfe:	2a00      	cmp	r2, #0
 8004c00:	d102      	bne.n	8004c08 <ETH_SetMACConfig+0x88>
 8004c02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c06:	e000      	b.n	8004c0a <ETH_SetMACConfig+0x8a>
 8004c08:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004c0a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	7bdb      	ldrb	r3, [r3, #15]
 8004c10:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004c12:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004c18:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c20:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004c22:	4313      	orrs	r3, r2
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004c3a:	2001      	movs	r0, #1
 8004c3c:	f7ff faf8 	bl	8004230 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004c56:	4013      	ands	r3, r2
 8004c58:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c5e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004c60:	683a      	ldr	r2, [r7, #0]
 8004c62:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004c66:	2a00      	cmp	r2, #0
 8004c68:	d101      	bne.n	8004c6e <ETH_SetMACConfig+0xee>
 8004c6a:	2280      	movs	r2, #128	; 0x80
 8004c6c:	e000      	b.n	8004c70 <ETH_SetMACConfig+0xf0>
 8004c6e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004c70:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004c76:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004c78:	683a      	ldr	r2, [r7, #0]
 8004c7a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8004c7e:	2a01      	cmp	r2, #1
 8004c80:	d101      	bne.n	8004c86 <ETH_SetMACConfig+0x106>
 8004c82:	2208      	movs	r2, #8
 8004c84:	e000      	b.n	8004c88 <ETH_SetMACConfig+0x108>
 8004c86:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004c88:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004c8a:	683a      	ldr	r2, [r7, #0]
 8004c8c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8004c90:	2a01      	cmp	r2, #1
 8004c92:	d101      	bne.n	8004c98 <ETH_SetMACConfig+0x118>
 8004c94:	2204      	movs	r2, #4
 8004c96:	e000      	b.n	8004c9a <ETH_SetMACConfig+0x11a>
 8004c98:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004c9a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004c9c:	683a      	ldr	r2, [r7, #0]
 8004c9e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8004ca2:	2a01      	cmp	r2, #1
 8004ca4:	d101      	bne.n	8004caa <ETH_SetMACConfig+0x12a>
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	e000      	b.n	8004cac <ETH_SetMACConfig+0x12c>
 8004caa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004cac:	4313      	orrs	r3, r2
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004cc4:	2001      	movs	r0, #1
 8004cc6:	f7ff fab3 	bl	8004230 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	619a      	str	r2, [r3, #24]
}
 8004cd2:	bf00      	nop
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	ff20810f 	.word	0xff20810f

08004ce0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	4b3d      	ldr	r3, [pc, #244]	; (8004df0 <ETH_SetDMAConfig+0x110>)
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	7b1b      	ldrb	r3, [r3, #12]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d102      	bne.n	8004d0c <ETH_SetDMAConfig+0x2c>
 8004d06:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004d0a:	e000      	b.n	8004d0e <ETH_SetDMAConfig+0x2e>
 8004d0c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	7b5b      	ldrb	r3, [r3, #13]
 8004d12:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004d14:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	7f52      	ldrb	r2, [r2, #29]
 8004d1a:	2a00      	cmp	r2, #0
 8004d1c:	d102      	bne.n	8004d24 <ETH_SetDMAConfig+0x44>
 8004d1e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004d22:	e000      	b.n	8004d26 <ETH_SetDMAConfig+0x46>
 8004d24:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004d26:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	7b9b      	ldrb	r3, [r3, #14]
 8004d2c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004d2e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004d34:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	7f1b      	ldrb	r3, [r3, #28]
 8004d3a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004d3c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	7f9b      	ldrb	r3, [r3, #30]
 8004d42:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004d44:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004d4a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d52:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004d54:	4313      	orrs	r3, r2
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d64:	461a      	mov	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004d76:	2001      	movs	r0, #1
 8004d78:	f7ff fa5a 	bl	8004230 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d84:	461a      	mov	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	791b      	ldrb	r3, [r3, #4]
 8004d8e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004d94:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004d9a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004da0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004da8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004daa:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004db2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004db8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	6812      	ldr	r2, [r2, #0]
 8004dbe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004dc2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004dc6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004dd4:	2001      	movs	r0, #1
 8004dd6:	f7ff fa2b 	bl	8004230 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004de2:	461a      	mov	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6013      	str	r3, [r2, #0]
}
 8004de8:	bf00      	nop
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	f8de3f23 	.word	0xf8de3f23

08004df4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b0a6      	sub	sp, #152	; 0x98
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8004e02:	2301      	movs	r3, #1
 8004e04:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004e12:	2301      	movs	r3, #1
 8004e14:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004e24:	2300      	movs	r3, #0
 8004e26:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004e30:	2300      	movs	r3, #0
 8004e32:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004e34:	2300      	movs	r3, #0
 8004e36:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004e44:	2300      	movs	r3, #0
 8004e46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004e50:	2300      	movs	r3, #0
 8004e52:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004e56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e5a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004e5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e60:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004e62:	2300      	movs	r3, #0
 8004e64:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004e68:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7ff fe86 	bl	8004b80 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004e74:	2301      	movs	r3, #1
 8004e76:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004e82:	2301      	movs	r3, #1
 8004e84:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004e86:	2300      	movs	r3, #0
 8004e88:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004e90:	2300      	movs	r3, #0
 8004e92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004e96:	2300      	movs	r3, #0
 8004e98:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004ea4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ea8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004eaa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004eae:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004eb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004eb4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004ec4:	f107 0308 	add.w	r3, r7, #8
 8004ec8:	4619      	mov	r1, r3
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f7ff ff08 	bl	8004ce0 <ETH_SetDMAConfig>
}
 8004ed0:	bf00      	nop
 8004ed2:	3798      	adds	r7, #152	; 0x98
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b087      	sub	sp, #28
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	3305      	adds	r3, #5
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	021b      	lsls	r3, r3, #8
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	3204      	adds	r2, #4
 8004ef0:	7812      	ldrb	r2, [r2, #0]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004ef6:	68ba      	ldr	r2, [r7, #8]
 8004ef8:	4b11      	ldr	r3, [pc, #68]	; (8004f40 <ETH_MACAddressConfig+0x68>)
 8004efa:	4413      	add	r3, r2
 8004efc:	461a      	mov	r2, r3
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	3303      	adds	r3, #3
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	061a      	lsls	r2, r3, #24
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	3302      	adds	r3, #2
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	041b      	lsls	r3, r3, #16
 8004f12:	431a      	orrs	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	3301      	adds	r3, #1
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	021b      	lsls	r3, r3, #8
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	7812      	ldrb	r2, [r2, #0]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004f26:	68ba      	ldr	r2, [r7, #8]
 8004f28:	4b06      	ldr	r3, [pc, #24]	; (8004f44 <ETH_MACAddressConfig+0x6c>)
 8004f2a:	4413      	add	r3, r2
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	6013      	str	r3, [r2, #0]
}
 8004f32:	bf00      	nop
 8004f34:	371c      	adds	r7, #28
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	40028040 	.word	0x40028040
 8004f44:	40028044 	.word	0x40028044

08004f48 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004f50:	2300      	movs	r3, #0
 8004f52:	60fb      	str	r3, [r7, #12]
 8004f54:	e03e      	b.n	8004fd4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68d9      	ldr	r1, [r3, #12]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	00db      	lsls	r3, r3, #3
 8004f64:	440b      	add	r3, r1
 8004f66:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	2200      	movs	r2, #0
 8004f72:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	2200      	movs	r2, #0
 8004f78:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004f80:	68b9      	ldr	r1, [r7, #8]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	3206      	adds	r2, #6
 8004f88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d80c      	bhi.n	8004fb8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68d9      	ldr	r1, [r3, #12]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	1c5a      	adds	r2, r3, #1
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	4413      	add	r3, r2
 8004fac:	00db      	lsls	r3, r3, #3
 8004fae:	440b      	add	r3, r1
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	60da      	str	r2, [r3, #12]
 8004fb6:	e004      	b.n	8004fc2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	60fb      	str	r3, [r7, #12]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2b03      	cmp	r3, #3
 8004fd8:	d9bd      	bls.n	8004f56 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	68da      	ldr	r2, [r3, #12]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fec:	611a      	str	r2, [r3, #16]
}
 8004fee:	bf00      	nop
 8004ff0:	3714      	adds	r7, #20
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr

08004ffa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b085      	sub	sp, #20
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005002:	2300      	movs	r3, #0
 8005004:	60fb      	str	r3, [r7, #12]
 8005006:	e046      	b.n	8005096 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6919      	ldr	r1, [r3, #16]
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	4613      	mov	r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	00db      	lsls	r3, r3, #3
 8005016:	440b      	add	r3, r1
 8005018:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	2200      	movs	r2, #0
 800501e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	2200      	movs	r2, #0
 8005024:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	2200      	movs	r2, #0
 800502a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	2200      	movs	r2, #0
 8005030:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	2200      	movs	r2, #0
 8005036:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	2200      	movs	r2, #0
 800503c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005044:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	f244 52f8 	movw	r2, #17912	; 0x45f8
 800504c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800505a:	68b9      	ldr	r1, [r7, #8]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	3212      	adds	r2, #18
 8005062:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2b02      	cmp	r3, #2
 800506a:	d80c      	bhi.n	8005086 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6919      	ldr	r1, [r3, #16]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	1c5a      	adds	r2, r3, #1
 8005074:	4613      	mov	r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	4413      	add	r3, r2
 800507a:	00db      	lsls	r3, r3, #3
 800507c:	440b      	add	r3, r1
 800507e:	461a      	mov	r2, r3
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	60da      	str	r2, [r3, #12]
 8005084:	e004      	b.n	8005090 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	461a      	mov	r2, r3
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	3301      	adds	r3, #1
 8005094:	60fb      	str	r3, [r7, #12]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2b03      	cmp	r3, #3
 800509a:	d9b5      	bls.n	8005008 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	691a      	ldr	r2, [r3, #16]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050c6:	60da      	str	r2, [r3, #12]
}
 80050c8:	bf00      	nop
 80050ca:	3714      	adds	r7, #20
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b089      	sub	sp, #36	; 0x24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80050de:	2300      	movs	r3, #0
 80050e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80050e2:	2300      	movs	r3, #0
 80050e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80050e6:	2300      	movs	r3, #0
 80050e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050ea:	2300      	movs	r3, #0
 80050ec:	61fb      	str	r3, [r7, #28]
 80050ee:	e16b      	b.n	80053c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80050f0:	2201      	movs	r2, #1
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	fa02 f303 	lsl.w	r3, r2, r3
 80050f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	4013      	ands	r3, r2
 8005102:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	429a      	cmp	r2, r3
 800510a:	f040 815a 	bne.w	80053c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f003 0303 	and.w	r3, r3, #3
 8005116:	2b01      	cmp	r3, #1
 8005118:	d005      	beq.n	8005126 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005122:	2b02      	cmp	r3, #2
 8005124:	d130      	bne.n	8005188 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	005b      	lsls	r3, r3, #1
 8005130:	2203      	movs	r2, #3
 8005132:	fa02 f303 	lsl.w	r3, r2, r3
 8005136:	43db      	mvns	r3, r3
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	4013      	ands	r3, r2
 800513c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	68da      	ldr	r2, [r3, #12]
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	005b      	lsls	r3, r3, #1
 8005146:	fa02 f303 	lsl.w	r3, r2, r3
 800514a:	69ba      	ldr	r2, [r7, #24]
 800514c:	4313      	orrs	r3, r2
 800514e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800515c:	2201      	movs	r2, #1
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	fa02 f303 	lsl.w	r3, r2, r3
 8005164:	43db      	mvns	r3, r3
 8005166:	69ba      	ldr	r2, [r7, #24]
 8005168:	4013      	ands	r3, r2
 800516a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	091b      	lsrs	r3, r3, #4
 8005172:	f003 0201 	and.w	r2, r3, #1
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	fa02 f303 	lsl.w	r3, r2, r3
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	4313      	orrs	r3, r2
 8005180:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f003 0303 	and.w	r3, r3, #3
 8005190:	2b03      	cmp	r3, #3
 8005192:	d017      	beq.n	80051c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	005b      	lsls	r3, r3, #1
 800519e:	2203      	movs	r2, #3
 80051a0:	fa02 f303 	lsl.w	r3, r2, r3
 80051a4:	43db      	mvns	r3, r3
 80051a6:	69ba      	ldr	r2, [r7, #24]
 80051a8:	4013      	ands	r3, r2
 80051aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	689a      	ldr	r2, [r3, #8]
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	005b      	lsls	r3, r3, #1
 80051b4:	fa02 f303 	lsl.w	r3, r2, r3
 80051b8:	69ba      	ldr	r2, [r7, #24]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f003 0303 	and.w	r3, r3, #3
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d123      	bne.n	8005218 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	08da      	lsrs	r2, r3, #3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	3208      	adds	r2, #8
 80051d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	f003 0307 	and.w	r3, r3, #7
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	220f      	movs	r2, #15
 80051e8:	fa02 f303 	lsl.w	r3, r2, r3
 80051ec:	43db      	mvns	r3, r3
 80051ee:	69ba      	ldr	r2, [r7, #24]
 80051f0:	4013      	ands	r3, r2
 80051f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	691a      	ldr	r2, [r3, #16]
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	f003 0307 	and.w	r3, r3, #7
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	fa02 f303 	lsl.w	r3, r2, r3
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	4313      	orrs	r3, r2
 8005208:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	08da      	lsrs	r2, r3, #3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	3208      	adds	r2, #8
 8005212:	69b9      	ldr	r1, [r7, #24]
 8005214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	005b      	lsls	r3, r3, #1
 8005222:	2203      	movs	r2, #3
 8005224:	fa02 f303 	lsl.w	r3, r2, r3
 8005228:	43db      	mvns	r3, r3
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	4013      	ands	r3, r2
 800522e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f003 0203 	and.w	r2, r3, #3
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	005b      	lsls	r3, r3, #1
 800523c:	fa02 f303 	lsl.w	r3, r2, r3
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	4313      	orrs	r3, r2
 8005244:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	69ba      	ldr	r2, [r7, #24]
 800524a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005254:	2b00      	cmp	r3, #0
 8005256:	f000 80b4 	beq.w	80053c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800525a:	2300      	movs	r3, #0
 800525c:	60fb      	str	r3, [r7, #12]
 800525e:	4b60      	ldr	r3, [pc, #384]	; (80053e0 <HAL_GPIO_Init+0x30c>)
 8005260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005262:	4a5f      	ldr	r2, [pc, #380]	; (80053e0 <HAL_GPIO_Init+0x30c>)
 8005264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005268:	6453      	str	r3, [r2, #68]	; 0x44
 800526a:	4b5d      	ldr	r3, [pc, #372]	; (80053e0 <HAL_GPIO_Init+0x30c>)
 800526c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005272:	60fb      	str	r3, [r7, #12]
 8005274:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005276:	4a5b      	ldr	r2, [pc, #364]	; (80053e4 <HAL_GPIO_Init+0x310>)
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	089b      	lsrs	r3, r3, #2
 800527c:	3302      	adds	r3, #2
 800527e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005282:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	f003 0303 	and.w	r3, r3, #3
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	220f      	movs	r2, #15
 800528e:	fa02 f303 	lsl.w	r3, r2, r3
 8005292:	43db      	mvns	r3, r3
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	4013      	ands	r3, r2
 8005298:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a52      	ldr	r2, [pc, #328]	; (80053e8 <HAL_GPIO_Init+0x314>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d02b      	beq.n	80052fa <HAL_GPIO_Init+0x226>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a51      	ldr	r2, [pc, #324]	; (80053ec <HAL_GPIO_Init+0x318>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d025      	beq.n	80052f6 <HAL_GPIO_Init+0x222>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a50      	ldr	r2, [pc, #320]	; (80053f0 <HAL_GPIO_Init+0x31c>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d01f      	beq.n	80052f2 <HAL_GPIO_Init+0x21e>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a4f      	ldr	r2, [pc, #316]	; (80053f4 <HAL_GPIO_Init+0x320>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d019      	beq.n	80052ee <HAL_GPIO_Init+0x21a>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a4e      	ldr	r2, [pc, #312]	; (80053f8 <HAL_GPIO_Init+0x324>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d013      	beq.n	80052ea <HAL_GPIO_Init+0x216>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a4d      	ldr	r2, [pc, #308]	; (80053fc <HAL_GPIO_Init+0x328>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d00d      	beq.n	80052e6 <HAL_GPIO_Init+0x212>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a4c      	ldr	r2, [pc, #304]	; (8005400 <HAL_GPIO_Init+0x32c>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d007      	beq.n	80052e2 <HAL_GPIO_Init+0x20e>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a4b      	ldr	r2, [pc, #300]	; (8005404 <HAL_GPIO_Init+0x330>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d101      	bne.n	80052de <HAL_GPIO_Init+0x20a>
 80052da:	2307      	movs	r3, #7
 80052dc:	e00e      	b.n	80052fc <HAL_GPIO_Init+0x228>
 80052de:	2308      	movs	r3, #8
 80052e0:	e00c      	b.n	80052fc <HAL_GPIO_Init+0x228>
 80052e2:	2306      	movs	r3, #6
 80052e4:	e00a      	b.n	80052fc <HAL_GPIO_Init+0x228>
 80052e6:	2305      	movs	r3, #5
 80052e8:	e008      	b.n	80052fc <HAL_GPIO_Init+0x228>
 80052ea:	2304      	movs	r3, #4
 80052ec:	e006      	b.n	80052fc <HAL_GPIO_Init+0x228>
 80052ee:	2303      	movs	r3, #3
 80052f0:	e004      	b.n	80052fc <HAL_GPIO_Init+0x228>
 80052f2:	2302      	movs	r3, #2
 80052f4:	e002      	b.n	80052fc <HAL_GPIO_Init+0x228>
 80052f6:	2301      	movs	r3, #1
 80052f8:	e000      	b.n	80052fc <HAL_GPIO_Init+0x228>
 80052fa:	2300      	movs	r3, #0
 80052fc:	69fa      	ldr	r2, [r7, #28]
 80052fe:	f002 0203 	and.w	r2, r2, #3
 8005302:	0092      	lsls	r2, r2, #2
 8005304:	4093      	lsls	r3, r2
 8005306:	69ba      	ldr	r2, [r7, #24]
 8005308:	4313      	orrs	r3, r2
 800530a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800530c:	4935      	ldr	r1, [pc, #212]	; (80053e4 <HAL_GPIO_Init+0x310>)
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	089b      	lsrs	r3, r3, #2
 8005312:	3302      	adds	r3, #2
 8005314:	69ba      	ldr	r2, [r7, #24]
 8005316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800531a:	4b3b      	ldr	r3, [pc, #236]	; (8005408 <HAL_GPIO_Init+0x334>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	43db      	mvns	r3, r3
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	4013      	ands	r3, r2
 8005328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d003      	beq.n	800533e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005336:	69ba      	ldr	r2, [r7, #24]
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	4313      	orrs	r3, r2
 800533c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800533e:	4a32      	ldr	r2, [pc, #200]	; (8005408 <HAL_GPIO_Init+0x334>)
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005344:	4b30      	ldr	r3, [pc, #192]	; (8005408 <HAL_GPIO_Init+0x334>)
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	43db      	mvns	r3, r3
 800534e:	69ba      	ldr	r2, [r7, #24]
 8005350:	4013      	ands	r3, r2
 8005352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d003      	beq.n	8005368 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005360:	69ba      	ldr	r2, [r7, #24]
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	4313      	orrs	r3, r2
 8005366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005368:	4a27      	ldr	r2, [pc, #156]	; (8005408 <HAL_GPIO_Init+0x334>)
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800536e:	4b26      	ldr	r3, [pc, #152]	; (8005408 <HAL_GPIO_Init+0x334>)
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	43db      	mvns	r3, r3
 8005378:	69ba      	ldr	r2, [r7, #24]
 800537a:	4013      	ands	r3, r2
 800537c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800538a:	69ba      	ldr	r2, [r7, #24]
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	4313      	orrs	r3, r2
 8005390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005392:	4a1d      	ldr	r2, [pc, #116]	; (8005408 <HAL_GPIO_Init+0x334>)
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005398:	4b1b      	ldr	r3, [pc, #108]	; (8005408 <HAL_GPIO_Init+0x334>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	43db      	mvns	r3, r3
 80053a2:	69ba      	ldr	r2, [r7, #24]
 80053a4:	4013      	ands	r3, r2
 80053a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d003      	beq.n	80053bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80053b4:	69ba      	ldr	r2, [r7, #24]
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80053bc:	4a12      	ldr	r2, [pc, #72]	; (8005408 <HAL_GPIO_Init+0x334>)
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	3301      	adds	r3, #1
 80053c6:	61fb      	str	r3, [r7, #28]
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	2b0f      	cmp	r3, #15
 80053cc:	f67f ae90 	bls.w	80050f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80053d0:	bf00      	nop
 80053d2:	bf00      	nop
 80053d4:	3724      	adds	r7, #36	; 0x24
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	40023800 	.word	0x40023800
 80053e4:	40013800 	.word	0x40013800
 80053e8:	40020000 	.word	0x40020000
 80053ec:	40020400 	.word	0x40020400
 80053f0:	40020800 	.word	0x40020800
 80053f4:	40020c00 	.word	0x40020c00
 80053f8:	40021000 	.word	0x40021000
 80053fc:	40021400 	.word	0x40021400
 8005400:	40021800 	.word	0x40021800
 8005404:	40021c00 	.word	0x40021c00
 8005408:	40013c00 	.word	0x40013c00

0800540c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	460b      	mov	r3, r1
 8005416:	807b      	strh	r3, [r7, #2]
 8005418:	4613      	mov	r3, r2
 800541a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800541c:	787b      	ldrb	r3, [r7, #1]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d003      	beq.n	800542a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005422:	887a      	ldrh	r2, [r7, #2]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005428:	e003      	b.n	8005432 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800542a:	887b      	ldrh	r3, [r7, #2]
 800542c:	041a      	lsls	r2, r3, #16
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	619a      	str	r2, [r3, #24]
}
 8005432:	bf00      	nop
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
	...

08005440 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e12b      	b.n	80056aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d106      	bne.n	800546c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7fc f88a 	bl	8001580 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2224      	movs	r2, #36	; 0x24
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f022 0201 	bic.w	r2, r2, #1
 8005482:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005492:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80054a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80054a4:	f001 fd3c 	bl	8006f20 <HAL_RCC_GetPCLK1Freq>
 80054a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	4a81      	ldr	r2, [pc, #516]	; (80056b4 <HAL_I2C_Init+0x274>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d807      	bhi.n	80054c4 <HAL_I2C_Init+0x84>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	4a80      	ldr	r2, [pc, #512]	; (80056b8 <HAL_I2C_Init+0x278>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	bf94      	ite	ls
 80054bc:	2301      	movls	r3, #1
 80054be:	2300      	movhi	r3, #0
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	e006      	b.n	80054d2 <HAL_I2C_Init+0x92>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	4a7d      	ldr	r2, [pc, #500]	; (80056bc <HAL_I2C_Init+0x27c>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	bf94      	ite	ls
 80054cc:	2301      	movls	r3, #1
 80054ce:	2300      	movhi	r3, #0
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d001      	beq.n	80054da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e0e7      	b.n	80056aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	4a78      	ldr	r2, [pc, #480]	; (80056c0 <HAL_I2C_Init+0x280>)
 80054de:	fba2 2303 	umull	r2, r3, r2, r3
 80054e2:	0c9b      	lsrs	r3, r3, #18
 80054e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	6a1b      	ldr	r3, [r3, #32]
 8005500:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	4a6a      	ldr	r2, [pc, #424]	; (80056b4 <HAL_I2C_Init+0x274>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d802      	bhi.n	8005514 <HAL_I2C_Init+0xd4>
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	3301      	adds	r3, #1
 8005512:	e009      	b.n	8005528 <HAL_I2C_Init+0xe8>
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800551a:	fb02 f303 	mul.w	r3, r2, r3
 800551e:	4a69      	ldr	r2, [pc, #420]	; (80056c4 <HAL_I2C_Init+0x284>)
 8005520:	fba2 2303 	umull	r2, r3, r2, r3
 8005524:	099b      	lsrs	r3, r3, #6
 8005526:	3301      	adds	r3, #1
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	6812      	ldr	r2, [r2, #0]
 800552c:	430b      	orrs	r3, r1
 800552e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800553a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	495c      	ldr	r1, [pc, #368]	; (80056b4 <HAL_I2C_Init+0x274>)
 8005544:	428b      	cmp	r3, r1
 8005546:	d819      	bhi.n	800557c <HAL_I2C_Init+0x13c>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	1e59      	subs	r1, r3, #1
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	005b      	lsls	r3, r3, #1
 8005552:	fbb1 f3f3 	udiv	r3, r1, r3
 8005556:	1c59      	adds	r1, r3, #1
 8005558:	f640 73fc 	movw	r3, #4092	; 0xffc
 800555c:	400b      	ands	r3, r1
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00a      	beq.n	8005578 <HAL_I2C_Init+0x138>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	1e59      	subs	r1, r3, #1
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005570:	3301      	adds	r3, #1
 8005572:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005576:	e051      	b.n	800561c <HAL_I2C_Init+0x1dc>
 8005578:	2304      	movs	r3, #4
 800557a:	e04f      	b.n	800561c <HAL_I2C_Init+0x1dc>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d111      	bne.n	80055a8 <HAL_I2C_Init+0x168>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	1e58      	subs	r0, r3, #1
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6859      	ldr	r1, [r3, #4]
 800558c:	460b      	mov	r3, r1
 800558e:	005b      	lsls	r3, r3, #1
 8005590:	440b      	add	r3, r1
 8005592:	fbb0 f3f3 	udiv	r3, r0, r3
 8005596:	3301      	adds	r3, #1
 8005598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800559c:	2b00      	cmp	r3, #0
 800559e:	bf0c      	ite	eq
 80055a0:	2301      	moveq	r3, #1
 80055a2:	2300      	movne	r3, #0
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	e012      	b.n	80055ce <HAL_I2C_Init+0x18e>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	1e58      	subs	r0, r3, #1
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6859      	ldr	r1, [r3, #4]
 80055b0:	460b      	mov	r3, r1
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	440b      	add	r3, r1
 80055b6:	0099      	lsls	r1, r3, #2
 80055b8:	440b      	add	r3, r1
 80055ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80055be:	3301      	adds	r3, #1
 80055c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	bf0c      	ite	eq
 80055c8:	2301      	moveq	r3, #1
 80055ca:	2300      	movne	r3, #0
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d001      	beq.n	80055d6 <HAL_I2C_Init+0x196>
 80055d2:	2301      	movs	r3, #1
 80055d4:	e022      	b.n	800561c <HAL_I2C_Init+0x1dc>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10e      	bne.n	80055fc <HAL_I2C_Init+0x1bc>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	1e58      	subs	r0, r3, #1
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6859      	ldr	r1, [r3, #4]
 80055e6:	460b      	mov	r3, r1
 80055e8:	005b      	lsls	r3, r3, #1
 80055ea:	440b      	add	r3, r1
 80055ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80055f0:	3301      	adds	r3, #1
 80055f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055fa:	e00f      	b.n	800561c <HAL_I2C_Init+0x1dc>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	1e58      	subs	r0, r3, #1
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6859      	ldr	r1, [r3, #4]
 8005604:	460b      	mov	r3, r1
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	440b      	add	r3, r1
 800560a:	0099      	lsls	r1, r3, #2
 800560c:	440b      	add	r3, r1
 800560e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005612:	3301      	adds	r3, #1
 8005614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005618:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800561c:	6879      	ldr	r1, [r7, #4]
 800561e:	6809      	ldr	r1, [r1, #0]
 8005620:	4313      	orrs	r3, r2
 8005622:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	69da      	ldr	r2, [r3, #28]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	431a      	orrs	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	430a      	orrs	r2, r1
 800563e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800564a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	6911      	ldr	r1, [r2, #16]
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	68d2      	ldr	r2, [r2, #12]
 8005656:	4311      	orrs	r1, r2
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	6812      	ldr	r2, [r2, #0]
 800565c:	430b      	orrs	r3, r1
 800565e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	695a      	ldr	r2, [r3, #20]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	431a      	orrs	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	430a      	orrs	r2, r1
 800567a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f042 0201 	orr.w	r2, r2, #1
 800568a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2220      	movs	r2, #32
 8005696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	000186a0 	.word	0x000186a0
 80056b8:	001e847f 	.word	0x001e847f
 80056bc:	003d08ff 	.word	0x003d08ff
 80056c0:	431bde83 	.word	0x431bde83
 80056c4:	10624dd3 	.word	0x10624dd3

080056c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b088      	sub	sp, #32
 80056cc:	af02      	add	r7, sp, #8
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	607a      	str	r2, [r7, #4]
 80056d2:	461a      	mov	r2, r3
 80056d4:	460b      	mov	r3, r1
 80056d6:	817b      	strh	r3, [r7, #10]
 80056d8:	4613      	mov	r3, r2
 80056da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80056dc:	f7fe fd9c 	bl	8004218 <HAL_GetTick>
 80056e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b20      	cmp	r3, #32
 80056ec:	f040 80e0 	bne.w	80058b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	2319      	movs	r3, #25
 80056f6:	2201      	movs	r2, #1
 80056f8:	4970      	ldr	r1, [pc, #448]	; (80058bc <HAL_I2C_Master_Transmit+0x1f4>)
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f000 fe02 	bl	8006304 <I2C_WaitOnFlagUntilTimeout>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d001      	beq.n	800570a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005706:	2302      	movs	r3, #2
 8005708:	e0d3      	b.n	80058b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005710:	2b01      	cmp	r3, #1
 8005712:	d101      	bne.n	8005718 <HAL_I2C_Master_Transmit+0x50>
 8005714:	2302      	movs	r3, #2
 8005716:	e0cc      	b.n	80058b2 <HAL_I2C_Master_Transmit+0x1ea>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b01      	cmp	r3, #1
 800572c:	d007      	beq.n	800573e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f042 0201 	orr.w	r2, r2, #1
 800573c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800574c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2221      	movs	r2, #33	; 0x21
 8005752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2210      	movs	r2, #16
 800575a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	893a      	ldrh	r2, [r7, #8]
 800576e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005774:	b29a      	uxth	r2, r3
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	4a50      	ldr	r2, [pc, #320]	; (80058c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800577e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005780:	8979      	ldrh	r1, [r7, #10]
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	6a3a      	ldr	r2, [r7, #32]
 8005786:	68f8      	ldr	r0, [r7, #12]
 8005788:	f000 fbbc 	bl	8005f04 <I2C_MasterRequestWrite>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d001      	beq.n	8005796 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e08d      	b.n	80058b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005796:	2300      	movs	r3, #0
 8005798:	613b      	str	r3, [r7, #16]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	695b      	ldr	r3, [r3, #20]
 80057a0:	613b      	str	r3, [r7, #16]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	613b      	str	r3, [r7, #16]
 80057aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80057ac:	e066      	b.n	800587c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	6a39      	ldr	r1, [r7, #32]
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f000 fe7c 	bl	80064b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00d      	beq.n	80057da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c2:	2b04      	cmp	r3, #4
 80057c4:	d107      	bne.n	80057d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e06b      	b.n	80058b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057de:	781a      	ldrb	r2, [r3, #0]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ea:	1c5a      	adds	r2, r3, #1
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	3b01      	subs	r3, #1
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005802:	3b01      	subs	r3, #1
 8005804:	b29a      	uxth	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	f003 0304 	and.w	r3, r3, #4
 8005814:	2b04      	cmp	r3, #4
 8005816:	d11b      	bne.n	8005850 <HAL_I2C_Master_Transmit+0x188>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800581c:	2b00      	cmp	r3, #0
 800581e:	d017      	beq.n	8005850 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005824:	781a      	ldrb	r2, [r3, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005830:	1c5a      	adds	r2, r3, #1
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800583a:	b29b      	uxth	r3, r3
 800583c:	3b01      	subs	r3, #1
 800583e:	b29a      	uxth	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005848:	3b01      	subs	r3, #1
 800584a:	b29a      	uxth	r2, r3
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005850:	697a      	ldr	r2, [r7, #20]
 8005852:	6a39      	ldr	r1, [r7, #32]
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f000 fe6c 	bl	8006532 <I2C_WaitOnBTFFlagUntilTimeout>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00d      	beq.n	800587c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005864:	2b04      	cmp	r3, #4
 8005866:	d107      	bne.n	8005878 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005876:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e01a      	b.n	80058b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005880:	2b00      	cmp	r3, #0
 8005882:	d194      	bne.n	80057ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005892:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2220      	movs	r2, #32
 8005898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80058ac:	2300      	movs	r3, #0
 80058ae:	e000      	b.n	80058b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80058b0:	2302      	movs	r3, #2
  }
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3718      	adds	r7, #24
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	00100002 	.word	0x00100002
 80058c0:	ffff0000 	.word	0xffff0000

080058c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b088      	sub	sp, #32
 80058c8:	af02      	add	r7, sp, #8
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	4608      	mov	r0, r1
 80058ce:	4611      	mov	r1, r2
 80058d0:	461a      	mov	r2, r3
 80058d2:	4603      	mov	r3, r0
 80058d4:	817b      	strh	r3, [r7, #10]
 80058d6:	460b      	mov	r3, r1
 80058d8:	813b      	strh	r3, [r7, #8]
 80058da:	4613      	mov	r3, r2
 80058dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80058de:	f7fe fc9b 	bl	8004218 <HAL_GetTick>
 80058e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	2b20      	cmp	r3, #32
 80058ee:	f040 80d9 	bne.w	8005aa4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	2319      	movs	r3, #25
 80058f8:	2201      	movs	r2, #1
 80058fa:	496d      	ldr	r1, [pc, #436]	; (8005ab0 <HAL_I2C_Mem_Write+0x1ec>)
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f000 fd01 	bl	8006304 <I2C_WaitOnFlagUntilTimeout>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d001      	beq.n	800590c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005908:	2302      	movs	r3, #2
 800590a:	e0cc      	b.n	8005aa6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005912:	2b01      	cmp	r3, #1
 8005914:	d101      	bne.n	800591a <HAL_I2C_Mem_Write+0x56>
 8005916:	2302      	movs	r3, #2
 8005918:	e0c5      	b.n	8005aa6 <HAL_I2C_Mem_Write+0x1e2>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0301 	and.w	r3, r3, #1
 800592c:	2b01      	cmp	r3, #1
 800592e:	d007      	beq.n	8005940 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f042 0201 	orr.w	r2, r2, #1
 800593e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800594e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2221      	movs	r2, #33	; 0x21
 8005954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2240      	movs	r2, #64	; 0x40
 800595c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6a3a      	ldr	r2, [r7, #32]
 800596a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005970:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005976:	b29a      	uxth	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	4a4d      	ldr	r2, [pc, #308]	; (8005ab4 <HAL_I2C_Mem_Write+0x1f0>)
 8005980:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005982:	88f8      	ldrh	r0, [r7, #6]
 8005984:	893a      	ldrh	r2, [r7, #8]
 8005986:	8979      	ldrh	r1, [r7, #10]
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	9301      	str	r3, [sp, #4]
 800598c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598e:	9300      	str	r3, [sp, #0]
 8005990:	4603      	mov	r3, r0
 8005992:	68f8      	ldr	r0, [r7, #12]
 8005994:	f000 fb38 	bl	8006008 <I2C_RequestMemoryWrite>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d052      	beq.n	8005a44 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e081      	b.n	8005aa6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059a6:	68f8      	ldr	r0, [r7, #12]
 80059a8:	f000 fd82 	bl	80064b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00d      	beq.n	80059ce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b6:	2b04      	cmp	r3, #4
 80059b8:	d107      	bne.n	80059ca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e06b      	b.n	8005aa6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d2:	781a      	ldrb	r2, [r3, #0]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059de:	1c5a      	adds	r2, r3, #1
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059e8:	3b01      	subs	r3, #1
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	3b01      	subs	r3, #1
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	f003 0304 	and.w	r3, r3, #4
 8005a08:	2b04      	cmp	r3, #4
 8005a0a:	d11b      	bne.n	8005a44 <HAL_I2C_Mem_Write+0x180>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d017      	beq.n	8005a44 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a18:	781a      	ldrb	r2, [r3, #0]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a24:	1c5a      	adds	r2, r3, #1
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1aa      	bne.n	80059a2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f000 fd6e 	bl	8006532 <I2C_WaitOnBTFFlagUntilTimeout>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00d      	beq.n	8005a78 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a60:	2b04      	cmp	r3, #4
 8005a62:	d107      	bne.n	8005a74 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a72:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e016      	b.n	8005aa6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	e000      	b.n	8005aa6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005aa4:	2302      	movs	r3, #2
  }
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3718      	adds	r7, #24
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	00100002 	.word	0x00100002
 8005ab4:	ffff0000 	.word	0xffff0000

08005ab8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b08c      	sub	sp, #48	; 0x30
 8005abc:	af02      	add	r7, sp, #8
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	4608      	mov	r0, r1
 8005ac2:	4611      	mov	r1, r2
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	817b      	strh	r3, [r7, #10]
 8005aca:	460b      	mov	r3, r1
 8005acc:	813b      	strh	r3, [r7, #8]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005ad2:	f7fe fba1 	bl	8004218 <HAL_GetTick>
 8005ad6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	2b20      	cmp	r3, #32
 8005ae2:	f040 8208 	bne.w	8005ef6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	2319      	movs	r3, #25
 8005aec:	2201      	movs	r2, #1
 8005aee:	497b      	ldr	r1, [pc, #492]	; (8005cdc <HAL_I2C_Mem_Read+0x224>)
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f000 fc07 	bl	8006304 <I2C_WaitOnFlagUntilTimeout>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d001      	beq.n	8005b00 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005afc:	2302      	movs	r3, #2
 8005afe:	e1fb      	b.n	8005ef8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d101      	bne.n	8005b0e <HAL_I2C_Mem_Read+0x56>
 8005b0a:	2302      	movs	r3, #2
 8005b0c:	e1f4      	b.n	8005ef8 <HAL_I2C_Mem_Read+0x440>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0301 	and.w	r3, r3, #1
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d007      	beq.n	8005b34 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f042 0201 	orr.w	r2, r2, #1
 8005b32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2222      	movs	r2, #34	; 0x22
 8005b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2240      	movs	r2, #64	; 0x40
 8005b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005b64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	4a5b      	ldr	r2, [pc, #364]	; (8005ce0 <HAL_I2C_Mem_Read+0x228>)
 8005b74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b76:	88f8      	ldrh	r0, [r7, #6]
 8005b78:	893a      	ldrh	r2, [r7, #8]
 8005b7a:	8979      	ldrh	r1, [r7, #10]
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7e:	9301      	str	r3, [sp, #4]
 8005b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b82:	9300      	str	r3, [sp, #0]
 8005b84:	4603      	mov	r3, r0
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f000 fad4 	bl	8006134 <I2C_RequestMemoryRead>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d001      	beq.n	8005b96 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e1b0      	b.n	8005ef8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d113      	bne.n	8005bc6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	623b      	str	r3, [r7, #32]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	695b      	ldr	r3, [r3, #20]
 8005ba8:	623b      	str	r3, [r7, #32]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	623b      	str	r3, [r7, #32]
 8005bb2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	e184      	b.n	8005ed0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d11b      	bne.n	8005c06 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bdc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bde:	2300      	movs	r3, #0
 8005be0:	61fb      	str	r3, [r7, #28]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	61fb      	str	r3, [r7, #28]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	61fb      	str	r3, [r7, #28]
 8005bf2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c02:	601a      	str	r2, [r3, #0]
 8005c04:	e164      	b.n	8005ed0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d11b      	bne.n	8005c46 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c1c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c2e:	2300      	movs	r3, #0
 8005c30:	61bb      	str	r3, [r7, #24]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	61bb      	str	r3, [r7, #24]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	61bb      	str	r3, [r7, #24]
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	e144      	b.n	8005ed0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c46:	2300      	movs	r3, #0
 8005c48:	617b      	str	r3, [r7, #20]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	617b      	str	r3, [r7, #20]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	617b      	str	r3, [r7, #20]
 8005c5a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005c5c:	e138      	b.n	8005ed0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c62:	2b03      	cmp	r3, #3
 8005c64:	f200 80f1 	bhi.w	8005e4a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d123      	bne.n	8005cb8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f000 fc9d 	bl	80065b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d001      	beq.n	8005c84 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e139      	b.n	8005ef8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	691a      	ldr	r2, [r3, #16]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8e:	b2d2      	uxtb	r2, r2
 8005c90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c96:	1c5a      	adds	r2, r3, #1
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005cb6:	e10b      	b.n	8005ed0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d14e      	bne.n	8005d5e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc2:	9300      	str	r3, [sp, #0]
 8005cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	4906      	ldr	r1, [pc, #24]	; (8005ce4 <HAL_I2C_Mem_Read+0x22c>)
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	f000 fb1a 	bl	8006304 <I2C_WaitOnFlagUntilTimeout>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d008      	beq.n	8005ce8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e10e      	b.n	8005ef8 <HAL_I2C_Mem_Read+0x440>
 8005cda:	bf00      	nop
 8005cdc:	00100002 	.word	0x00100002
 8005ce0:	ffff0000 	.word	0xffff0000
 8005ce4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cf6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	691a      	ldr	r2, [r3, #16]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d02:	b2d2      	uxtb	r2, r2
 8005d04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0a:	1c5a      	adds	r2, r3, #1
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d14:	3b01      	subs	r3, #1
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	3b01      	subs	r3, #1
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	691a      	ldr	r2, [r3, #16]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d34:	b2d2      	uxtb	r2, r2
 8005d36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3c:	1c5a      	adds	r2, r3, #1
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d46:	3b01      	subs	r3, #1
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	3b01      	subs	r3, #1
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d5c:	e0b8      	b.n	8005ed0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d60:	9300      	str	r3, [sp, #0]
 8005d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d64:	2200      	movs	r2, #0
 8005d66:	4966      	ldr	r1, [pc, #408]	; (8005f00 <HAL_I2C_Mem_Read+0x448>)
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f000 facb 	bl	8006304 <I2C_WaitOnFlagUntilTimeout>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d001      	beq.n	8005d78 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e0bf      	b.n	8005ef8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	691a      	ldr	r2, [r3, #16]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d92:	b2d2      	uxtb	r2, r2
 8005d94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9a:	1c5a      	adds	r2, r3, #1
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005da4:	3b01      	subs	r3, #1
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	3b01      	subs	r3, #1
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbc:	9300      	str	r3, [sp, #0]
 8005dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	494f      	ldr	r1, [pc, #316]	; (8005f00 <HAL_I2C_Mem_Read+0x448>)
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f000 fa9d 	bl	8006304 <I2C_WaitOnFlagUntilTimeout>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d001      	beq.n	8005dd4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e091      	b.n	8005ef8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005de2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	691a      	ldr	r2, [r3, #16]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dee:	b2d2      	uxtb	r2, r2
 8005df0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df6:	1c5a      	adds	r2, r3, #1
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e00:	3b01      	subs	r3, #1
 8005e02:	b29a      	uxth	r2, r3
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	691a      	ldr	r2, [r3, #16]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e20:	b2d2      	uxtb	r2, r2
 8005e22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e28:	1c5a      	adds	r2, r3, #1
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e32:	3b01      	subs	r3, #1
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	3b01      	subs	r3, #1
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e48:	e042      	b.n	8005ed0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e4e:	68f8      	ldr	r0, [r7, #12]
 8005e50:	f000 fbb0 	bl	80065b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d001      	beq.n	8005e5e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e04c      	b.n	8005ef8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	691a      	ldr	r2, [r3, #16]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e68:	b2d2      	uxtb	r2, r2
 8005e6a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	1c5a      	adds	r2, r3, #1
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	f003 0304 	and.w	r3, r3, #4
 8005e9a:	2b04      	cmp	r3, #4
 8005e9c:	d118      	bne.n	8005ed0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	691a      	ldr	r2, [r3, #16]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea8:	b2d2      	uxtb	r2, r2
 8005eaa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb0:	1c5a      	adds	r2, r3, #1
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f47f aec2 	bne.w	8005c5e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2220      	movs	r2, #32
 8005ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	e000      	b.n	8005ef8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005ef6:	2302      	movs	r3, #2
  }
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3728      	adds	r7, #40	; 0x28
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	00010004 	.word	0x00010004

08005f04 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b088      	sub	sp, #32
 8005f08:	af02      	add	r7, sp, #8
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	607a      	str	r2, [r7, #4]
 8005f0e:	603b      	str	r3, [r7, #0]
 8005f10:	460b      	mov	r3, r1
 8005f12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f18:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	2b08      	cmp	r3, #8
 8005f1e:	d006      	beq.n	8005f2e <I2C_MasterRequestWrite+0x2a>
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d003      	beq.n	8005f2e <I2C_MasterRequestWrite+0x2a>
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f2c:	d108      	bne.n	8005f40 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f3c:	601a      	str	r2, [r3, #0]
 8005f3e:	e00b      	b.n	8005f58 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f44:	2b12      	cmp	r3, #18
 8005f46:	d107      	bne.n	8005f58 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f56:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	9300      	str	r3, [sp, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f000 f9cd 	bl	8006304 <I2C_WaitOnFlagUntilTimeout>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d00d      	beq.n	8005f8c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f7e:	d103      	bne.n	8005f88 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	e035      	b.n	8005ff8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f94:	d108      	bne.n	8005fa8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f96:	897b      	ldrh	r3, [r7, #10]
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005fa4:	611a      	str	r2, [r3, #16]
 8005fa6:	e01b      	b.n	8005fe0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005fa8:	897b      	ldrh	r3, [r7, #10]
 8005faa:	11db      	asrs	r3, r3, #7
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	f003 0306 	and.w	r3, r3, #6
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	f063 030f 	orn	r3, r3, #15
 8005fb8:	b2da      	uxtb	r2, r3
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	490e      	ldr	r1, [pc, #56]	; (8006000 <I2C_MasterRequestWrite+0xfc>)
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f000 f9f3 	bl	80063b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d001      	beq.n	8005fd6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e010      	b.n	8005ff8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005fd6:	897b      	ldrh	r3, [r7, #10]
 8005fd8:	b2da      	uxtb	r2, r3
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	4907      	ldr	r1, [pc, #28]	; (8006004 <I2C_MasterRequestWrite+0x100>)
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f000 f9e3 	bl	80063b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d001      	beq.n	8005ff6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e000      	b.n	8005ff8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3718      	adds	r7, #24
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	00010008 	.word	0x00010008
 8006004:	00010002 	.word	0x00010002

08006008 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b088      	sub	sp, #32
 800600c:	af02      	add	r7, sp, #8
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	4608      	mov	r0, r1
 8006012:	4611      	mov	r1, r2
 8006014:	461a      	mov	r2, r3
 8006016:	4603      	mov	r3, r0
 8006018:	817b      	strh	r3, [r7, #10]
 800601a:	460b      	mov	r3, r1
 800601c:	813b      	strh	r3, [r7, #8]
 800601e:	4613      	mov	r3, r2
 8006020:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006030:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	6a3b      	ldr	r3, [r7, #32]
 8006038:	2200      	movs	r2, #0
 800603a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	f000 f960 	bl	8006304 <I2C_WaitOnFlagUntilTimeout>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00d      	beq.n	8006066 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006058:	d103      	bne.n	8006062 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006060:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e05f      	b.n	8006126 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006066:	897b      	ldrh	r3, [r7, #10]
 8006068:	b2db      	uxtb	r3, r3
 800606a:	461a      	mov	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006074:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006078:	6a3a      	ldr	r2, [r7, #32]
 800607a:	492d      	ldr	r1, [pc, #180]	; (8006130 <I2C_RequestMemoryWrite+0x128>)
 800607c:	68f8      	ldr	r0, [r7, #12]
 800607e:	f000 f998 	bl	80063b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d001      	beq.n	800608c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e04c      	b.n	8006126 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800608c:	2300      	movs	r3, #0
 800608e:	617b      	str	r3, [r7, #20]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	695b      	ldr	r3, [r3, #20]
 8006096:	617b      	str	r3, [r7, #20]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	617b      	str	r3, [r7, #20]
 80060a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060a4:	6a39      	ldr	r1, [r7, #32]
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f000 fa02 	bl	80064b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00d      	beq.n	80060ce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b6:	2b04      	cmp	r3, #4
 80060b8:	d107      	bne.n	80060ca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e02b      	b.n	8006126 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80060ce:	88fb      	ldrh	r3, [r7, #6]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d105      	bne.n	80060e0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80060d4:	893b      	ldrh	r3, [r7, #8]
 80060d6:	b2da      	uxtb	r2, r3
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	611a      	str	r2, [r3, #16]
 80060de:	e021      	b.n	8006124 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80060e0:	893b      	ldrh	r3, [r7, #8]
 80060e2:	0a1b      	lsrs	r3, r3, #8
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	b2da      	uxtb	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060f0:	6a39      	ldr	r1, [r7, #32]
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f000 f9dc 	bl	80064b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00d      	beq.n	800611a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006102:	2b04      	cmp	r3, #4
 8006104:	d107      	bne.n	8006116 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006114:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e005      	b.n	8006126 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800611a:	893b      	ldrh	r3, [r7, #8]
 800611c:	b2da      	uxtb	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3718      	adds	r7, #24
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	00010002 	.word	0x00010002

08006134 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b088      	sub	sp, #32
 8006138:	af02      	add	r7, sp, #8
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	4608      	mov	r0, r1
 800613e:	4611      	mov	r1, r2
 8006140:	461a      	mov	r2, r3
 8006142:	4603      	mov	r3, r0
 8006144:	817b      	strh	r3, [r7, #10]
 8006146:	460b      	mov	r3, r1
 8006148:	813b      	strh	r3, [r7, #8]
 800614a:	4613      	mov	r3, r2
 800614c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800615c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800616c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800616e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006170:	9300      	str	r3, [sp, #0]
 8006172:	6a3b      	ldr	r3, [r7, #32]
 8006174:	2200      	movs	r2, #0
 8006176:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f000 f8c2 	bl	8006304 <I2C_WaitOnFlagUntilTimeout>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00d      	beq.n	80061a2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006190:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006194:	d103      	bne.n	800619e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f44f 7200 	mov.w	r2, #512	; 0x200
 800619c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e0aa      	b.n	80062f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80061a2:	897b      	ldrh	r3, [r7, #10]
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	461a      	mov	r2, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80061b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b4:	6a3a      	ldr	r2, [r7, #32]
 80061b6:	4952      	ldr	r1, [pc, #328]	; (8006300 <I2C_RequestMemoryRead+0x1cc>)
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f000 f8fa 	bl	80063b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d001      	beq.n	80061c8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	e097      	b.n	80062f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061c8:	2300      	movs	r3, #0
 80061ca:	617b      	str	r3, [r7, #20]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	617b      	str	r3, [r7, #20]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	617b      	str	r3, [r7, #20]
 80061dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061e0:	6a39      	ldr	r1, [r7, #32]
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f000 f964 	bl	80064b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00d      	beq.n	800620a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f2:	2b04      	cmp	r3, #4
 80061f4:	d107      	bne.n	8006206 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006204:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e076      	b.n	80062f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800620a:	88fb      	ldrh	r3, [r7, #6]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d105      	bne.n	800621c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006210:	893b      	ldrh	r3, [r7, #8]
 8006212:	b2da      	uxtb	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	611a      	str	r2, [r3, #16]
 800621a:	e021      	b.n	8006260 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800621c:	893b      	ldrh	r3, [r7, #8]
 800621e:	0a1b      	lsrs	r3, r3, #8
 8006220:	b29b      	uxth	r3, r3
 8006222:	b2da      	uxtb	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800622a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800622c:	6a39      	ldr	r1, [r7, #32]
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f000 f93e 	bl	80064b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00d      	beq.n	8006256 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623e:	2b04      	cmp	r3, #4
 8006240:	d107      	bne.n	8006252 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006250:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e050      	b.n	80062f8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006256:	893b      	ldrh	r3, [r7, #8]
 8006258:	b2da      	uxtb	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006262:	6a39      	ldr	r1, [r7, #32]
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f000 f923 	bl	80064b0 <I2C_WaitOnTXEFlagUntilTimeout>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00d      	beq.n	800628c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006274:	2b04      	cmp	r3, #4
 8006276:	d107      	bne.n	8006288 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006286:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e035      	b.n	80062f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800629a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800629c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629e:	9300      	str	r3, [sp, #0]
 80062a0:	6a3b      	ldr	r3, [r7, #32]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	f000 f82b 	bl	8006304 <I2C_WaitOnFlagUntilTimeout>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00d      	beq.n	80062d0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062c2:	d103      	bne.n	80062cc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80062cc:	2303      	movs	r3, #3
 80062ce:	e013      	b.n	80062f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80062d0:	897b      	ldrh	r3, [r7, #10]
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	f043 0301 	orr.w	r3, r3, #1
 80062d8:	b2da      	uxtb	r2, r3
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e2:	6a3a      	ldr	r2, [r7, #32]
 80062e4:	4906      	ldr	r1, [pc, #24]	; (8006300 <I2C_RequestMemoryRead+0x1cc>)
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f000 f863 	bl	80063b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e000      	b.n	80062f8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3718      	adds	r7, #24
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	00010002 	.word	0x00010002

08006304 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	603b      	str	r3, [r7, #0]
 8006310:	4613      	mov	r3, r2
 8006312:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006314:	e025      	b.n	8006362 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800631c:	d021      	beq.n	8006362 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800631e:	f7fd ff7b 	bl	8004218 <HAL_GetTick>
 8006322:	4602      	mov	r2, r0
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	683a      	ldr	r2, [r7, #0]
 800632a:	429a      	cmp	r2, r3
 800632c:	d302      	bcc.n	8006334 <I2C_WaitOnFlagUntilTimeout+0x30>
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d116      	bne.n	8006362 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2220      	movs	r2, #32
 800633e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634e:	f043 0220 	orr.w	r2, r3, #32
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e023      	b.n	80063aa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	0c1b      	lsrs	r3, r3, #16
 8006366:	b2db      	uxtb	r3, r3
 8006368:	2b01      	cmp	r3, #1
 800636a:	d10d      	bne.n	8006388 <I2C_WaitOnFlagUntilTimeout+0x84>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	695b      	ldr	r3, [r3, #20]
 8006372:	43da      	mvns	r2, r3
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	4013      	ands	r3, r2
 8006378:	b29b      	uxth	r3, r3
 800637a:	2b00      	cmp	r3, #0
 800637c:	bf0c      	ite	eq
 800637e:	2301      	moveq	r3, #1
 8006380:	2300      	movne	r3, #0
 8006382:	b2db      	uxtb	r3, r3
 8006384:	461a      	mov	r2, r3
 8006386:	e00c      	b.n	80063a2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	43da      	mvns	r2, r3
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	4013      	ands	r3, r2
 8006394:	b29b      	uxth	r3, r3
 8006396:	2b00      	cmp	r3, #0
 8006398:	bf0c      	ite	eq
 800639a:	2301      	moveq	r3, #1
 800639c:	2300      	movne	r3, #0
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	461a      	mov	r2, r3
 80063a2:	79fb      	ldrb	r3, [r7, #7]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d0b6      	beq.n	8006316 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3710      	adds	r7, #16
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b084      	sub	sp, #16
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	60f8      	str	r0, [r7, #12]
 80063ba:	60b9      	str	r1, [r7, #8]
 80063bc:	607a      	str	r2, [r7, #4]
 80063be:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80063c0:	e051      	b.n	8006466 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	695b      	ldr	r3, [r3, #20]
 80063c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063d0:	d123      	bne.n	800641a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063e0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80063ea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2220      	movs	r2, #32
 80063f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006406:	f043 0204 	orr.w	r2, r3, #4
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2200      	movs	r2, #0
 8006412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e046      	b.n	80064a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006420:	d021      	beq.n	8006466 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006422:	f7fd fef9 	bl	8004218 <HAL_GetTick>
 8006426:	4602      	mov	r2, r0
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	429a      	cmp	r2, r3
 8006430:	d302      	bcc.n	8006438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d116      	bne.n	8006466 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2200      	movs	r2, #0
 800643c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2220      	movs	r2, #32
 8006442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006452:	f043 0220 	orr.w	r2, r3, #32
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e020      	b.n	80064a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	0c1b      	lsrs	r3, r3, #16
 800646a:	b2db      	uxtb	r3, r3
 800646c:	2b01      	cmp	r3, #1
 800646e:	d10c      	bne.n	800648a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	43da      	mvns	r2, r3
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	4013      	ands	r3, r2
 800647c:	b29b      	uxth	r3, r3
 800647e:	2b00      	cmp	r3, #0
 8006480:	bf14      	ite	ne
 8006482:	2301      	movne	r3, #1
 8006484:	2300      	moveq	r3, #0
 8006486:	b2db      	uxtb	r3, r3
 8006488:	e00b      	b.n	80064a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	43da      	mvns	r2, r3
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	4013      	ands	r3, r2
 8006496:	b29b      	uxth	r3, r3
 8006498:	2b00      	cmp	r3, #0
 800649a:	bf14      	ite	ne
 800649c:	2301      	movne	r3, #1
 800649e:	2300      	moveq	r3, #0
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d18d      	bne.n	80063c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80064bc:	e02d      	b.n	800651a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f000 f8ce 	bl	8006660 <I2C_IsAcknowledgeFailed>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d001      	beq.n	80064ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e02d      	b.n	800652a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d4:	d021      	beq.n	800651a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064d6:	f7fd fe9f 	bl	8004218 <HAL_GetTick>
 80064da:	4602      	mov	r2, r0
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	68ba      	ldr	r2, [r7, #8]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d302      	bcc.n	80064ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d116      	bne.n	800651a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2220      	movs	r2, #32
 80064f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006506:	f043 0220 	orr.w	r2, r3, #32
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2200      	movs	r2, #0
 8006512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e007      	b.n	800652a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	695b      	ldr	r3, [r3, #20]
 8006520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006524:	2b80      	cmp	r3, #128	; 0x80
 8006526:	d1ca      	bne.n	80064be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}

08006532 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006532:	b580      	push	{r7, lr}
 8006534:	b084      	sub	sp, #16
 8006536:	af00      	add	r7, sp, #0
 8006538:	60f8      	str	r0, [r7, #12]
 800653a:	60b9      	str	r1, [r7, #8]
 800653c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800653e:	e02d      	b.n	800659c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006540:	68f8      	ldr	r0, [r7, #12]
 8006542:	f000 f88d 	bl	8006660 <I2C_IsAcknowledgeFailed>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d001      	beq.n	8006550 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e02d      	b.n	80065ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006556:	d021      	beq.n	800659c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006558:	f7fd fe5e 	bl	8004218 <HAL_GetTick>
 800655c:	4602      	mov	r2, r0
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	68ba      	ldr	r2, [r7, #8]
 8006564:	429a      	cmp	r2, r3
 8006566:	d302      	bcc.n	800656e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d116      	bne.n	800659c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2220      	movs	r2, #32
 8006578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2200      	movs	r2, #0
 8006580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006588:	f043 0220 	orr.w	r2, r3, #32
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e007      	b.n	80065ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	695b      	ldr	r3, [r3, #20]
 80065a2:	f003 0304 	and.w	r3, r3, #4
 80065a6:	2b04      	cmp	r3, #4
 80065a8:	d1ca      	bne.n	8006540 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3710      	adds	r7, #16
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80065c0:	e042      	b.n	8006648 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	695b      	ldr	r3, [r3, #20]
 80065c8:	f003 0310 	and.w	r3, r3, #16
 80065cc:	2b10      	cmp	r3, #16
 80065ce:	d119      	bne.n	8006604 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f06f 0210 	mvn.w	r2, #16
 80065d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2200      	movs	r2, #0
 80065de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2220      	movs	r2, #32
 80065e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e029      	b.n	8006658 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006604:	f7fd fe08 	bl	8004218 <HAL_GetTick>
 8006608:	4602      	mov	r2, r0
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	68ba      	ldr	r2, [r7, #8]
 8006610:	429a      	cmp	r2, r3
 8006612:	d302      	bcc.n	800661a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d116      	bne.n	8006648 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2220      	movs	r2, #32
 8006624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006634:	f043 0220 	orr.w	r2, r3, #32
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e007      	b.n	8006658 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	695b      	ldr	r3, [r3, #20]
 800664e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006652:	2b40      	cmp	r3, #64	; 0x40
 8006654:	d1b5      	bne.n	80065c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3710      	adds	r7, #16
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	695b      	ldr	r3, [r3, #20]
 800666e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006676:	d11b      	bne.n	80066b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006680:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2220      	movs	r2, #32
 800668c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669c:	f043 0204 	orr.w	r2, r3, #4
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e000      	b.n	80066b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	370c      	adds	r7, #12
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
	...

080066c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b086      	sub	sp, #24
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d101      	bne.n	80066d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e267      	b.n	8006ba2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0301 	and.w	r3, r3, #1
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d075      	beq.n	80067ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80066de:	4b88      	ldr	r3, [pc, #544]	; (8006900 <HAL_RCC_OscConfig+0x240>)
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	f003 030c 	and.w	r3, r3, #12
 80066e6:	2b04      	cmp	r3, #4
 80066e8:	d00c      	beq.n	8006704 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066ea:	4b85      	ldr	r3, [pc, #532]	; (8006900 <HAL_RCC_OscConfig+0x240>)
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80066f2:	2b08      	cmp	r3, #8
 80066f4:	d112      	bne.n	800671c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066f6:	4b82      	ldr	r3, [pc, #520]	; (8006900 <HAL_RCC_OscConfig+0x240>)
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006702:	d10b      	bne.n	800671c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006704:	4b7e      	ldr	r3, [pc, #504]	; (8006900 <HAL_RCC_OscConfig+0x240>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d05b      	beq.n	80067c8 <HAL_RCC_OscConfig+0x108>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d157      	bne.n	80067c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e242      	b.n	8006ba2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006724:	d106      	bne.n	8006734 <HAL_RCC_OscConfig+0x74>
 8006726:	4b76      	ldr	r3, [pc, #472]	; (8006900 <HAL_RCC_OscConfig+0x240>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a75      	ldr	r2, [pc, #468]	; (8006900 <HAL_RCC_OscConfig+0x240>)
 800672c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006730:	6013      	str	r3, [r2, #0]
 8006732:	e01d      	b.n	8006770 <HAL_RCC_OscConfig+0xb0>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800673c:	d10c      	bne.n	8006758 <HAL_RCC_OscConfig+0x98>
 800673e:	4b70      	ldr	r3, [pc, #448]	; (8006900 <HAL_RCC_OscConfig+0x240>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a6f      	ldr	r2, [pc, #444]	; (8006900 <HAL_RCC_OscConfig+0x240>)
 8006744:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006748:	6013      	str	r3, [r2, #0]
 800674a:	4b6d      	ldr	r3, [pc, #436]	; (8006900 <HAL_RCC_OscConfig+0x240>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a6c      	ldr	r2, [pc, #432]	; (8006900 <HAL_RCC_OscConfig+0x240>)
 8006750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006754:	6013      	str	r3, [r2, #0]
 8006756:	e00b      	b.n	8006770 <HAL_RCC_OscConfig+0xb0>
 8006758:	4b69      	ldr	r3, [pc, #420]	; (8006900 <HAL_RCC_OscConfig+0x240>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a68      	ldr	r2, [pc, #416]	; (8006900 <HAL_RCC_OscConfig+0x240>)
 800675e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006762:	6013      	str	r3, [r2, #0]
 8006764:	4b66      	ldr	r3, [pc, #408]	; (8006900 <HAL_RCC_OscConfig+0x240>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a65      	ldr	r2, [pc, #404]	; (8006900 <HAL_RCC_OscConfig+0x240>)
 800676a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800676e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d013      	beq.n	80067a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006778:	f7fd fd4e 	bl	8004218 <HAL_GetTick>
 800677c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800677e:	e008      	b.n	8006792 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006780:	f7fd fd4a 	bl	8004218 <HAL_GetTick>
 8006784:	4602      	mov	r2, r0
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	2b64      	cmp	r3, #100	; 0x64
 800678c:	d901      	bls.n	8006792 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e207      	b.n	8006ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006792:	4b5b      	ldr	r3, [pc, #364]	; (8006900 <HAL_RCC_OscConfig+0x240>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d0f0      	beq.n	8006780 <HAL_RCC_OscConfig+0xc0>
 800679e:	e014      	b.n	80067ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067a0:	f7fd fd3a 	bl	8004218 <HAL_GetTick>
 80067a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067a6:	e008      	b.n	80067ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067a8:	f7fd fd36 	bl	8004218 <HAL_GetTick>
 80067ac:	4602      	mov	r2, r0
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	2b64      	cmp	r3, #100	; 0x64
 80067b4:	d901      	bls.n	80067ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e1f3      	b.n	8006ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067ba:	4b51      	ldr	r3, [pc, #324]	; (8006900 <HAL_RCC_OscConfig+0x240>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d1f0      	bne.n	80067a8 <HAL_RCC_OscConfig+0xe8>
 80067c6:	e000      	b.n	80067ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0302 	and.w	r3, r3, #2
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d063      	beq.n	800689e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80067d6:	4b4a      	ldr	r3, [pc, #296]	; (8006900 <HAL_RCC_OscConfig+0x240>)
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	f003 030c 	and.w	r3, r3, #12
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d00b      	beq.n	80067fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067e2:	4b47      	ldr	r3, [pc, #284]	; (8006900 <HAL_RCC_OscConfig+0x240>)
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80067ea:	2b08      	cmp	r3, #8
 80067ec:	d11c      	bne.n	8006828 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067ee:	4b44      	ldr	r3, [pc, #272]	; (8006900 <HAL_RCC_OscConfig+0x240>)
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d116      	bne.n	8006828 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067fa:	4b41      	ldr	r3, [pc, #260]	; (8006900 <HAL_RCC_OscConfig+0x240>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 0302 	and.w	r3, r3, #2
 8006802:	2b00      	cmp	r3, #0
 8006804:	d005      	beq.n	8006812 <HAL_RCC_OscConfig+0x152>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	2b01      	cmp	r3, #1
 800680c:	d001      	beq.n	8006812 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e1c7      	b.n	8006ba2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006812:	4b3b      	ldr	r3, [pc, #236]	; (8006900 <HAL_RCC_OscConfig+0x240>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	00db      	lsls	r3, r3, #3
 8006820:	4937      	ldr	r1, [pc, #220]	; (8006900 <HAL_RCC_OscConfig+0x240>)
 8006822:	4313      	orrs	r3, r2
 8006824:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006826:	e03a      	b.n	800689e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d020      	beq.n	8006872 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006830:	4b34      	ldr	r3, [pc, #208]	; (8006904 <HAL_RCC_OscConfig+0x244>)
 8006832:	2201      	movs	r2, #1
 8006834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006836:	f7fd fcef 	bl	8004218 <HAL_GetTick>
 800683a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800683c:	e008      	b.n	8006850 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800683e:	f7fd fceb 	bl	8004218 <HAL_GetTick>
 8006842:	4602      	mov	r2, r0
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	2b02      	cmp	r3, #2
 800684a:	d901      	bls.n	8006850 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800684c:	2303      	movs	r3, #3
 800684e:	e1a8      	b.n	8006ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006850:	4b2b      	ldr	r3, [pc, #172]	; (8006900 <HAL_RCC_OscConfig+0x240>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 0302 	and.w	r3, r3, #2
 8006858:	2b00      	cmp	r3, #0
 800685a:	d0f0      	beq.n	800683e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800685c:	4b28      	ldr	r3, [pc, #160]	; (8006900 <HAL_RCC_OscConfig+0x240>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	00db      	lsls	r3, r3, #3
 800686a:	4925      	ldr	r1, [pc, #148]	; (8006900 <HAL_RCC_OscConfig+0x240>)
 800686c:	4313      	orrs	r3, r2
 800686e:	600b      	str	r3, [r1, #0]
 8006870:	e015      	b.n	800689e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006872:	4b24      	ldr	r3, [pc, #144]	; (8006904 <HAL_RCC_OscConfig+0x244>)
 8006874:	2200      	movs	r2, #0
 8006876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006878:	f7fd fcce 	bl	8004218 <HAL_GetTick>
 800687c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800687e:	e008      	b.n	8006892 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006880:	f7fd fcca 	bl	8004218 <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	2b02      	cmp	r3, #2
 800688c:	d901      	bls.n	8006892 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e187      	b.n	8006ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006892:	4b1b      	ldr	r3, [pc, #108]	; (8006900 <HAL_RCC_OscConfig+0x240>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 0302 	and.w	r3, r3, #2
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1f0      	bne.n	8006880 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 0308 	and.w	r3, r3, #8
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d036      	beq.n	8006918 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d016      	beq.n	80068e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068b2:	4b15      	ldr	r3, [pc, #84]	; (8006908 <HAL_RCC_OscConfig+0x248>)
 80068b4:	2201      	movs	r2, #1
 80068b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068b8:	f7fd fcae 	bl	8004218 <HAL_GetTick>
 80068bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068be:	e008      	b.n	80068d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068c0:	f7fd fcaa 	bl	8004218 <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d901      	bls.n	80068d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e167      	b.n	8006ba2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068d2:	4b0b      	ldr	r3, [pc, #44]	; (8006900 <HAL_RCC_OscConfig+0x240>)
 80068d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068d6:	f003 0302 	and.w	r3, r3, #2
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d0f0      	beq.n	80068c0 <HAL_RCC_OscConfig+0x200>
 80068de:	e01b      	b.n	8006918 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068e0:	4b09      	ldr	r3, [pc, #36]	; (8006908 <HAL_RCC_OscConfig+0x248>)
 80068e2:	2200      	movs	r2, #0
 80068e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068e6:	f7fd fc97 	bl	8004218 <HAL_GetTick>
 80068ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068ec:	e00e      	b.n	800690c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068ee:	f7fd fc93 	bl	8004218 <HAL_GetTick>
 80068f2:	4602      	mov	r2, r0
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	2b02      	cmp	r3, #2
 80068fa:	d907      	bls.n	800690c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80068fc:	2303      	movs	r3, #3
 80068fe:	e150      	b.n	8006ba2 <HAL_RCC_OscConfig+0x4e2>
 8006900:	40023800 	.word	0x40023800
 8006904:	42470000 	.word	0x42470000
 8006908:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800690c:	4b88      	ldr	r3, [pc, #544]	; (8006b30 <HAL_RCC_OscConfig+0x470>)
 800690e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006910:	f003 0302 	and.w	r3, r3, #2
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1ea      	bne.n	80068ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 0304 	and.w	r3, r3, #4
 8006920:	2b00      	cmp	r3, #0
 8006922:	f000 8097 	beq.w	8006a54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006926:	2300      	movs	r3, #0
 8006928:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800692a:	4b81      	ldr	r3, [pc, #516]	; (8006b30 <HAL_RCC_OscConfig+0x470>)
 800692c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d10f      	bne.n	8006956 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006936:	2300      	movs	r3, #0
 8006938:	60bb      	str	r3, [r7, #8]
 800693a:	4b7d      	ldr	r3, [pc, #500]	; (8006b30 <HAL_RCC_OscConfig+0x470>)
 800693c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693e:	4a7c      	ldr	r2, [pc, #496]	; (8006b30 <HAL_RCC_OscConfig+0x470>)
 8006940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006944:	6413      	str	r3, [r2, #64]	; 0x40
 8006946:	4b7a      	ldr	r3, [pc, #488]	; (8006b30 <HAL_RCC_OscConfig+0x470>)
 8006948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800694e:	60bb      	str	r3, [r7, #8]
 8006950:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006952:	2301      	movs	r3, #1
 8006954:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006956:	4b77      	ldr	r3, [pc, #476]	; (8006b34 <HAL_RCC_OscConfig+0x474>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800695e:	2b00      	cmp	r3, #0
 8006960:	d118      	bne.n	8006994 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006962:	4b74      	ldr	r3, [pc, #464]	; (8006b34 <HAL_RCC_OscConfig+0x474>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a73      	ldr	r2, [pc, #460]	; (8006b34 <HAL_RCC_OscConfig+0x474>)
 8006968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800696c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800696e:	f7fd fc53 	bl	8004218 <HAL_GetTick>
 8006972:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006974:	e008      	b.n	8006988 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006976:	f7fd fc4f 	bl	8004218 <HAL_GetTick>
 800697a:	4602      	mov	r2, r0
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	2b02      	cmp	r3, #2
 8006982:	d901      	bls.n	8006988 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e10c      	b.n	8006ba2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006988:	4b6a      	ldr	r3, [pc, #424]	; (8006b34 <HAL_RCC_OscConfig+0x474>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006990:	2b00      	cmp	r3, #0
 8006992:	d0f0      	beq.n	8006976 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	2b01      	cmp	r3, #1
 800699a:	d106      	bne.n	80069aa <HAL_RCC_OscConfig+0x2ea>
 800699c:	4b64      	ldr	r3, [pc, #400]	; (8006b30 <HAL_RCC_OscConfig+0x470>)
 800699e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a0:	4a63      	ldr	r2, [pc, #396]	; (8006b30 <HAL_RCC_OscConfig+0x470>)
 80069a2:	f043 0301 	orr.w	r3, r3, #1
 80069a6:	6713      	str	r3, [r2, #112]	; 0x70
 80069a8:	e01c      	b.n	80069e4 <HAL_RCC_OscConfig+0x324>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	2b05      	cmp	r3, #5
 80069b0:	d10c      	bne.n	80069cc <HAL_RCC_OscConfig+0x30c>
 80069b2:	4b5f      	ldr	r3, [pc, #380]	; (8006b30 <HAL_RCC_OscConfig+0x470>)
 80069b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b6:	4a5e      	ldr	r2, [pc, #376]	; (8006b30 <HAL_RCC_OscConfig+0x470>)
 80069b8:	f043 0304 	orr.w	r3, r3, #4
 80069bc:	6713      	str	r3, [r2, #112]	; 0x70
 80069be:	4b5c      	ldr	r3, [pc, #368]	; (8006b30 <HAL_RCC_OscConfig+0x470>)
 80069c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069c2:	4a5b      	ldr	r2, [pc, #364]	; (8006b30 <HAL_RCC_OscConfig+0x470>)
 80069c4:	f043 0301 	orr.w	r3, r3, #1
 80069c8:	6713      	str	r3, [r2, #112]	; 0x70
 80069ca:	e00b      	b.n	80069e4 <HAL_RCC_OscConfig+0x324>
 80069cc:	4b58      	ldr	r3, [pc, #352]	; (8006b30 <HAL_RCC_OscConfig+0x470>)
 80069ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069d0:	4a57      	ldr	r2, [pc, #348]	; (8006b30 <HAL_RCC_OscConfig+0x470>)
 80069d2:	f023 0301 	bic.w	r3, r3, #1
 80069d6:	6713      	str	r3, [r2, #112]	; 0x70
 80069d8:	4b55      	ldr	r3, [pc, #340]	; (8006b30 <HAL_RCC_OscConfig+0x470>)
 80069da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069dc:	4a54      	ldr	r2, [pc, #336]	; (8006b30 <HAL_RCC_OscConfig+0x470>)
 80069de:	f023 0304 	bic.w	r3, r3, #4
 80069e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d015      	beq.n	8006a18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069ec:	f7fd fc14 	bl	8004218 <HAL_GetTick>
 80069f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069f2:	e00a      	b.n	8006a0a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069f4:	f7fd fc10 	bl	8004218 <HAL_GetTick>
 80069f8:	4602      	mov	r2, r0
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d901      	bls.n	8006a0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e0cb      	b.n	8006ba2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a0a:	4b49      	ldr	r3, [pc, #292]	; (8006b30 <HAL_RCC_OscConfig+0x470>)
 8006a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a0e:	f003 0302 	and.w	r3, r3, #2
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d0ee      	beq.n	80069f4 <HAL_RCC_OscConfig+0x334>
 8006a16:	e014      	b.n	8006a42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a18:	f7fd fbfe 	bl	8004218 <HAL_GetTick>
 8006a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a1e:	e00a      	b.n	8006a36 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a20:	f7fd fbfa 	bl	8004218 <HAL_GetTick>
 8006a24:	4602      	mov	r2, r0
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d901      	bls.n	8006a36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006a32:	2303      	movs	r3, #3
 8006a34:	e0b5      	b.n	8006ba2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a36:	4b3e      	ldr	r3, [pc, #248]	; (8006b30 <HAL_RCC_OscConfig+0x470>)
 8006a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a3a:	f003 0302 	and.w	r3, r3, #2
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1ee      	bne.n	8006a20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a42:	7dfb      	ldrb	r3, [r7, #23]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d105      	bne.n	8006a54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a48:	4b39      	ldr	r3, [pc, #228]	; (8006b30 <HAL_RCC_OscConfig+0x470>)
 8006a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4c:	4a38      	ldr	r2, [pc, #224]	; (8006b30 <HAL_RCC_OscConfig+0x470>)
 8006a4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f000 80a1 	beq.w	8006ba0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a5e:	4b34      	ldr	r3, [pc, #208]	; (8006b30 <HAL_RCC_OscConfig+0x470>)
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	f003 030c 	and.w	r3, r3, #12
 8006a66:	2b08      	cmp	r3, #8
 8006a68:	d05c      	beq.n	8006b24 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	699b      	ldr	r3, [r3, #24]
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	d141      	bne.n	8006af6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a72:	4b31      	ldr	r3, [pc, #196]	; (8006b38 <HAL_RCC_OscConfig+0x478>)
 8006a74:	2200      	movs	r2, #0
 8006a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a78:	f7fd fbce 	bl	8004218 <HAL_GetTick>
 8006a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a7e:	e008      	b.n	8006a92 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a80:	f7fd fbca 	bl	8004218 <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d901      	bls.n	8006a92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e087      	b.n	8006ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a92:	4b27      	ldr	r3, [pc, #156]	; (8006b30 <HAL_RCC_OscConfig+0x470>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1f0      	bne.n	8006a80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	69da      	ldr	r2, [r3, #28]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a1b      	ldr	r3, [r3, #32]
 8006aa6:	431a      	orrs	r2, r3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aac:	019b      	lsls	r3, r3, #6
 8006aae:	431a      	orrs	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab4:	085b      	lsrs	r3, r3, #1
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	041b      	lsls	r3, r3, #16
 8006aba:	431a      	orrs	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac0:	061b      	lsls	r3, r3, #24
 8006ac2:	491b      	ldr	r1, [pc, #108]	; (8006b30 <HAL_RCC_OscConfig+0x470>)
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ac8:	4b1b      	ldr	r3, [pc, #108]	; (8006b38 <HAL_RCC_OscConfig+0x478>)
 8006aca:	2201      	movs	r2, #1
 8006acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ace:	f7fd fba3 	bl	8004218 <HAL_GetTick>
 8006ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ad4:	e008      	b.n	8006ae8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ad6:	f7fd fb9f 	bl	8004218 <HAL_GetTick>
 8006ada:	4602      	mov	r2, r0
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	1ad3      	subs	r3, r2, r3
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	d901      	bls.n	8006ae8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	e05c      	b.n	8006ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ae8:	4b11      	ldr	r3, [pc, #68]	; (8006b30 <HAL_RCC_OscConfig+0x470>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d0f0      	beq.n	8006ad6 <HAL_RCC_OscConfig+0x416>
 8006af4:	e054      	b.n	8006ba0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006af6:	4b10      	ldr	r3, [pc, #64]	; (8006b38 <HAL_RCC_OscConfig+0x478>)
 8006af8:	2200      	movs	r2, #0
 8006afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006afc:	f7fd fb8c 	bl	8004218 <HAL_GetTick>
 8006b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b02:	e008      	b.n	8006b16 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b04:	f7fd fb88 	bl	8004218 <HAL_GetTick>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	1ad3      	subs	r3, r2, r3
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d901      	bls.n	8006b16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006b12:	2303      	movs	r3, #3
 8006b14:	e045      	b.n	8006ba2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b16:	4b06      	ldr	r3, [pc, #24]	; (8006b30 <HAL_RCC_OscConfig+0x470>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1f0      	bne.n	8006b04 <HAL_RCC_OscConfig+0x444>
 8006b22:	e03d      	b.n	8006ba0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	699b      	ldr	r3, [r3, #24]
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d107      	bne.n	8006b3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e038      	b.n	8006ba2 <HAL_RCC_OscConfig+0x4e2>
 8006b30:	40023800 	.word	0x40023800
 8006b34:	40007000 	.word	0x40007000
 8006b38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006b3c:	4b1b      	ldr	r3, [pc, #108]	; (8006bac <HAL_RCC_OscConfig+0x4ec>)
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d028      	beq.n	8006b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d121      	bne.n	8006b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d11a      	bne.n	8006b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d111      	bne.n	8006b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b82:	085b      	lsrs	r3, r3, #1
 8006b84:	3b01      	subs	r3, #1
 8006b86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d107      	bne.n	8006b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d001      	beq.n	8006ba0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e000      	b.n	8006ba2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3718      	adds	r7, #24
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	40023800 	.word	0x40023800

08006bb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d101      	bne.n	8006bc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e0cc      	b.n	8006d5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006bc4:	4b68      	ldr	r3, [pc, #416]	; (8006d68 <HAL_RCC_ClockConfig+0x1b8>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0307 	and.w	r3, r3, #7
 8006bcc:	683a      	ldr	r2, [r7, #0]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d90c      	bls.n	8006bec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bd2:	4b65      	ldr	r3, [pc, #404]	; (8006d68 <HAL_RCC_ClockConfig+0x1b8>)
 8006bd4:	683a      	ldr	r2, [r7, #0]
 8006bd6:	b2d2      	uxtb	r2, r2
 8006bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bda:	4b63      	ldr	r3, [pc, #396]	; (8006d68 <HAL_RCC_ClockConfig+0x1b8>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 0307 	and.w	r3, r3, #7
 8006be2:	683a      	ldr	r2, [r7, #0]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d001      	beq.n	8006bec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e0b8      	b.n	8006d5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 0302 	and.w	r3, r3, #2
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d020      	beq.n	8006c3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0304 	and.w	r3, r3, #4
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d005      	beq.n	8006c10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c04:	4b59      	ldr	r3, [pc, #356]	; (8006d6c <HAL_RCC_ClockConfig+0x1bc>)
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	4a58      	ldr	r2, [pc, #352]	; (8006d6c <HAL_RCC_ClockConfig+0x1bc>)
 8006c0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006c0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0308 	and.w	r3, r3, #8
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d005      	beq.n	8006c28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c1c:	4b53      	ldr	r3, [pc, #332]	; (8006d6c <HAL_RCC_ClockConfig+0x1bc>)
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	4a52      	ldr	r2, [pc, #328]	; (8006d6c <HAL_RCC_ClockConfig+0x1bc>)
 8006c22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006c26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c28:	4b50      	ldr	r3, [pc, #320]	; (8006d6c <HAL_RCC_ClockConfig+0x1bc>)
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	494d      	ldr	r1, [pc, #308]	; (8006d6c <HAL_RCC_ClockConfig+0x1bc>)
 8006c36:	4313      	orrs	r3, r2
 8006c38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0301 	and.w	r3, r3, #1
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d044      	beq.n	8006cd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d107      	bne.n	8006c5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c4e:	4b47      	ldr	r3, [pc, #284]	; (8006d6c <HAL_RCC_ClockConfig+0x1bc>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d119      	bne.n	8006c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e07f      	b.n	8006d5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d003      	beq.n	8006c6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c6a:	2b03      	cmp	r3, #3
 8006c6c:	d107      	bne.n	8006c7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c6e:	4b3f      	ldr	r3, [pc, #252]	; (8006d6c <HAL_RCC_ClockConfig+0x1bc>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d109      	bne.n	8006c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e06f      	b.n	8006d5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c7e:	4b3b      	ldr	r3, [pc, #236]	; (8006d6c <HAL_RCC_ClockConfig+0x1bc>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 0302 	and.w	r3, r3, #2
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d101      	bne.n	8006c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e067      	b.n	8006d5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c8e:	4b37      	ldr	r3, [pc, #220]	; (8006d6c <HAL_RCC_ClockConfig+0x1bc>)
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	f023 0203 	bic.w	r2, r3, #3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	4934      	ldr	r1, [pc, #208]	; (8006d6c <HAL_RCC_ClockConfig+0x1bc>)
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ca0:	f7fd faba 	bl	8004218 <HAL_GetTick>
 8006ca4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ca6:	e00a      	b.n	8006cbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ca8:	f7fd fab6 	bl	8004218 <HAL_GetTick>
 8006cac:	4602      	mov	r2, r0
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d901      	bls.n	8006cbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	e04f      	b.n	8006d5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cbe:	4b2b      	ldr	r3, [pc, #172]	; (8006d6c <HAL_RCC_ClockConfig+0x1bc>)
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	f003 020c 	and.w	r2, r3, #12
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d1eb      	bne.n	8006ca8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006cd0:	4b25      	ldr	r3, [pc, #148]	; (8006d68 <HAL_RCC_ClockConfig+0x1b8>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0307 	and.w	r3, r3, #7
 8006cd8:	683a      	ldr	r2, [r7, #0]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d20c      	bcs.n	8006cf8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cde:	4b22      	ldr	r3, [pc, #136]	; (8006d68 <HAL_RCC_ClockConfig+0x1b8>)
 8006ce0:	683a      	ldr	r2, [r7, #0]
 8006ce2:	b2d2      	uxtb	r2, r2
 8006ce4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ce6:	4b20      	ldr	r3, [pc, #128]	; (8006d68 <HAL_RCC_ClockConfig+0x1b8>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 0307 	and.w	r3, r3, #7
 8006cee:	683a      	ldr	r2, [r7, #0]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d001      	beq.n	8006cf8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e032      	b.n	8006d5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 0304 	and.w	r3, r3, #4
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d008      	beq.n	8006d16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d04:	4b19      	ldr	r3, [pc, #100]	; (8006d6c <HAL_RCC_ClockConfig+0x1bc>)
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	4916      	ldr	r1, [pc, #88]	; (8006d6c <HAL_RCC_ClockConfig+0x1bc>)
 8006d12:	4313      	orrs	r3, r2
 8006d14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0308 	and.w	r3, r3, #8
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d009      	beq.n	8006d36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d22:	4b12      	ldr	r3, [pc, #72]	; (8006d6c <HAL_RCC_ClockConfig+0x1bc>)
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	00db      	lsls	r3, r3, #3
 8006d30:	490e      	ldr	r1, [pc, #56]	; (8006d6c <HAL_RCC_ClockConfig+0x1bc>)
 8006d32:	4313      	orrs	r3, r2
 8006d34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006d36:	f000 f821 	bl	8006d7c <HAL_RCC_GetSysClockFreq>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	4b0b      	ldr	r3, [pc, #44]	; (8006d6c <HAL_RCC_ClockConfig+0x1bc>)
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	091b      	lsrs	r3, r3, #4
 8006d42:	f003 030f 	and.w	r3, r3, #15
 8006d46:	490a      	ldr	r1, [pc, #40]	; (8006d70 <HAL_RCC_ClockConfig+0x1c0>)
 8006d48:	5ccb      	ldrb	r3, [r1, r3]
 8006d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d4e:	4a09      	ldr	r2, [pc, #36]	; (8006d74 <HAL_RCC_ClockConfig+0x1c4>)
 8006d50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006d52:	4b09      	ldr	r3, [pc, #36]	; (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7fd fa1a 	bl	8004190 <HAL_InitTick>

  return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	40023c00 	.word	0x40023c00
 8006d6c:	40023800 	.word	0x40023800
 8006d70:	0800eee8 	.word	0x0800eee8
 8006d74:	20000280 	.word	0x20000280
 8006d78:	20000284 	.word	0x20000284

08006d7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d80:	b090      	sub	sp, #64	; 0x40
 8006d82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006d84:	2300      	movs	r3, #0
 8006d86:	637b      	str	r3, [r7, #52]	; 0x34
 8006d88:	2300      	movs	r3, #0
 8006d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006d90:	2300      	movs	r3, #0
 8006d92:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d94:	4b59      	ldr	r3, [pc, #356]	; (8006efc <HAL_RCC_GetSysClockFreq+0x180>)
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	f003 030c 	and.w	r3, r3, #12
 8006d9c:	2b08      	cmp	r3, #8
 8006d9e:	d00d      	beq.n	8006dbc <HAL_RCC_GetSysClockFreq+0x40>
 8006da0:	2b08      	cmp	r3, #8
 8006da2:	f200 80a1 	bhi.w	8006ee8 <HAL_RCC_GetSysClockFreq+0x16c>
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d002      	beq.n	8006db0 <HAL_RCC_GetSysClockFreq+0x34>
 8006daa:	2b04      	cmp	r3, #4
 8006dac:	d003      	beq.n	8006db6 <HAL_RCC_GetSysClockFreq+0x3a>
 8006dae:	e09b      	b.n	8006ee8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006db0:	4b53      	ldr	r3, [pc, #332]	; (8006f00 <HAL_RCC_GetSysClockFreq+0x184>)
 8006db2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006db4:	e09b      	b.n	8006eee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006db6:	4b53      	ldr	r3, [pc, #332]	; (8006f04 <HAL_RCC_GetSysClockFreq+0x188>)
 8006db8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006dba:	e098      	b.n	8006eee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006dbc:	4b4f      	ldr	r3, [pc, #316]	; (8006efc <HAL_RCC_GetSysClockFreq+0x180>)
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006dc4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006dc6:	4b4d      	ldr	r3, [pc, #308]	; (8006efc <HAL_RCC_GetSysClockFreq+0x180>)
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d028      	beq.n	8006e24 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dd2:	4b4a      	ldr	r3, [pc, #296]	; (8006efc <HAL_RCC_GetSysClockFreq+0x180>)
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	099b      	lsrs	r3, r3, #6
 8006dd8:	2200      	movs	r2, #0
 8006dda:	623b      	str	r3, [r7, #32]
 8006ddc:	627a      	str	r2, [r7, #36]	; 0x24
 8006dde:	6a3b      	ldr	r3, [r7, #32]
 8006de0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006de4:	2100      	movs	r1, #0
 8006de6:	4b47      	ldr	r3, [pc, #284]	; (8006f04 <HAL_RCC_GetSysClockFreq+0x188>)
 8006de8:	fb03 f201 	mul.w	r2, r3, r1
 8006dec:	2300      	movs	r3, #0
 8006dee:	fb00 f303 	mul.w	r3, r0, r3
 8006df2:	4413      	add	r3, r2
 8006df4:	4a43      	ldr	r2, [pc, #268]	; (8006f04 <HAL_RCC_GetSysClockFreq+0x188>)
 8006df6:	fba0 1202 	umull	r1, r2, r0, r2
 8006dfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006dfc:	460a      	mov	r2, r1
 8006dfe:	62ba      	str	r2, [r7, #40]	; 0x28
 8006e00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e02:	4413      	add	r3, r2
 8006e04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e08:	2200      	movs	r2, #0
 8006e0a:	61bb      	str	r3, [r7, #24]
 8006e0c:	61fa      	str	r2, [r7, #28]
 8006e0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e12:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006e16:	f7f9 ff37 	bl	8000c88 <__aeabi_uldivmod>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	4613      	mov	r3, r2
 8006e20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e22:	e053      	b.n	8006ecc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e24:	4b35      	ldr	r3, [pc, #212]	; (8006efc <HAL_RCC_GetSysClockFreq+0x180>)
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	099b      	lsrs	r3, r3, #6
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	613b      	str	r3, [r7, #16]
 8006e2e:	617a      	str	r2, [r7, #20]
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006e36:	f04f 0b00 	mov.w	fp, #0
 8006e3a:	4652      	mov	r2, sl
 8006e3c:	465b      	mov	r3, fp
 8006e3e:	f04f 0000 	mov.w	r0, #0
 8006e42:	f04f 0100 	mov.w	r1, #0
 8006e46:	0159      	lsls	r1, r3, #5
 8006e48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e4c:	0150      	lsls	r0, r2, #5
 8006e4e:	4602      	mov	r2, r0
 8006e50:	460b      	mov	r3, r1
 8006e52:	ebb2 080a 	subs.w	r8, r2, sl
 8006e56:	eb63 090b 	sbc.w	r9, r3, fp
 8006e5a:	f04f 0200 	mov.w	r2, #0
 8006e5e:	f04f 0300 	mov.w	r3, #0
 8006e62:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006e66:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006e6a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006e6e:	ebb2 0408 	subs.w	r4, r2, r8
 8006e72:	eb63 0509 	sbc.w	r5, r3, r9
 8006e76:	f04f 0200 	mov.w	r2, #0
 8006e7a:	f04f 0300 	mov.w	r3, #0
 8006e7e:	00eb      	lsls	r3, r5, #3
 8006e80:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e84:	00e2      	lsls	r2, r4, #3
 8006e86:	4614      	mov	r4, r2
 8006e88:	461d      	mov	r5, r3
 8006e8a:	eb14 030a 	adds.w	r3, r4, sl
 8006e8e:	603b      	str	r3, [r7, #0]
 8006e90:	eb45 030b 	adc.w	r3, r5, fp
 8006e94:	607b      	str	r3, [r7, #4]
 8006e96:	f04f 0200 	mov.w	r2, #0
 8006e9a:	f04f 0300 	mov.w	r3, #0
 8006e9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006ea2:	4629      	mov	r1, r5
 8006ea4:	028b      	lsls	r3, r1, #10
 8006ea6:	4621      	mov	r1, r4
 8006ea8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006eac:	4621      	mov	r1, r4
 8006eae:	028a      	lsls	r2, r1, #10
 8006eb0:	4610      	mov	r0, r2
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	60bb      	str	r3, [r7, #8]
 8006eba:	60fa      	str	r2, [r7, #12]
 8006ebc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ec0:	f7f9 fee2 	bl	8000c88 <__aeabi_uldivmod>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	4613      	mov	r3, r2
 8006eca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006ecc:	4b0b      	ldr	r3, [pc, #44]	; (8006efc <HAL_RCC_GetSysClockFreq+0x180>)
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	0c1b      	lsrs	r3, r3, #16
 8006ed2:	f003 0303 	and.w	r3, r3, #3
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	005b      	lsls	r3, r3, #1
 8006eda:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006edc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ee4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006ee6:	e002      	b.n	8006eee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ee8:	4b05      	ldr	r3, [pc, #20]	; (8006f00 <HAL_RCC_GetSysClockFreq+0x184>)
 8006eea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006eec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3740      	adds	r7, #64	; 0x40
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006efa:	bf00      	nop
 8006efc:	40023800 	.word	0x40023800
 8006f00:	00f42400 	.word	0x00f42400
 8006f04:	017d7840 	.word	0x017d7840

08006f08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f0c:	4b03      	ldr	r3, [pc, #12]	; (8006f1c <HAL_RCC_GetHCLKFreq+0x14>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	20000280 	.word	0x20000280

08006f20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006f24:	f7ff fff0 	bl	8006f08 <HAL_RCC_GetHCLKFreq>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	4b05      	ldr	r3, [pc, #20]	; (8006f40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	0a9b      	lsrs	r3, r3, #10
 8006f30:	f003 0307 	and.w	r3, r3, #7
 8006f34:	4903      	ldr	r1, [pc, #12]	; (8006f44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f36:	5ccb      	ldrb	r3, [r1, r3]
 8006f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	40023800 	.word	0x40023800
 8006f44:	0800eef8 	.word	0x0800eef8

08006f48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006f4c:	f7ff ffdc 	bl	8006f08 <HAL_RCC_GetHCLKFreq>
 8006f50:	4602      	mov	r2, r0
 8006f52:	4b05      	ldr	r3, [pc, #20]	; (8006f68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	0b5b      	lsrs	r3, r3, #13
 8006f58:	f003 0307 	and.w	r3, r3, #7
 8006f5c:	4903      	ldr	r1, [pc, #12]	; (8006f6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f5e:	5ccb      	ldrb	r3, [r1, r3]
 8006f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	40023800 	.word	0x40023800
 8006f6c:	0800eef8 	.word	0x0800eef8

08006f70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d101      	bne.n	8006f82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e07b      	b.n	800707a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d108      	bne.n	8006f9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f92:	d009      	beq.n	8006fa8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	61da      	str	r2, [r3, #28]
 8006f9a:	e005      	b.n	8006fa8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d106      	bne.n	8006fc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f7fc f958 	bl	8003278 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2202      	movs	r2, #2
 8006fcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fde:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006ff0:	431a      	orrs	r2, r3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ffa:	431a      	orrs	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	f003 0302 	and.w	r3, r3, #2
 8007004:	431a      	orrs	r2, r3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	695b      	ldr	r3, [r3, #20]
 800700a:	f003 0301 	and.w	r3, r3, #1
 800700e:	431a      	orrs	r2, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	699b      	ldr	r3, [r3, #24]
 8007014:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007018:	431a      	orrs	r2, r3
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	69db      	ldr	r3, [r3, #28]
 800701e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007022:	431a      	orrs	r2, r3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a1b      	ldr	r3, [r3, #32]
 8007028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800702c:	ea42 0103 	orr.w	r1, r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007034:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	430a      	orrs	r2, r1
 800703e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	699b      	ldr	r3, [r3, #24]
 8007044:	0c1b      	lsrs	r3, r3, #16
 8007046:	f003 0104 	and.w	r1, r3, #4
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704e:	f003 0210 	and.w	r2, r3, #16
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	430a      	orrs	r2, r1
 8007058:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	69da      	ldr	r2, [r3, #28]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007068:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3708      	adds	r7, #8
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b082      	sub	sp, #8
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d101      	bne.n	8007094 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	e041      	b.n	8007118 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800709a:	b2db      	uxtb	r3, r3
 800709c:	2b00      	cmp	r3, #0
 800709e:	d106      	bne.n	80070ae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f7fc fd8d 	bl	8003bc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2202      	movs	r2, #2
 80070b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	3304      	adds	r3, #4
 80070be:	4619      	mov	r1, r3
 80070c0:	4610      	mov	r0, r2
 80070c2:	f000 fe99 	bl	8007df8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2201      	movs	r2, #1
 80070ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2201      	movs	r2, #1
 80070d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2201      	movs	r2, #1
 80070da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2201      	movs	r2, #1
 80070e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2201      	movs	r2, #1
 80070ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2201      	movs	r2, #1
 80070f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2201      	movs	r2, #1
 80070fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2201      	movs	r2, #1
 8007102:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2201      	movs	r2, #1
 800710a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2201      	movs	r2, #1
 8007112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007116:	2300      	movs	r3, #0
}
 8007118:	4618      	mov	r0, r3
 800711a:	3708      	adds	r7, #8
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007120:	b480      	push	{r7}
 8007122:	b085      	sub	sp, #20
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800712e:	b2db      	uxtb	r3, r3
 8007130:	2b01      	cmp	r3, #1
 8007132:	d001      	beq.n	8007138 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e04e      	b.n	80071d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2202      	movs	r2, #2
 800713c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	68da      	ldr	r2, [r3, #12]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f042 0201 	orr.w	r2, r2, #1
 800714e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a23      	ldr	r2, [pc, #140]	; (80071e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d022      	beq.n	80071a0 <HAL_TIM_Base_Start_IT+0x80>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007162:	d01d      	beq.n	80071a0 <HAL_TIM_Base_Start_IT+0x80>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a1f      	ldr	r2, [pc, #124]	; (80071e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d018      	beq.n	80071a0 <HAL_TIM_Base_Start_IT+0x80>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a1e      	ldr	r2, [pc, #120]	; (80071ec <HAL_TIM_Base_Start_IT+0xcc>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d013      	beq.n	80071a0 <HAL_TIM_Base_Start_IT+0x80>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a1c      	ldr	r2, [pc, #112]	; (80071f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d00e      	beq.n	80071a0 <HAL_TIM_Base_Start_IT+0x80>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a1b      	ldr	r2, [pc, #108]	; (80071f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d009      	beq.n	80071a0 <HAL_TIM_Base_Start_IT+0x80>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a19      	ldr	r2, [pc, #100]	; (80071f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d004      	beq.n	80071a0 <HAL_TIM_Base_Start_IT+0x80>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a18      	ldr	r2, [pc, #96]	; (80071fc <HAL_TIM_Base_Start_IT+0xdc>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d111      	bne.n	80071c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	f003 0307 	and.w	r3, r3, #7
 80071aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2b06      	cmp	r3, #6
 80071b0:	d010      	beq.n	80071d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f042 0201 	orr.w	r2, r2, #1
 80071c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071c2:	e007      	b.n	80071d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f042 0201 	orr.w	r2, r2, #1
 80071d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3714      	adds	r7, #20
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	40010000 	.word	0x40010000
 80071e8:	40000400 	.word	0x40000400
 80071ec:	40000800 	.word	0x40000800
 80071f0:	40000c00 	.word	0x40000c00
 80071f4:	40010400 	.word	0x40010400
 80071f8:	40014000 	.word	0x40014000
 80071fc:	40001800 	.word	0x40001800

08007200 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d101      	bne.n	8007212 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e041      	b.n	8007296 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007218:	b2db      	uxtb	r3, r3
 800721a:	2b00      	cmp	r3, #0
 800721c:	d106      	bne.n	800722c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 f839 	bl	800729e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2202      	movs	r2, #2
 8007230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	3304      	adds	r3, #4
 800723c:	4619      	mov	r1, r3
 800723e:	4610      	mov	r0, r2
 8007240:	f000 fdda 	bl	8007df8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2201      	movs	r2, #1
 8007270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2201      	movs	r2, #1
 8007280:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2201      	movs	r2, #1
 8007290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3708      	adds	r7, #8
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}

0800729e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800729e:	b480      	push	{r7}
 80072a0:	b083      	sub	sp, #12
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80072a6:	bf00      	nop
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
	...

080072b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d109      	bne.n	80072d8 <HAL_TIM_PWM_Start+0x24>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	bf14      	ite	ne
 80072d0:	2301      	movne	r3, #1
 80072d2:	2300      	moveq	r3, #0
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	e022      	b.n	800731e <HAL_TIM_PWM_Start+0x6a>
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	2b04      	cmp	r3, #4
 80072dc:	d109      	bne.n	80072f2 <HAL_TIM_PWM_Start+0x3e>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	bf14      	ite	ne
 80072ea:	2301      	movne	r3, #1
 80072ec:	2300      	moveq	r3, #0
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	e015      	b.n	800731e <HAL_TIM_PWM_Start+0x6a>
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	2b08      	cmp	r3, #8
 80072f6:	d109      	bne.n	800730c <HAL_TIM_PWM_Start+0x58>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	2b01      	cmp	r3, #1
 8007302:	bf14      	ite	ne
 8007304:	2301      	movne	r3, #1
 8007306:	2300      	moveq	r3, #0
 8007308:	b2db      	uxtb	r3, r3
 800730a:	e008      	b.n	800731e <HAL_TIM_PWM_Start+0x6a>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007312:	b2db      	uxtb	r3, r3
 8007314:	2b01      	cmp	r3, #1
 8007316:	bf14      	ite	ne
 8007318:	2301      	movne	r3, #1
 800731a:	2300      	moveq	r3, #0
 800731c:	b2db      	uxtb	r3, r3
 800731e:	2b00      	cmp	r3, #0
 8007320:	d001      	beq.n	8007326 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e07c      	b.n	8007420 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d104      	bne.n	8007336 <HAL_TIM_PWM_Start+0x82>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2202      	movs	r2, #2
 8007330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007334:	e013      	b.n	800735e <HAL_TIM_PWM_Start+0xaa>
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	2b04      	cmp	r3, #4
 800733a:	d104      	bne.n	8007346 <HAL_TIM_PWM_Start+0x92>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2202      	movs	r2, #2
 8007340:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007344:	e00b      	b.n	800735e <HAL_TIM_PWM_Start+0xaa>
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	2b08      	cmp	r3, #8
 800734a:	d104      	bne.n	8007356 <HAL_TIM_PWM_Start+0xa2>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2202      	movs	r2, #2
 8007350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007354:	e003      	b.n	800735e <HAL_TIM_PWM_Start+0xaa>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2202      	movs	r2, #2
 800735a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2201      	movs	r2, #1
 8007364:	6839      	ldr	r1, [r7, #0]
 8007366:	4618      	mov	r0, r3
 8007368:	f001 f95a 	bl	8008620 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a2d      	ldr	r2, [pc, #180]	; (8007428 <HAL_TIM_PWM_Start+0x174>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d004      	beq.n	8007380 <HAL_TIM_PWM_Start+0xcc>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a2c      	ldr	r2, [pc, #176]	; (800742c <HAL_TIM_PWM_Start+0x178>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d101      	bne.n	8007384 <HAL_TIM_PWM_Start+0xd0>
 8007380:	2301      	movs	r3, #1
 8007382:	e000      	b.n	8007386 <HAL_TIM_PWM_Start+0xd2>
 8007384:	2300      	movs	r3, #0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d007      	beq.n	800739a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007398:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a22      	ldr	r2, [pc, #136]	; (8007428 <HAL_TIM_PWM_Start+0x174>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d022      	beq.n	80073ea <HAL_TIM_PWM_Start+0x136>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073ac:	d01d      	beq.n	80073ea <HAL_TIM_PWM_Start+0x136>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a1f      	ldr	r2, [pc, #124]	; (8007430 <HAL_TIM_PWM_Start+0x17c>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d018      	beq.n	80073ea <HAL_TIM_PWM_Start+0x136>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a1d      	ldr	r2, [pc, #116]	; (8007434 <HAL_TIM_PWM_Start+0x180>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d013      	beq.n	80073ea <HAL_TIM_PWM_Start+0x136>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a1c      	ldr	r2, [pc, #112]	; (8007438 <HAL_TIM_PWM_Start+0x184>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d00e      	beq.n	80073ea <HAL_TIM_PWM_Start+0x136>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a16      	ldr	r2, [pc, #88]	; (800742c <HAL_TIM_PWM_Start+0x178>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d009      	beq.n	80073ea <HAL_TIM_PWM_Start+0x136>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a18      	ldr	r2, [pc, #96]	; (800743c <HAL_TIM_PWM_Start+0x188>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d004      	beq.n	80073ea <HAL_TIM_PWM_Start+0x136>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a16      	ldr	r2, [pc, #88]	; (8007440 <HAL_TIM_PWM_Start+0x18c>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d111      	bne.n	800740e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	f003 0307 	and.w	r3, r3, #7
 80073f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2b06      	cmp	r3, #6
 80073fa:	d010      	beq.n	800741e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f042 0201 	orr.w	r2, r2, #1
 800740a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800740c:	e007      	b.n	800741e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f042 0201 	orr.w	r2, r2, #1
 800741c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}
 8007428:	40010000 	.word	0x40010000
 800742c:	40010400 	.word	0x40010400
 8007430:	40000400 	.word	0x40000400
 8007434:	40000800 	.word	0x40000800
 8007438:	40000c00 	.word	0x40000c00
 800743c:	40014000 	.word	0x40014000
 8007440:	40001800 	.word	0x40001800

08007444 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d101      	bne.n	8007456 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e041      	b.n	80074da <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800745c:	b2db      	uxtb	r3, r3
 800745e:	2b00      	cmp	r3, #0
 8007460:	d106      	bne.n	8007470 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f7fc fce0 	bl	8003e30 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2202      	movs	r2, #2
 8007474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	3304      	adds	r3, #4
 8007480:	4619      	mov	r1, r3
 8007482:	4610      	mov	r0, r2
 8007484:	f000 fcb8 	bl	8007df8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3708      	adds	r7, #8
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b086      	sub	sp, #24
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
 80074ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d101      	bne.n	80074f6 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e097      	b.n	8007626 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d106      	bne.n	8007510 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f7fc fbf6 	bl	8003cfc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2202      	movs	r2, #2
 8007514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	6812      	ldr	r2, [r2, #0]
 8007522:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007526:	f023 0307 	bic.w	r3, r3, #7
 800752a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	3304      	adds	r3, #4
 8007534:	4619      	mov	r1, r3
 8007536:	4610      	mov	r0, r2
 8007538:	f000 fc5e 	bl	8007df8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	699b      	ldr	r3, [r3, #24]
 800754a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	6a1b      	ldr	r3, [r3, #32]
 8007552:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	697a      	ldr	r2, [r7, #20]
 800755a:	4313      	orrs	r3, r2
 800755c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007564:	f023 0303 	bic.w	r3, r3, #3
 8007568:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	689a      	ldr	r2, [r3, #8]
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	021b      	lsls	r3, r3, #8
 8007574:	4313      	orrs	r3, r2
 8007576:	693a      	ldr	r2, [r7, #16]
 8007578:	4313      	orrs	r3, r2
 800757a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007582:	f023 030c 	bic.w	r3, r3, #12
 8007586:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800758e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007592:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	68da      	ldr	r2, [r3, #12]
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	69db      	ldr	r3, [r3, #28]
 800759c:	021b      	lsls	r3, r3, #8
 800759e:	4313      	orrs	r3, r2
 80075a0:	693a      	ldr	r2, [r7, #16]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	011a      	lsls	r2, r3, #4
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	6a1b      	ldr	r3, [r3, #32]
 80075b0:	031b      	lsls	r3, r3, #12
 80075b2:	4313      	orrs	r3, r2
 80075b4:	693a      	ldr	r2, [r7, #16]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80075c0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80075c8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	685a      	ldr	r2, [r3, #4]
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	695b      	ldr	r3, [r3, #20]
 80075d2:	011b      	lsls	r3, r3, #4
 80075d4:	4313      	orrs	r3, r2
 80075d6:	68fa      	ldr	r2, [r7, #12]
 80075d8:	4313      	orrs	r3, r2
 80075da:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	697a      	ldr	r2, [r7, #20]
 80075e2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	693a      	ldr	r2, [r7, #16]
 80075ea:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3718      	adds	r7, #24
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800762e:	b580      	push	{r7, lr}
 8007630:	b084      	sub	sp, #16
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
 8007636:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800763e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007646:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800764e:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007656:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d110      	bne.n	8007680 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800765e:	7bfb      	ldrb	r3, [r7, #15]
 8007660:	2b01      	cmp	r3, #1
 8007662:	d102      	bne.n	800766a <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007664:	7b7b      	ldrb	r3, [r7, #13]
 8007666:	2b01      	cmp	r3, #1
 8007668:	d001      	beq.n	800766e <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	e069      	b.n	8007742 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2202      	movs	r2, #2
 8007672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2202      	movs	r2, #2
 800767a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800767e:	e031      	b.n	80076e4 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	2b04      	cmp	r3, #4
 8007684:	d110      	bne.n	80076a8 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007686:	7bbb      	ldrb	r3, [r7, #14]
 8007688:	2b01      	cmp	r3, #1
 800768a:	d102      	bne.n	8007692 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800768c:	7b3b      	ldrb	r3, [r7, #12]
 800768e:	2b01      	cmp	r3, #1
 8007690:	d001      	beq.n	8007696 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	e055      	b.n	8007742 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2202      	movs	r2, #2
 800769a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2202      	movs	r2, #2
 80076a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076a6:	e01d      	b.n	80076e4 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80076a8:	7bfb      	ldrb	r3, [r7, #15]
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d108      	bne.n	80076c0 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80076ae:	7bbb      	ldrb	r3, [r7, #14]
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d105      	bne.n	80076c0 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80076b4:	7b7b      	ldrb	r3, [r7, #13]
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d102      	bne.n	80076c0 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80076ba:	7b3b      	ldrb	r3, [r7, #12]
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d001      	beq.n	80076c4 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	e03e      	b.n	8007742 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2202      	movs	r2, #2
 80076c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2202      	movs	r2, #2
 80076d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2202      	movs	r2, #2
 80076d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2202      	movs	r2, #2
 80076e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d003      	beq.n	80076f2 <HAL_TIM_Encoder_Start+0xc4>
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	2b04      	cmp	r3, #4
 80076ee:	d008      	beq.n	8007702 <HAL_TIM_Encoder_Start+0xd4>
 80076f0:	e00f      	b.n	8007712 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2201      	movs	r2, #1
 80076f8:	2100      	movs	r1, #0
 80076fa:	4618      	mov	r0, r3
 80076fc:	f000 ff90 	bl	8008620 <TIM_CCxChannelCmd>
      break;
 8007700:	e016      	b.n	8007730 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2201      	movs	r2, #1
 8007708:	2104      	movs	r1, #4
 800770a:	4618      	mov	r0, r3
 800770c:	f000 ff88 	bl	8008620 <TIM_CCxChannelCmd>
      break;
 8007710:	e00e      	b.n	8007730 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2201      	movs	r2, #1
 8007718:	2100      	movs	r1, #0
 800771a:	4618      	mov	r0, r3
 800771c:	f000 ff80 	bl	8008620 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2201      	movs	r2, #1
 8007726:	2104      	movs	r1, #4
 8007728:	4618      	mov	r0, r3
 800772a:	f000 ff79 	bl	8008620 <TIM_CCxChannelCmd>
      break;
 800772e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f042 0201 	orr.w	r2, r2, #1
 800773e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800774a:	b580      	push	{r7, lr}
 800774c:	b082      	sub	sp, #8
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	691b      	ldr	r3, [r3, #16]
 8007758:	f003 0302 	and.w	r3, r3, #2
 800775c:	2b02      	cmp	r3, #2
 800775e:	d122      	bne.n	80077a6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	f003 0302 	and.w	r3, r3, #2
 800776a:	2b02      	cmp	r3, #2
 800776c:	d11b      	bne.n	80077a6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f06f 0202 	mvn.w	r2, #2
 8007776:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	699b      	ldr	r3, [r3, #24]
 8007784:	f003 0303 	and.w	r3, r3, #3
 8007788:	2b00      	cmp	r3, #0
 800778a:	d003      	beq.n	8007794 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 fb14 	bl	8007dba <HAL_TIM_IC_CaptureCallback>
 8007792:	e005      	b.n	80077a0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 fb06 	bl	8007da6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 fb17 	bl	8007dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	691b      	ldr	r3, [r3, #16]
 80077ac:	f003 0304 	and.w	r3, r3, #4
 80077b0:	2b04      	cmp	r3, #4
 80077b2:	d122      	bne.n	80077fa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	f003 0304 	and.w	r3, r3, #4
 80077be:	2b04      	cmp	r3, #4
 80077c0:	d11b      	bne.n	80077fa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f06f 0204 	mvn.w	r2, #4
 80077ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2202      	movs	r2, #2
 80077d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	699b      	ldr	r3, [r3, #24]
 80077d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d003      	beq.n	80077e8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 faea 	bl	8007dba <HAL_TIM_IC_CaptureCallback>
 80077e6:	e005      	b.n	80077f4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 fadc 	bl	8007da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 faed 	bl	8007dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	f003 0308 	and.w	r3, r3, #8
 8007804:	2b08      	cmp	r3, #8
 8007806:	d122      	bne.n	800784e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	f003 0308 	and.w	r3, r3, #8
 8007812:	2b08      	cmp	r3, #8
 8007814:	d11b      	bne.n	800784e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f06f 0208 	mvn.w	r2, #8
 800781e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2204      	movs	r2, #4
 8007824:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	69db      	ldr	r3, [r3, #28]
 800782c:	f003 0303 	and.w	r3, r3, #3
 8007830:	2b00      	cmp	r3, #0
 8007832:	d003      	beq.n	800783c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 fac0 	bl	8007dba <HAL_TIM_IC_CaptureCallback>
 800783a:	e005      	b.n	8007848 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fab2 	bl	8007da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 fac3 	bl	8007dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	691b      	ldr	r3, [r3, #16]
 8007854:	f003 0310 	and.w	r3, r3, #16
 8007858:	2b10      	cmp	r3, #16
 800785a:	d122      	bne.n	80078a2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	f003 0310 	and.w	r3, r3, #16
 8007866:	2b10      	cmp	r3, #16
 8007868:	d11b      	bne.n	80078a2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f06f 0210 	mvn.w	r2, #16
 8007872:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2208      	movs	r2, #8
 8007878:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	69db      	ldr	r3, [r3, #28]
 8007880:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007884:	2b00      	cmp	r3, #0
 8007886:	d003      	beq.n	8007890 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fa96 	bl	8007dba <HAL_TIM_IC_CaptureCallback>
 800788e:	e005      	b.n	800789c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 fa88 	bl	8007da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 fa99 	bl	8007dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	f003 0301 	and.w	r3, r3, #1
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d10e      	bne.n	80078ce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68db      	ldr	r3, [r3, #12]
 80078b6:	f003 0301 	and.w	r3, r3, #1
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d107      	bne.n	80078ce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f06f 0201 	mvn.w	r2, #1
 80078c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f7fa f8a5 	bl	8001a18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	691b      	ldr	r3, [r3, #16]
 80078d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078d8:	2b80      	cmp	r3, #128	; 0x80
 80078da:	d10e      	bne.n	80078fa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078e6:	2b80      	cmp	r3, #128	; 0x80
 80078e8:	d107      	bne.n	80078fa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80078f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 ff91 	bl	800881c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	691b      	ldr	r3, [r3, #16]
 8007900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007904:	2b40      	cmp	r3, #64	; 0x40
 8007906:	d10e      	bne.n	8007926 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007912:	2b40      	cmp	r3, #64	; 0x40
 8007914:	d107      	bne.n	8007926 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800791e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 fa5e 	bl	8007de2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	691b      	ldr	r3, [r3, #16]
 800792c:	f003 0320 	and.w	r3, r3, #32
 8007930:	2b20      	cmp	r3, #32
 8007932:	d10e      	bne.n	8007952 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	f003 0320 	and.w	r3, r3, #32
 800793e:	2b20      	cmp	r3, #32
 8007940:	d107      	bne.n	8007952 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f06f 0220 	mvn.w	r2, #32
 800794a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 ff5b 	bl	8008808 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007952:	bf00      	nop
 8007954:	3708      	adds	r7, #8
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800795a:	b580      	push	{r7, lr}
 800795c:	b086      	sub	sp, #24
 800795e:	af00      	add	r7, sp, #0
 8007960:	60f8      	str	r0, [r7, #12]
 8007962:	60b9      	str	r1, [r7, #8]
 8007964:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007966:	2300      	movs	r3, #0
 8007968:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007970:	2b01      	cmp	r3, #1
 8007972:	d101      	bne.n	8007978 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007974:	2302      	movs	r3, #2
 8007976:	e088      	b.n	8007a8a <HAL_TIM_IC_ConfigChannel+0x130>
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d11b      	bne.n	80079be <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6818      	ldr	r0, [r3, #0]
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	6819      	ldr	r1, [r3, #0]
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	685a      	ldr	r2, [r3, #4]
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	f000 fc7f 	bl	8008298 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	699a      	ldr	r2, [r3, #24]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f022 020c 	bic.w	r2, r2, #12
 80079a8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	6999      	ldr	r1, [r3, #24]
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	689a      	ldr	r2, [r3, #8]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	430a      	orrs	r2, r1
 80079ba:	619a      	str	r2, [r3, #24]
 80079bc:	e060      	b.n	8007a80 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2b04      	cmp	r3, #4
 80079c2:	d11c      	bne.n	80079fe <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6818      	ldr	r0, [r3, #0]
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	6819      	ldr	r1, [r3, #0]
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	685a      	ldr	r2, [r3, #4]
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	68db      	ldr	r3, [r3, #12]
 80079d4:	f000 fd03 	bl	80083de <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	699a      	ldr	r2, [r3, #24]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80079e6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	6999      	ldr	r1, [r3, #24]
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	021a      	lsls	r2, r3, #8
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	430a      	orrs	r2, r1
 80079fa:	619a      	str	r2, [r3, #24]
 80079fc:	e040      	b.n	8007a80 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2b08      	cmp	r3, #8
 8007a02:	d11b      	bne.n	8007a3c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6818      	ldr	r0, [r3, #0]
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	6819      	ldr	r1, [r3, #0]
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	685a      	ldr	r2, [r3, #4]
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	f000 fd50 	bl	80084b8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	69da      	ldr	r2, [r3, #28]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f022 020c 	bic.w	r2, r2, #12
 8007a26:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	69d9      	ldr	r1, [r3, #28]
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	689a      	ldr	r2, [r3, #8]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	430a      	orrs	r2, r1
 8007a38:	61da      	str	r2, [r3, #28]
 8007a3a:	e021      	b.n	8007a80 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2b0c      	cmp	r3, #12
 8007a40:	d11c      	bne.n	8007a7c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	6818      	ldr	r0, [r3, #0]
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	6819      	ldr	r1, [r3, #0]
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	685a      	ldr	r2, [r3, #4]
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	f000 fd6d 	bl	8008530 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	69da      	ldr	r2, [r3, #28]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007a64:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	69d9      	ldr	r1, [r3, #28]
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	021a      	lsls	r2, r3, #8
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	430a      	orrs	r2, r1
 8007a78:	61da      	str	r2, [r3, #28]
 8007a7a:	e001      	b.n	8007a80 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a88:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3718      	adds	r7, #24
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
	...

08007a94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b086      	sub	sp, #24
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d101      	bne.n	8007ab2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007aae:	2302      	movs	r3, #2
 8007ab0:	e0ae      	b.n	8007c10 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2b0c      	cmp	r3, #12
 8007abe:	f200 809f 	bhi.w	8007c00 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007ac2:	a201      	add	r2, pc, #4	; (adr r2, 8007ac8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac8:	08007afd 	.word	0x08007afd
 8007acc:	08007c01 	.word	0x08007c01
 8007ad0:	08007c01 	.word	0x08007c01
 8007ad4:	08007c01 	.word	0x08007c01
 8007ad8:	08007b3d 	.word	0x08007b3d
 8007adc:	08007c01 	.word	0x08007c01
 8007ae0:	08007c01 	.word	0x08007c01
 8007ae4:	08007c01 	.word	0x08007c01
 8007ae8:	08007b7f 	.word	0x08007b7f
 8007aec:	08007c01 	.word	0x08007c01
 8007af0:	08007c01 	.word	0x08007c01
 8007af4:	08007c01 	.word	0x08007c01
 8007af8:	08007bbf 	.word	0x08007bbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68b9      	ldr	r1, [r7, #8]
 8007b02:	4618      	mov	r0, r3
 8007b04:	f000 fa18 	bl	8007f38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	699a      	ldr	r2, [r3, #24]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f042 0208 	orr.w	r2, r2, #8
 8007b16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	699a      	ldr	r2, [r3, #24]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f022 0204 	bic.w	r2, r2, #4
 8007b26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	6999      	ldr	r1, [r3, #24]
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	691a      	ldr	r2, [r3, #16]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	430a      	orrs	r2, r1
 8007b38:	619a      	str	r2, [r3, #24]
      break;
 8007b3a:	e064      	b.n	8007c06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	68b9      	ldr	r1, [r7, #8]
 8007b42:	4618      	mov	r0, r3
 8007b44:	f000 fa68 	bl	8008018 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	699a      	ldr	r2, [r3, #24]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	699a      	ldr	r2, [r3, #24]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	6999      	ldr	r1, [r3, #24]
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	021a      	lsls	r2, r3, #8
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	430a      	orrs	r2, r1
 8007b7a:	619a      	str	r2, [r3, #24]
      break;
 8007b7c:	e043      	b.n	8007c06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	68b9      	ldr	r1, [r7, #8]
 8007b84:	4618      	mov	r0, r3
 8007b86:	f000 fabd 	bl	8008104 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	69da      	ldr	r2, [r3, #28]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f042 0208 	orr.w	r2, r2, #8
 8007b98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	69da      	ldr	r2, [r3, #28]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f022 0204 	bic.w	r2, r2, #4
 8007ba8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	69d9      	ldr	r1, [r3, #28]
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	691a      	ldr	r2, [r3, #16]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	430a      	orrs	r2, r1
 8007bba:	61da      	str	r2, [r3, #28]
      break;
 8007bbc:	e023      	b.n	8007c06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68b9      	ldr	r1, [r7, #8]
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f000 fb11 	bl	80081ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	69da      	ldr	r2, [r3, #28]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	69da      	ldr	r2, [r3, #28]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007be8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	69d9      	ldr	r1, [r3, #28]
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	691b      	ldr	r3, [r3, #16]
 8007bf4:	021a      	lsls	r2, r3, #8
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	430a      	orrs	r2, r1
 8007bfc:	61da      	str	r2, [r3, #28]
      break;
 8007bfe:	e002      	b.n	8007c06 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	75fb      	strb	r3, [r7, #23]
      break;
 8007c04:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3718      	adds	r7, #24
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c22:	2300      	movs	r3, #0
 8007c24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d101      	bne.n	8007c34 <HAL_TIM_ConfigClockSource+0x1c>
 8007c30:	2302      	movs	r3, #2
 8007c32:	e0b4      	b.n	8007d9e <HAL_TIM_ConfigClockSource+0x186>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2201      	movs	r2, #1
 8007c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2202      	movs	r2, #2
 8007c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007c52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	68ba      	ldr	r2, [r7, #8]
 8007c62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c6c:	d03e      	beq.n	8007cec <HAL_TIM_ConfigClockSource+0xd4>
 8007c6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c72:	f200 8087 	bhi.w	8007d84 <HAL_TIM_ConfigClockSource+0x16c>
 8007c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c7a:	f000 8086 	beq.w	8007d8a <HAL_TIM_ConfigClockSource+0x172>
 8007c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c82:	d87f      	bhi.n	8007d84 <HAL_TIM_ConfigClockSource+0x16c>
 8007c84:	2b70      	cmp	r3, #112	; 0x70
 8007c86:	d01a      	beq.n	8007cbe <HAL_TIM_ConfigClockSource+0xa6>
 8007c88:	2b70      	cmp	r3, #112	; 0x70
 8007c8a:	d87b      	bhi.n	8007d84 <HAL_TIM_ConfigClockSource+0x16c>
 8007c8c:	2b60      	cmp	r3, #96	; 0x60
 8007c8e:	d050      	beq.n	8007d32 <HAL_TIM_ConfigClockSource+0x11a>
 8007c90:	2b60      	cmp	r3, #96	; 0x60
 8007c92:	d877      	bhi.n	8007d84 <HAL_TIM_ConfigClockSource+0x16c>
 8007c94:	2b50      	cmp	r3, #80	; 0x50
 8007c96:	d03c      	beq.n	8007d12 <HAL_TIM_ConfigClockSource+0xfa>
 8007c98:	2b50      	cmp	r3, #80	; 0x50
 8007c9a:	d873      	bhi.n	8007d84 <HAL_TIM_ConfigClockSource+0x16c>
 8007c9c:	2b40      	cmp	r3, #64	; 0x40
 8007c9e:	d058      	beq.n	8007d52 <HAL_TIM_ConfigClockSource+0x13a>
 8007ca0:	2b40      	cmp	r3, #64	; 0x40
 8007ca2:	d86f      	bhi.n	8007d84 <HAL_TIM_ConfigClockSource+0x16c>
 8007ca4:	2b30      	cmp	r3, #48	; 0x30
 8007ca6:	d064      	beq.n	8007d72 <HAL_TIM_ConfigClockSource+0x15a>
 8007ca8:	2b30      	cmp	r3, #48	; 0x30
 8007caa:	d86b      	bhi.n	8007d84 <HAL_TIM_ConfigClockSource+0x16c>
 8007cac:	2b20      	cmp	r3, #32
 8007cae:	d060      	beq.n	8007d72 <HAL_TIM_ConfigClockSource+0x15a>
 8007cb0:	2b20      	cmp	r3, #32
 8007cb2:	d867      	bhi.n	8007d84 <HAL_TIM_ConfigClockSource+0x16c>
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d05c      	beq.n	8007d72 <HAL_TIM_ConfigClockSource+0x15a>
 8007cb8:	2b10      	cmp	r3, #16
 8007cba:	d05a      	beq.n	8007d72 <HAL_TIM_ConfigClockSource+0x15a>
 8007cbc:	e062      	b.n	8007d84 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6818      	ldr	r0, [r3, #0]
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	6899      	ldr	r1, [r3, #8]
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	685a      	ldr	r2, [r3, #4]
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	f000 fc87 	bl	80085e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007ce0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	68ba      	ldr	r2, [r7, #8]
 8007ce8:	609a      	str	r2, [r3, #8]
      break;
 8007cea:	e04f      	b.n	8007d8c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6818      	ldr	r0, [r3, #0]
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	6899      	ldr	r1, [r3, #8]
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	685a      	ldr	r2, [r3, #4]
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	f000 fc70 	bl	80085e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	689a      	ldr	r2, [r3, #8]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d0e:	609a      	str	r2, [r3, #8]
      break;
 8007d10:	e03c      	b.n	8007d8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6818      	ldr	r0, [r3, #0]
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	6859      	ldr	r1, [r3, #4]
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	461a      	mov	r2, r3
 8007d20:	f000 fb2e 	bl	8008380 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2150      	movs	r1, #80	; 0x50
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f000 fc3d 	bl	80085aa <TIM_ITRx_SetConfig>
      break;
 8007d30:	e02c      	b.n	8007d8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6818      	ldr	r0, [r3, #0]
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	6859      	ldr	r1, [r3, #4]
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	68db      	ldr	r3, [r3, #12]
 8007d3e:	461a      	mov	r2, r3
 8007d40:	f000 fb8a 	bl	8008458 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2160      	movs	r1, #96	; 0x60
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f000 fc2d 	bl	80085aa <TIM_ITRx_SetConfig>
      break;
 8007d50:	e01c      	b.n	8007d8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6818      	ldr	r0, [r3, #0]
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	6859      	ldr	r1, [r3, #4]
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	f000 fb0e 	bl	8008380 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2140      	movs	r1, #64	; 0x40
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f000 fc1d 	bl	80085aa <TIM_ITRx_SetConfig>
      break;
 8007d70:	e00c      	b.n	8007d8c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	4610      	mov	r0, r2
 8007d7e:	f000 fc14 	bl	80085aa <TIM_ITRx_SetConfig>
      break;
 8007d82:	e003      	b.n	8007d8c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	73fb      	strb	r3, [r7, #15]
      break;
 8007d88:	e000      	b.n	8007d8c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007d8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3710      	adds	r7, #16
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007da6:	b480      	push	{r7}
 8007da8:	b083      	sub	sp, #12
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007dae:	bf00      	nop
 8007db0:	370c      	adds	r7, #12
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr

08007dba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007dba:	b480      	push	{r7}
 8007dbc:	b083      	sub	sp, #12
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007dc2:	bf00      	nop
 8007dc4:	370c      	adds	r7, #12
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr

08007dce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007dce:	b480      	push	{r7}
 8007dd0:	b083      	sub	sp, #12
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007dd6:	bf00      	nop
 8007dd8:	370c      	adds	r7, #12
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr

08007de2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007de2:	b480      	push	{r7}
 8007de4:	b083      	sub	sp, #12
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007dea:	bf00      	nop
 8007dec:	370c      	adds	r7, #12
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr
	...

08007df8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b085      	sub	sp, #20
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4a40      	ldr	r2, [pc, #256]	; (8007f0c <TIM_Base_SetConfig+0x114>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d013      	beq.n	8007e38 <TIM_Base_SetConfig+0x40>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e16:	d00f      	beq.n	8007e38 <TIM_Base_SetConfig+0x40>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	4a3d      	ldr	r2, [pc, #244]	; (8007f10 <TIM_Base_SetConfig+0x118>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d00b      	beq.n	8007e38 <TIM_Base_SetConfig+0x40>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	4a3c      	ldr	r2, [pc, #240]	; (8007f14 <TIM_Base_SetConfig+0x11c>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d007      	beq.n	8007e38 <TIM_Base_SetConfig+0x40>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4a3b      	ldr	r2, [pc, #236]	; (8007f18 <TIM_Base_SetConfig+0x120>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d003      	beq.n	8007e38 <TIM_Base_SetConfig+0x40>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	4a3a      	ldr	r2, [pc, #232]	; (8007f1c <TIM_Base_SetConfig+0x124>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d108      	bne.n	8007e4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a2f      	ldr	r2, [pc, #188]	; (8007f0c <TIM_Base_SetConfig+0x114>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d02b      	beq.n	8007eaa <TIM_Base_SetConfig+0xb2>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e58:	d027      	beq.n	8007eaa <TIM_Base_SetConfig+0xb2>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a2c      	ldr	r2, [pc, #176]	; (8007f10 <TIM_Base_SetConfig+0x118>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d023      	beq.n	8007eaa <TIM_Base_SetConfig+0xb2>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a2b      	ldr	r2, [pc, #172]	; (8007f14 <TIM_Base_SetConfig+0x11c>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d01f      	beq.n	8007eaa <TIM_Base_SetConfig+0xb2>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a2a      	ldr	r2, [pc, #168]	; (8007f18 <TIM_Base_SetConfig+0x120>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d01b      	beq.n	8007eaa <TIM_Base_SetConfig+0xb2>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a29      	ldr	r2, [pc, #164]	; (8007f1c <TIM_Base_SetConfig+0x124>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d017      	beq.n	8007eaa <TIM_Base_SetConfig+0xb2>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a28      	ldr	r2, [pc, #160]	; (8007f20 <TIM_Base_SetConfig+0x128>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d013      	beq.n	8007eaa <TIM_Base_SetConfig+0xb2>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a27      	ldr	r2, [pc, #156]	; (8007f24 <TIM_Base_SetConfig+0x12c>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d00f      	beq.n	8007eaa <TIM_Base_SetConfig+0xb2>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a26      	ldr	r2, [pc, #152]	; (8007f28 <TIM_Base_SetConfig+0x130>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d00b      	beq.n	8007eaa <TIM_Base_SetConfig+0xb2>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4a25      	ldr	r2, [pc, #148]	; (8007f2c <TIM_Base_SetConfig+0x134>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d007      	beq.n	8007eaa <TIM_Base_SetConfig+0xb2>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a24      	ldr	r2, [pc, #144]	; (8007f30 <TIM_Base_SetConfig+0x138>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d003      	beq.n	8007eaa <TIM_Base_SetConfig+0xb2>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a23      	ldr	r2, [pc, #140]	; (8007f34 <TIM_Base_SetConfig+0x13c>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d108      	bne.n	8007ebc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007eb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	695b      	ldr	r3, [r3, #20]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	68fa      	ldr	r2, [r7, #12]
 8007ece:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	689a      	ldr	r2, [r3, #8]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4a0a      	ldr	r2, [pc, #40]	; (8007f0c <TIM_Base_SetConfig+0x114>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d003      	beq.n	8007ef0 <TIM_Base_SetConfig+0xf8>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	4a0c      	ldr	r2, [pc, #48]	; (8007f1c <TIM_Base_SetConfig+0x124>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d103      	bne.n	8007ef8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	691a      	ldr	r2, [r3, #16]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	615a      	str	r2, [r3, #20]
}
 8007efe:	bf00      	nop
 8007f00:	3714      	adds	r7, #20
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop
 8007f0c:	40010000 	.word	0x40010000
 8007f10:	40000400 	.word	0x40000400
 8007f14:	40000800 	.word	0x40000800
 8007f18:	40000c00 	.word	0x40000c00
 8007f1c:	40010400 	.word	0x40010400
 8007f20:	40014000 	.word	0x40014000
 8007f24:	40014400 	.word	0x40014400
 8007f28:	40014800 	.word	0x40014800
 8007f2c:	40001800 	.word	0x40001800
 8007f30:	40001c00 	.word	0x40001c00
 8007f34:	40002000 	.word	0x40002000

08007f38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b087      	sub	sp, #28
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6a1b      	ldr	r3, [r3, #32]
 8007f46:	f023 0201 	bic.w	r2, r3, #1
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6a1b      	ldr	r3, [r3, #32]
 8007f52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	699b      	ldr	r3, [r3, #24]
 8007f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f023 0303 	bic.w	r3, r3, #3
 8007f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	68fa      	ldr	r2, [r7, #12]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	f023 0302 	bic.w	r3, r3, #2
 8007f80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	697a      	ldr	r2, [r7, #20]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	4a20      	ldr	r2, [pc, #128]	; (8008010 <TIM_OC1_SetConfig+0xd8>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d003      	beq.n	8007f9c <TIM_OC1_SetConfig+0x64>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	4a1f      	ldr	r2, [pc, #124]	; (8008014 <TIM_OC1_SetConfig+0xdc>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d10c      	bne.n	8007fb6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	f023 0308 	bic.w	r3, r3, #8
 8007fa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	697a      	ldr	r2, [r7, #20]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	f023 0304 	bic.w	r3, r3, #4
 8007fb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4a15      	ldr	r2, [pc, #84]	; (8008010 <TIM_OC1_SetConfig+0xd8>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d003      	beq.n	8007fc6 <TIM_OC1_SetConfig+0x8e>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4a14      	ldr	r2, [pc, #80]	; (8008014 <TIM_OC1_SetConfig+0xdc>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d111      	bne.n	8007fea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	695b      	ldr	r3, [r3, #20]
 8007fda:	693a      	ldr	r2, [r7, #16]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	699b      	ldr	r3, [r3, #24]
 8007fe4:	693a      	ldr	r2, [r7, #16]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	693a      	ldr	r2, [r7, #16]
 8007fee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	68fa      	ldr	r2, [r7, #12]
 8007ff4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	685a      	ldr	r2, [r3, #4]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	697a      	ldr	r2, [r7, #20]
 8008002:	621a      	str	r2, [r3, #32]
}
 8008004:	bf00      	nop
 8008006:	371c      	adds	r7, #28
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr
 8008010:	40010000 	.word	0x40010000
 8008014:	40010400 	.word	0x40010400

08008018 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008018:	b480      	push	{r7}
 800801a:	b087      	sub	sp, #28
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6a1b      	ldr	r3, [r3, #32]
 8008026:	f023 0210 	bic.w	r2, r3, #16
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6a1b      	ldr	r3, [r3, #32]
 8008032:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	699b      	ldr	r3, [r3, #24]
 800803e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800804e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	021b      	lsls	r3, r3, #8
 8008056:	68fa      	ldr	r2, [r7, #12]
 8008058:	4313      	orrs	r3, r2
 800805a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	f023 0320 	bic.w	r3, r3, #32
 8008062:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	011b      	lsls	r3, r3, #4
 800806a:	697a      	ldr	r2, [r7, #20]
 800806c:	4313      	orrs	r3, r2
 800806e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4a22      	ldr	r2, [pc, #136]	; (80080fc <TIM_OC2_SetConfig+0xe4>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d003      	beq.n	8008080 <TIM_OC2_SetConfig+0x68>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4a21      	ldr	r2, [pc, #132]	; (8008100 <TIM_OC2_SetConfig+0xe8>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d10d      	bne.n	800809c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	011b      	lsls	r3, r3, #4
 800808e:	697a      	ldr	r2, [r7, #20]
 8008090:	4313      	orrs	r3, r2
 8008092:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800809a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4a17      	ldr	r2, [pc, #92]	; (80080fc <TIM_OC2_SetConfig+0xe4>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d003      	beq.n	80080ac <TIM_OC2_SetConfig+0x94>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4a16      	ldr	r2, [pc, #88]	; (8008100 <TIM_OC2_SetConfig+0xe8>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d113      	bne.n	80080d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80080b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80080ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	695b      	ldr	r3, [r3, #20]
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	693a      	ldr	r2, [r7, #16]
 80080c4:	4313      	orrs	r3, r2
 80080c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	699b      	ldr	r3, [r3, #24]
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	693a      	ldr	r2, [r7, #16]
 80080d0:	4313      	orrs	r3, r2
 80080d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	693a      	ldr	r2, [r7, #16]
 80080d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	685a      	ldr	r2, [r3, #4]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	697a      	ldr	r2, [r7, #20]
 80080ec:	621a      	str	r2, [r3, #32]
}
 80080ee:	bf00      	nop
 80080f0:	371c      	adds	r7, #28
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr
 80080fa:	bf00      	nop
 80080fc:	40010000 	.word	0x40010000
 8008100:	40010400 	.word	0x40010400

08008104 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008104:	b480      	push	{r7}
 8008106:	b087      	sub	sp, #28
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6a1b      	ldr	r3, [r3, #32]
 8008112:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6a1b      	ldr	r3, [r3, #32]
 800811e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	69db      	ldr	r3, [r3, #28]
 800812a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f023 0303 	bic.w	r3, r3, #3
 800813a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68fa      	ldr	r2, [r7, #12]
 8008142:	4313      	orrs	r3, r2
 8008144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800814c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	021b      	lsls	r3, r3, #8
 8008154:	697a      	ldr	r2, [r7, #20]
 8008156:	4313      	orrs	r3, r2
 8008158:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4a21      	ldr	r2, [pc, #132]	; (80081e4 <TIM_OC3_SetConfig+0xe0>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d003      	beq.n	800816a <TIM_OC3_SetConfig+0x66>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4a20      	ldr	r2, [pc, #128]	; (80081e8 <TIM_OC3_SetConfig+0xe4>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d10d      	bne.n	8008186 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008170:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	021b      	lsls	r3, r3, #8
 8008178:	697a      	ldr	r2, [r7, #20]
 800817a:	4313      	orrs	r3, r2
 800817c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008184:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	4a16      	ldr	r2, [pc, #88]	; (80081e4 <TIM_OC3_SetConfig+0xe0>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d003      	beq.n	8008196 <TIM_OC3_SetConfig+0x92>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4a15      	ldr	r2, [pc, #84]	; (80081e8 <TIM_OC3_SetConfig+0xe4>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d113      	bne.n	80081be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800819c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80081a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	695b      	ldr	r3, [r3, #20]
 80081aa:	011b      	lsls	r3, r3, #4
 80081ac:	693a      	ldr	r2, [r7, #16]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	699b      	ldr	r3, [r3, #24]
 80081b6:	011b      	lsls	r3, r3, #4
 80081b8:	693a      	ldr	r2, [r7, #16]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	693a      	ldr	r2, [r7, #16]
 80081c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	685a      	ldr	r2, [r3, #4]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	697a      	ldr	r2, [r7, #20]
 80081d6:	621a      	str	r2, [r3, #32]
}
 80081d8:	bf00      	nop
 80081da:	371c      	adds	r7, #28
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr
 80081e4:	40010000 	.word	0x40010000
 80081e8:	40010400 	.word	0x40010400

080081ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b087      	sub	sp, #28
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a1b      	ldr	r3, [r3, #32]
 80081fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a1b      	ldr	r3, [r3, #32]
 8008206:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	69db      	ldr	r3, [r3, #28]
 8008212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800821a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008222:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	021b      	lsls	r3, r3, #8
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	4313      	orrs	r3, r2
 800822e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008236:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	031b      	lsls	r3, r3, #12
 800823e:	693a      	ldr	r2, [r7, #16]
 8008240:	4313      	orrs	r3, r2
 8008242:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	4a12      	ldr	r2, [pc, #72]	; (8008290 <TIM_OC4_SetConfig+0xa4>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d003      	beq.n	8008254 <TIM_OC4_SetConfig+0x68>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	4a11      	ldr	r2, [pc, #68]	; (8008294 <TIM_OC4_SetConfig+0xa8>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d109      	bne.n	8008268 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800825a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	695b      	ldr	r3, [r3, #20]
 8008260:	019b      	lsls	r3, r3, #6
 8008262:	697a      	ldr	r2, [r7, #20]
 8008264:	4313      	orrs	r3, r2
 8008266:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	697a      	ldr	r2, [r7, #20]
 800826c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	68fa      	ldr	r2, [r7, #12]
 8008272:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	685a      	ldr	r2, [r3, #4]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	693a      	ldr	r2, [r7, #16]
 8008280:	621a      	str	r2, [r3, #32]
}
 8008282:	bf00      	nop
 8008284:	371c      	adds	r7, #28
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	40010000 	.word	0x40010000
 8008294:	40010400 	.word	0x40010400

08008298 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008298:	b480      	push	{r7}
 800829a:	b087      	sub	sp, #28
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	607a      	str	r2, [r7, #4]
 80082a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	6a1b      	ldr	r3, [r3, #32]
 80082aa:	f023 0201 	bic.w	r2, r3, #1
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	699b      	ldr	r3, [r3, #24]
 80082b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6a1b      	ldr	r3, [r3, #32]
 80082bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	4a28      	ldr	r2, [pc, #160]	; (8008364 <TIM_TI1_SetConfig+0xcc>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d01b      	beq.n	80082fe <TIM_TI1_SetConfig+0x66>
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082cc:	d017      	beq.n	80082fe <TIM_TI1_SetConfig+0x66>
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	4a25      	ldr	r2, [pc, #148]	; (8008368 <TIM_TI1_SetConfig+0xd0>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d013      	beq.n	80082fe <TIM_TI1_SetConfig+0x66>
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	4a24      	ldr	r2, [pc, #144]	; (800836c <TIM_TI1_SetConfig+0xd4>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d00f      	beq.n	80082fe <TIM_TI1_SetConfig+0x66>
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	4a23      	ldr	r2, [pc, #140]	; (8008370 <TIM_TI1_SetConfig+0xd8>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d00b      	beq.n	80082fe <TIM_TI1_SetConfig+0x66>
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	4a22      	ldr	r2, [pc, #136]	; (8008374 <TIM_TI1_SetConfig+0xdc>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d007      	beq.n	80082fe <TIM_TI1_SetConfig+0x66>
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	4a21      	ldr	r2, [pc, #132]	; (8008378 <TIM_TI1_SetConfig+0xe0>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d003      	beq.n	80082fe <TIM_TI1_SetConfig+0x66>
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	4a20      	ldr	r2, [pc, #128]	; (800837c <TIM_TI1_SetConfig+0xe4>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d101      	bne.n	8008302 <TIM_TI1_SetConfig+0x6a>
 80082fe:	2301      	movs	r3, #1
 8008300:	e000      	b.n	8008304 <TIM_TI1_SetConfig+0x6c>
 8008302:	2300      	movs	r3, #0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d008      	beq.n	800831a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	f023 0303 	bic.w	r3, r3, #3
 800830e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008310:	697a      	ldr	r2, [r7, #20]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4313      	orrs	r3, r2
 8008316:	617b      	str	r3, [r7, #20]
 8008318:	e003      	b.n	8008322 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	f043 0301 	orr.w	r3, r3, #1
 8008320:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008328:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	011b      	lsls	r3, r3, #4
 800832e:	b2db      	uxtb	r3, r3
 8008330:	697a      	ldr	r2, [r7, #20]
 8008332:	4313      	orrs	r3, r2
 8008334:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	f023 030a 	bic.w	r3, r3, #10
 800833c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	f003 030a 	and.w	r3, r3, #10
 8008344:	693a      	ldr	r2, [r7, #16]
 8008346:	4313      	orrs	r3, r2
 8008348:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	697a      	ldr	r2, [r7, #20]
 800834e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	693a      	ldr	r2, [r7, #16]
 8008354:	621a      	str	r2, [r3, #32]
}
 8008356:	bf00      	nop
 8008358:	371c      	adds	r7, #28
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	40010000 	.word	0x40010000
 8008368:	40000400 	.word	0x40000400
 800836c:	40000800 	.word	0x40000800
 8008370:	40000c00 	.word	0x40000c00
 8008374:	40010400 	.word	0x40010400
 8008378:	40014000 	.word	0x40014000
 800837c:	40001800 	.word	0x40001800

08008380 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008380:	b480      	push	{r7}
 8008382:	b087      	sub	sp, #28
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6a1b      	ldr	r3, [r3, #32]
 8008390:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	6a1b      	ldr	r3, [r3, #32]
 8008396:	f023 0201 	bic.w	r2, r3, #1
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	699b      	ldr	r3, [r3, #24]
 80083a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80083aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	011b      	lsls	r3, r3, #4
 80083b0:	693a      	ldr	r2, [r7, #16]
 80083b2:	4313      	orrs	r3, r2
 80083b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	f023 030a 	bic.w	r3, r3, #10
 80083bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80083be:	697a      	ldr	r2, [r7, #20]
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	693a      	ldr	r2, [r7, #16]
 80083ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	697a      	ldr	r2, [r7, #20]
 80083d0:	621a      	str	r2, [r3, #32]
}
 80083d2:	bf00      	nop
 80083d4:	371c      	adds	r7, #28
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr

080083de <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80083de:	b480      	push	{r7}
 80083e0:	b087      	sub	sp, #28
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	60f8      	str	r0, [r7, #12]
 80083e6:	60b9      	str	r1, [r7, #8]
 80083e8:	607a      	str	r2, [r7, #4]
 80083ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6a1b      	ldr	r3, [r3, #32]
 80083f0:	f023 0210 	bic.w	r2, r3, #16
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	699b      	ldr	r3, [r3, #24]
 80083fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6a1b      	ldr	r3, [r3, #32]
 8008402:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800840a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	021b      	lsls	r3, r3, #8
 8008410:	697a      	ldr	r2, [r7, #20]
 8008412:	4313      	orrs	r3, r2
 8008414:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800841c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	031b      	lsls	r3, r3, #12
 8008422:	b29b      	uxth	r3, r3
 8008424:	697a      	ldr	r2, [r7, #20]
 8008426:	4313      	orrs	r3, r2
 8008428:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008430:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	011b      	lsls	r3, r3, #4
 8008436:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800843a:	693a      	ldr	r2, [r7, #16]
 800843c:	4313      	orrs	r3, r2
 800843e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	697a      	ldr	r2, [r7, #20]
 8008444:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	693a      	ldr	r2, [r7, #16]
 800844a:	621a      	str	r2, [r3, #32]
}
 800844c:	bf00      	nop
 800844e:	371c      	adds	r7, #28
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008458:	b480      	push	{r7}
 800845a:	b087      	sub	sp, #28
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	6a1b      	ldr	r3, [r3, #32]
 8008468:	f023 0210 	bic.w	r2, r3, #16
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	699b      	ldr	r3, [r3, #24]
 8008474:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	6a1b      	ldr	r3, [r3, #32]
 800847a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008482:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	031b      	lsls	r3, r3, #12
 8008488:	697a      	ldr	r2, [r7, #20]
 800848a:	4313      	orrs	r3, r2
 800848c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008494:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	011b      	lsls	r3, r3, #4
 800849a:	693a      	ldr	r2, [r7, #16]
 800849c:	4313      	orrs	r3, r2
 800849e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	697a      	ldr	r2, [r7, #20]
 80084a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	693a      	ldr	r2, [r7, #16]
 80084aa:	621a      	str	r2, [r3, #32]
}
 80084ac:	bf00      	nop
 80084ae:	371c      	adds	r7, #28
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b087      	sub	sp, #28
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
 80084c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	6a1b      	ldr	r3, [r3, #32]
 80084ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	69db      	ldr	r3, [r3, #28]
 80084d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	6a1b      	ldr	r3, [r3, #32]
 80084dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	f023 0303 	bic.w	r3, r3, #3
 80084e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80084e6:	697a      	ldr	r2, [r7, #20]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	4313      	orrs	r3, r2
 80084ec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	011b      	lsls	r3, r3, #4
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	697a      	ldr	r2, [r7, #20]
 80084fe:	4313      	orrs	r3, r2
 8008500:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008508:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	021b      	lsls	r3, r3, #8
 800850e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008512:	693a      	ldr	r2, [r7, #16]
 8008514:	4313      	orrs	r3, r2
 8008516:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	697a      	ldr	r2, [r7, #20]
 800851c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	693a      	ldr	r2, [r7, #16]
 8008522:	621a      	str	r2, [r3, #32]
}
 8008524:	bf00      	nop
 8008526:	371c      	adds	r7, #28
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008530:	b480      	push	{r7}
 8008532:	b087      	sub	sp, #28
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	607a      	str	r2, [r7, #4]
 800853c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6a1b      	ldr	r3, [r3, #32]
 8008542:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	69db      	ldr	r3, [r3, #28]
 800854e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6a1b      	ldr	r3, [r3, #32]
 8008554:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800855c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	021b      	lsls	r3, r3, #8
 8008562:	697a      	ldr	r2, [r7, #20]
 8008564:	4313      	orrs	r3, r2
 8008566:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800856e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	031b      	lsls	r3, r3, #12
 8008574:	b29b      	uxth	r3, r3
 8008576:	697a      	ldr	r2, [r7, #20]
 8008578:	4313      	orrs	r3, r2
 800857a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008582:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	031b      	lsls	r3, r3, #12
 8008588:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800858c:	693a      	ldr	r2, [r7, #16]
 800858e:	4313      	orrs	r3, r2
 8008590:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	697a      	ldr	r2, [r7, #20]
 8008596:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	693a      	ldr	r2, [r7, #16]
 800859c:	621a      	str	r2, [r3, #32]
}
 800859e:	bf00      	nop
 80085a0:	371c      	adds	r7, #28
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr

080085aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80085aa:	b480      	push	{r7}
 80085ac:	b085      	sub	sp, #20
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
 80085b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80085c2:	683a      	ldr	r2, [r7, #0]
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	4313      	orrs	r3, r2
 80085c8:	f043 0307 	orr.w	r3, r3, #7
 80085cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	68fa      	ldr	r2, [r7, #12]
 80085d2:	609a      	str	r2, [r3, #8]
}
 80085d4:	bf00      	nop
 80085d6:	3714      	adds	r7, #20
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b087      	sub	sp, #28
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	60b9      	str	r1, [r7, #8]
 80085ea:	607a      	str	r2, [r7, #4]
 80085ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80085fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	021a      	lsls	r2, r3, #8
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	431a      	orrs	r2, r3
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	4313      	orrs	r3, r2
 8008608:	697a      	ldr	r2, [r7, #20]
 800860a:	4313      	orrs	r3, r2
 800860c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	697a      	ldr	r2, [r7, #20]
 8008612:	609a      	str	r2, [r3, #8]
}
 8008614:	bf00      	nop
 8008616:	371c      	adds	r7, #28
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008620:	b480      	push	{r7}
 8008622:	b087      	sub	sp, #28
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	f003 031f 	and.w	r3, r3, #31
 8008632:	2201      	movs	r2, #1
 8008634:	fa02 f303 	lsl.w	r3, r2, r3
 8008638:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6a1a      	ldr	r2, [r3, #32]
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	43db      	mvns	r3, r3
 8008642:	401a      	ands	r2, r3
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6a1a      	ldr	r2, [r3, #32]
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	f003 031f 	and.w	r3, r3, #31
 8008652:	6879      	ldr	r1, [r7, #4]
 8008654:	fa01 f303 	lsl.w	r3, r1, r3
 8008658:	431a      	orrs	r2, r3
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	621a      	str	r2, [r3, #32]
}
 800865e:	bf00      	nop
 8008660:	371c      	adds	r7, #28
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr
	...

0800866c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800866c:	b480      	push	{r7}
 800866e:	b085      	sub	sp, #20
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800867c:	2b01      	cmp	r3, #1
 800867e:	d101      	bne.n	8008684 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008680:	2302      	movs	r3, #2
 8008682:	e05a      	b.n	800873a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2202      	movs	r2, #2
 8008690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	68fa      	ldr	r2, [r7, #12]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	68fa      	ldr	r2, [r7, #12]
 80086bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a21      	ldr	r2, [pc, #132]	; (8008748 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d022      	beq.n	800870e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086d0:	d01d      	beq.n	800870e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a1d      	ldr	r2, [pc, #116]	; (800874c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d018      	beq.n	800870e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a1b      	ldr	r2, [pc, #108]	; (8008750 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d013      	beq.n	800870e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a1a      	ldr	r2, [pc, #104]	; (8008754 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d00e      	beq.n	800870e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a18      	ldr	r2, [pc, #96]	; (8008758 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d009      	beq.n	800870e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a17      	ldr	r2, [pc, #92]	; (800875c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d004      	beq.n	800870e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a15      	ldr	r2, [pc, #84]	; (8008760 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d10c      	bne.n	8008728 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008714:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	68ba      	ldr	r2, [r7, #8]
 800871c:	4313      	orrs	r3, r2
 800871e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	68ba      	ldr	r2, [r7, #8]
 8008726:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2201      	movs	r2, #1
 800872c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2200      	movs	r2, #0
 8008734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3714      	adds	r7, #20
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr
 8008746:	bf00      	nop
 8008748:	40010000 	.word	0x40010000
 800874c:	40000400 	.word	0x40000400
 8008750:	40000800 	.word	0x40000800
 8008754:	40000c00 	.word	0x40000c00
 8008758:	40010400 	.word	0x40010400
 800875c:	40014000 	.word	0x40014000
 8008760:	40001800 	.word	0x40001800

08008764 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008764:	b480      	push	{r7}
 8008766:	b085      	sub	sp, #20
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800876e:	2300      	movs	r3, #0
 8008770:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008778:	2b01      	cmp	r3, #1
 800877a:	d101      	bne.n	8008780 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800877c:	2302      	movs	r3, #2
 800877e:	e03d      	b.n	80087fc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	4313      	orrs	r3, r2
 8008794:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	4313      	orrs	r3, r2
 80087a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4313      	orrs	r3, r2
 80087be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	691b      	ldr	r3, [r3, #16]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	695b      	ldr	r3, [r3, #20]
 80087d8:	4313      	orrs	r3, r2
 80087da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	69db      	ldr	r3, [r3, #28]
 80087e6:	4313      	orrs	r3, r2
 80087e8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	68fa      	ldr	r2, [r7, #12]
 80087f0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087fa:	2300      	movs	r3, #0
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3714      	adds	r7, #20
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008810:	bf00      	nop
 8008812:	370c      	adds	r7, #12
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008824:	bf00      	nop
 8008826:	370c      	adds	r7, #12
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr

08008830 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d101      	bne.n	8008842 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800883e:	2301      	movs	r3, #1
 8008840:	e03f      	b.n	80088c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008848:	b2db      	uxtb	r3, r3
 800884a:	2b00      	cmp	r3, #0
 800884c:	d106      	bne.n	800885c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f7fb fbc0 	bl	8003fdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2224      	movs	r2, #36	; 0x24
 8008860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	68da      	ldr	r2, [r3, #12]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008872:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 fec5 	bl	8009604 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	691a      	ldr	r2, [r3, #16]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008888:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	695a      	ldr	r2, [r3, #20]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008898:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	68da      	ldr	r2, [r3, #12]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80088a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2220      	movs	r2, #32
 80088b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2220      	movs	r2, #32
 80088bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3708      	adds	r7, #8
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}

080088ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088ca:	b580      	push	{r7, lr}
 80088cc:	b08a      	sub	sp, #40	; 0x28
 80088ce:	af02      	add	r7, sp, #8
 80088d0:	60f8      	str	r0, [r7, #12]
 80088d2:	60b9      	str	r1, [r7, #8]
 80088d4:	603b      	str	r3, [r7, #0]
 80088d6:	4613      	mov	r3, r2
 80088d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80088da:	2300      	movs	r3, #0
 80088dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	2b20      	cmp	r3, #32
 80088e8:	d17c      	bne.n	80089e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d002      	beq.n	80088f6 <HAL_UART_Transmit+0x2c>
 80088f0:	88fb      	ldrh	r3, [r7, #6]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d101      	bne.n	80088fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80088f6:	2301      	movs	r3, #1
 80088f8:	e075      	b.n	80089e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008900:	2b01      	cmp	r3, #1
 8008902:	d101      	bne.n	8008908 <HAL_UART_Transmit+0x3e>
 8008904:	2302      	movs	r3, #2
 8008906:	e06e      	b.n	80089e6 <HAL_UART_Transmit+0x11c>
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2201      	movs	r2, #1
 800890c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2200      	movs	r2, #0
 8008914:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2221      	movs	r2, #33	; 0x21
 800891a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800891e:	f7fb fc7b 	bl	8004218 <HAL_GetTick>
 8008922:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	88fa      	ldrh	r2, [r7, #6]
 8008928:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	88fa      	ldrh	r2, [r7, #6]
 800892e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008938:	d108      	bne.n	800894c <HAL_UART_Transmit+0x82>
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	691b      	ldr	r3, [r3, #16]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d104      	bne.n	800894c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008942:	2300      	movs	r3, #0
 8008944:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	61bb      	str	r3, [r7, #24]
 800894a:	e003      	b.n	8008954 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008950:	2300      	movs	r3, #0
 8008952:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2200      	movs	r2, #0
 8008958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800895c:	e02a      	b.n	80089b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	9300      	str	r3, [sp, #0]
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	2200      	movs	r2, #0
 8008966:	2180      	movs	r1, #128	; 0x80
 8008968:	68f8      	ldr	r0, [r7, #12]
 800896a:	f000 fc05 	bl	8009178 <UART_WaitOnFlagUntilTimeout>
 800896e:	4603      	mov	r3, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	d001      	beq.n	8008978 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008974:	2303      	movs	r3, #3
 8008976:	e036      	b.n	80089e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008978:	69fb      	ldr	r3, [r7, #28]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d10b      	bne.n	8008996 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800897e:	69bb      	ldr	r3, [r7, #24]
 8008980:	881b      	ldrh	r3, [r3, #0]
 8008982:	461a      	mov	r2, r3
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800898c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800898e:	69bb      	ldr	r3, [r7, #24]
 8008990:	3302      	adds	r3, #2
 8008992:	61bb      	str	r3, [r7, #24]
 8008994:	e007      	b.n	80089a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	781a      	ldrb	r2, [r3, #0]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	3301      	adds	r3, #1
 80089a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	3b01      	subs	r3, #1
 80089ae:	b29a      	uxth	r2, r3
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d1cf      	bne.n	800895e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	9300      	str	r3, [sp, #0]
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	2200      	movs	r2, #0
 80089c6:	2140      	movs	r1, #64	; 0x40
 80089c8:	68f8      	ldr	r0, [r7, #12]
 80089ca:	f000 fbd5 	bl	8009178 <UART_WaitOnFlagUntilTimeout>
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d001      	beq.n	80089d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80089d4:	2303      	movs	r3, #3
 80089d6:	e006      	b.n	80089e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2220      	movs	r2, #32
 80089dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80089e0:	2300      	movs	r3, #0
 80089e2:	e000      	b.n	80089e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80089e4:	2302      	movs	r3, #2
  }
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3720      	adds	r7, #32
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b08a      	sub	sp, #40	; 0x28
 80089f2:	af02      	add	r7, sp, #8
 80089f4:	60f8      	str	r0, [r7, #12]
 80089f6:	60b9      	str	r1, [r7, #8]
 80089f8:	603b      	str	r3, [r7, #0]
 80089fa:	4613      	mov	r3, r2
 80089fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80089fe:	2300      	movs	r3, #0
 8008a00:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	2b20      	cmp	r3, #32
 8008a0c:	f040 808c 	bne.w	8008b28 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d002      	beq.n	8008a1c <HAL_UART_Receive+0x2e>
 8008a16:	88fb      	ldrh	r3, [r7, #6]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d101      	bne.n	8008a20 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	e084      	b.n	8008b2a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	d101      	bne.n	8008a2e <HAL_UART_Receive+0x40>
 8008a2a:	2302      	movs	r3, #2
 8008a2c:	e07d      	b.n	8008b2a <HAL_UART_Receive+0x13c>
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2201      	movs	r2, #1
 8008a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2222      	movs	r2, #34	; 0x22
 8008a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2200      	movs	r2, #0
 8008a48:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a4a:	f7fb fbe5 	bl	8004218 <HAL_GetTick>
 8008a4e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	88fa      	ldrh	r2, [r7, #6]
 8008a54:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	88fa      	ldrh	r2, [r7, #6]
 8008a5a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a64:	d108      	bne.n	8008a78 <HAL_UART_Receive+0x8a>
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	691b      	ldr	r3, [r3, #16]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d104      	bne.n	8008a78 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	61bb      	str	r3, [r7, #24]
 8008a76:	e003      	b.n	8008a80 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2200      	movs	r2, #0
 8008a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008a88:	e043      	b.n	8008b12 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	9300      	str	r3, [sp, #0]
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	2200      	movs	r2, #0
 8008a92:	2120      	movs	r1, #32
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f000 fb6f 	bl	8009178 <UART_WaitOnFlagUntilTimeout>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d001      	beq.n	8008aa4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8008aa0:	2303      	movs	r3, #3
 8008aa2:	e042      	b.n	8008b2a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d10c      	bne.n	8008ac4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ab6:	b29a      	uxth	r2, r3
 8008ab8:	69bb      	ldr	r3, [r7, #24]
 8008aba:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008abc:	69bb      	ldr	r3, [r7, #24]
 8008abe:	3302      	adds	r3, #2
 8008ac0:	61bb      	str	r3, [r7, #24]
 8008ac2:	e01f      	b.n	8008b04 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008acc:	d007      	beq.n	8008ade <HAL_UART_Receive+0xf0>
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d10a      	bne.n	8008aec <HAL_UART_Receive+0xfe>
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	691b      	ldr	r3, [r3, #16]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d106      	bne.n	8008aec <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	b2da      	uxtb	r2, r3
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	701a      	strb	r2, [r3, #0]
 8008aea:	e008      	b.n	8008afe <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008af8:	b2da      	uxtb	r2, r3
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8008afe:	69fb      	ldr	r3, [r7, #28]
 8008b00:	3301      	adds	r3, #1
 8008b02:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b08:	b29b      	uxth	r3, r3
 8008b0a:	3b01      	subs	r3, #1
 8008b0c:	b29a      	uxth	r2, r3
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d1b6      	bne.n	8008a8a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2220      	movs	r2, #32
 8008b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8008b24:	2300      	movs	r3, #0
 8008b26:	e000      	b.n	8008b2a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8008b28:	2302      	movs	r3, #2
  }
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3720      	adds	r7, #32
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008b32:	b480      	push	{r7}
 8008b34:	b085      	sub	sp, #20
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	60f8      	str	r0, [r7, #12]
 8008b3a:	60b9      	str	r1, [r7, #8]
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	2b20      	cmp	r3, #32
 8008b4a:	d130      	bne.n	8008bae <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d002      	beq.n	8008b58 <HAL_UART_Transmit_IT+0x26>
 8008b52:	88fb      	ldrh	r3, [r7, #6]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d101      	bne.n	8008b5c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	e029      	b.n	8008bb0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d101      	bne.n	8008b6a <HAL_UART_Transmit_IT+0x38>
 8008b66:	2302      	movs	r3, #2
 8008b68:	e022      	b.n	8008bb0 <HAL_UART_Transmit_IT+0x7e>
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	68ba      	ldr	r2, [r7, #8]
 8008b76:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	88fa      	ldrh	r2, [r7, #6]
 8008b7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	88fa      	ldrh	r2, [r7, #6]
 8008b82:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2200      	movs	r2, #0
 8008b88:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2221      	movs	r2, #33	; 0x21
 8008b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2200      	movs	r2, #0
 8008b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	68da      	ldr	r2, [r3, #12]
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008ba8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008baa:	2300      	movs	r3, #0
 8008bac:	e000      	b.n	8008bb0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008bae:	2302      	movs	r3, #2
  }
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3714      	adds	r7, #20
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	2b20      	cmp	r3, #32
 8008bd4:	d11d      	bne.n	8008c12 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d002      	beq.n	8008be2 <HAL_UART_Receive_IT+0x26>
 8008bdc:	88fb      	ldrh	r3, [r7, #6]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d101      	bne.n	8008be6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	e016      	b.n	8008c14 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d101      	bne.n	8008bf4 <HAL_UART_Receive_IT+0x38>
 8008bf0:	2302      	movs	r3, #2
 8008bf2:	e00f      	b.n	8008c14 <HAL_UART_Receive_IT+0x58>
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008c02:	88fb      	ldrh	r3, [r7, #6]
 8008c04:	461a      	mov	r2, r3
 8008c06:	68b9      	ldr	r1, [r7, #8]
 8008c08:	68f8      	ldr	r0, [r7, #12]
 8008c0a:	f000 fb23 	bl	8009254 <UART_Start_Receive_IT>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	e000      	b.n	8008c14 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008c12:	2302      	movs	r3, #2
  }
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3710      	adds	r7, #16
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b0ba      	sub	sp, #232	; 0xe8
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	68db      	ldr	r3, [r3, #12]
 8008c34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	695b      	ldr	r3, [r3, #20]
 8008c3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008c42:	2300      	movs	r3, #0
 8008c44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c52:	f003 030f 	and.w	r3, r3, #15
 8008c56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008c5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d10f      	bne.n	8008c82 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c66:	f003 0320 	and.w	r3, r3, #32
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d009      	beq.n	8008c82 <HAL_UART_IRQHandler+0x66>
 8008c6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c72:	f003 0320 	and.w	r3, r3, #32
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d003      	beq.n	8008c82 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 fc07 	bl	800948e <UART_Receive_IT>
      return;
 8008c80:	e256      	b.n	8009130 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008c82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	f000 80de 	beq.w	8008e48 <HAL_UART_IRQHandler+0x22c>
 8008c8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c90:	f003 0301 	and.w	r3, r3, #1
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d106      	bne.n	8008ca6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c9c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	f000 80d1 	beq.w	8008e48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008caa:	f003 0301 	and.w	r3, r3, #1
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d00b      	beq.n	8008cca <HAL_UART_IRQHandler+0xae>
 8008cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d005      	beq.n	8008cca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cc2:	f043 0201 	orr.w	r2, r3, #1
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cce:	f003 0304 	and.w	r3, r3, #4
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d00b      	beq.n	8008cee <HAL_UART_IRQHandler+0xd2>
 8008cd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008cda:	f003 0301 	and.w	r3, r3, #1
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d005      	beq.n	8008cee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce6:	f043 0202 	orr.w	r2, r3, #2
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cf2:	f003 0302 	and.w	r3, r3, #2
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d00b      	beq.n	8008d12 <HAL_UART_IRQHandler+0xf6>
 8008cfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008cfe:	f003 0301 	and.w	r3, r3, #1
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d005      	beq.n	8008d12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d0a:	f043 0204 	orr.w	r2, r3, #4
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d16:	f003 0308 	and.w	r3, r3, #8
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d011      	beq.n	8008d42 <HAL_UART_IRQHandler+0x126>
 8008d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d22:	f003 0320 	and.w	r3, r3, #32
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d105      	bne.n	8008d36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008d2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d2e:	f003 0301 	and.w	r3, r3, #1
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d005      	beq.n	8008d42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d3a:	f043 0208 	orr.w	r2, r3, #8
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	f000 81ed 	beq.w	8009126 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d50:	f003 0320 	and.w	r3, r3, #32
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d008      	beq.n	8008d6a <HAL_UART_IRQHandler+0x14e>
 8008d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d5c:	f003 0320 	and.w	r3, r3, #32
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d002      	beq.n	8008d6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 fb92 	bl	800948e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	695b      	ldr	r3, [r3, #20]
 8008d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d74:	2b40      	cmp	r3, #64	; 0x40
 8008d76:	bf0c      	ite	eq
 8008d78:	2301      	moveq	r3, #1
 8008d7a:	2300      	movne	r3, #0
 8008d7c:	b2db      	uxtb	r3, r3
 8008d7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d86:	f003 0308 	and.w	r3, r3, #8
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d103      	bne.n	8008d96 <HAL_UART_IRQHandler+0x17a>
 8008d8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d04f      	beq.n	8008e36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 fa9a 	bl	80092d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	695b      	ldr	r3, [r3, #20]
 8008da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008da6:	2b40      	cmp	r3, #64	; 0x40
 8008da8:	d141      	bne.n	8008e2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	3314      	adds	r3, #20
 8008db0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008db8:	e853 3f00 	ldrex	r3, [r3]
 8008dbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008dc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008dc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008dc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	3314      	adds	r3, #20
 8008dd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008dd6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008dda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008de2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008de6:	e841 2300 	strex	r3, r2, [r1]
 8008dea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008dee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d1d9      	bne.n	8008daa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d013      	beq.n	8008e26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e02:	4a7d      	ldr	r2, [pc, #500]	; (8008ff8 <HAL_UART_IRQHandler+0x3dc>)
 8008e04:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7fb fe17 	bl	8004a3e <HAL_DMA_Abort_IT>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d016      	beq.n	8008e44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008e20:	4610      	mov	r0, r2
 8008e22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e24:	e00e      	b.n	8008e44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 f990 	bl	800914c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e2c:	e00a      	b.n	8008e44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 f98c 	bl	800914c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e34:	e006      	b.n	8008e44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 f988 	bl	800914c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008e42:	e170      	b.n	8009126 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e44:	bf00      	nop
    return;
 8008e46:	e16e      	b.n	8009126 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	f040 814a 	bne.w	80090e6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e56:	f003 0310 	and.w	r3, r3, #16
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	f000 8143 	beq.w	80090e6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e64:	f003 0310 	and.w	r3, r3, #16
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	f000 813c 	beq.w	80090e6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008e6e:	2300      	movs	r3, #0
 8008e70:	60bb      	str	r3, [r7, #8]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	60bb      	str	r3, [r7, #8]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	60bb      	str	r3, [r7, #8]
 8008e82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	695b      	ldr	r3, [r3, #20]
 8008e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e8e:	2b40      	cmp	r3, #64	; 0x40
 8008e90:	f040 80b4 	bne.w	8008ffc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008ea0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	f000 8140 	beq.w	800912a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008eae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	f080 8139 	bcs.w	800912a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008ebe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec4:	69db      	ldr	r3, [r3, #28]
 8008ec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008eca:	f000 8088 	beq.w	8008fde <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	330c      	adds	r3, #12
 8008ed4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008edc:	e853 3f00 	ldrex	r3, [r3]
 8008ee0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008ee4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008eec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	330c      	adds	r3, #12
 8008ef6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008efa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008efe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008f06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008f0a:	e841 2300 	strex	r3, r2, [r1]
 8008f0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008f12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d1d9      	bne.n	8008ece <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	3314      	adds	r3, #20
 8008f20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f24:	e853 3f00 	ldrex	r3, [r3]
 8008f28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008f2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f2c:	f023 0301 	bic.w	r3, r3, #1
 8008f30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	3314      	adds	r3, #20
 8008f3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008f3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008f42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008f46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008f4a:	e841 2300 	strex	r3, r2, [r1]
 8008f4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008f50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d1e1      	bne.n	8008f1a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	3314      	adds	r3, #20
 8008f5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f60:	e853 3f00 	ldrex	r3, [r3]
 8008f64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008f66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	3314      	adds	r3, #20
 8008f76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008f7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008f7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008f80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008f82:	e841 2300 	strex	r3, r2, [r1]
 8008f86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008f88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d1e3      	bne.n	8008f56 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2220      	movs	r2, #32
 8008f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	330c      	adds	r3, #12
 8008fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fa6:	e853 3f00 	ldrex	r3, [r3]
 8008faa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008fac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fae:	f023 0310 	bic.w	r3, r3, #16
 8008fb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	330c      	adds	r3, #12
 8008fbc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008fc0:	65ba      	str	r2, [r7, #88]	; 0x58
 8008fc2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008fc6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008fc8:	e841 2300 	strex	r3, r2, [r1]
 8008fcc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d1e3      	bne.n	8008f9c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7fb fcc0 	bl	800495e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	1ad3      	subs	r3, r2, r3
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	4619      	mov	r1, r3
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 f8b6 	bl	8009160 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008ff4:	e099      	b.n	800912a <HAL_UART_IRQHandler+0x50e>
 8008ff6:	bf00      	nop
 8008ff8:	08009397 	.word	0x08009397
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009004:	b29b      	uxth	r3, r3
 8009006:	1ad3      	subs	r3, r2, r3
 8009008:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009010:	b29b      	uxth	r3, r3
 8009012:	2b00      	cmp	r3, #0
 8009014:	f000 808b 	beq.w	800912e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009018:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800901c:	2b00      	cmp	r3, #0
 800901e:	f000 8086 	beq.w	800912e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	330c      	adds	r3, #12
 8009028:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800902a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902c:	e853 3f00 	ldrex	r3, [r3]
 8009030:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009034:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009038:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	330c      	adds	r3, #12
 8009042:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009046:	647a      	str	r2, [r7, #68]	; 0x44
 8009048:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800904a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800904c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800904e:	e841 2300 	strex	r3, r2, [r1]
 8009052:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009056:	2b00      	cmp	r3, #0
 8009058:	d1e3      	bne.n	8009022 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	3314      	adds	r3, #20
 8009060:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009064:	e853 3f00 	ldrex	r3, [r3]
 8009068:	623b      	str	r3, [r7, #32]
   return(result);
 800906a:	6a3b      	ldr	r3, [r7, #32]
 800906c:	f023 0301 	bic.w	r3, r3, #1
 8009070:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	3314      	adds	r3, #20
 800907a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800907e:	633a      	str	r2, [r7, #48]	; 0x30
 8009080:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009082:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009086:	e841 2300 	strex	r3, r2, [r1]
 800908a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800908c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908e:	2b00      	cmp	r3, #0
 8009090:	d1e3      	bne.n	800905a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2220      	movs	r2, #32
 8009096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2200      	movs	r2, #0
 800909e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	330c      	adds	r3, #12
 80090a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	e853 3f00 	ldrex	r3, [r3]
 80090ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f023 0310 	bic.w	r3, r3, #16
 80090b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	330c      	adds	r3, #12
 80090c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80090c4:	61fa      	str	r2, [r7, #28]
 80090c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c8:	69b9      	ldr	r1, [r7, #24]
 80090ca:	69fa      	ldr	r2, [r7, #28]
 80090cc:	e841 2300 	strex	r3, r2, [r1]
 80090d0:	617b      	str	r3, [r7, #20]
   return(result);
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d1e3      	bne.n	80090a0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80090d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80090dc:	4619      	mov	r1, r3
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 f83e 	bl	8009160 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80090e4:	e023      	b.n	800912e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80090e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d009      	beq.n	8009106 <HAL_UART_IRQHandler+0x4ea>
 80090f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d003      	beq.n	8009106 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 f95d 	bl	80093be <UART_Transmit_IT>
    return;
 8009104:	e014      	b.n	8009130 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800910a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800910e:	2b00      	cmp	r3, #0
 8009110:	d00e      	beq.n	8009130 <HAL_UART_IRQHandler+0x514>
 8009112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800911a:	2b00      	cmp	r3, #0
 800911c:	d008      	beq.n	8009130 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 f99d 	bl	800945e <UART_EndTransmit_IT>
    return;
 8009124:	e004      	b.n	8009130 <HAL_UART_IRQHandler+0x514>
    return;
 8009126:	bf00      	nop
 8009128:	e002      	b.n	8009130 <HAL_UART_IRQHandler+0x514>
      return;
 800912a:	bf00      	nop
 800912c:	e000      	b.n	8009130 <HAL_UART_IRQHandler+0x514>
      return;
 800912e:	bf00      	nop
  }
}
 8009130:	37e8      	adds	r7, #232	; 0xe8
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop

08009138 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009138:	b480      	push	{r7}
 800913a:	b083      	sub	sp, #12
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009140:	bf00      	nop
 8009142:	370c      	adds	r7, #12
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009154:	bf00      	nop
 8009156:	370c      	adds	r7, #12
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009160:	b480      	push	{r7}
 8009162:	b083      	sub	sp, #12
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	460b      	mov	r3, r1
 800916a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800916c:	bf00      	nop
 800916e:	370c      	adds	r7, #12
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b090      	sub	sp, #64	; 0x40
 800917c:	af00      	add	r7, sp, #0
 800917e:	60f8      	str	r0, [r7, #12]
 8009180:	60b9      	str	r1, [r7, #8]
 8009182:	603b      	str	r3, [r7, #0]
 8009184:	4613      	mov	r3, r2
 8009186:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009188:	e050      	b.n	800922c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800918a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800918c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009190:	d04c      	beq.n	800922c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009194:	2b00      	cmp	r3, #0
 8009196:	d007      	beq.n	80091a8 <UART_WaitOnFlagUntilTimeout+0x30>
 8009198:	f7fb f83e 	bl	8004218 <HAL_GetTick>
 800919c:	4602      	mov	r2, r0
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	1ad3      	subs	r3, r2, r3
 80091a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d241      	bcs.n	800922c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	330c      	adds	r3, #12
 80091ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b2:	e853 3f00 	ldrex	r3, [r3]
 80091b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80091be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	330c      	adds	r3, #12
 80091c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80091c8:	637a      	str	r2, [r7, #52]	; 0x34
 80091ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80091ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091d0:	e841 2300 	strex	r3, r2, [r1]
 80091d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80091d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d1e5      	bne.n	80091a8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	3314      	adds	r3, #20
 80091e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	e853 3f00 	ldrex	r3, [r3]
 80091ea:	613b      	str	r3, [r7, #16]
   return(result);
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	f023 0301 	bic.w	r3, r3, #1
 80091f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	3314      	adds	r3, #20
 80091fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091fc:	623a      	str	r2, [r7, #32]
 80091fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009200:	69f9      	ldr	r1, [r7, #28]
 8009202:	6a3a      	ldr	r2, [r7, #32]
 8009204:	e841 2300 	strex	r3, r2, [r1]
 8009208:	61bb      	str	r3, [r7, #24]
   return(result);
 800920a:	69bb      	ldr	r3, [r7, #24]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d1e5      	bne.n	80091dc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2220      	movs	r2, #32
 8009214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2220      	movs	r2, #32
 800921c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2200      	movs	r2, #0
 8009224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009228:	2303      	movs	r3, #3
 800922a:	e00f      	b.n	800924c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	4013      	ands	r3, r2
 8009236:	68ba      	ldr	r2, [r7, #8]
 8009238:	429a      	cmp	r2, r3
 800923a:	bf0c      	ite	eq
 800923c:	2301      	moveq	r3, #1
 800923e:	2300      	movne	r3, #0
 8009240:	b2db      	uxtb	r3, r3
 8009242:	461a      	mov	r2, r3
 8009244:	79fb      	ldrb	r3, [r7, #7]
 8009246:	429a      	cmp	r2, r3
 8009248:	d09f      	beq.n	800918a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	3740      	adds	r7, #64	; 0x40
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009254:	b480      	push	{r7}
 8009256:	b085      	sub	sp, #20
 8009258:	af00      	add	r7, sp, #0
 800925a:	60f8      	str	r0, [r7, #12]
 800925c:	60b9      	str	r1, [r7, #8]
 800925e:	4613      	mov	r3, r2
 8009260:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	68ba      	ldr	r2, [r7, #8]
 8009266:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	88fa      	ldrh	r2, [r7, #6]
 800926c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	88fa      	ldrh	r2, [r7, #6]
 8009272:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2200      	movs	r2, #0
 8009278:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2222      	movs	r2, #34	; 0x22
 800927e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2200      	movs	r2, #0
 8009286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	691b      	ldr	r3, [r3, #16]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d007      	beq.n	80092a2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	68da      	ldr	r2, [r3, #12]
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80092a0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	695a      	ldr	r2, [r3, #20]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f042 0201 	orr.w	r2, r2, #1
 80092b0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	68da      	ldr	r2, [r3, #12]
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f042 0220 	orr.w	r2, r2, #32
 80092c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80092c2:	2300      	movs	r3, #0
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3714      	adds	r7, #20
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr

080092d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b095      	sub	sp, #84	; 0x54
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	330c      	adds	r3, #12
 80092de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092e2:	e853 3f00 	ldrex	r3, [r3]
 80092e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80092e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80092ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	330c      	adds	r3, #12
 80092f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80092f8:	643a      	str	r2, [r7, #64]	; 0x40
 80092fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80092fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009300:	e841 2300 	strex	r3, r2, [r1]
 8009304:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009308:	2b00      	cmp	r3, #0
 800930a:	d1e5      	bne.n	80092d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	3314      	adds	r3, #20
 8009312:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009314:	6a3b      	ldr	r3, [r7, #32]
 8009316:	e853 3f00 	ldrex	r3, [r3]
 800931a:	61fb      	str	r3, [r7, #28]
   return(result);
 800931c:	69fb      	ldr	r3, [r7, #28]
 800931e:	f023 0301 	bic.w	r3, r3, #1
 8009322:	64bb      	str	r3, [r7, #72]	; 0x48
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	3314      	adds	r3, #20
 800932a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800932c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800932e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009330:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009332:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009334:	e841 2300 	strex	r3, r2, [r1]
 8009338:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800933a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933c:	2b00      	cmp	r3, #0
 800933e:	d1e5      	bne.n	800930c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009344:	2b01      	cmp	r3, #1
 8009346:	d119      	bne.n	800937c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	330c      	adds	r3, #12
 800934e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	e853 3f00 	ldrex	r3, [r3]
 8009356:	60bb      	str	r3, [r7, #8]
   return(result);
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	f023 0310 	bic.w	r3, r3, #16
 800935e:	647b      	str	r3, [r7, #68]	; 0x44
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	330c      	adds	r3, #12
 8009366:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009368:	61ba      	str	r2, [r7, #24]
 800936a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800936c:	6979      	ldr	r1, [r7, #20]
 800936e:	69ba      	ldr	r2, [r7, #24]
 8009370:	e841 2300 	strex	r3, r2, [r1]
 8009374:	613b      	str	r3, [r7, #16]
   return(result);
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d1e5      	bne.n	8009348 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2220      	movs	r2, #32
 8009380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2200      	movs	r2, #0
 8009388:	631a      	str	r2, [r3, #48]	; 0x30
}
 800938a:	bf00      	nop
 800938c:	3754      	adds	r7, #84	; 0x54
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr

08009396 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b084      	sub	sp, #16
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2200      	movs	r2, #0
 80093a8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2200      	movs	r2, #0
 80093ae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093b0:	68f8      	ldr	r0, [r7, #12]
 80093b2:	f7ff fecb 	bl	800914c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093b6:	bf00      	nop
 80093b8:	3710      	adds	r7, #16
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}

080093be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80093be:	b480      	push	{r7}
 80093c0:	b085      	sub	sp, #20
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	2b21      	cmp	r3, #33	; 0x21
 80093d0:	d13e      	bne.n	8009450 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093da:	d114      	bne.n	8009406 <UART_Transmit_IT+0x48>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	691b      	ldr	r3, [r3, #16]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d110      	bne.n	8009406 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6a1b      	ldr	r3, [r3, #32]
 80093e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	881b      	ldrh	r3, [r3, #0]
 80093ee:	461a      	mov	r2, r3
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80093f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6a1b      	ldr	r3, [r3, #32]
 80093fe:	1c9a      	adds	r2, r3, #2
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	621a      	str	r2, [r3, #32]
 8009404:	e008      	b.n	8009418 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6a1b      	ldr	r3, [r3, #32]
 800940a:	1c59      	adds	r1, r3, #1
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	6211      	str	r1, [r2, #32]
 8009410:	781a      	ldrb	r2, [r3, #0]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800941c:	b29b      	uxth	r3, r3
 800941e:	3b01      	subs	r3, #1
 8009420:	b29b      	uxth	r3, r3
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	4619      	mov	r1, r3
 8009426:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009428:	2b00      	cmp	r3, #0
 800942a:	d10f      	bne.n	800944c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	68da      	ldr	r2, [r3, #12]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800943a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	68da      	ldr	r2, [r3, #12]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800944a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800944c:	2300      	movs	r3, #0
 800944e:	e000      	b.n	8009452 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009450:	2302      	movs	r3, #2
  }
}
 8009452:	4618      	mov	r0, r3
 8009454:	3714      	adds	r7, #20
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr

0800945e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800945e:	b580      	push	{r7, lr}
 8009460:	b082      	sub	sp, #8
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	68da      	ldr	r2, [r3, #12]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009474:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2220      	movs	r2, #32
 800947a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f7ff fe5a 	bl	8009138 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009484:	2300      	movs	r3, #0
}
 8009486:	4618      	mov	r0, r3
 8009488:	3708      	adds	r7, #8
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}

0800948e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800948e:	b580      	push	{r7, lr}
 8009490:	b08c      	sub	sp, #48	; 0x30
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800949c:	b2db      	uxtb	r3, r3
 800949e:	2b22      	cmp	r3, #34	; 0x22
 80094a0:	f040 80ab 	bne.w	80095fa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094ac:	d117      	bne.n	80094de <UART_Receive_IT+0x50>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	691b      	ldr	r3, [r3, #16]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d113      	bne.n	80094de <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80094b6:	2300      	movs	r3, #0
 80094b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094be:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094cc:	b29a      	uxth	r2, r3
 80094ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094d6:	1c9a      	adds	r2, r3, #2
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	629a      	str	r2, [r3, #40]	; 0x28
 80094dc:	e026      	b.n	800952c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80094e4:	2300      	movs	r3, #0
 80094e6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	689b      	ldr	r3, [r3, #8]
 80094ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094f0:	d007      	beq.n	8009502 <UART_Receive_IT+0x74>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	689b      	ldr	r3, [r3, #8]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d10a      	bne.n	8009510 <UART_Receive_IT+0x82>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	691b      	ldr	r3, [r3, #16]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d106      	bne.n	8009510 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	b2da      	uxtb	r2, r3
 800950a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800950c:	701a      	strb	r2, [r3, #0]
 800950e:	e008      	b.n	8009522 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	b2db      	uxtb	r3, r3
 8009518:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800951c:	b2da      	uxtb	r2, r3
 800951e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009520:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009526:	1c5a      	adds	r2, r3, #1
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009530:	b29b      	uxth	r3, r3
 8009532:	3b01      	subs	r3, #1
 8009534:	b29b      	uxth	r3, r3
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	4619      	mov	r1, r3
 800953a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800953c:	2b00      	cmp	r3, #0
 800953e:	d15a      	bne.n	80095f6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	68da      	ldr	r2, [r3, #12]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f022 0220 	bic.w	r2, r2, #32
 800954e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	68da      	ldr	r2, [r3, #12]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800955e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	695a      	ldr	r2, [r3, #20]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f022 0201 	bic.w	r2, r2, #1
 800956e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2220      	movs	r2, #32
 8009574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800957c:	2b01      	cmp	r3, #1
 800957e:	d135      	bne.n	80095ec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	330c      	adds	r3, #12
 800958c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	e853 3f00 	ldrex	r3, [r3]
 8009594:	613b      	str	r3, [r7, #16]
   return(result);
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	f023 0310 	bic.w	r3, r3, #16
 800959c:	627b      	str	r3, [r7, #36]	; 0x24
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	330c      	adds	r3, #12
 80095a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095a6:	623a      	str	r2, [r7, #32]
 80095a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095aa:	69f9      	ldr	r1, [r7, #28]
 80095ac:	6a3a      	ldr	r2, [r7, #32]
 80095ae:	e841 2300 	strex	r3, r2, [r1]
 80095b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80095b4:	69bb      	ldr	r3, [r7, #24]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d1e5      	bne.n	8009586 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f003 0310 	and.w	r3, r3, #16
 80095c4:	2b10      	cmp	r3, #16
 80095c6:	d10a      	bne.n	80095de <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80095c8:	2300      	movs	r3, #0
 80095ca:	60fb      	str	r3, [r7, #12]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	60fb      	str	r3, [r7, #12]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	60fb      	str	r3, [r7, #12]
 80095dc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80095e2:	4619      	mov	r1, r3
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f7ff fdbb 	bl	8009160 <HAL_UARTEx_RxEventCallback>
 80095ea:	e002      	b.n	80095f2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f7f8 f9ef 	bl	80019d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80095f2:	2300      	movs	r3, #0
 80095f4:	e002      	b.n	80095fc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80095f6:	2300      	movs	r3, #0
 80095f8:	e000      	b.n	80095fc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80095fa:	2302      	movs	r3, #2
  }
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3730      	adds	r7, #48	; 0x30
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009604:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009608:	b0c0      	sub	sp, #256	; 0x100
 800960a:	af00      	add	r7, sp, #0
 800960c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	691b      	ldr	r3, [r3, #16]
 8009618:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800961c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009620:	68d9      	ldr	r1, [r3, #12]
 8009622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009626:	681a      	ldr	r2, [r3, #0]
 8009628:	ea40 0301 	orr.w	r3, r0, r1
 800962c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800962e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009632:	689a      	ldr	r2, [r3, #8]
 8009634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009638:	691b      	ldr	r3, [r3, #16]
 800963a:	431a      	orrs	r2, r3
 800963c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009640:	695b      	ldr	r3, [r3, #20]
 8009642:	431a      	orrs	r2, r3
 8009644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009648:	69db      	ldr	r3, [r3, #28]
 800964a:	4313      	orrs	r3, r2
 800964c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	68db      	ldr	r3, [r3, #12]
 8009658:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800965c:	f021 010c 	bic.w	r1, r1, #12
 8009660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009664:	681a      	ldr	r2, [r3, #0]
 8009666:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800966a:	430b      	orrs	r3, r1
 800966c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800966e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	695b      	ldr	r3, [r3, #20]
 8009676:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800967a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800967e:	6999      	ldr	r1, [r3, #24]
 8009680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009684:	681a      	ldr	r2, [r3, #0]
 8009686:	ea40 0301 	orr.w	r3, r0, r1
 800968a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800968c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009690:	681a      	ldr	r2, [r3, #0]
 8009692:	4b8f      	ldr	r3, [pc, #572]	; (80098d0 <UART_SetConfig+0x2cc>)
 8009694:	429a      	cmp	r2, r3
 8009696:	d005      	beq.n	80096a4 <UART_SetConfig+0xa0>
 8009698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	4b8d      	ldr	r3, [pc, #564]	; (80098d4 <UART_SetConfig+0x2d0>)
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d104      	bne.n	80096ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80096a4:	f7fd fc50 	bl	8006f48 <HAL_RCC_GetPCLK2Freq>
 80096a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80096ac:	e003      	b.n	80096b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80096ae:	f7fd fc37 	bl	8006f20 <HAL_RCC_GetPCLK1Freq>
 80096b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096ba:	69db      	ldr	r3, [r3, #28]
 80096bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096c0:	f040 810c 	bne.w	80098dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80096c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096c8:	2200      	movs	r2, #0
 80096ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80096ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80096d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80096d6:	4622      	mov	r2, r4
 80096d8:	462b      	mov	r3, r5
 80096da:	1891      	adds	r1, r2, r2
 80096dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80096de:	415b      	adcs	r3, r3
 80096e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80096e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80096e6:	4621      	mov	r1, r4
 80096e8:	eb12 0801 	adds.w	r8, r2, r1
 80096ec:	4629      	mov	r1, r5
 80096ee:	eb43 0901 	adc.w	r9, r3, r1
 80096f2:	f04f 0200 	mov.w	r2, #0
 80096f6:	f04f 0300 	mov.w	r3, #0
 80096fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80096fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009702:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009706:	4690      	mov	r8, r2
 8009708:	4699      	mov	r9, r3
 800970a:	4623      	mov	r3, r4
 800970c:	eb18 0303 	adds.w	r3, r8, r3
 8009710:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009714:	462b      	mov	r3, r5
 8009716:	eb49 0303 	adc.w	r3, r9, r3
 800971a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800971e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	2200      	movs	r2, #0
 8009726:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800972a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800972e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009732:	460b      	mov	r3, r1
 8009734:	18db      	adds	r3, r3, r3
 8009736:	653b      	str	r3, [r7, #80]	; 0x50
 8009738:	4613      	mov	r3, r2
 800973a:	eb42 0303 	adc.w	r3, r2, r3
 800973e:	657b      	str	r3, [r7, #84]	; 0x54
 8009740:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009744:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009748:	f7f7 fa9e 	bl	8000c88 <__aeabi_uldivmod>
 800974c:	4602      	mov	r2, r0
 800974e:	460b      	mov	r3, r1
 8009750:	4b61      	ldr	r3, [pc, #388]	; (80098d8 <UART_SetConfig+0x2d4>)
 8009752:	fba3 2302 	umull	r2, r3, r3, r2
 8009756:	095b      	lsrs	r3, r3, #5
 8009758:	011c      	lsls	r4, r3, #4
 800975a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800975e:	2200      	movs	r2, #0
 8009760:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009764:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009768:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800976c:	4642      	mov	r2, r8
 800976e:	464b      	mov	r3, r9
 8009770:	1891      	adds	r1, r2, r2
 8009772:	64b9      	str	r1, [r7, #72]	; 0x48
 8009774:	415b      	adcs	r3, r3
 8009776:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009778:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800977c:	4641      	mov	r1, r8
 800977e:	eb12 0a01 	adds.w	sl, r2, r1
 8009782:	4649      	mov	r1, r9
 8009784:	eb43 0b01 	adc.w	fp, r3, r1
 8009788:	f04f 0200 	mov.w	r2, #0
 800978c:	f04f 0300 	mov.w	r3, #0
 8009790:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009794:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009798:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800979c:	4692      	mov	sl, r2
 800979e:	469b      	mov	fp, r3
 80097a0:	4643      	mov	r3, r8
 80097a2:	eb1a 0303 	adds.w	r3, sl, r3
 80097a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80097aa:	464b      	mov	r3, r9
 80097ac:	eb4b 0303 	adc.w	r3, fp, r3
 80097b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80097b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	2200      	movs	r2, #0
 80097bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80097c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80097c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80097c8:	460b      	mov	r3, r1
 80097ca:	18db      	adds	r3, r3, r3
 80097cc:	643b      	str	r3, [r7, #64]	; 0x40
 80097ce:	4613      	mov	r3, r2
 80097d0:	eb42 0303 	adc.w	r3, r2, r3
 80097d4:	647b      	str	r3, [r7, #68]	; 0x44
 80097d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80097da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80097de:	f7f7 fa53 	bl	8000c88 <__aeabi_uldivmod>
 80097e2:	4602      	mov	r2, r0
 80097e4:	460b      	mov	r3, r1
 80097e6:	4611      	mov	r1, r2
 80097e8:	4b3b      	ldr	r3, [pc, #236]	; (80098d8 <UART_SetConfig+0x2d4>)
 80097ea:	fba3 2301 	umull	r2, r3, r3, r1
 80097ee:	095b      	lsrs	r3, r3, #5
 80097f0:	2264      	movs	r2, #100	; 0x64
 80097f2:	fb02 f303 	mul.w	r3, r2, r3
 80097f6:	1acb      	subs	r3, r1, r3
 80097f8:	00db      	lsls	r3, r3, #3
 80097fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80097fe:	4b36      	ldr	r3, [pc, #216]	; (80098d8 <UART_SetConfig+0x2d4>)
 8009800:	fba3 2302 	umull	r2, r3, r3, r2
 8009804:	095b      	lsrs	r3, r3, #5
 8009806:	005b      	lsls	r3, r3, #1
 8009808:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800980c:	441c      	add	r4, r3
 800980e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009812:	2200      	movs	r2, #0
 8009814:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009818:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800981c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009820:	4642      	mov	r2, r8
 8009822:	464b      	mov	r3, r9
 8009824:	1891      	adds	r1, r2, r2
 8009826:	63b9      	str	r1, [r7, #56]	; 0x38
 8009828:	415b      	adcs	r3, r3
 800982a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800982c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009830:	4641      	mov	r1, r8
 8009832:	1851      	adds	r1, r2, r1
 8009834:	6339      	str	r1, [r7, #48]	; 0x30
 8009836:	4649      	mov	r1, r9
 8009838:	414b      	adcs	r3, r1
 800983a:	637b      	str	r3, [r7, #52]	; 0x34
 800983c:	f04f 0200 	mov.w	r2, #0
 8009840:	f04f 0300 	mov.w	r3, #0
 8009844:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009848:	4659      	mov	r1, fp
 800984a:	00cb      	lsls	r3, r1, #3
 800984c:	4651      	mov	r1, sl
 800984e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009852:	4651      	mov	r1, sl
 8009854:	00ca      	lsls	r2, r1, #3
 8009856:	4610      	mov	r0, r2
 8009858:	4619      	mov	r1, r3
 800985a:	4603      	mov	r3, r0
 800985c:	4642      	mov	r2, r8
 800985e:	189b      	adds	r3, r3, r2
 8009860:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009864:	464b      	mov	r3, r9
 8009866:	460a      	mov	r2, r1
 8009868:	eb42 0303 	adc.w	r3, r2, r3
 800986c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009874:	685b      	ldr	r3, [r3, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800987c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009880:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009884:	460b      	mov	r3, r1
 8009886:	18db      	adds	r3, r3, r3
 8009888:	62bb      	str	r3, [r7, #40]	; 0x28
 800988a:	4613      	mov	r3, r2
 800988c:	eb42 0303 	adc.w	r3, r2, r3
 8009890:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009892:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009896:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800989a:	f7f7 f9f5 	bl	8000c88 <__aeabi_uldivmod>
 800989e:	4602      	mov	r2, r0
 80098a0:	460b      	mov	r3, r1
 80098a2:	4b0d      	ldr	r3, [pc, #52]	; (80098d8 <UART_SetConfig+0x2d4>)
 80098a4:	fba3 1302 	umull	r1, r3, r3, r2
 80098a8:	095b      	lsrs	r3, r3, #5
 80098aa:	2164      	movs	r1, #100	; 0x64
 80098ac:	fb01 f303 	mul.w	r3, r1, r3
 80098b0:	1ad3      	subs	r3, r2, r3
 80098b2:	00db      	lsls	r3, r3, #3
 80098b4:	3332      	adds	r3, #50	; 0x32
 80098b6:	4a08      	ldr	r2, [pc, #32]	; (80098d8 <UART_SetConfig+0x2d4>)
 80098b8:	fba2 2303 	umull	r2, r3, r2, r3
 80098bc:	095b      	lsrs	r3, r3, #5
 80098be:	f003 0207 	and.w	r2, r3, #7
 80098c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4422      	add	r2, r4
 80098ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80098cc:	e105      	b.n	8009ada <UART_SetConfig+0x4d6>
 80098ce:	bf00      	nop
 80098d0:	40011000 	.word	0x40011000
 80098d4:	40011400 	.word	0x40011400
 80098d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80098dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80098e0:	2200      	movs	r2, #0
 80098e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80098e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80098ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80098ee:	4642      	mov	r2, r8
 80098f0:	464b      	mov	r3, r9
 80098f2:	1891      	adds	r1, r2, r2
 80098f4:	6239      	str	r1, [r7, #32]
 80098f6:	415b      	adcs	r3, r3
 80098f8:	627b      	str	r3, [r7, #36]	; 0x24
 80098fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80098fe:	4641      	mov	r1, r8
 8009900:	1854      	adds	r4, r2, r1
 8009902:	4649      	mov	r1, r9
 8009904:	eb43 0501 	adc.w	r5, r3, r1
 8009908:	f04f 0200 	mov.w	r2, #0
 800990c:	f04f 0300 	mov.w	r3, #0
 8009910:	00eb      	lsls	r3, r5, #3
 8009912:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009916:	00e2      	lsls	r2, r4, #3
 8009918:	4614      	mov	r4, r2
 800991a:	461d      	mov	r5, r3
 800991c:	4643      	mov	r3, r8
 800991e:	18e3      	adds	r3, r4, r3
 8009920:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009924:	464b      	mov	r3, r9
 8009926:	eb45 0303 	adc.w	r3, r5, r3
 800992a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800992e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	2200      	movs	r2, #0
 8009936:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800993a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800993e:	f04f 0200 	mov.w	r2, #0
 8009942:	f04f 0300 	mov.w	r3, #0
 8009946:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800994a:	4629      	mov	r1, r5
 800994c:	008b      	lsls	r3, r1, #2
 800994e:	4621      	mov	r1, r4
 8009950:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009954:	4621      	mov	r1, r4
 8009956:	008a      	lsls	r2, r1, #2
 8009958:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800995c:	f7f7 f994 	bl	8000c88 <__aeabi_uldivmod>
 8009960:	4602      	mov	r2, r0
 8009962:	460b      	mov	r3, r1
 8009964:	4b60      	ldr	r3, [pc, #384]	; (8009ae8 <UART_SetConfig+0x4e4>)
 8009966:	fba3 2302 	umull	r2, r3, r3, r2
 800996a:	095b      	lsrs	r3, r3, #5
 800996c:	011c      	lsls	r4, r3, #4
 800996e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009972:	2200      	movs	r2, #0
 8009974:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009978:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800997c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009980:	4642      	mov	r2, r8
 8009982:	464b      	mov	r3, r9
 8009984:	1891      	adds	r1, r2, r2
 8009986:	61b9      	str	r1, [r7, #24]
 8009988:	415b      	adcs	r3, r3
 800998a:	61fb      	str	r3, [r7, #28]
 800998c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009990:	4641      	mov	r1, r8
 8009992:	1851      	adds	r1, r2, r1
 8009994:	6139      	str	r1, [r7, #16]
 8009996:	4649      	mov	r1, r9
 8009998:	414b      	adcs	r3, r1
 800999a:	617b      	str	r3, [r7, #20]
 800999c:	f04f 0200 	mov.w	r2, #0
 80099a0:	f04f 0300 	mov.w	r3, #0
 80099a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80099a8:	4659      	mov	r1, fp
 80099aa:	00cb      	lsls	r3, r1, #3
 80099ac:	4651      	mov	r1, sl
 80099ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80099b2:	4651      	mov	r1, sl
 80099b4:	00ca      	lsls	r2, r1, #3
 80099b6:	4610      	mov	r0, r2
 80099b8:	4619      	mov	r1, r3
 80099ba:	4603      	mov	r3, r0
 80099bc:	4642      	mov	r2, r8
 80099be:	189b      	adds	r3, r3, r2
 80099c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80099c4:	464b      	mov	r3, r9
 80099c6:	460a      	mov	r2, r1
 80099c8:	eb42 0303 	adc.w	r3, r2, r3
 80099cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80099d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	2200      	movs	r2, #0
 80099d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80099da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80099dc:	f04f 0200 	mov.w	r2, #0
 80099e0:	f04f 0300 	mov.w	r3, #0
 80099e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80099e8:	4649      	mov	r1, r9
 80099ea:	008b      	lsls	r3, r1, #2
 80099ec:	4641      	mov	r1, r8
 80099ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80099f2:	4641      	mov	r1, r8
 80099f4:	008a      	lsls	r2, r1, #2
 80099f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80099fa:	f7f7 f945 	bl	8000c88 <__aeabi_uldivmod>
 80099fe:	4602      	mov	r2, r0
 8009a00:	460b      	mov	r3, r1
 8009a02:	4b39      	ldr	r3, [pc, #228]	; (8009ae8 <UART_SetConfig+0x4e4>)
 8009a04:	fba3 1302 	umull	r1, r3, r3, r2
 8009a08:	095b      	lsrs	r3, r3, #5
 8009a0a:	2164      	movs	r1, #100	; 0x64
 8009a0c:	fb01 f303 	mul.w	r3, r1, r3
 8009a10:	1ad3      	subs	r3, r2, r3
 8009a12:	011b      	lsls	r3, r3, #4
 8009a14:	3332      	adds	r3, #50	; 0x32
 8009a16:	4a34      	ldr	r2, [pc, #208]	; (8009ae8 <UART_SetConfig+0x4e4>)
 8009a18:	fba2 2303 	umull	r2, r3, r2, r3
 8009a1c:	095b      	lsrs	r3, r3, #5
 8009a1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a22:	441c      	add	r4, r3
 8009a24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a28:	2200      	movs	r2, #0
 8009a2a:	673b      	str	r3, [r7, #112]	; 0x70
 8009a2c:	677a      	str	r2, [r7, #116]	; 0x74
 8009a2e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009a32:	4642      	mov	r2, r8
 8009a34:	464b      	mov	r3, r9
 8009a36:	1891      	adds	r1, r2, r2
 8009a38:	60b9      	str	r1, [r7, #8]
 8009a3a:	415b      	adcs	r3, r3
 8009a3c:	60fb      	str	r3, [r7, #12]
 8009a3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009a42:	4641      	mov	r1, r8
 8009a44:	1851      	adds	r1, r2, r1
 8009a46:	6039      	str	r1, [r7, #0]
 8009a48:	4649      	mov	r1, r9
 8009a4a:	414b      	adcs	r3, r1
 8009a4c:	607b      	str	r3, [r7, #4]
 8009a4e:	f04f 0200 	mov.w	r2, #0
 8009a52:	f04f 0300 	mov.w	r3, #0
 8009a56:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009a5a:	4659      	mov	r1, fp
 8009a5c:	00cb      	lsls	r3, r1, #3
 8009a5e:	4651      	mov	r1, sl
 8009a60:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a64:	4651      	mov	r1, sl
 8009a66:	00ca      	lsls	r2, r1, #3
 8009a68:	4610      	mov	r0, r2
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	4642      	mov	r2, r8
 8009a70:	189b      	adds	r3, r3, r2
 8009a72:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a74:	464b      	mov	r3, r9
 8009a76:	460a      	mov	r2, r1
 8009a78:	eb42 0303 	adc.w	r3, r2, r3
 8009a7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	2200      	movs	r2, #0
 8009a86:	663b      	str	r3, [r7, #96]	; 0x60
 8009a88:	667a      	str	r2, [r7, #100]	; 0x64
 8009a8a:	f04f 0200 	mov.w	r2, #0
 8009a8e:	f04f 0300 	mov.w	r3, #0
 8009a92:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009a96:	4649      	mov	r1, r9
 8009a98:	008b      	lsls	r3, r1, #2
 8009a9a:	4641      	mov	r1, r8
 8009a9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009aa0:	4641      	mov	r1, r8
 8009aa2:	008a      	lsls	r2, r1, #2
 8009aa4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009aa8:	f7f7 f8ee 	bl	8000c88 <__aeabi_uldivmod>
 8009aac:	4602      	mov	r2, r0
 8009aae:	460b      	mov	r3, r1
 8009ab0:	4b0d      	ldr	r3, [pc, #52]	; (8009ae8 <UART_SetConfig+0x4e4>)
 8009ab2:	fba3 1302 	umull	r1, r3, r3, r2
 8009ab6:	095b      	lsrs	r3, r3, #5
 8009ab8:	2164      	movs	r1, #100	; 0x64
 8009aba:	fb01 f303 	mul.w	r3, r1, r3
 8009abe:	1ad3      	subs	r3, r2, r3
 8009ac0:	011b      	lsls	r3, r3, #4
 8009ac2:	3332      	adds	r3, #50	; 0x32
 8009ac4:	4a08      	ldr	r2, [pc, #32]	; (8009ae8 <UART_SetConfig+0x4e4>)
 8009ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8009aca:	095b      	lsrs	r3, r3, #5
 8009acc:	f003 020f 	and.w	r2, r3, #15
 8009ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4422      	add	r2, r4
 8009ad8:	609a      	str	r2, [r3, #8]
}
 8009ada:	bf00      	nop
 8009adc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ae6:	bf00      	nop
 8009ae8:	51eb851f 	.word	0x51eb851f

08009aec <__errno>:
 8009aec:	4b01      	ldr	r3, [pc, #4]	; (8009af4 <__errno+0x8>)
 8009aee:	6818      	ldr	r0, [r3, #0]
 8009af0:	4770      	bx	lr
 8009af2:	bf00      	nop
 8009af4:	2000028c 	.word	0x2000028c

08009af8 <__libc_init_array>:
 8009af8:	b570      	push	{r4, r5, r6, lr}
 8009afa:	4d0d      	ldr	r5, [pc, #52]	; (8009b30 <__libc_init_array+0x38>)
 8009afc:	4c0d      	ldr	r4, [pc, #52]	; (8009b34 <__libc_init_array+0x3c>)
 8009afe:	1b64      	subs	r4, r4, r5
 8009b00:	10a4      	asrs	r4, r4, #2
 8009b02:	2600      	movs	r6, #0
 8009b04:	42a6      	cmp	r6, r4
 8009b06:	d109      	bne.n	8009b1c <__libc_init_array+0x24>
 8009b08:	4d0b      	ldr	r5, [pc, #44]	; (8009b38 <__libc_init_array+0x40>)
 8009b0a:	4c0c      	ldr	r4, [pc, #48]	; (8009b3c <__libc_init_array+0x44>)
 8009b0c:	f005 f8aa 	bl	800ec64 <_init>
 8009b10:	1b64      	subs	r4, r4, r5
 8009b12:	10a4      	asrs	r4, r4, #2
 8009b14:	2600      	movs	r6, #0
 8009b16:	42a6      	cmp	r6, r4
 8009b18:	d105      	bne.n	8009b26 <__libc_init_array+0x2e>
 8009b1a:	bd70      	pop	{r4, r5, r6, pc}
 8009b1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b20:	4798      	blx	r3
 8009b22:	3601      	adds	r6, #1
 8009b24:	e7ee      	b.n	8009b04 <__libc_init_array+0xc>
 8009b26:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b2a:	4798      	blx	r3
 8009b2c:	3601      	adds	r6, #1
 8009b2e:	e7f2      	b.n	8009b16 <__libc_init_array+0x1e>
 8009b30:	0800f458 	.word	0x0800f458
 8009b34:	0800f458 	.word	0x0800f458
 8009b38:	0800f458 	.word	0x0800f458
 8009b3c:	0800f45c 	.word	0x0800f45c

08009b40 <memset>:
 8009b40:	4402      	add	r2, r0
 8009b42:	4603      	mov	r3, r0
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d100      	bne.n	8009b4a <memset+0xa>
 8009b48:	4770      	bx	lr
 8009b4a:	f803 1b01 	strb.w	r1, [r3], #1
 8009b4e:	e7f9      	b.n	8009b44 <memset+0x4>

08009b50 <__cvt>:
 8009b50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b54:	ec55 4b10 	vmov	r4, r5, d0
 8009b58:	2d00      	cmp	r5, #0
 8009b5a:	460e      	mov	r6, r1
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	462b      	mov	r3, r5
 8009b60:	bfbb      	ittet	lt
 8009b62:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009b66:	461d      	movlt	r5, r3
 8009b68:	2300      	movge	r3, #0
 8009b6a:	232d      	movlt	r3, #45	; 0x2d
 8009b6c:	700b      	strb	r3, [r1, #0]
 8009b6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b70:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009b74:	4691      	mov	r9, r2
 8009b76:	f023 0820 	bic.w	r8, r3, #32
 8009b7a:	bfbc      	itt	lt
 8009b7c:	4622      	movlt	r2, r4
 8009b7e:	4614      	movlt	r4, r2
 8009b80:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009b84:	d005      	beq.n	8009b92 <__cvt+0x42>
 8009b86:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009b8a:	d100      	bne.n	8009b8e <__cvt+0x3e>
 8009b8c:	3601      	adds	r6, #1
 8009b8e:	2102      	movs	r1, #2
 8009b90:	e000      	b.n	8009b94 <__cvt+0x44>
 8009b92:	2103      	movs	r1, #3
 8009b94:	ab03      	add	r3, sp, #12
 8009b96:	9301      	str	r3, [sp, #4]
 8009b98:	ab02      	add	r3, sp, #8
 8009b9a:	9300      	str	r3, [sp, #0]
 8009b9c:	ec45 4b10 	vmov	d0, r4, r5
 8009ba0:	4653      	mov	r3, sl
 8009ba2:	4632      	mov	r2, r6
 8009ba4:	f001 fdac 	bl	800b700 <_dtoa_r>
 8009ba8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009bac:	4607      	mov	r7, r0
 8009bae:	d102      	bne.n	8009bb6 <__cvt+0x66>
 8009bb0:	f019 0f01 	tst.w	r9, #1
 8009bb4:	d022      	beq.n	8009bfc <__cvt+0xac>
 8009bb6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009bba:	eb07 0906 	add.w	r9, r7, r6
 8009bbe:	d110      	bne.n	8009be2 <__cvt+0x92>
 8009bc0:	783b      	ldrb	r3, [r7, #0]
 8009bc2:	2b30      	cmp	r3, #48	; 0x30
 8009bc4:	d10a      	bne.n	8009bdc <__cvt+0x8c>
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	2300      	movs	r3, #0
 8009bca:	4620      	mov	r0, r4
 8009bcc:	4629      	mov	r1, r5
 8009bce:	f7f6 ff7b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009bd2:	b918      	cbnz	r0, 8009bdc <__cvt+0x8c>
 8009bd4:	f1c6 0601 	rsb	r6, r6, #1
 8009bd8:	f8ca 6000 	str.w	r6, [sl]
 8009bdc:	f8da 3000 	ldr.w	r3, [sl]
 8009be0:	4499      	add	r9, r3
 8009be2:	2200      	movs	r2, #0
 8009be4:	2300      	movs	r3, #0
 8009be6:	4620      	mov	r0, r4
 8009be8:	4629      	mov	r1, r5
 8009bea:	f7f6 ff6d 	bl	8000ac8 <__aeabi_dcmpeq>
 8009bee:	b108      	cbz	r0, 8009bf4 <__cvt+0xa4>
 8009bf0:	f8cd 900c 	str.w	r9, [sp, #12]
 8009bf4:	2230      	movs	r2, #48	; 0x30
 8009bf6:	9b03      	ldr	r3, [sp, #12]
 8009bf8:	454b      	cmp	r3, r9
 8009bfa:	d307      	bcc.n	8009c0c <__cvt+0xbc>
 8009bfc:	9b03      	ldr	r3, [sp, #12]
 8009bfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c00:	1bdb      	subs	r3, r3, r7
 8009c02:	4638      	mov	r0, r7
 8009c04:	6013      	str	r3, [r2, #0]
 8009c06:	b004      	add	sp, #16
 8009c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c0c:	1c59      	adds	r1, r3, #1
 8009c0e:	9103      	str	r1, [sp, #12]
 8009c10:	701a      	strb	r2, [r3, #0]
 8009c12:	e7f0      	b.n	8009bf6 <__cvt+0xa6>

08009c14 <__exponent>:
 8009c14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c16:	4603      	mov	r3, r0
 8009c18:	2900      	cmp	r1, #0
 8009c1a:	bfb8      	it	lt
 8009c1c:	4249      	neglt	r1, r1
 8009c1e:	f803 2b02 	strb.w	r2, [r3], #2
 8009c22:	bfb4      	ite	lt
 8009c24:	222d      	movlt	r2, #45	; 0x2d
 8009c26:	222b      	movge	r2, #43	; 0x2b
 8009c28:	2909      	cmp	r1, #9
 8009c2a:	7042      	strb	r2, [r0, #1]
 8009c2c:	dd2a      	ble.n	8009c84 <__exponent+0x70>
 8009c2e:	f10d 0407 	add.w	r4, sp, #7
 8009c32:	46a4      	mov	ip, r4
 8009c34:	270a      	movs	r7, #10
 8009c36:	46a6      	mov	lr, r4
 8009c38:	460a      	mov	r2, r1
 8009c3a:	fb91 f6f7 	sdiv	r6, r1, r7
 8009c3e:	fb07 1516 	mls	r5, r7, r6, r1
 8009c42:	3530      	adds	r5, #48	; 0x30
 8009c44:	2a63      	cmp	r2, #99	; 0x63
 8009c46:	f104 34ff 	add.w	r4, r4, #4294967295
 8009c4a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009c4e:	4631      	mov	r1, r6
 8009c50:	dcf1      	bgt.n	8009c36 <__exponent+0x22>
 8009c52:	3130      	adds	r1, #48	; 0x30
 8009c54:	f1ae 0502 	sub.w	r5, lr, #2
 8009c58:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009c5c:	1c44      	adds	r4, r0, #1
 8009c5e:	4629      	mov	r1, r5
 8009c60:	4561      	cmp	r1, ip
 8009c62:	d30a      	bcc.n	8009c7a <__exponent+0x66>
 8009c64:	f10d 0209 	add.w	r2, sp, #9
 8009c68:	eba2 020e 	sub.w	r2, r2, lr
 8009c6c:	4565      	cmp	r5, ip
 8009c6e:	bf88      	it	hi
 8009c70:	2200      	movhi	r2, #0
 8009c72:	4413      	add	r3, r2
 8009c74:	1a18      	subs	r0, r3, r0
 8009c76:	b003      	add	sp, #12
 8009c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c7e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009c82:	e7ed      	b.n	8009c60 <__exponent+0x4c>
 8009c84:	2330      	movs	r3, #48	; 0x30
 8009c86:	3130      	adds	r1, #48	; 0x30
 8009c88:	7083      	strb	r3, [r0, #2]
 8009c8a:	70c1      	strb	r1, [r0, #3]
 8009c8c:	1d03      	adds	r3, r0, #4
 8009c8e:	e7f1      	b.n	8009c74 <__exponent+0x60>

08009c90 <_printf_float>:
 8009c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c94:	ed2d 8b02 	vpush	{d8}
 8009c98:	b08d      	sub	sp, #52	; 0x34
 8009c9a:	460c      	mov	r4, r1
 8009c9c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009ca0:	4616      	mov	r6, r2
 8009ca2:	461f      	mov	r7, r3
 8009ca4:	4605      	mov	r5, r0
 8009ca6:	f002 fe89 	bl	800c9bc <_localeconv_r>
 8009caa:	f8d0 a000 	ldr.w	sl, [r0]
 8009cae:	4650      	mov	r0, sl
 8009cb0:	f7f6 fa8e 	bl	80001d0 <strlen>
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	930a      	str	r3, [sp, #40]	; 0x28
 8009cb8:	6823      	ldr	r3, [r4, #0]
 8009cba:	9305      	str	r3, [sp, #20]
 8009cbc:	f8d8 3000 	ldr.w	r3, [r8]
 8009cc0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009cc4:	3307      	adds	r3, #7
 8009cc6:	f023 0307 	bic.w	r3, r3, #7
 8009cca:	f103 0208 	add.w	r2, r3, #8
 8009cce:	f8c8 2000 	str.w	r2, [r8]
 8009cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009cda:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009cde:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009ce2:	9307      	str	r3, [sp, #28]
 8009ce4:	f8cd 8018 	str.w	r8, [sp, #24]
 8009ce8:	ee08 0a10 	vmov	s16, r0
 8009cec:	4b9f      	ldr	r3, [pc, #636]	; (8009f6c <_printf_float+0x2dc>)
 8009cee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8009cf6:	f7f6 ff19 	bl	8000b2c <__aeabi_dcmpun>
 8009cfa:	bb88      	cbnz	r0, 8009d60 <_printf_float+0xd0>
 8009cfc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d00:	4b9a      	ldr	r3, [pc, #616]	; (8009f6c <_printf_float+0x2dc>)
 8009d02:	f04f 32ff 	mov.w	r2, #4294967295
 8009d06:	f7f6 fef3 	bl	8000af0 <__aeabi_dcmple>
 8009d0a:	bb48      	cbnz	r0, 8009d60 <_printf_float+0xd0>
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	2300      	movs	r3, #0
 8009d10:	4640      	mov	r0, r8
 8009d12:	4649      	mov	r1, r9
 8009d14:	f7f6 fee2 	bl	8000adc <__aeabi_dcmplt>
 8009d18:	b110      	cbz	r0, 8009d20 <_printf_float+0x90>
 8009d1a:	232d      	movs	r3, #45	; 0x2d
 8009d1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d20:	4b93      	ldr	r3, [pc, #588]	; (8009f70 <_printf_float+0x2e0>)
 8009d22:	4894      	ldr	r0, [pc, #592]	; (8009f74 <_printf_float+0x2e4>)
 8009d24:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009d28:	bf94      	ite	ls
 8009d2a:	4698      	movls	r8, r3
 8009d2c:	4680      	movhi	r8, r0
 8009d2e:	2303      	movs	r3, #3
 8009d30:	6123      	str	r3, [r4, #16]
 8009d32:	9b05      	ldr	r3, [sp, #20]
 8009d34:	f023 0204 	bic.w	r2, r3, #4
 8009d38:	6022      	str	r2, [r4, #0]
 8009d3a:	f04f 0900 	mov.w	r9, #0
 8009d3e:	9700      	str	r7, [sp, #0]
 8009d40:	4633      	mov	r3, r6
 8009d42:	aa0b      	add	r2, sp, #44	; 0x2c
 8009d44:	4621      	mov	r1, r4
 8009d46:	4628      	mov	r0, r5
 8009d48:	f000 f9d8 	bl	800a0fc <_printf_common>
 8009d4c:	3001      	adds	r0, #1
 8009d4e:	f040 8090 	bne.w	8009e72 <_printf_float+0x1e2>
 8009d52:	f04f 30ff 	mov.w	r0, #4294967295
 8009d56:	b00d      	add	sp, #52	; 0x34
 8009d58:	ecbd 8b02 	vpop	{d8}
 8009d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d60:	4642      	mov	r2, r8
 8009d62:	464b      	mov	r3, r9
 8009d64:	4640      	mov	r0, r8
 8009d66:	4649      	mov	r1, r9
 8009d68:	f7f6 fee0 	bl	8000b2c <__aeabi_dcmpun>
 8009d6c:	b140      	cbz	r0, 8009d80 <_printf_float+0xf0>
 8009d6e:	464b      	mov	r3, r9
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	bfbc      	itt	lt
 8009d74:	232d      	movlt	r3, #45	; 0x2d
 8009d76:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009d7a:	487f      	ldr	r0, [pc, #508]	; (8009f78 <_printf_float+0x2e8>)
 8009d7c:	4b7f      	ldr	r3, [pc, #508]	; (8009f7c <_printf_float+0x2ec>)
 8009d7e:	e7d1      	b.n	8009d24 <_printf_float+0x94>
 8009d80:	6863      	ldr	r3, [r4, #4]
 8009d82:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009d86:	9206      	str	r2, [sp, #24]
 8009d88:	1c5a      	adds	r2, r3, #1
 8009d8a:	d13f      	bne.n	8009e0c <_printf_float+0x17c>
 8009d8c:	2306      	movs	r3, #6
 8009d8e:	6063      	str	r3, [r4, #4]
 8009d90:	9b05      	ldr	r3, [sp, #20]
 8009d92:	6861      	ldr	r1, [r4, #4]
 8009d94:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009d98:	2300      	movs	r3, #0
 8009d9a:	9303      	str	r3, [sp, #12]
 8009d9c:	ab0a      	add	r3, sp, #40	; 0x28
 8009d9e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009da2:	ab09      	add	r3, sp, #36	; 0x24
 8009da4:	ec49 8b10 	vmov	d0, r8, r9
 8009da8:	9300      	str	r3, [sp, #0]
 8009daa:	6022      	str	r2, [r4, #0]
 8009dac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009db0:	4628      	mov	r0, r5
 8009db2:	f7ff fecd 	bl	8009b50 <__cvt>
 8009db6:	9b06      	ldr	r3, [sp, #24]
 8009db8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009dba:	2b47      	cmp	r3, #71	; 0x47
 8009dbc:	4680      	mov	r8, r0
 8009dbe:	d108      	bne.n	8009dd2 <_printf_float+0x142>
 8009dc0:	1cc8      	adds	r0, r1, #3
 8009dc2:	db02      	blt.n	8009dca <_printf_float+0x13a>
 8009dc4:	6863      	ldr	r3, [r4, #4]
 8009dc6:	4299      	cmp	r1, r3
 8009dc8:	dd41      	ble.n	8009e4e <_printf_float+0x1be>
 8009dca:	f1ab 0b02 	sub.w	fp, fp, #2
 8009dce:	fa5f fb8b 	uxtb.w	fp, fp
 8009dd2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009dd6:	d820      	bhi.n	8009e1a <_printf_float+0x18a>
 8009dd8:	3901      	subs	r1, #1
 8009dda:	465a      	mov	r2, fp
 8009ddc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009de0:	9109      	str	r1, [sp, #36]	; 0x24
 8009de2:	f7ff ff17 	bl	8009c14 <__exponent>
 8009de6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009de8:	1813      	adds	r3, r2, r0
 8009dea:	2a01      	cmp	r2, #1
 8009dec:	4681      	mov	r9, r0
 8009dee:	6123      	str	r3, [r4, #16]
 8009df0:	dc02      	bgt.n	8009df8 <_printf_float+0x168>
 8009df2:	6822      	ldr	r2, [r4, #0]
 8009df4:	07d2      	lsls	r2, r2, #31
 8009df6:	d501      	bpl.n	8009dfc <_printf_float+0x16c>
 8009df8:	3301      	adds	r3, #1
 8009dfa:	6123      	str	r3, [r4, #16]
 8009dfc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d09c      	beq.n	8009d3e <_printf_float+0xae>
 8009e04:	232d      	movs	r3, #45	; 0x2d
 8009e06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e0a:	e798      	b.n	8009d3e <_printf_float+0xae>
 8009e0c:	9a06      	ldr	r2, [sp, #24]
 8009e0e:	2a47      	cmp	r2, #71	; 0x47
 8009e10:	d1be      	bne.n	8009d90 <_printf_float+0x100>
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d1bc      	bne.n	8009d90 <_printf_float+0x100>
 8009e16:	2301      	movs	r3, #1
 8009e18:	e7b9      	b.n	8009d8e <_printf_float+0xfe>
 8009e1a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009e1e:	d118      	bne.n	8009e52 <_printf_float+0x1c2>
 8009e20:	2900      	cmp	r1, #0
 8009e22:	6863      	ldr	r3, [r4, #4]
 8009e24:	dd0b      	ble.n	8009e3e <_printf_float+0x1ae>
 8009e26:	6121      	str	r1, [r4, #16]
 8009e28:	b913      	cbnz	r3, 8009e30 <_printf_float+0x1a0>
 8009e2a:	6822      	ldr	r2, [r4, #0]
 8009e2c:	07d0      	lsls	r0, r2, #31
 8009e2e:	d502      	bpl.n	8009e36 <_printf_float+0x1a6>
 8009e30:	3301      	adds	r3, #1
 8009e32:	440b      	add	r3, r1
 8009e34:	6123      	str	r3, [r4, #16]
 8009e36:	65a1      	str	r1, [r4, #88]	; 0x58
 8009e38:	f04f 0900 	mov.w	r9, #0
 8009e3c:	e7de      	b.n	8009dfc <_printf_float+0x16c>
 8009e3e:	b913      	cbnz	r3, 8009e46 <_printf_float+0x1b6>
 8009e40:	6822      	ldr	r2, [r4, #0]
 8009e42:	07d2      	lsls	r2, r2, #31
 8009e44:	d501      	bpl.n	8009e4a <_printf_float+0x1ba>
 8009e46:	3302      	adds	r3, #2
 8009e48:	e7f4      	b.n	8009e34 <_printf_float+0x1a4>
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	e7f2      	b.n	8009e34 <_printf_float+0x1a4>
 8009e4e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009e52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e54:	4299      	cmp	r1, r3
 8009e56:	db05      	blt.n	8009e64 <_printf_float+0x1d4>
 8009e58:	6823      	ldr	r3, [r4, #0]
 8009e5a:	6121      	str	r1, [r4, #16]
 8009e5c:	07d8      	lsls	r0, r3, #31
 8009e5e:	d5ea      	bpl.n	8009e36 <_printf_float+0x1a6>
 8009e60:	1c4b      	adds	r3, r1, #1
 8009e62:	e7e7      	b.n	8009e34 <_printf_float+0x1a4>
 8009e64:	2900      	cmp	r1, #0
 8009e66:	bfd4      	ite	le
 8009e68:	f1c1 0202 	rsble	r2, r1, #2
 8009e6c:	2201      	movgt	r2, #1
 8009e6e:	4413      	add	r3, r2
 8009e70:	e7e0      	b.n	8009e34 <_printf_float+0x1a4>
 8009e72:	6823      	ldr	r3, [r4, #0]
 8009e74:	055a      	lsls	r2, r3, #21
 8009e76:	d407      	bmi.n	8009e88 <_printf_float+0x1f8>
 8009e78:	6923      	ldr	r3, [r4, #16]
 8009e7a:	4642      	mov	r2, r8
 8009e7c:	4631      	mov	r1, r6
 8009e7e:	4628      	mov	r0, r5
 8009e80:	47b8      	blx	r7
 8009e82:	3001      	adds	r0, #1
 8009e84:	d12c      	bne.n	8009ee0 <_printf_float+0x250>
 8009e86:	e764      	b.n	8009d52 <_printf_float+0xc2>
 8009e88:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009e8c:	f240 80e0 	bls.w	800a050 <_printf_float+0x3c0>
 8009e90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009e94:	2200      	movs	r2, #0
 8009e96:	2300      	movs	r3, #0
 8009e98:	f7f6 fe16 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e9c:	2800      	cmp	r0, #0
 8009e9e:	d034      	beq.n	8009f0a <_printf_float+0x27a>
 8009ea0:	4a37      	ldr	r2, [pc, #220]	; (8009f80 <_printf_float+0x2f0>)
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	4631      	mov	r1, r6
 8009ea6:	4628      	mov	r0, r5
 8009ea8:	47b8      	blx	r7
 8009eaa:	3001      	adds	r0, #1
 8009eac:	f43f af51 	beq.w	8009d52 <_printf_float+0xc2>
 8009eb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	db02      	blt.n	8009ebe <_printf_float+0x22e>
 8009eb8:	6823      	ldr	r3, [r4, #0]
 8009eba:	07d8      	lsls	r0, r3, #31
 8009ebc:	d510      	bpl.n	8009ee0 <_printf_float+0x250>
 8009ebe:	ee18 3a10 	vmov	r3, s16
 8009ec2:	4652      	mov	r2, sl
 8009ec4:	4631      	mov	r1, r6
 8009ec6:	4628      	mov	r0, r5
 8009ec8:	47b8      	blx	r7
 8009eca:	3001      	adds	r0, #1
 8009ecc:	f43f af41 	beq.w	8009d52 <_printf_float+0xc2>
 8009ed0:	f04f 0800 	mov.w	r8, #0
 8009ed4:	f104 091a 	add.w	r9, r4, #26
 8009ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009eda:	3b01      	subs	r3, #1
 8009edc:	4543      	cmp	r3, r8
 8009ede:	dc09      	bgt.n	8009ef4 <_printf_float+0x264>
 8009ee0:	6823      	ldr	r3, [r4, #0]
 8009ee2:	079b      	lsls	r3, r3, #30
 8009ee4:	f100 8105 	bmi.w	800a0f2 <_printf_float+0x462>
 8009ee8:	68e0      	ldr	r0, [r4, #12]
 8009eea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009eec:	4298      	cmp	r0, r3
 8009eee:	bfb8      	it	lt
 8009ef0:	4618      	movlt	r0, r3
 8009ef2:	e730      	b.n	8009d56 <_printf_float+0xc6>
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	464a      	mov	r2, r9
 8009ef8:	4631      	mov	r1, r6
 8009efa:	4628      	mov	r0, r5
 8009efc:	47b8      	blx	r7
 8009efe:	3001      	adds	r0, #1
 8009f00:	f43f af27 	beq.w	8009d52 <_printf_float+0xc2>
 8009f04:	f108 0801 	add.w	r8, r8, #1
 8009f08:	e7e6      	b.n	8009ed8 <_printf_float+0x248>
 8009f0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	dc39      	bgt.n	8009f84 <_printf_float+0x2f4>
 8009f10:	4a1b      	ldr	r2, [pc, #108]	; (8009f80 <_printf_float+0x2f0>)
 8009f12:	2301      	movs	r3, #1
 8009f14:	4631      	mov	r1, r6
 8009f16:	4628      	mov	r0, r5
 8009f18:	47b8      	blx	r7
 8009f1a:	3001      	adds	r0, #1
 8009f1c:	f43f af19 	beq.w	8009d52 <_printf_float+0xc2>
 8009f20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f24:	4313      	orrs	r3, r2
 8009f26:	d102      	bne.n	8009f2e <_printf_float+0x29e>
 8009f28:	6823      	ldr	r3, [r4, #0]
 8009f2a:	07d9      	lsls	r1, r3, #31
 8009f2c:	d5d8      	bpl.n	8009ee0 <_printf_float+0x250>
 8009f2e:	ee18 3a10 	vmov	r3, s16
 8009f32:	4652      	mov	r2, sl
 8009f34:	4631      	mov	r1, r6
 8009f36:	4628      	mov	r0, r5
 8009f38:	47b8      	blx	r7
 8009f3a:	3001      	adds	r0, #1
 8009f3c:	f43f af09 	beq.w	8009d52 <_printf_float+0xc2>
 8009f40:	f04f 0900 	mov.w	r9, #0
 8009f44:	f104 0a1a 	add.w	sl, r4, #26
 8009f48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f4a:	425b      	negs	r3, r3
 8009f4c:	454b      	cmp	r3, r9
 8009f4e:	dc01      	bgt.n	8009f54 <_printf_float+0x2c4>
 8009f50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f52:	e792      	b.n	8009e7a <_printf_float+0x1ea>
 8009f54:	2301      	movs	r3, #1
 8009f56:	4652      	mov	r2, sl
 8009f58:	4631      	mov	r1, r6
 8009f5a:	4628      	mov	r0, r5
 8009f5c:	47b8      	blx	r7
 8009f5e:	3001      	adds	r0, #1
 8009f60:	f43f aef7 	beq.w	8009d52 <_printf_float+0xc2>
 8009f64:	f109 0901 	add.w	r9, r9, #1
 8009f68:	e7ee      	b.n	8009f48 <_printf_float+0x2b8>
 8009f6a:	bf00      	nop
 8009f6c:	7fefffff 	.word	0x7fefffff
 8009f70:	0800ef04 	.word	0x0800ef04
 8009f74:	0800ef08 	.word	0x0800ef08
 8009f78:	0800ef10 	.word	0x0800ef10
 8009f7c:	0800ef0c 	.word	0x0800ef0c
 8009f80:	0800ef14 	.word	0x0800ef14
 8009f84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	bfa8      	it	ge
 8009f8c:	461a      	movge	r2, r3
 8009f8e:	2a00      	cmp	r2, #0
 8009f90:	4691      	mov	r9, r2
 8009f92:	dc37      	bgt.n	800a004 <_printf_float+0x374>
 8009f94:	f04f 0b00 	mov.w	fp, #0
 8009f98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f9c:	f104 021a 	add.w	r2, r4, #26
 8009fa0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009fa2:	9305      	str	r3, [sp, #20]
 8009fa4:	eba3 0309 	sub.w	r3, r3, r9
 8009fa8:	455b      	cmp	r3, fp
 8009faa:	dc33      	bgt.n	800a014 <_printf_float+0x384>
 8009fac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	db3b      	blt.n	800a02c <_printf_float+0x39c>
 8009fb4:	6823      	ldr	r3, [r4, #0]
 8009fb6:	07da      	lsls	r2, r3, #31
 8009fb8:	d438      	bmi.n	800a02c <_printf_float+0x39c>
 8009fba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fbc:	9a05      	ldr	r2, [sp, #20]
 8009fbe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009fc0:	1a9a      	subs	r2, r3, r2
 8009fc2:	eba3 0901 	sub.w	r9, r3, r1
 8009fc6:	4591      	cmp	r9, r2
 8009fc8:	bfa8      	it	ge
 8009fca:	4691      	movge	r9, r2
 8009fcc:	f1b9 0f00 	cmp.w	r9, #0
 8009fd0:	dc35      	bgt.n	800a03e <_printf_float+0x3ae>
 8009fd2:	f04f 0800 	mov.w	r8, #0
 8009fd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009fda:	f104 0a1a 	add.w	sl, r4, #26
 8009fde:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009fe2:	1a9b      	subs	r3, r3, r2
 8009fe4:	eba3 0309 	sub.w	r3, r3, r9
 8009fe8:	4543      	cmp	r3, r8
 8009fea:	f77f af79 	ble.w	8009ee0 <_printf_float+0x250>
 8009fee:	2301      	movs	r3, #1
 8009ff0:	4652      	mov	r2, sl
 8009ff2:	4631      	mov	r1, r6
 8009ff4:	4628      	mov	r0, r5
 8009ff6:	47b8      	blx	r7
 8009ff8:	3001      	adds	r0, #1
 8009ffa:	f43f aeaa 	beq.w	8009d52 <_printf_float+0xc2>
 8009ffe:	f108 0801 	add.w	r8, r8, #1
 800a002:	e7ec      	b.n	8009fde <_printf_float+0x34e>
 800a004:	4613      	mov	r3, r2
 800a006:	4631      	mov	r1, r6
 800a008:	4642      	mov	r2, r8
 800a00a:	4628      	mov	r0, r5
 800a00c:	47b8      	blx	r7
 800a00e:	3001      	adds	r0, #1
 800a010:	d1c0      	bne.n	8009f94 <_printf_float+0x304>
 800a012:	e69e      	b.n	8009d52 <_printf_float+0xc2>
 800a014:	2301      	movs	r3, #1
 800a016:	4631      	mov	r1, r6
 800a018:	4628      	mov	r0, r5
 800a01a:	9205      	str	r2, [sp, #20]
 800a01c:	47b8      	blx	r7
 800a01e:	3001      	adds	r0, #1
 800a020:	f43f ae97 	beq.w	8009d52 <_printf_float+0xc2>
 800a024:	9a05      	ldr	r2, [sp, #20]
 800a026:	f10b 0b01 	add.w	fp, fp, #1
 800a02a:	e7b9      	b.n	8009fa0 <_printf_float+0x310>
 800a02c:	ee18 3a10 	vmov	r3, s16
 800a030:	4652      	mov	r2, sl
 800a032:	4631      	mov	r1, r6
 800a034:	4628      	mov	r0, r5
 800a036:	47b8      	blx	r7
 800a038:	3001      	adds	r0, #1
 800a03a:	d1be      	bne.n	8009fba <_printf_float+0x32a>
 800a03c:	e689      	b.n	8009d52 <_printf_float+0xc2>
 800a03e:	9a05      	ldr	r2, [sp, #20]
 800a040:	464b      	mov	r3, r9
 800a042:	4442      	add	r2, r8
 800a044:	4631      	mov	r1, r6
 800a046:	4628      	mov	r0, r5
 800a048:	47b8      	blx	r7
 800a04a:	3001      	adds	r0, #1
 800a04c:	d1c1      	bne.n	8009fd2 <_printf_float+0x342>
 800a04e:	e680      	b.n	8009d52 <_printf_float+0xc2>
 800a050:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a052:	2a01      	cmp	r2, #1
 800a054:	dc01      	bgt.n	800a05a <_printf_float+0x3ca>
 800a056:	07db      	lsls	r3, r3, #31
 800a058:	d538      	bpl.n	800a0cc <_printf_float+0x43c>
 800a05a:	2301      	movs	r3, #1
 800a05c:	4642      	mov	r2, r8
 800a05e:	4631      	mov	r1, r6
 800a060:	4628      	mov	r0, r5
 800a062:	47b8      	blx	r7
 800a064:	3001      	adds	r0, #1
 800a066:	f43f ae74 	beq.w	8009d52 <_printf_float+0xc2>
 800a06a:	ee18 3a10 	vmov	r3, s16
 800a06e:	4652      	mov	r2, sl
 800a070:	4631      	mov	r1, r6
 800a072:	4628      	mov	r0, r5
 800a074:	47b8      	blx	r7
 800a076:	3001      	adds	r0, #1
 800a078:	f43f ae6b 	beq.w	8009d52 <_printf_float+0xc2>
 800a07c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a080:	2200      	movs	r2, #0
 800a082:	2300      	movs	r3, #0
 800a084:	f7f6 fd20 	bl	8000ac8 <__aeabi_dcmpeq>
 800a088:	b9d8      	cbnz	r0, 800a0c2 <_printf_float+0x432>
 800a08a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a08c:	f108 0201 	add.w	r2, r8, #1
 800a090:	3b01      	subs	r3, #1
 800a092:	4631      	mov	r1, r6
 800a094:	4628      	mov	r0, r5
 800a096:	47b8      	blx	r7
 800a098:	3001      	adds	r0, #1
 800a09a:	d10e      	bne.n	800a0ba <_printf_float+0x42a>
 800a09c:	e659      	b.n	8009d52 <_printf_float+0xc2>
 800a09e:	2301      	movs	r3, #1
 800a0a0:	4652      	mov	r2, sl
 800a0a2:	4631      	mov	r1, r6
 800a0a4:	4628      	mov	r0, r5
 800a0a6:	47b8      	blx	r7
 800a0a8:	3001      	adds	r0, #1
 800a0aa:	f43f ae52 	beq.w	8009d52 <_printf_float+0xc2>
 800a0ae:	f108 0801 	add.w	r8, r8, #1
 800a0b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0b4:	3b01      	subs	r3, #1
 800a0b6:	4543      	cmp	r3, r8
 800a0b8:	dcf1      	bgt.n	800a09e <_printf_float+0x40e>
 800a0ba:	464b      	mov	r3, r9
 800a0bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a0c0:	e6dc      	b.n	8009e7c <_printf_float+0x1ec>
 800a0c2:	f04f 0800 	mov.w	r8, #0
 800a0c6:	f104 0a1a 	add.w	sl, r4, #26
 800a0ca:	e7f2      	b.n	800a0b2 <_printf_float+0x422>
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	4642      	mov	r2, r8
 800a0d0:	e7df      	b.n	800a092 <_printf_float+0x402>
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	464a      	mov	r2, r9
 800a0d6:	4631      	mov	r1, r6
 800a0d8:	4628      	mov	r0, r5
 800a0da:	47b8      	blx	r7
 800a0dc:	3001      	adds	r0, #1
 800a0de:	f43f ae38 	beq.w	8009d52 <_printf_float+0xc2>
 800a0e2:	f108 0801 	add.w	r8, r8, #1
 800a0e6:	68e3      	ldr	r3, [r4, #12]
 800a0e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a0ea:	1a5b      	subs	r3, r3, r1
 800a0ec:	4543      	cmp	r3, r8
 800a0ee:	dcf0      	bgt.n	800a0d2 <_printf_float+0x442>
 800a0f0:	e6fa      	b.n	8009ee8 <_printf_float+0x258>
 800a0f2:	f04f 0800 	mov.w	r8, #0
 800a0f6:	f104 0919 	add.w	r9, r4, #25
 800a0fa:	e7f4      	b.n	800a0e6 <_printf_float+0x456>

0800a0fc <_printf_common>:
 800a0fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a100:	4616      	mov	r6, r2
 800a102:	4699      	mov	r9, r3
 800a104:	688a      	ldr	r2, [r1, #8]
 800a106:	690b      	ldr	r3, [r1, #16]
 800a108:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a10c:	4293      	cmp	r3, r2
 800a10e:	bfb8      	it	lt
 800a110:	4613      	movlt	r3, r2
 800a112:	6033      	str	r3, [r6, #0]
 800a114:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a118:	4607      	mov	r7, r0
 800a11a:	460c      	mov	r4, r1
 800a11c:	b10a      	cbz	r2, 800a122 <_printf_common+0x26>
 800a11e:	3301      	adds	r3, #1
 800a120:	6033      	str	r3, [r6, #0]
 800a122:	6823      	ldr	r3, [r4, #0]
 800a124:	0699      	lsls	r1, r3, #26
 800a126:	bf42      	ittt	mi
 800a128:	6833      	ldrmi	r3, [r6, #0]
 800a12a:	3302      	addmi	r3, #2
 800a12c:	6033      	strmi	r3, [r6, #0]
 800a12e:	6825      	ldr	r5, [r4, #0]
 800a130:	f015 0506 	ands.w	r5, r5, #6
 800a134:	d106      	bne.n	800a144 <_printf_common+0x48>
 800a136:	f104 0a19 	add.w	sl, r4, #25
 800a13a:	68e3      	ldr	r3, [r4, #12]
 800a13c:	6832      	ldr	r2, [r6, #0]
 800a13e:	1a9b      	subs	r3, r3, r2
 800a140:	42ab      	cmp	r3, r5
 800a142:	dc26      	bgt.n	800a192 <_printf_common+0x96>
 800a144:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a148:	1e13      	subs	r3, r2, #0
 800a14a:	6822      	ldr	r2, [r4, #0]
 800a14c:	bf18      	it	ne
 800a14e:	2301      	movne	r3, #1
 800a150:	0692      	lsls	r2, r2, #26
 800a152:	d42b      	bmi.n	800a1ac <_printf_common+0xb0>
 800a154:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a158:	4649      	mov	r1, r9
 800a15a:	4638      	mov	r0, r7
 800a15c:	47c0      	blx	r8
 800a15e:	3001      	adds	r0, #1
 800a160:	d01e      	beq.n	800a1a0 <_printf_common+0xa4>
 800a162:	6823      	ldr	r3, [r4, #0]
 800a164:	68e5      	ldr	r5, [r4, #12]
 800a166:	6832      	ldr	r2, [r6, #0]
 800a168:	f003 0306 	and.w	r3, r3, #6
 800a16c:	2b04      	cmp	r3, #4
 800a16e:	bf08      	it	eq
 800a170:	1aad      	subeq	r5, r5, r2
 800a172:	68a3      	ldr	r3, [r4, #8]
 800a174:	6922      	ldr	r2, [r4, #16]
 800a176:	bf0c      	ite	eq
 800a178:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a17c:	2500      	movne	r5, #0
 800a17e:	4293      	cmp	r3, r2
 800a180:	bfc4      	itt	gt
 800a182:	1a9b      	subgt	r3, r3, r2
 800a184:	18ed      	addgt	r5, r5, r3
 800a186:	2600      	movs	r6, #0
 800a188:	341a      	adds	r4, #26
 800a18a:	42b5      	cmp	r5, r6
 800a18c:	d11a      	bne.n	800a1c4 <_printf_common+0xc8>
 800a18e:	2000      	movs	r0, #0
 800a190:	e008      	b.n	800a1a4 <_printf_common+0xa8>
 800a192:	2301      	movs	r3, #1
 800a194:	4652      	mov	r2, sl
 800a196:	4649      	mov	r1, r9
 800a198:	4638      	mov	r0, r7
 800a19a:	47c0      	blx	r8
 800a19c:	3001      	adds	r0, #1
 800a19e:	d103      	bne.n	800a1a8 <_printf_common+0xac>
 800a1a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1a8:	3501      	adds	r5, #1
 800a1aa:	e7c6      	b.n	800a13a <_printf_common+0x3e>
 800a1ac:	18e1      	adds	r1, r4, r3
 800a1ae:	1c5a      	adds	r2, r3, #1
 800a1b0:	2030      	movs	r0, #48	; 0x30
 800a1b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a1b6:	4422      	add	r2, r4
 800a1b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a1bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a1c0:	3302      	adds	r3, #2
 800a1c2:	e7c7      	b.n	800a154 <_printf_common+0x58>
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	4622      	mov	r2, r4
 800a1c8:	4649      	mov	r1, r9
 800a1ca:	4638      	mov	r0, r7
 800a1cc:	47c0      	blx	r8
 800a1ce:	3001      	adds	r0, #1
 800a1d0:	d0e6      	beq.n	800a1a0 <_printf_common+0xa4>
 800a1d2:	3601      	adds	r6, #1
 800a1d4:	e7d9      	b.n	800a18a <_printf_common+0x8e>
	...

0800a1d8 <_printf_i>:
 800a1d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1dc:	7e0f      	ldrb	r7, [r1, #24]
 800a1de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a1e0:	2f78      	cmp	r7, #120	; 0x78
 800a1e2:	4691      	mov	r9, r2
 800a1e4:	4680      	mov	r8, r0
 800a1e6:	460c      	mov	r4, r1
 800a1e8:	469a      	mov	sl, r3
 800a1ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a1ee:	d807      	bhi.n	800a200 <_printf_i+0x28>
 800a1f0:	2f62      	cmp	r7, #98	; 0x62
 800a1f2:	d80a      	bhi.n	800a20a <_printf_i+0x32>
 800a1f4:	2f00      	cmp	r7, #0
 800a1f6:	f000 80d8 	beq.w	800a3aa <_printf_i+0x1d2>
 800a1fa:	2f58      	cmp	r7, #88	; 0x58
 800a1fc:	f000 80a3 	beq.w	800a346 <_printf_i+0x16e>
 800a200:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a204:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a208:	e03a      	b.n	800a280 <_printf_i+0xa8>
 800a20a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a20e:	2b15      	cmp	r3, #21
 800a210:	d8f6      	bhi.n	800a200 <_printf_i+0x28>
 800a212:	a101      	add	r1, pc, #4	; (adr r1, 800a218 <_printf_i+0x40>)
 800a214:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a218:	0800a271 	.word	0x0800a271
 800a21c:	0800a285 	.word	0x0800a285
 800a220:	0800a201 	.word	0x0800a201
 800a224:	0800a201 	.word	0x0800a201
 800a228:	0800a201 	.word	0x0800a201
 800a22c:	0800a201 	.word	0x0800a201
 800a230:	0800a285 	.word	0x0800a285
 800a234:	0800a201 	.word	0x0800a201
 800a238:	0800a201 	.word	0x0800a201
 800a23c:	0800a201 	.word	0x0800a201
 800a240:	0800a201 	.word	0x0800a201
 800a244:	0800a391 	.word	0x0800a391
 800a248:	0800a2b5 	.word	0x0800a2b5
 800a24c:	0800a373 	.word	0x0800a373
 800a250:	0800a201 	.word	0x0800a201
 800a254:	0800a201 	.word	0x0800a201
 800a258:	0800a3b3 	.word	0x0800a3b3
 800a25c:	0800a201 	.word	0x0800a201
 800a260:	0800a2b5 	.word	0x0800a2b5
 800a264:	0800a201 	.word	0x0800a201
 800a268:	0800a201 	.word	0x0800a201
 800a26c:	0800a37b 	.word	0x0800a37b
 800a270:	682b      	ldr	r3, [r5, #0]
 800a272:	1d1a      	adds	r2, r3, #4
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	602a      	str	r2, [r5, #0]
 800a278:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a27c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a280:	2301      	movs	r3, #1
 800a282:	e0a3      	b.n	800a3cc <_printf_i+0x1f4>
 800a284:	6820      	ldr	r0, [r4, #0]
 800a286:	6829      	ldr	r1, [r5, #0]
 800a288:	0606      	lsls	r6, r0, #24
 800a28a:	f101 0304 	add.w	r3, r1, #4
 800a28e:	d50a      	bpl.n	800a2a6 <_printf_i+0xce>
 800a290:	680e      	ldr	r6, [r1, #0]
 800a292:	602b      	str	r3, [r5, #0]
 800a294:	2e00      	cmp	r6, #0
 800a296:	da03      	bge.n	800a2a0 <_printf_i+0xc8>
 800a298:	232d      	movs	r3, #45	; 0x2d
 800a29a:	4276      	negs	r6, r6
 800a29c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2a0:	485e      	ldr	r0, [pc, #376]	; (800a41c <_printf_i+0x244>)
 800a2a2:	230a      	movs	r3, #10
 800a2a4:	e019      	b.n	800a2da <_printf_i+0x102>
 800a2a6:	680e      	ldr	r6, [r1, #0]
 800a2a8:	602b      	str	r3, [r5, #0]
 800a2aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a2ae:	bf18      	it	ne
 800a2b0:	b236      	sxthne	r6, r6
 800a2b2:	e7ef      	b.n	800a294 <_printf_i+0xbc>
 800a2b4:	682b      	ldr	r3, [r5, #0]
 800a2b6:	6820      	ldr	r0, [r4, #0]
 800a2b8:	1d19      	adds	r1, r3, #4
 800a2ba:	6029      	str	r1, [r5, #0]
 800a2bc:	0601      	lsls	r1, r0, #24
 800a2be:	d501      	bpl.n	800a2c4 <_printf_i+0xec>
 800a2c0:	681e      	ldr	r6, [r3, #0]
 800a2c2:	e002      	b.n	800a2ca <_printf_i+0xf2>
 800a2c4:	0646      	lsls	r6, r0, #25
 800a2c6:	d5fb      	bpl.n	800a2c0 <_printf_i+0xe8>
 800a2c8:	881e      	ldrh	r6, [r3, #0]
 800a2ca:	4854      	ldr	r0, [pc, #336]	; (800a41c <_printf_i+0x244>)
 800a2cc:	2f6f      	cmp	r7, #111	; 0x6f
 800a2ce:	bf0c      	ite	eq
 800a2d0:	2308      	moveq	r3, #8
 800a2d2:	230a      	movne	r3, #10
 800a2d4:	2100      	movs	r1, #0
 800a2d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a2da:	6865      	ldr	r5, [r4, #4]
 800a2dc:	60a5      	str	r5, [r4, #8]
 800a2de:	2d00      	cmp	r5, #0
 800a2e0:	bfa2      	ittt	ge
 800a2e2:	6821      	ldrge	r1, [r4, #0]
 800a2e4:	f021 0104 	bicge.w	r1, r1, #4
 800a2e8:	6021      	strge	r1, [r4, #0]
 800a2ea:	b90e      	cbnz	r6, 800a2f0 <_printf_i+0x118>
 800a2ec:	2d00      	cmp	r5, #0
 800a2ee:	d04d      	beq.n	800a38c <_printf_i+0x1b4>
 800a2f0:	4615      	mov	r5, r2
 800a2f2:	fbb6 f1f3 	udiv	r1, r6, r3
 800a2f6:	fb03 6711 	mls	r7, r3, r1, r6
 800a2fa:	5dc7      	ldrb	r7, [r0, r7]
 800a2fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a300:	4637      	mov	r7, r6
 800a302:	42bb      	cmp	r3, r7
 800a304:	460e      	mov	r6, r1
 800a306:	d9f4      	bls.n	800a2f2 <_printf_i+0x11a>
 800a308:	2b08      	cmp	r3, #8
 800a30a:	d10b      	bne.n	800a324 <_printf_i+0x14c>
 800a30c:	6823      	ldr	r3, [r4, #0]
 800a30e:	07de      	lsls	r6, r3, #31
 800a310:	d508      	bpl.n	800a324 <_printf_i+0x14c>
 800a312:	6923      	ldr	r3, [r4, #16]
 800a314:	6861      	ldr	r1, [r4, #4]
 800a316:	4299      	cmp	r1, r3
 800a318:	bfde      	ittt	le
 800a31a:	2330      	movle	r3, #48	; 0x30
 800a31c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a320:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a324:	1b52      	subs	r2, r2, r5
 800a326:	6122      	str	r2, [r4, #16]
 800a328:	f8cd a000 	str.w	sl, [sp]
 800a32c:	464b      	mov	r3, r9
 800a32e:	aa03      	add	r2, sp, #12
 800a330:	4621      	mov	r1, r4
 800a332:	4640      	mov	r0, r8
 800a334:	f7ff fee2 	bl	800a0fc <_printf_common>
 800a338:	3001      	adds	r0, #1
 800a33a:	d14c      	bne.n	800a3d6 <_printf_i+0x1fe>
 800a33c:	f04f 30ff 	mov.w	r0, #4294967295
 800a340:	b004      	add	sp, #16
 800a342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a346:	4835      	ldr	r0, [pc, #212]	; (800a41c <_printf_i+0x244>)
 800a348:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a34c:	6829      	ldr	r1, [r5, #0]
 800a34e:	6823      	ldr	r3, [r4, #0]
 800a350:	f851 6b04 	ldr.w	r6, [r1], #4
 800a354:	6029      	str	r1, [r5, #0]
 800a356:	061d      	lsls	r5, r3, #24
 800a358:	d514      	bpl.n	800a384 <_printf_i+0x1ac>
 800a35a:	07df      	lsls	r7, r3, #31
 800a35c:	bf44      	itt	mi
 800a35e:	f043 0320 	orrmi.w	r3, r3, #32
 800a362:	6023      	strmi	r3, [r4, #0]
 800a364:	b91e      	cbnz	r6, 800a36e <_printf_i+0x196>
 800a366:	6823      	ldr	r3, [r4, #0]
 800a368:	f023 0320 	bic.w	r3, r3, #32
 800a36c:	6023      	str	r3, [r4, #0]
 800a36e:	2310      	movs	r3, #16
 800a370:	e7b0      	b.n	800a2d4 <_printf_i+0xfc>
 800a372:	6823      	ldr	r3, [r4, #0]
 800a374:	f043 0320 	orr.w	r3, r3, #32
 800a378:	6023      	str	r3, [r4, #0]
 800a37a:	2378      	movs	r3, #120	; 0x78
 800a37c:	4828      	ldr	r0, [pc, #160]	; (800a420 <_printf_i+0x248>)
 800a37e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a382:	e7e3      	b.n	800a34c <_printf_i+0x174>
 800a384:	0659      	lsls	r1, r3, #25
 800a386:	bf48      	it	mi
 800a388:	b2b6      	uxthmi	r6, r6
 800a38a:	e7e6      	b.n	800a35a <_printf_i+0x182>
 800a38c:	4615      	mov	r5, r2
 800a38e:	e7bb      	b.n	800a308 <_printf_i+0x130>
 800a390:	682b      	ldr	r3, [r5, #0]
 800a392:	6826      	ldr	r6, [r4, #0]
 800a394:	6961      	ldr	r1, [r4, #20]
 800a396:	1d18      	adds	r0, r3, #4
 800a398:	6028      	str	r0, [r5, #0]
 800a39a:	0635      	lsls	r5, r6, #24
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	d501      	bpl.n	800a3a4 <_printf_i+0x1cc>
 800a3a0:	6019      	str	r1, [r3, #0]
 800a3a2:	e002      	b.n	800a3aa <_printf_i+0x1d2>
 800a3a4:	0670      	lsls	r0, r6, #25
 800a3a6:	d5fb      	bpl.n	800a3a0 <_printf_i+0x1c8>
 800a3a8:	8019      	strh	r1, [r3, #0]
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	6123      	str	r3, [r4, #16]
 800a3ae:	4615      	mov	r5, r2
 800a3b0:	e7ba      	b.n	800a328 <_printf_i+0x150>
 800a3b2:	682b      	ldr	r3, [r5, #0]
 800a3b4:	1d1a      	adds	r2, r3, #4
 800a3b6:	602a      	str	r2, [r5, #0]
 800a3b8:	681d      	ldr	r5, [r3, #0]
 800a3ba:	6862      	ldr	r2, [r4, #4]
 800a3bc:	2100      	movs	r1, #0
 800a3be:	4628      	mov	r0, r5
 800a3c0:	f7f5 ff0e 	bl	80001e0 <memchr>
 800a3c4:	b108      	cbz	r0, 800a3ca <_printf_i+0x1f2>
 800a3c6:	1b40      	subs	r0, r0, r5
 800a3c8:	6060      	str	r0, [r4, #4]
 800a3ca:	6863      	ldr	r3, [r4, #4]
 800a3cc:	6123      	str	r3, [r4, #16]
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3d4:	e7a8      	b.n	800a328 <_printf_i+0x150>
 800a3d6:	6923      	ldr	r3, [r4, #16]
 800a3d8:	462a      	mov	r2, r5
 800a3da:	4649      	mov	r1, r9
 800a3dc:	4640      	mov	r0, r8
 800a3de:	47d0      	blx	sl
 800a3e0:	3001      	adds	r0, #1
 800a3e2:	d0ab      	beq.n	800a33c <_printf_i+0x164>
 800a3e4:	6823      	ldr	r3, [r4, #0]
 800a3e6:	079b      	lsls	r3, r3, #30
 800a3e8:	d413      	bmi.n	800a412 <_printf_i+0x23a>
 800a3ea:	68e0      	ldr	r0, [r4, #12]
 800a3ec:	9b03      	ldr	r3, [sp, #12]
 800a3ee:	4298      	cmp	r0, r3
 800a3f0:	bfb8      	it	lt
 800a3f2:	4618      	movlt	r0, r3
 800a3f4:	e7a4      	b.n	800a340 <_printf_i+0x168>
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	4632      	mov	r2, r6
 800a3fa:	4649      	mov	r1, r9
 800a3fc:	4640      	mov	r0, r8
 800a3fe:	47d0      	blx	sl
 800a400:	3001      	adds	r0, #1
 800a402:	d09b      	beq.n	800a33c <_printf_i+0x164>
 800a404:	3501      	adds	r5, #1
 800a406:	68e3      	ldr	r3, [r4, #12]
 800a408:	9903      	ldr	r1, [sp, #12]
 800a40a:	1a5b      	subs	r3, r3, r1
 800a40c:	42ab      	cmp	r3, r5
 800a40e:	dcf2      	bgt.n	800a3f6 <_printf_i+0x21e>
 800a410:	e7eb      	b.n	800a3ea <_printf_i+0x212>
 800a412:	2500      	movs	r5, #0
 800a414:	f104 0619 	add.w	r6, r4, #25
 800a418:	e7f5      	b.n	800a406 <_printf_i+0x22e>
 800a41a:	bf00      	nop
 800a41c:	0800ef16 	.word	0x0800ef16
 800a420:	0800ef27 	.word	0x0800ef27

0800a424 <_scanf_float>:
 800a424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a428:	b087      	sub	sp, #28
 800a42a:	4617      	mov	r7, r2
 800a42c:	9303      	str	r3, [sp, #12]
 800a42e:	688b      	ldr	r3, [r1, #8]
 800a430:	1e5a      	subs	r2, r3, #1
 800a432:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a436:	bf83      	ittte	hi
 800a438:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a43c:	195b      	addhi	r3, r3, r5
 800a43e:	9302      	strhi	r3, [sp, #8]
 800a440:	2300      	movls	r3, #0
 800a442:	bf86      	itte	hi
 800a444:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a448:	608b      	strhi	r3, [r1, #8]
 800a44a:	9302      	strls	r3, [sp, #8]
 800a44c:	680b      	ldr	r3, [r1, #0]
 800a44e:	468b      	mov	fp, r1
 800a450:	2500      	movs	r5, #0
 800a452:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a456:	f84b 3b1c 	str.w	r3, [fp], #28
 800a45a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a45e:	4680      	mov	r8, r0
 800a460:	460c      	mov	r4, r1
 800a462:	465e      	mov	r6, fp
 800a464:	46aa      	mov	sl, r5
 800a466:	46a9      	mov	r9, r5
 800a468:	9501      	str	r5, [sp, #4]
 800a46a:	68a2      	ldr	r2, [r4, #8]
 800a46c:	b152      	cbz	r2, 800a484 <_scanf_float+0x60>
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	2b4e      	cmp	r3, #78	; 0x4e
 800a474:	d864      	bhi.n	800a540 <_scanf_float+0x11c>
 800a476:	2b40      	cmp	r3, #64	; 0x40
 800a478:	d83c      	bhi.n	800a4f4 <_scanf_float+0xd0>
 800a47a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a47e:	b2c8      	uxtb	r0, r1
 800a480:	280e      	cmp	r0, #14
 800a482:	d93a      	bls.n	800a4fa <_scanf_float+0xd6>
 800a484:	f1b9 0f00 	cmp.w	r9, #0
 800a488:	d003      	beq.n	800a492 <_scanf_float+0x6e>
 800a48a:	6823      	ldr	r3, [r4, #0]
 800a48c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a490:	6023      	str	r3, [r4, #0]
 800a492:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a496:	f1ba 0f01 	cmp.w	sl, #1
 800a49a:	f200 8113 	bhi.w	800a6c4 <_scanf_float+0x2a0>
 800a49e:	455e      	cmp	r6, fp
 800a4a0:	f200 8105 	bhi.w	800a6ae <_scanf_float+0x28a>
 800a4a4:	2501      	movs	r5, #1
 800a4a6:	4628      	mov	r0, r5
 800a4a8:	b007      	add	sp, #28
 800a4aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4ae:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a4b2:	2a0d      	cmp	r2, #13
 800a4b4:	d8e6      	bhi.n	800a484 <_scanf_float+0x60>
 800a4b6:	a101      	add	r1, pc, #4	; (adr r1, 800a4bc <_scanf_float+0x98>)
 800a4b8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a4bc:	0800a5fb 	.word	0x0800a5fb
 800a4c0:	0800a485 	.word	0x0800a485
 800a4c4:	0800a485 	.word	0x0800a485
 800a4c8:	0800a485 	.word	0x0800a485
 800a4cc:	0800a65b 	.word	0x0800a65b
 800a4d0:	0800a633 	.word	0x0800a633
 800a4d4:	0800a485 	.word	0x0800a485
 800a4d8:	0800a485 	.word	0x0800a485
 800a4dc:	0800a609 	.word	0x0800a609
 800a4e0:	0800a485 	.word	0x0800a485
 800a4e4:	0800a485 	.word	0x0800a485
 800a4e8:	0800a485 	.word	0x0800a485
 800a4ec:	0800a485 	.word	0x0800a485
 800a4f0:	0800a5c1 	.word	0x0800a5c1
 800a4f4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a4f8:	e7db      	b.n	800a4b2 <_scanf_float+0x8e>
 800a4fa:	290e      	cmp	r1, #14
 800a4fc:	d8c2      	bhi.n	800a484 <_scanf_float+0x60>
 800a4fe:	a001      	add	r0, pc, #4	; (adr r0, 800a504 <_scanf_float+0xe0>)
 800a500:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a504:	0800a5b3 	.word	0x0800a5b3
 800a508:	0800a485 	.word	0x0800a485
 800a50c:	0800a5b3 	.word	0x0800a5b3
 800a510:	0800a647 	.word	0x0800a647
 800a514:	0800a485 	.word	0x0800a485
 800a518:	0800a561 	.word	0x0800a561
 800a51c:	0800a59d 	.word	0x0800a59d
 800a520:	0800a59d 	.word	0x0800a59d
 800a524:	0800a59d 	.word	0x0800a59d
 800a528:	0800a59d 	.word	0x0800a59d
 800a52c:	0800a59d 	.word	0x0800a59d
 800a530:	0800a59d 	.word	0x0800a59d
 800a534:	0800a59d 	.word	0x0800a59d
 800a538:	0800a59d 	.word	0x0800a59d
 800a53c:	0800a59d 	.word	0x0800a59d
 800a540:	2b6e      	cmp	r3, #110	; 0x6e
 800a542:	d809      	bhi.n	800a558 <_scanf_float+0x134>
 800a544:	2b60      	cmp	r3, #96	; 0x60
 800a546:	d8b2      	bhi.n	800a4ae <_scanf_float+0x8a>
 800a548:	2b54      	cmp	r3, #84	; 0x54
 800a54a:	d077      	beq.n	800a63c <_scanf_float+0x218>
 800a54c:	2b59      	cmp	r3, #89	; 0x59
 800a54e:	d199      	bne.n	800a484 <_scanf_float+0x60>
 800a550:	2d07      	cmp	r5, #7
 800a552:	d197      	bne.n	800a484 <_scanf_float+0x60>
 800a554:	2508      	movs	r5, #8
 800a556:	e029      	b.n	800a5ac <_scanf_float+0x188>
 800a558:	2b74      	cmp	r3, #116	; 0x74
 800a55a:	d06f      	beq.n	800a63c <_scanf_float+0x218>
 800a55c:	2b79      	cmp	r3, #121	; 0x79
 800a55e:	e7f6      	b.n	800a54e <_scanf_float+0x12a>
 800a560:	6821      	ldr	r1, [r4, #0]
 800a562:	05c8      	lsls	r0, r1, #23
 800a564:	d51a      	bpl.n	800a59c <_scanf_float+0x178>
 800a566:	9b02      	ldr	r3, [sp, #8]
 800a568:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a56c:	6021      	str	r1, [r4, #0]
 800a56e:	f109 0901 	add.w	r9, r9, #1
 800a572:	b11b      	cbz	r3, 800a57c <_scanf_float+0x158>
 800a574:	3b01      	subs	r3, #1
 800a576:	3201      	adds	r2, #1
 800a578:	9302      	str	r3, [sp, #8]
 800a57a:	60a2      	str	r2, [r4, #8]
 800a57c:	68a3      	ldr	r3, [r4, #8]
 800a57e:	3b01      	subs	r3, #1
 800a580:	60a3      	str	r3, [r4, #8]
 800a582:	6923      	ldr	r3, [r4, #16]
 800a584:	3301      	adds	r3, #1
 800a586:	6123      	str	r3, [r4, #16]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	3b01      	subs	r3, #1
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	607b      	str	r3, [r7, #4]
 800a590:	f340 8084 	ble.w	800a69c <_scanf_float+0x278>
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	3301      	adds	r3, #1
 800a598:	603b      	str	r3, [r7, #0]
 800a59a:	e766      	b.n	800a46a <_scanf_float+0x46>
 800a59c:	eb1a 0f05 	cmn.w	sl, r5
 800a5a0:	f47f af70 	bne.w	800a484 <_scanf_float+0x60>
 800a5a4:	6822      	ldr	r2, [r4, #0]
 800a5a6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a5aa:	6022      	str	r2, [r4, #0]
 800a5ac:	f806 3b01 	strb.w	r3, [r6], #1
 800a5b0:	e7e4      	b.n	800a57c <_scanf_float+0x158>
 800a5b2:	6822      	ldr	r2, [r4, #0]
 800a5b4:	0610      	lsls	r0, r2, #24
 800a5b6:	f57f af65 	bpl.w	800a484 <_scanf_float+0x60>
 800a5ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a5be:	e7f4      	b.n	800a5aa <_scanf_float+0x186>
 800a5c0:	f1ba 0f00 	cmp.w	sl, #0
 800a5c4:	d10e      	bne.n	800a5e4 <_scanf_float+0x1c0>
 800a5c6:	f1b9 0f00 	cmp.w	r9, #0
 800a5ca:	d10e      	bne.n	800a5ea <_scanf_float+0x1c6>
 800a5cc:	6822      	ldr	r2, [r4, #0]
 800a5ce:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a5d2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a5d6:	d108      	bne.n	800a5ea <_scanf_float+0x1c6>
 800a5d8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a5dc:	6022      	str	r2, [r4, #0]
 800a5de:	f04f 0a01 	mov.w	sl, #1
 800a5e2:	e7e3      	b.n	800a5ac <_scanf_float+0x188>
 800a5e4:	f1ba 0f02 	cmp.w	sl, #2
 800a5e8:	d055      	beq.n	800a696 <_scanf_float+0x272>
 800a5ea:	2d01      	cmp	r5, #1
 800a5ec:	d002      	beq.n	800a5f4 <_scanf_float+0x1d0>
 800a5ee:	2d04      	cmp	r5, #4
 800a5f0:	f47f af48 	bne.w	800a484 <_scanf_float+0x60>
 800a5f4:	3501      	adds	r5, #1
 800a5f6:	b2ed      	uxtb	r5, r5
 800a5f8:	e7d8      	b.n	800a5ac <_scanf_float+0x188>
 800a5fa:	f1ba 0f01 	cmp.w	sl, #1
 800a5fe:	f47f af41 	bne.w	800a484 <_scanf_float+0x60>
 800a602:	f04f 0a02 	mov.w	sl, #2
 800a606:	e7d1      	b.n	800a5ac <_scanf_float+0x188>
 800a608:	b97d      	cbnz	r5, 800a62a <_scanf_float+0x206>
 800a60a:	f1b9 0f00 	cmp.w	r9, #0
 800a60e:	f47f af3c 	bne.w	800a48a <_scanf_float+0x66>
 800a612:	6822      	ldr	r2, [r4, #0]
 800a614:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a618:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a61c:	f47f af39 	bne.w	800a492 <_scanf_float+0x6e>
 800a620:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a624:	6022      	str	r2, [r4, #0]
 800a626:	2501      	movs	r5, #1
 800a628:	e7c0      	b.n	800a5ac <_scanf_float+0x188>
 800a62a:	2d03      	cmp	r5, #3
 800a62c:	d0e2      	beq.n	800a5f4 <_scanf_float+0x1d0>
 800a62e:	2d05      	cmp	r5, #5
 800a630:	e7de      	b.n	800a5f0 <_scanf_float+0x1cc>
 800a632:	2d02      	cmp	r5, #2
 800a634:	f47f af26 	bne.w	800a484 <_scanf_float+0x60>
 800a638:	2503      	movs	r5, #3
 800a63a:	e7b7      	b.n	800a5ac <_scanf_float+0x188>
 800a63c:	2d06      	cmp	r5, #6
 800a63e:	f47f af21 	bne.w	800a484 <_scanf_float+0x60>
 800a642:	2507      	movs	r5, #7
 800a644:	e7b2      	b.n	800a5ac <_scanf_float+0x188>
 800a646:	6822      	ldr	r2, [r4, #0]
 800a648:	0591      	lsls	r1, r2, #22
 800a64a:	f57f af1b 	bpl.w	800a484 <_scanf_float+0x60>
 800a64e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a652:	6022      	str	r2, [r4, #0]
 800a654:	f8cd 9004 	str.w	r9, [sp, #4]
 800a658:	e7a8      	b.n	800a5ac <_scanf_float+0x188>
 800a65a:	6822      	ldr	r2, [r4, #0]
 800a65c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a660:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a664:	d006      	beq.n	800a674 <_scanf_float+0x250>
 800a666:	0550      	lsls	r0, r2, #21
 800a668:	f57f af0c 	bpl.w	800a484 <_scanf_float+0x60>
 800a66c:	f1b9 0f00 	cmp.w	r9, #0
 800a670:	f43f af0f 	beq.w	800a492 <_scanf_float+0x6e>
 800a674:	0591      	lsls	r1, r2, #22
 800a676:	bf58      	it	pl
 800a678:	9901      	ldrpl	r1, [sp, #4]
 800a67a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a67e:	bf58      	it	pl
 800a680:	eba9 0101 	subpl.w	r1, r9, r1
 800a684:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a688:	bf58      	it	pl
 800a68a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a68e:	6022      	str	r2, [r4, #0]
 800a690:	f04f 0900 	mov.w	r9, #0
 800a694:	e78a      	b.n	800a5ac <_scanf_float+0x188>
 800a696:	f04f 0a03 	mov.w	sl, #3
 800a69a:	e787      	b.n	800a5ac <_scanf_float+0x188>
 800a69c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a6a0:	4639      	mov	r1, r7
 800a6a2:	4640      	mov	r0, r8
 800a6a4:	4798      	blx	r3
 800a6a6:	2800      	cmp	r0, #0
 800a6a8:	f43f aedf 	beq.w	800a46a <_scanf_float+0x46>
 800a6ac:	e6ea      	b.n	800a484 <_scanf_float+0x60>
 800a6ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a6b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a6b6:	463a      	mov	r2, r7
 800a6b8:	4640      	mov	r0, r8
 800a6ba:	4798      	blx	r3
 800a6bc:	6923      	ldr	r3, [r4, #16]
 800a6be:	3b01      	subs	r3, #1
 800a6c0:	6123      	str	r3, [r4, #16]
 800a6c2:	e6ec      	b.n	800a49e <_scanf_float+0x7a>
 800a6c4:	1e6b      	subs	r3, r5, #1
 800a6c6:	2b06      	cmp	r3, #6
 800a6c8:	d825      	bhi.n	800a716 <_scanf_float+0x2f2>
 800a6ca:	2d02      	cmp	r5, #2
 800a6cc:	d836      	bhi.n	800a73c <_scanf_float+0x318>
 800a6ce:	455e      	cmp	r6, fp
 800a6d0:	f67f aee8 	bls.w	800a4a4 <_scanf_float+0x80>
 800a6d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a6d8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a6dc:	463a      	mov	r2, r7
 800a6de:	4640      	mov	r0, r8
 800a6e0:	4798      	blx	r3
 800a6e2:	6923      	ldr	r3, [r4, #16]
 800a6e4:	3b01      	subs	r3, #1
 800a6e6:	6123      	str	r3, [r4, #16]
 800a6e8:	e7f1      	b.n	800a6ce <_scanf_float+0x2aa>
 800a6ea:	9802      	ldr	r0, [sp, #8]
 800a6ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a6f0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a6f4:	9002      	str	r0, [sp, #8]
 800a6f6:	463a      	mov	r2, r7
 800a6f8:	4640      	mov	r0, r8
 800a6fa:	4798      	blx	r3
 800a6fc:	6923      	ldr	r3, [r4, #16]
 800a6fe:	3b01      	subs	r3, #1
 800a700:	6123      	str	r3, [r4, #16]
 800a702:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a706:	fa5f fa8a 	uxtb.w	sl, sl
 800a70a:	f1ba 0f02 	cmp.w	sl, #2
 800a70e:	d1ec      	bne.n	800a6ea <_scanf_float+0x2c6>
 800a710:	3d03      	subs	r5, #3
 800a712:	b2ed      	uxtb	r5, r5
 800a714:	1b76      	subs	r6, r6, r5
 800a716:	6823      	ldr	r3, [r4, #0]
 800a718:	05da      	lsls	r2, r3, #23
 800a71a:	d52f      	bpl.n	800a77c <_scanf_float+0x358>
 800a71c:	055b      	lsls	r3, r3, #21
 800a71e:	d510      	bpl.n	800a742 <_scanf_float+0x31e>
 800a720:	455e      	cmp	r6, fp
 800a722:	f67f aebf 	bls.w	800a4a4 <_scanf_float+0x80>
 800a726:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a72a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a72e:	463a      	mov	r2, r7
 800a730:	4640      	mov	r0, r8
 800a732:	4798      	blx	r3
 800a734:	6923      	ldr	r3, [r4, #16]
 800a736:	3b01      	subs	r3, #1
 800a738:	6123      	str	r3, [r4, #16]
 800a73a:	e7f1      	b.n	800a720 <_scanf_float+0x2fc>
 800a73c:	46aa      	mov	sl, r5
 800a73e:	9602      	str	r6, [sp, #8]
 800a740:	e7df      	b.n	800a702 <_scanf_float+0x2de>
 800a742:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a746:	6923      	ldr	r3, [r4, #16]
 800a748:	2965      	cmp	r1, #101	; 0x65
 800a74a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a74e:	f106 35ff 	add.w	r5, r6, #4294967295
 800a752:	6123      	str	r3, [r4, #16]
 800a754:	d00c      	beq.n	800a770 <_scanf_float+0x34c>
 800a756:	2945      	cmp	r1, #69	; 0x45
 800a758:	d00a      	beq.n	800a770 <_scanf_float+0x34c>
 800a75a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a75e:	463a      	mov	r2, r7
 800a760:	4640      	mov	r0, r8
 800a762:	4798      	blx	r3
 800a764:	6923      	ldr	r3, [r4, #16]
 800a766:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a76a:	3b01      	subs	r3, #1
 800a76c:	1eb5      	subs	r5, r6, #2
 800a76e:	6123      	str	r3, [r4, #16]
 800a770:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a774:	463a      	mov	r2, r7
 800a776:	4640      	mov	r0, r8
 800a778:	4798      	blx	r3
 800a77a:	462e      	mov	r6, r5
 800a77c:	6825      	ldr	r5, [r4, #0]
 800a77e:	f015 0510 	ands.w	r5, r5, #16
 800a782:	d159      	bne.n	800a838 <_scanf_float+0x414>
 800a784:	7035      	strb	r5, [r6, #0]
 800a786:	6823      	ldr	r3, [r4, #0]
 800a788:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a78c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a790:	d11b      	bne.n	800a7ca <_scanf_float+0x3a6>
 800a792:	9b01      	ldr	r3, [sp, #4]
 800a794:	454b      	cmp	r3, r9
 800a796:	eba3 0209 	sub.w	r2, r3, r9
 800a79a:	d123      	bne.n	800a7e4 <_scanf_float+0x3c0>
 800a79c:	2200      	movs	r2, #0
 800a79e:	4659      	mov	r1, fp
 800a7a0:	4640      	mov	r0, r8
 800a7a2:	f000 fe97 	bl	800b4d4 <_strtod_r>
 800a7a6:	6822      	ldr	r2, [r4, #0]
 800a7a8:	9b03      	ldr	r3, [sp, #12]
 800a7aa:	f012 0f02 	tst.w	r2, #2
 800a7ae:	ec57 6b10 	vmov	r6, r7, d0
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	d021      	beq.n	800a7fa <_scanf_float+0x3d6>
 800a7b6:	9903      	ldr	r1, [sp, #12]
 800a7b8:	1d1a      	adds	r2, r3, #4
 800a7ba:	600a      	str	r2, [r1, #0]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	e9c3 6700 	strd	r6, r7, [r3]
 800a7c2:	68e3      	ldr	r3, [r4, #12]
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	60e3      	str	r3, [r4, #12]
 800a7c8:	e66d      	b.n	800a4a6 <_scanf_float+0x82>
 800a7ca:	9b04      	ldr	r3, [sp, #16]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d0e5      	beq.n	800a79c <_scanf_float+0x378>
 800a7d0:	9905      	ldr	r1, [sp, #20]
 800a7d2:	230a      	movs	r3, #10
 800a7d4:	462a      	mov	r2, r5
 800a7d6:	3101      	adds	r1, #1
 800a7d8:	4640      	mov	r0, r8
 800a7da:	f000 ff03 	bl	800b5e4 <_strtol_r>
 800a7de:	9b04      	ldr	r3, [sp, #16]
 800a7e0:	9e05      	ldr	r6, [sp, #20]
 800a7e2:	1ac2      	subs	r2, r0, r3
 800a7e4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a7e8:	429e      	cmp	r6, r3
 800a7ea:	bf28      	it	cs
 800a7ec:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a7f0:	4912      	ldr	r1, [pc, #72]	; (800a83c <_scanf_float+0x418>)
 800a7f2:	4630      	mov	r0, r6
 800a7f4:	f000 f82c 	bl	800a850 <siprintf>
 800a7f8:	e7d0      	b.n	800a79c <_scanf_float+0x378>
 800a7fa:	9903      	ldr	r1, [sp, #12]
 800a7fc:	f012 0f04 	tst.w	r2, #4
 800a800:	f103 0204 	add.w	r2, r3, #4
 800a804:	600a      	str	r2, [r1, #0]
 800a806:	d1d9      	bne.n	800a7bc <_scanf_float+0x398>
 800a808:	f8d3 8000 	ldr.w	r8, [r3]
 800a80c:	ee10 2a10 	vmov	r2, s0
 800a810:	ee10 0a10 	vmov	r0, s0
 800a814:	463b      	mov	r3, r7
 800a816:	4639      	mov	r1, r7
 800a818:	f7f6 f988 	bl	8000b2c <__aeabi_dcmpun>
 800a81c:	b128      	cbz	r0, 800a82a <_scanf_float+0x406>
 800a81e:	4808      	ldr	r0, [pc, #32]	; (800a840 <_scanf_float+0x41c>)
 800a820:	f000 f810 	bl	800a844 <nanf>
 800a824:	ed88 0a00 	vstr	s0, [r8]
 800a828:	e7cb      	b.n	800a7c2 <_scanf_float+0x39e>
 800a82a:	4630      	mov	r0, r6
 800a82c:	4639      	mov	r1, r7
 800a82e:	f7f6 f9db 	bl	8000be8 <__aeabi_d2f>
 800a832:	f8c8 0000 	str.w	r0, [r8]
 800a836:	e7c4      	b.n	800a7c2 <_scanf_float+0x39e>
 800a838:	2500      	movs	r5, #0
 800a83a:	e634      	b.n	800a4a6 <_scanf_float+0x82>
 800a83c:	0800ef38 	.word	0x0800ef38
 800a840:	0800f340 	.word	0x0800f340

0800a844 <nanf>:
 800a844:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a84c <nanf+0x8>
 800a848:	4770      	bx	lr
 800a84a:	bf00      	nop
 800a84c:	7fc00000 	.word	0x7fc00000

0800a850 <siprintf>:
 800a850:	b40e      	push	{r1, r2, r3}
 800a852:	b500      	push	{lr}
 800a854:	b09c      	sub	sp, #112	; 0x70
 800a856:	ab1d      	add	r3, sp, #116	; 0x74
 800a858:	9002      	str	r0, [sp, #8]
 800a85a:	9006      	str	r0, [sp, #24]
 800a85c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a860:	4809      	ldr	r0, [pc, #36]	; (800a888 <siprintf+0x38>)
 800a862:	9107      	str	r1, [sp, #28]
 800a864:	9104      	str	r1, [sp, #16]
 800a866:	4909      	ldr	r1, [pc, #36]	; (800a88c <siprintf+0x3c>)
 800a868:	f853 2b04 	ldr.w	r2, [r3], #4
 800a86c:	9105      	str	r1, [sp, #20]
 800a86e:	6800      	ldr	r0, [r0, #0]
 800a870:	9301      	str	r3, [sp, #4]
 800a872:	a902      	add	r1, sp, #8
 800a874:	f002 fee2 	bl	800d63c <_svfiprintf_r>
 800a878:	9b02      	ldr	r3, [sp, #8]
 800a87a:	2200      	movs	r2, #0
 800a87c:	701a      	strb	r2, [r3, #0]
 800a87e:	b01c      	add	sp, #112	; 0x70
 800a880:	f85d eb04 	ldr.w	lr, [sp], #4
 800a884:	b003      	add	sp, #12
 800a886:	4770      	bx	lr
 800a888:	2000028c 	.word	0x2000028c
 800a88c:	ffff0208 	.word	0xffff0208

0800a890 <sulp>:
 800a890:	b570      	push	{r4, r5, r6, lr}
 800a892:	4604      	mov	r4, r0
 800a894:	460d      	mov	r5, r1
 800a896:	ec45 4b10 	vmov	d0, r4, r5
 800a89a:	4616      	mov	r6, r2
 800a89c:	f002 fc2c 	bl	800d0f8 <__ulp>
 800a8a0:	ec51 0b10 	vmov	r0, r1, d0
 800a8a4:	b17e      	cbz	r6, 800a8c6 <sulp+0x36>
 800a8a6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a8aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	dd09      	ble.n	800a8c6 <sulp+0x36>
 800a8b2:	051b      	lsls	r3, r3, #20
 800a8b4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a8b8:	2400      	movs	r4, #0
 800a8ba:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a8be:	4622      	mov	r2, r4
 800a8c0:	462b      	mov	r3, r5
 800a8c2:	f7f5 fe99 	bl	80005f8 <__aeabi_dmul>
 800a8c6:	bd70      	pop	{r4, r5, r6, pc}

0800a8c8 <_strtod_l>:
 800a8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8cc:	ed2d 8b02 	vpush	{d8}
 800a8d0:	b09d      	sub	sp, #116	; 0x74
 800a8d2:	461f      	mov	r7, r3
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	9318      	str	r3, [sp, #96]	; 0x60
 800a8d8:	4ba2      	ldr	r3, [pc, #648]	; (800ab64 <_strtod_l+0x29c>)
 800a8da:	9213      	str	r2, [sp, #76]	; 0x4c
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	9305      	str	r3, [sp, #20]
 800a8e0:	4604      	mov	r4, r0
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	4688      	mov	r8, r1
 800a8e6:	f7f5 fc73 	bl	80001d0 <strlen>
 800a8ea:	f04f 0a00 	mov.w	sl, #0
 800a8ee:	4605      	mov	r5, r0
 800a8f0:	f04f 0b00 	mov.w	fp, #0
 800a8f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a8f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a8fa:	781a      	ldrb	r2, [r3, #0]
 800a8fc:	2a2b      	cmp	r2, #43	; 0x2b
 800a8fe:	d04e      	beq.n	800a99e <_strtod_l+0xd6>
 800a900:	d83b      	bhi.n	800a97a <_strtod_l+0xb2>
 800a902:	2a0d      	cmp	r2, #13
 800a904:	d834      	bhi.n	800a970 <_strtod_l+0xa8>
 800a906:	2a08      	cmp	r2, #8
 800a908:	d834      	bhi.n	800a974 <_strtod_l+0xac>
 800a90a:	2a00      	cmp	r2, #0
 800a90c:	d03e      	beq.n	800a98c <_strtod_l+0xc4>
 800a90e:	2300      	movs	r3, #0
 800a910:	930a      	str	r3, [sp, #40]	; 0x28
 800a912:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a914:	7833      	ldrb	r3, [r6, #0]
 800a916:	2b30      	cmp	r3, #48	; 0x30
 800a918:	f040 80b0 	bne.w	800aa7c <_strtod_l+0x1b4>
 800a91c:	7873      	ldrb	r3, [r6, #1]
 800a91e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a922:	2b58      	cmp	r3, #88	; 0x58
 800a924:	d168      	bne.n	800a9f8 <_strtod_l+0x130>
 800a926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a928:	9301      	str	r3, [sp, #4]
 800a92a:	ab18      	add	r3, sp, #96	; 0x60
 800a92c:	9702      	str	r7, [sp, #8]
 800a92e:	9300      	str	r3, [sp, #0]
 800a930:	4a8d      	ldr	r2, [pc, #564]	; (800ab68 <_strtod_l+0x2a0>)
 800a932:	ab19      	add	r3, sp, #100	; 0x64
 800a934:	a917      	add	r1, sp, #92	; 0x5c
 800a936:	4620      	mov	r0, r4
 800a938:	f001 fd38 	bl	800c3ac <__gethex>
 800a93c:	f010 0707 	ands.w	r7, r0, #7
 800a940:	4605      	mov	r5, r0
 800a942:	d005      	beq.n	800a950 <_strtod_l+0x88>
 800a944:	2f06      	cmp	r7, #6
 800a946:	d12c      	bne.n	800a9a2 <_strtod_l+0xda>
 800a948:	3601      	adds	r6, #1
 800a94a:	2300      	movs	r3, #0
 800a94c:	9617      	str	r6, [sp, #92]	; 0x5c
 800a94e:	930a      	str	r3, [sp, #40]	; 0x28
 800a950:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a952:	2b00      	cmp	r3, #0
 800a954:	f040 8590 	bne.w	800b478 <_strtod_l+0xbb0>
 800a958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a95a:	b1eb      	cbz	r3, 800a998 <_strtod_l+0xd0>
 800a95c:	4652      	mov	r2, sl
 800a95e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a962:	ec43 2b10 	vmov	d0, r2, r3
 800a966:	b01d      	add	sp, #116	; 0x74
 800a968:	ecbd 8b02 	vpop	{d8}
 800a96c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a970:	2a20      	cmp	r2, #32
 800a972:	d1cc      	bne.n	800a90e <_strtod_l+0x46>
 800a974:	3301      	adds	r3, #1
 800a976:	9317      	str	r3, [sp, #92]	; 0x5c
 800a978:	e7be      	b.n	800a8f8 <_strtod_l+0x30>
 800a97a:	2a2d      	cmp	r2, #45	; 0x2d
 800a97c:	d1c7      	bne.n	800a90e <_strtod_l+0x46>
 800a97e:	2201      	movs	r2, #1
 800a980:	920a      	str	r2, [sp, #40]	; 0x28
 800a982:	1c5a      	adds	r2, r3, #1
 800a984:	9217      	str	r2, [sp, #92]	; 0x5c
 800a986:	785b      	ldrb	r3, [r3, #1]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d1c2      	bne.n	800a912 <_strtod_l+0x4a>
 800a98c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a98e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a992:	2b00      	cmp	r3, #0
 800a994:	f040 856e 	bne.w	800b474 <_strtod_l+0xbac>
 800a998:	4652      	mov	r2, sl
 800a99a:	465b      	mov	r3, fp
 800a99c:	e7e1      	b.n	800a962 <_strtod_l+0x9a>
 800a99e:	2200      	movs	r2, #0
 800a9a0:	e7ee      	b.n	800a980 <_strtod_l+0xb8>
 800a9a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a9a4:	b13a      	cbz	r2, 800a9b6 <_strtod_l+0xee>
 800a9a6:	2135      	movs	r1, #53	; 0x35
 800a9a8:	a81a      	add	r0, sp, #104	; 0x68
 800a9aa:	f002 fcb0 	bl	800d30e <__copybits>
 800a9ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a9b0:	4620      	mov	r0, r4
 800a9b2:	f002 f86f 	bl	800ca94 <_Bfree>
 800a9b6:	3f01      	subs	r7, #1
 800a9b8:	2f04      	cmp	r7, #4
 800a9ba:	d806      	bhi.n	800a9ca <_strtod_l+0x102>
 800a9bc:	e8df f007 	tbb	[pc, r7]
 800a9c0:	1714030a 	.word	0x1714030a
 800a9c4:	0a          	.byte	0x0a
 800a9c5:	00          	.byte	0x00
 800a9c6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800a9ca:	0728      	lsls	r0, r5, #28
 800a9cc:	d5c0      	bpl.n	800a950 <_strtod_l+0x88>
 800a9ce:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a9d2:	e7bd      	b.n	800a950 <_strtod_l+0x88>
 800a9d4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800a9d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a9da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a9de:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a9e2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a9e6:	e7f0      	b.n	800a9ca <_strtod_l+0x102>
 800a9e8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800ab6c <_strtod_l+0x2a4>
 800a9ec:	e7ed      	b.n	800a9ca <_strtod_l+0x102>
 800a9ee:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a9f2:	f04f 3aff 	mov.w	sl, #4294967295
 800a9f6:	e7e8      	b.n	800a9ca <_strtod_l+0x102>
 800a9f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a9fa:	1c5a      	adds	r2, r3, #1
 800a9fc:	9217      	str	r2, [sp, #92]	; 0x5c
 800a9fe:	785b      	ldrb	r3, [r3, #1]
 800aa00:	2b30      	cmp	r3, #48	; 0x30
 800aa02:	d0f9      	beq.n	800a9f8 <_strtod_l+0x130>
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d0a3      	beq.n	800a950 <_strtod_l+0x88>
 800aa08:	2301      	movs	r3, #1
 800aa0a:	f04f 0900 	mov.w	r9, #0
 800aa0e:	9304      	str	r3, [sp, #16]
 800aa10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aa12:	9308      	str	r3, [sp, #32]
 800aa14:	f8cd 901c 	str.w	r9, [sp, #28]
 800aa18:	464f      	mov	r7, r9
 800aa1a:	220a      	movs	r2, #10
 800aa1c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800aa1e:	7806      	ldrb	r6, [r0, #0]
 800aa20:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800aa24:	b2d9      	uxtb	r1, r3
 800aa26:	2909      	cmp	r1, #9
 800aa28:	d92a      	bls.n	800aa80 <_strtod_l+0x1b8>
 800aa2a:	9905      	ldr	r1, [sp, #20]
 800aa2c:	462a      	mov	r2, r5
 800aa2e:	f002 ff1f 	bl	800d870 <strncmp>
 800aa32:	b398      	cbz	r0, 800aa9c <_strtod_l+0x1d4>
 800aa34:	2000      	movs	r0, #0
 800aa36:	4632      	mov	r2, r6
 800aa38:	463d      	mov	r5, r7
 800aa3a:	9005      	str	r0, [sp, #20]
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	2a65      	cmp	r2, #101	; 0x65
 800aa40:	d001      	beq.n	800aa46 <_strtod_l+0x17e>
 800aa42:	2a45      	cmp	r2, #69	; 0x45
 800aa44:	d118      	bne.n	800aa78 <_strtod_l+0x1b0>
 800aa46:	b91d      	cbnz	r5, 800aa50 <_strtod_l+0x188>
 800aa48:	9a04      	ldr	r2, [sp, #16]
 800aa4a:	4302      	orrs	r2, r0
 800aa4c:	d09e      	beq.n	800a98c <_strtod_l+0xc4>
 800aa4e:	2500      	movs	r5, #0
 800aa50:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800aa54:	f108 0201 	add.w	r2, r8, #1
 800aa58:	9217      	str	r2, [sp, #92]	; 0x5c
 800aa5a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800aa5e:	2a2b      	cmp	r2, #43	; 0x2b
 800aa60:	d075      	beq.n	800ab4e <_strtod_l+0x286>
 800aa62:	2a2d      	cmp	r2, #45	; 0x2d
 800aa64:	d07b      	beq.n	800ab5e <_strtod_l+0x296>
 800aa66:	f04f 0c00 	mov.w	ip, #0
 800aa6a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800aa6e:	2909      	cmp	r1, #9
 800aa70:	f240 8082 	bls.w	800ab78 <_strtod_l+0x2b0>
 800aa74:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800aa78:	2600      	movs	r6, #0
 800aa7a:	e09d      	b.n	800abb8 <_strtod_l+0x2f0>
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	e7c4      	b.n	800aa0a <_strtod_l+0x142>
 800aa80:	2f08      	cmp	r7, #8
 800aa82:	bfd8      	it	le
 800aa84:	9907      	ldrle	r1, [sp, #28]
 800aa86:	f100 0001 	add.w	r0, r0, #1
 800aa8a:	bfda      	itte	le
 800aa8c:	fb02 3301 	mlale	r3, r2, r1, r3
 800aa90:	9307      	strle	r3, [sp, #28]
 800aa92:	fb02 3909 	mlagt	r9, r2, r9, r3
 800aa96:	3701      	adds	r7, #1
 800aa98:	9017      	str	r0, [sp, #92]	; 0x5c
 800aa9a:	e7bf      	b.n	800aa1c <_strtod_l+0x154>
 800aa9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aa9e:	195a      	adds	r2, r3, r5
 800aaa0:	9217      	str	r2, [sp, #92]	; 0x5c
 800aaa2:	5d5a      	ldrb	r2, [r3, r5]
 800aaa4:	2f00      	cmp	r7, #0
 800aaa6:	d037      	beq.n	800ab18 <_strtod_l+0x250>
 800aaa8:	9005      	str	r0, [sp, #20]
 800aaaa:	463d      	mov	r5, r7
 800aaac:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800aab0:	2b09      	cmp	r3, #9
 800aab2:	d912      	bls.n	800aada <_strtod_l+0x212>
 800aab4:	2301      	movs	r3, #1
 800aab6:	e7c2      	b.n	800aa3e <_strtod_l+0x176>
 800aab8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aaba:	1c5a      	adds	r2, r3, #1
 800aabc:	9217      	str	r2, [sp, #92]	; 0x5c
 800aabe:	785a      	ldrb	r2, [r3, #1]
 800aac0:	3001      	adds	r0, #1
 800aac2:	2a30      	cmp	r2, #48	; 0x30
 800aac4:	d0f8      	beq.n	800aab8 <_strtod_l+0x1f0>
 800aac6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800aaca:	2b08      	cmp	r3, #8
 800aacc:	f200 84d9 	bhi.w	800b482 <_strtod_l+0xbba>
 800aad0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aad2:	9005      	str	r0, [sp, #20]
 800aad4:	2000      	movs	r0, #0
 800aad6:	9308      	str	r3, [sp, #32]
 800aad8:	4605      	mov	r5, r0
 800aada:	3a30      	subs	r2, #48	; 0x30
 800aadc:	f100 0301 	add.w	r3, r0, #1
 800aae0:	d014      	beq.n	800ab0c <_strtod_l+0x244>
 800aae2:	9905      	ldr	r1, [sp, #20]
 800aae4:	4419      	add	r1, r3
 800aae6:	9105      	str	r1, [sp, #20]
 800aae8:	462b      	mov	r3, r5
 800aaea:	eb00 0e05 	add.w	lr, r0, r5
 800aaee:	210a      	movs	r1, #10
 800aaf0:	4573      	cmp	r3, lr
 800aaf2:	d113      	bne.n	800ab1c <_strtod_l+0x254>
 800aaf4:	182b      	adds	r3, r5, r0
 800aaf6:	2b08      	cmp	r3, #8
 800aaf8:	f105 0501 	add.w	r5, r5, #1
 800aafc:	4405      	add	r5, r0
 800aafe:	dc1c      	bgt.n	800ab3a <_strtod_l+0x272>
 800ab00:	9907      	ldr	r1, [sp, #28]
 800ab02:	230a      	movs	r3, #10
 800ab04:	fb03 2301 	mla	r3, r3, r1, r2
 800ab08:	9307      	str	r3, [sp, #28]
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ab0e:	1c51      	adds	r1, r2, #1
 800ab10:	9117      	str	r1, [sp, #92]	; 0x5c
 800ab12:	7852      	ldrb	r2, [r2, #1]
 800ab14:	4618      	mov	r0, r3
 800ab16:	e7c9      	b.n	800aaac <_strtod_l+0x1e4>
 800ab18:	4638      	mov	r0, r7
 800ab1a:	e7d2      	b.n	800aac2 <_strtod_l+0x1fa>
 800ab1c:	2b08      	cmp	r3, #8
 800ab1e:	dc04      	bgt.n	800ab2a <_strtod_l+0x262>
 800ab20:	9e07      	ldr	r6, [sp, #28]
 800ab22:	434e      	muls	r6, r1
 800ab24:	9607      	str	r6, [sp, #28]
 800ab26:	3301      	adds	r3, #1
 800ab28:	e7e2      	b.n	800aaf0 <_strtod_l+0x228>
 800ab2a:	f103 0c01 	add.w	ip, r3, #1
 800ab2e:	f1bc 0f10 	cmp.w	ip, #16
 800ab32:	bfd8      	it	le
 800ab34:	fb01 f909 	mulle.w	r9, r1, r9
 800ab38:	e7f5      	b.n	800ab26 <_strtod_l+0x25e>
 800ab3a:	2d10      	cmp	r5, #16
 800ab3c:	bfdc      	itt	le
 800ab3e:	230a      	movle	r3, #10
 800ab40:	fb03 2909 	mlale	r9, r3, r9, r2
 800ab44:	e7e1      	b.n	800ab0a <_strtod_l+0x242>
 800ab46:	2300      	movs	r3, #0
 800ab48:	9305      	str	r3, [sp, #20]
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	e77c      	b.n	800aa48 <_strtod_l+0x180>
 800ab4e:	f04f 0c00 	mov.w	ip, #0
 800ab52:	f108 0202 	add.w	r2, r8, #2
 800ab56:	9217      	str	r2, [sp, #92]	; 0x5c
 800ab58:	f898 2002 	ldrb.w	r2, [r8, #2]
 800ab5c:	e785      	b.n	800aa6a <_strtod_l+0x1a2>
 800ab5e:	f04f 0c01 	mov.w	ip, #1
 800ab62:	e7f6      	b.n	800ab52 <_strtod_l+0x28a>
 800ab64:	0800f188 	.word	0x0800f188
 800ab68:	0800ef40 	.word	0x0800ef40
 800ab6c:	7ff00000 	.word	0x7ff00000
 800ab70:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ab72:	1c51      	adds	r1, r2, #1
 800ab74:	9117      	str	r1, [sp, #92]	; 0x5c
 800ab76:	7852      	ldrb	r2, [r2, #1]
 800ab78:	2a30      	cmp	r2, #48	; 0x30
 800ab7a:	d0f9      	beq.n	800ab70 <_strtod_l+0x2a8>
 800ab7c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ab80:	2908      	cmp	r1, #8
 800ab82:	f63f af79 	bhi.w	800aa78 <_strtod_l+0x1b0>
 800ab86:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ab8a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ab8c:	9206      	str	r2, [sp, #24]
 800ab8e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ab90:	1c51      	adds	r1, r2, #1
 800ab92:	9117      	str	r1, [sp, #92]	; 0x5c
 800ab94:	7852      	ldrb	r2, [r2, #1]
 800ab96:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800ab9a:	2e09      	cmp	r6, #9
 800ab9c:	d937      	bls.n	800ac0e <_strtod_l+0x346>
 800ab9e:	9e06      	ldr	r6, [sp, #24]
 800aba0:	1b89      	subs	r1, r1, r6
 800aba2:	2908      	cmp	r1, #8
 800aba4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800aba8:	dc02      	bgt.n	800abb0 <_strtod_l+0x2e8>
 800abaa:	4576      	cmp	r6, lr
 800abac:	bfa8      	it	ge
 800abae:	4676      	movge	r6, lr
 800abb0:	f1bc 0f00 	cmp.w	ip, #0
 800abb4:	d000      	beq.n	800abb8 <_strtod_l+0x2f0>
 800abb6:	4276      	negs	r6, r6
 800abb8:	2d00      	cmp	r5, #0
 800abba:	d14d      	bne.n	800ac58 <_strtod_l+0x390>
 800abbc:	9904      	ldr	r1, [sp, #16]
 800abbe:	4301      	orrs	r1, r0
 800abc0:	f47f aec6 	bne.w	800a950 <_strtod_l+0x88>
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	f47f aee1 	bne.w	800a98c <_strtod_l+0xc4>
 800abca:	2a69      	cmp	r2, #105	; 0x69
 800abcc:	d027      	beq.n	800ac1e <_strtod_l+0x356>
 800abce:	dc24      	bgt.n	800ac1a <_strtod_l+0x352>
 800abd0:	2a49      	cmp	r2, #73	; 0x49
 800abd2:	d024      	beq.n	800ac1e <_strtod_l+0x356>
 800abd4:	2a4e      	cmp	r2, #78	; 0x4e
 800abd6:	f47f aed9 	bne.w	800a98c <_strtod_l+0xc4>
 800abda:	499f      	ldr	r1, [pc, #636]	; (800ae58 <_strtod_l+0x590>)
 800abdc:	a817      	add	r0, sp, #92	; 0x5c
 800abde:	f001 fe3d 	bl	800c85c <__match>
 800abe2:	2800      	cmp	r0, #0
 800abe4:	f43f aed2 	beq.w	800a98c <_strtod_l+0xc4>
 800abe8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800abea:	781b      	ldrb	r3, [r3, #0]
 800abec:	2b28      	cmp	r3, #40	; 0x28
 800abee:	d12d      	bne.n	800ac4c <_strtod_l+0x384>
 800abf0:	499a      	ldr	r1, [pc, #616]	; (800ae5c <_strtod_l+0x594>)
 800abf2:	aa1a      	add	r2, sp, #104	; 0x68
 800abf4:	a817      	add	r0, sp, #92	; 0x5c
 800abf6:	f001 fe45 	bl	800c884 <__hexnan>
 800abfa:	2805      	cmp	r0, #5
 800abfc:	d126      	bne.n	800ac4c <_strtod_l+0x384>
 800abfe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ac00:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800ac04:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ac08:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ac0c:	e6a0      	b.n	800a950 <_strtod_l+0x88>
 800ac0e:	210a      	movs	r1, #10
 800ac10:	fb01 2e0e 	mla	lr, r1, lr, r2
 800ac14:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ac18:	e7b9      	b.n	800ab8e <_strtod_l+0x2c6>
 800ac1a:	2a6e      	cmp	r2, #110	; 0x6e
 800ac1c:	e7db      	b.n	800abd6 <_strtod_l+0x30e>
 800ac1e:	4990      	ldr	r1, [pc, #576]	; (800ae60 <_strtod_l+0x598>)
 800ac20:	a817      	add	r0, sp, #92	; 0x5c
 800ac22:	f001 fe1b 	bl	800c85c <__match>
 800ac26:	2800      	cmp	r0, #0
 800ac28:	f43f aeb0 	beq.w	800a98c <_strtod_l+0xc4>
 800ac2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac2e:	498d      	ldr	r1, [pc, #564]	; (800ae64 <_strtod_l+0x59c>)
 800ac30:	3b01      	subs	r3, #1
 800ac32:	a817      	add	r0, sp, #92	; 0x5c
 800ac34:	9317      	str	r3, [sp, #92]	; 0x5c
 800ac36:	f001 fe11 	bl	800c85c <__match>
 800ac3a:	b910      	cbnz	r0, 800ac42 <_strtod_l+0x37a>
 800ac3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac3e:	3301      	adds	r3, #1
 800ac40:	9317      	str	r3, [sp, #92]	; 0x5c
 800ac42:	f8df b230 	ldr.w	fp, [pc, #560]	; 800ae74 <_strtod_l+0x5ac>
 800ac46:	f04f 0a00 	mov.w	sl, #0
 800ac4a:	e681      	b.n	800a950 <_strtod_l+0x88>
 800ac4c:	4886      	ldr	r0, [pc, #536]	; (800ae68 <_strtod_l+0x5a0>)
 800ac4e:	f002 fdf7 	bl	800d840 <nan>
 800ac52:	ec5b ab10 	vmov	sl, fp, d0
 800ac56:	e67b      	b.n	800a950 <_strtod_l+0x88>
 800ac58:	9b05      	ldr	r3, [sp, #20]
 800ac5a:	9807      	ldr	r0, [sp, #28]
 800ac5c:	1af3      	subs	r3, r6, r3
 800ac5e:	2f00      	cmp	r7, #0
 800ac60:	bf08      	it	eq
 800ac62:	462f      	moveq	r7, r5
 800ac64:	2d10      	cmp	r5, #16
 800ac66:	9306      	str	r3, [sp, #24]
 800ac68:	46a8      	mov	r8, r5
 800ac6a:	bfa8      	it	ge
 800ac6c:	f04f 0810 	movge.w	r8, #16
 800ac70:	f7f5 fc48 	bl	8000504 <__aeabi_ui2d>
 800ac74:	2d09      	cmp	r5, #9
 800ac76:	4682      	mov	sl, r0
 800ac78:	468b      	mov	fp, r1
 800ac7a:	dd13      	ble.n	800aca4 <_strtod_l+0x3dc>
 800ac7c:	4b7b      	ldr	r3, [pc, #492]	; (800ae6c <_strtod_l+0x5a4>)
 800ac7e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ac82:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ac86:	f7f5 fcb7 	bl	80005f8 <__aeabi_dmul>
 800ac8a:	4682      	mov	sl, r0
 800ac8c:	4648      	mov	r0, r9
 800ac8e:	468b      	mov	fp, r1
 800ac90:	f7f5 fc38 	bl	8000504 <__aeabi_ui2d>
 800ac94:	4602      	mov	r2, r0
 800ac96:	460b      	mov	r3, r1
 800ac98:	4650      	mov	r0, sl
 800ac9a:	4659      	mov	r1, fp
 800ac9c:	f7f5 faf6 	bl	800028c <__adddf3>
 800aca0:	4682      	mov	sl, r0
 800aca2:	468b      	mov	fp, r1
 800aca4:	2d0f      	cmp	r5, #15
 800aca6:	dc38      	bgt.n	800ad1a <_strtod_l+0x452>
 800aca8:	9b06      	ldr	r3, [sp, #24]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	f43f ae50 	beq.w	800a950 <_strtod_l+0x88>
 800acb0:	dd24      	ble.n	800acfc <_strtod_l+0x434>
 800acb2:	2b16      	cmp	r3, #22
 800acb4:	dc0b      	bgt.n	800acce <_strtod_l+0x406>
 800acb6:	496d      	ldr	r1, [pc, #436]	; (800ae6c <_strtod_l+0x5a4>)
 800acb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800acbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acc0:	4652      	mov	r2, sl
 800acc2:	465b      	mov	r3, fp
 800acc4:	f7f5 fc98 	bl	80005f8 <__aeabi_dmul>
 800acc8:	4682      	mov	sl, r0
 800acca:	468b      	mov	fp, r1
 800accc:	e640      	b.n	800a950 <_strtod_l+0x88>
 800acce:	9a06      	ldr	r2, [sp, #24]
 800acd0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800acd4:	4293      	cmp	r3, r2
 800acd6:	db20      	blt.n	800ad1a <_strtod_l+0x452>
 800acd8:	4c64      	ldr	r4, [pc, #400]	; (800ae6c <_strtod_l+0x5a4>)
 800acda:	f1c5 050f 	rsb	r5, r5, #15
 800acde:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ace2:	4652      	mov	r2, sl
 800ace4:	465b      	mov	r3, fp
 800ace6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acea:	f7f5 fc85 	bl	80005f8 <__aeabi_dmul>
 800acee:	9b06      	ldr	r3, [sp, #24]
 800acf0:	1b5d      	subs	r5, r3, r5
 800acf2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800acf6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800acfa:	e7e3      	b.n	800acc4 <_strtod_l+0x3fc>
 800acfc:	9b06      	ldr	r3, [sp, #24]
 800acfe:	3316      	adds	r3, #22
 800ad00:	db0b      	blt.n	800ad1a <_strtod_l+0x452>
 800ad02:	9b05      	ldr	r3, [sp, #20]
 800ad04:	1b9e      	subs	r6, r3, r6
 800ad06:	4b59      	ldr	r3, [pc, #356]	; (800ae6c <_strtod_l+0x5a4>)
 800ad08:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800ad0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ad10:	4650      	mov	r0, sl
 800ad12:	4659      	mov	r1, fp
 800ad14:	f7f5 fd9a 	bl	800084c <__aeabi_ddiv>
 800ad18:	e7d6      	b.n	800acc8 <_strtod_l+0x400>
 800ad1a:	9b06      	ldr	r3, [sp, #24]
 800ad1c:	eba5 0808 	sub.w	r8, r5, r8
 800ad20:	4498      	add	r8, r3
 800ad22:	f1b8 0f00 	cmp.w	r8, #0
 800ad26:	dd74      	ble.n	800ae12 <_strtod_l+0x54a>
 800ad28:	f018 030f 	ands.w	r3, r8, #15
 800ad2c:	d00a      	beq.n	800ad44 <_strtod_l+0x47c>
 800ad2e:	494f      	ldr	r1, [pc, #316]	; (800ae6c <_strtod_l+0x5a4>)
 800ad30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ad34:	4652      	mov	r2, sl
 800ad36:	465b      	mov	r3, fp
 800ad38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad3c:	f7f5 fc5c 	bl	80005f8 <__aeabi_dmul>
 800ad40:	4682      	mov	sl, r0
 800ad42:	468b      	mov	fp, r1
 800ad44:	f038 080f 	bics.w	r8, r8, #15
 800ad48:	d04f      	beq.n	800adea <_strtod_l+0x522>
 800ad4a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ad4e:	dd22      	ble.n	800ad96 <_strtod_l+0x4ce>
 800ad50:	2500      	movs	r5, #0
 800ad52:	462e      	mov	r6, r5
 800ad54:	9507      	str	r5, [sp, #28]
 800ad56:	9505      	str	r5, [sp, #20]
 800ad58:	2322      	movs	r3, #34	; 0x22
 800ad5a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800ae74 <_strtod_l+0x5ac>
 800ad5e:	6023      	str	r3, [r4, #0]
 800ad60:	f04f 0a00 	mov.w	sl, #0
 800ad64:	9b07      	ldr	r3, [sp, #28]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	f43f adf2 	beq.w	800a950 <_strtod_l+0x88>
 800ad6c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ad6e:	4620      	mov	r0, r4
 800ad70:	f001 fe90 	bl	800ca94 <_Bfree>
 800ad74:	9905      	ldr	r1, [sp, #20]
 800ad76:	4620      	mov	r0, r4
 800ad78:	f001 fe8c 	bl	800ca94 <_Bfree>
 800ad7c:	4631      	mov	r1, r6
 800ad7e:	4620      	mov	r0, r4
 800ad80:	f001 fe88 	bl	800ca94 <_Bfree>
 800ad84:	9907      	ldr	r1, [sp, #28]
 800ad86:	4620      	mov	r0, r4
 800ad88:	f001 fe84 	bl	800ca94 <_Bfree>
 800ad8c:	4629      	mov	r1, r5
 800ad8e:	4620      	mov	r0, r4
 800ad90:	f001 fe80 	bl	800ca94 <_Bfree>
 800ad94:	e5dc      	b.n	800a950 <_strtod_l+0x88>
 800ad96:	4b36      	ldr	r3, [pc, #216]	; (800ae70 <_strtod_l+0x5a8>)
 800ad98:	9304      	str	r3, [sp, #16]
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ada0:	4650      	mov	r0, sl
 800ada2:	4659      	mov	r1, fp
 800ada4:	4699      	mov	r9, r3
 800ada6:	f1b8 0f01 	cmp.w	r8, #1
 800adaa:	dc21      	bgt.n	800adf0 <_strtod_l+0x528>
 800adac:	b10b      	cbz	r3, 800adb2 <_strtod_l+0x4ea>
 800adae:	4682      	mov	sl, r0
 800adb0:	468b      	mov	fp, r1
 800adb2:	4b2f      	ldr	r3, [pc, #188]	; (800ae70 <_strtod_l+0x5a8>)
 800adb4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800adb8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800adbc:	4652      	mov	r2, sl
 800adbe:	465b      	mov	r3, fp
 800adc0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800adc4:	f7f5 fc18 	bl	80005f8 <__aeabi_dmul>
 800adc8:	4b2a      	ldr	r3, [pc, #168]	; (800ae74 <_strtod_l+0x5ac>)
 800adca:	460a      	mov	r2, r1
 800adcc:	400b      	ands	r3, r1
 800adce:	492a      	ldr	r1, [pc, #168]	; (800ae78 <_strtod_l+0x5b0>)
 800add0:	428b      	cmp	r3, r1
 800add2:	4682      	mov	sl, r0
 800add4:	d8bc      	bhi.n	800ad50 <_strtod_l+0x488>
 800add6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800adda:	428b      	cmp	r3, r1
 800addc:	bf86      	itte	hi
 800adde:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800ae7c <_strtod_l+0x5b4>
 800ade2:	f04f 3aff 	movhi.w	sl, #4294967295
 800ade6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800adea:	2300      	movs	r3, #0
 800adec:	9304      	str	r3, [sp, #16]
 800adee:	e084      	b.n	800aefa <_strtod_l+0x632>
 800adf0:	f018 0f01 	tst.w	r8, #1
 800adf4:	d005      	beq.n	800ae02 <_strtod_l+0x53a>
 800adf6:	9b04      	ldr	r3, [sp, #16]
 800adf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adfc:	f7f5 fbfc 	bl	80005f8 <__aeabi_dmul>
 800ae00:	2301      	movs	r3, #1
 800ae02:	9a04      	ldr	r2, [sp, #16]
 800ae04:	3208      	adds	r2, #8
 800ae06:	f109 0901 	add.w	r9, r9, #1
 800ae0a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ae0e:	9204      	str	r2, [sp, #16]
 800ae10:	e7c9      	b.n	800ada6 <_strtod_l+0x4de>
 800ae12:	d0ea      	beq.n	800adea <_strtod_l+0x522>
 800ae14:	f1c8 0800 	rsb	r8, r8, #0
 800ae18:	f018 020f 	ands.w	r2, r8, #15
 800ae1c:	d00a      	beq.n	800ae34 <_strtod_l+0x56c>
 800ae1e:	4b13      	ldr	r3, [pc, #76]	; (800ae6c <_strtod_l+0x5a4>)
 800ae20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae24:	4650      	mov	r0, sl
 800ae26:	4659      	mov	r1, fp
 800ae28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2c:	f7f5 fd0e 	bl	800084c <__aeabi_ddiv>
 800ae30:	4682      	mov	sl, r0
 800ae32:	468b      	mov	fp, r1
 800ae34:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ae38:	d0d7      	beq.n	800adea <_strtod_l+0x522>
 800ae3a:	f1b8 0f1f 	cmp.w	r8, #31
 800ae3e:	dd1f      	ble.n	800ae80 <_strtod_l+0x5b8>
 800ae40:	2500      	movs	r5, #0
 800ae42:	462e      	mov	r6, r5
 800ae44:	9507      	str	r5, [sp, #28]
 800ae46:	9505      	str	r5, [sp, #20]
 800ae48:	2322      	movs	r3, #34	; 0x22
 800ae4a:	f04f 0a00 	mov.w	sl, #0
 800ae4e:	f04f 0b00 	mov.w	fp, #0
 800ae52:	6023      	str	r3, [r4, #0]
 800ae54:	e786      	b.n	800ad64 <_strtod_l+0x49c>
 800ae56:	bf00      	nop
 800ae58:	0800ef11 	.word	0x0800ef11
 800ae5c:	0800ef54 	.word	0x0800ef54
 800ae60:	0800ef09 	.word	0x0800ef09
 800ae64:	0800f094 	.word	0x0800f094
 800ae68:	0800f340 	.word	0x0800f340
 800ae6c:	0800f220 	.word	0x0800f220
 800ae70:	0800f1f8 	.word	0x0800f1f8
 800ae74:	7ff00000 	.word	0x7ff00000
 800ae78:	7ca00000 	.word	0x7ca00000
 800ae7c:	7fefffff 	.word	0x7fefffff
 800ae80:	f018 0310 	ands.w	r3, r8, #16
 800ae84:	bf18      	it	ne
 800ae86:	236a      	movne	r3, #106	; 0x6a
 800ae88:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800b238 <_strtod_l+0x970>
 800ae8c:	9304      	str	r3, [sp, #16]
 800ae8e:	4650      	mov	r0, sl
 800ae90:	4659      	mov	r1, fp
 800ae92:	2300      	movs	r3, #0
 800ae94:	f018 0f01 	tst.w	r8, #1
 800ae98:	d004      	beq.n	800aea4 <_strtod_l+0x5dc>
 800ae9a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ae9e:	f7f5 fbab 	bl	80005f8 <__aeabi_dmul>
 800aea2:	2301      	movs	r3, #1
 800aea4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800aea8:	f109 0908 	add.w	r9, r9, #8
 800aeac:	d1f2      	bne.n	800ae94 <_strtod_l+0x5cc>
 800aeae:	b10b      	cbz	r3, 800aeb4 <_strtod_l+0x5ec>
 800aeb0:	4682      	mov	sl, r0
 800aeb2:	468b      	mov	fp, r1
 800aeb4:	9b04      	ldr	r3, [sp, #16]
 800aeb6:	b1c3      	cbz	r3, 800aeea <_strtod_l+0x622>
 800aeb8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800aebc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	4659      	mov	r1, fp
 800aec4:	dd11      	ble.n	800aeea <_strtod_l+0x622>
 800aec6:	2b1f      	cmp	r3, #31
 800aec8:	f340 8124 	ble.w	800b114 <_strtod_l+0x84c>
 800aecc:	2b34      	cmp	r3, #52	; 0x34
 800aece:	bfde      	ittt	le
 800aed0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800aed4:	f04f 33ff 	movle.w	r3, #4294967295
 800aed8:	fa03 f202 	lslle.w	r2, r3, r2
 800aedc:	f04f 0a00 	mov.w	sl, #0
 800aee0:	bfcc      	ite	gt
 800aee2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800aee6:	ea02 0b01 	andle.w	fp, r2, r1
 800aeea:	2200      	movs	r2, #0
 800aeec:	2300      	movs	r3, #0
 800aeee:	4650      	mov	r0, sl
 800aef0:	4659      	mov	r1, fp
 800aef2:	f7f5 fde9 	bl	8000ac8 <__aeabi_dcmpeq>
 800aef6:	2800      	cmp	r0, #0
 800aef8:	d1a2      	bne.n	800ae40 <_strtod_l+0x578>
 800aefa:	9b07      	ldr	r3, [sp, #28]
 800aefc:	9300      	str	r3, [sp, #0]
 800aefe:	9908      	ldr	r1, [sp, #32]
 800af00:	462b      	mov	r3, r5
 800af02:	463a      	mov	r2, r7
 800af04:	4620      	mov	r0, r4
 800af06:	f001 fe2d 	bl	800cb64 <__s2b>
 800af0a:	9007      	str	r0, [sp, #28]
 800af0c:	2800      	cmp	r0, #0
 800af0e:	f43f af1f 	beq.w	800ad50 <_strtod_l+0x488>
 800af12:	9b05      	ldr	r3, [sp, #20]
 800af14:	1b9e      	subs	r6, r3, r6
 800af16:	9b06      	ldr	r3, [sp, #24]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	bfb4      	ite	lt
 800af1c:	4633      	movlt	r3, r6
 800af1e:	2300      	movge	r3, #0
 800af20:	930c      	str	r3, [sp, #48]	; 0x30
 800af22:	9b06      	ldr	r3, [sp, #24]
 800af24:	2500      	movs	r5, #0
 800af26:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800af2a:	9312      	str	r3, [sp, #72]	; 0x48
 800af2c:	462e      	mov	r6, r5
 800af2e:	9b07      	ldr	r3, [sp, #28]
 800af30:	4620      	mov	r0, r4
 800af32:	6859      	ldr	r1, [r3, #4]
 800af34:	f001 fd6e 	bl	800ca14 <_Balloc>
 800af38:	9005      	str	r0, [sp, #20]
 800af3a:	2800      	cmp	r0, #0
 800af3c:	f43f af0c 	beq.w	800ad58 <_strtod_l+0x490>
 800af40:	9b07      	ldr	r3, [sp, #28]
 800af42:	691a      	ldr	r2, [r3, #16]
 800af44:	3202      	adds	r2, #2
 800af46:	f103 010c 	add.w	r1, r3, #12
 800af4a:	0092      	lsls	r2, r2, #2
 800af4c:	300c      	adds	r0, #12
 800af4e:	f001 fd53 	bl	800c9f8 <memcpy>
 800af52:	ec4b ab10 	vmov	d0, sl, fp
 800af56:	aa1a      	add	r2, sp, #104	; 0x68
 800af58:	a919      	add	r1, sp, #100	; 0x64
 800af5a:	4620      	mov	r0, r4
 800af5c:	f002 f948 	bl	800d1f0 <__d2b>
 800af60:	ec4b ab18 	vmov	d8, sl, fp
 800af64:	9018      	str	r0, [sp, #96]	; 0x60
 800af66:	2800      	cmp	r0, #0
 800af68:	f43f aef6 	beq.w	800ad58 <_strtod_l+0x490>
 800af6c:	2101      	movs	r1, #1
 800af6e:	4620      	mov	r0, r4
 800af70:	f001 fe92 	bl	800cc98 <__i2b>
 800af74:	4606      	mov	r6, r0
 800af76:	2800      	cmp	r0, #0
 800af78:	f43f aeee 	beq.w	800ad58 <_strtod_l+0x490>
 800af7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800af7e:	9904      	ldr	r1, [sp, #16]
 800af80:	2b00      	cmp	r3, #0
 800af82:	bfab      	itete	ge
 800af84:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800af86:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800af88:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800af8a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800af8e:	bfac      	ite	ge
 800af90:	eb03 0902 	addge.w	r9, r3, r2
 800af94:	1ad7      	sublt	r7, r2, r3
 800af96:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800af98:	eba3 0801 	sub.w	r8, r3, r1
 800af9c:	4490      	add	r8, r2
 800af9e:	4ba1      	ldr	r3, [pc, #644]	; (800b224 <_strtod_l+0x95c>)
 800afa0:	f108 38ff 	add.w	r8, r8, #4294967295
 800afa4:	4598      	cmp	r8, r3
 800afa6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800afaa:	f280 80c7 	bge.w	800b13c <_strtod_l+0x874>
 800afae:	eba3 0308 	sub.w	r3, r3, r8
 800afb2:	2b1f      	cmp	r3, #31
 800afb4:	eba2 0203 	sub.w	r2, r2, r3
 800afb8:	f04f 0101 	mov.w	r1, #1
 800afbc:	f300 80b1 	bgt.w	800b122 <_strtod_l+0x85a>
 800afc0:	fa01 f303 	lsl.w	r3, r1, r3
 800afc4:	930d      	str	r3, [sp, #52]	; 0x34
 800afc6:	2300      	movs	r3, #0
 800afc8:	9308      	str	r3, [sp, #32]
 800afca:	eb09 0802 	add.w	r8, r9, r2
 800afce:	9b04      	ldr	r3, [sp, #16]
 800afd0:	45c1      	cmp	r9, r8
 800afd2:	4417      	add	r7, r2
 800afd4:	441f      	add	r7, r3
 800afd6:	464b      	mov	r3, r9
 800afd8:	bfa8      	it	ge
 800afda:	4643      	movge	r3, r8
 800afdc:	42bb      	cmp	r3, r7
 800afde:	bfa8      	it	ge
 800afe0:	463b      	movge	r3, r7
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	bfc2      	ittt	gt
 800afe6:	eba8 0803 	subgt.w	r8, r8, r3
 800afea:	1aff      	subgt	r7, r7, r3
 800afec:	eba9 0903 	subgt.w	r9, r9, r3
 800aff0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	dd17      	ble.n	800b026 <_strtod_l+0x75e>
 800aff6:	4631      	mov	r1, r6
 800aff8:	461a      	mov	r2, r3
 800affa:	4620      	mov	r0, r4
 800affc:	f001 ff0c 	bl	800ce18 <__pow5mult>
 800b000:	4606      	mov	r6, r0
 800b002:	2800      	cmp	r0, #0
 800b004:	f43f aea8 	beq.w	800ad58 <_strtod_l+0x490>
 800b008:	4601      	mov	r1, r0
 800b00a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b00c:	4620      	mov	r0, r4
 800b00e:	f001 fe59 	bl	800ccc4 <__multiply>
 800b012:	900b      	str	r0, [sp, #44]	; 0x2c
 800b014:	2800      	cmp	r0, #0
 800b016:	f43f ae9f 	beq.w	800ad58 <_strtod_l+0x490>
 800b01a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b01c:	4620      	mov	r0, r4
 800b01e:	f001 fd39 	bl	800ca94 <_Bfree>
 800b022:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b024:	9318      	str	r3, [sp, #96]	; 0x60
 800b026:	f1b8 0f00 	cmp.w	r8, #0
 800b02a:	f300 808c 	bgt.w	800b146 <_strtod_l+0x87e>
 800b02e:	9b06      	ldr	r3, [sp, #24]
 800b030:	2b00      	cmp	r3, #0
 800b032:	dd08      	ble.n	800b046 <_strtod_l+0x77e>
 800b034:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b036:	9905      	ldr	r1, [sp, #20]
 800b038:	4620      	mov	r0, r4
 800b03a:	f001 feed 	bl	800ce18 <__pow5mult>
 800b03e:	9005      	str	r0, [sp, #20]
 800b040:	2800      	cmp	r0, #0
 800b042:	f43f ae89 	beq.w	800ad58 <_strtod_l+0x490>
 800b046:	2f00      	cmp	r7, #0
 800b048:	dd08      	ble.n	800b05c <_strtod_l+0x794>
 800b04a:	9905      	ldr	r1, [sp, #20]
 800b04c:	463a      	mov	r2, r7
 800b04e:	4620      	mov	r0, r4
 800b050:	f001 ff3c 	bl	800cecc <__lshift>
 800b054:	9005      	str	r0, [sp, #20]
 800b056:	2800      	cmp	r0, #0
 800b058:	f43f ae7e 	beq.w	800ad58 <_strtod_l+0x490>
 800b05c:	f1b9 0f00 	cmp.w	r9, #0
 800b060:	dd08      	ble.n	800b074 <_strtod_l+0x7ac>
 800b062:	4631      	mov	r1, r6
 800b064:	464a      	mov	r2, r9
 800b066:	4620      	mov	r0, r4
 800b068:	f001 ff30 	bl	800cecc <__lshift>
 800b06c:	4606      	mov	r6, r0
 800b06e:	2800      	cmp	r0, #0
 800b070:	f43f ae72 	beq.w	800ad58 <_strtod_l+0x490>
 800b074:	9a05      	ldr	r2, [sp, #20]
 800b076:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b078:	4620      	mov	r0, r4
 800b07a:	f001 ffb3 	bl	800cfe4 <__mdiff>
 800b07e:	4605      	mov	r5, r0
 800b080:	2800      	cmp	r0, #0
 800b082:	f43f ae69 	beq.w	800ad58 <_strtod_l+0x490>
 800b086:	68c3      	ldr	r3, [r0, #12]
 800b088:	930b      	str	r3, [sp, #44]	; 0x2c
 800b08a:	2300      	movs	r3, #0
 800b08c:	60c3      	str	r3, [r0, #12]
 800b08e:	4631      	mov	r1, r6
 800b090:	f001 ff8c 	bl	800cfac <__mcmp>
 800b094:	2800      	cmp	r0, #0
 800b096:	da60      	bge.n	800b15a <_strtod_l+0x892>
 800b098:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b09a:	ea53 030a 	orrs.w	r3, r3, sl
 800b09e:	f040 8082 	bne.w	800b1a6 <_strtod_l+0x8de>
 800b0a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d17d      	bne.n	800b1a6 <_strtod_l+0x8de>
 800b0aa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b0ae:	0d1b      	lsrs	r3, r3, #20
 800b0b0:	051b      	lsls	r3, r3, #20
 800b0b2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b0b6:	d976      	bls.n	800b1a6 <_strtod_l+0x8de>
 800b0b8:	696b      	ldr	r3, [r5, #20]
 800b0ba:	b913      	cbnz	r3, 800b0c2 <_strtod_l+0x7fa>
 800b0bc:	692b      	ldr	r3, [r5, #16]
 800b0be:	2b01      	cmp	r3, #1
 800b0c0:	dd71      	ble.n	800b1a6 <_strtod_l+0x8de>
 800b0c2:	4629      	mov	r1, r5
 800b0c4:	2201      	movs	r2, #1
 800b0c6:	4620      	mov	r0, r4
 800b0c8:	f001 ff00 	bl	800cecc <__lshift>
 800b0cc:	4631      	mov	r1, r6
 800b0ce:	4605      	mov	r5, r0
 800b0d0:	f001 ff6c 	bl	800cfac <__mcmp>
 800b0d4:	2800      	cmp	r0, #0
 800b0d6:	dd66      	ble.n	800b1a6 <_strtod_l+0x8de>
 800b0d8:	9904      	ldr	r1, [sp, #16]
 800b0da:	4a53      	ldr	r2, [pc, #332]	; (800b228 <_strtod_l+0x960>)
 800b0dc:	465b      	mov	r3, fp
 800b0de:	2900      	cmp	r1, #0
 800b0e0:	f000 8081 	beq.w	800b1e6 <_strtod_l+0x91e>
 800b0e4:	ea02 010b 	and.w	r1, r2, fp
 800b0e8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b0ec:	dc7b      	bgt.n	800b1e6 <_strtod_l+0x91e>
 800b0ee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b0f2:	f77f aea9 	ble.w	800ae48 <_strtod_l+0x580>
 800b0f6:	4b4d      	ldr	r3, [pc, #308]	; (800b22c <_strtod_l+0x964>)
 800b0f8:	4650      	mov	r0, sl
 800b0fa:	4659      	mov	r1, fp
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	f7f5 fa7b 	bl	80005f8 <__aeabi_dmul>
 800b102:	460b      	mov	r3, r1
 800b104:	4303      	orrs	r3, r0
 800b106:	bf08      	it	eq
 800b108:	2322      	moveq	r3, #34	; 0x22
 800b10a:	4682      	mov	sl, r0
 800b10c:	468b      	mov	fp, r1
 800b10e:	bf08      	it	eq
 800b110:	6023      	streq	r3, [r4, #0]
 800b112:	e62b      	b.n	800ad6c <_strtod_l+0x4a4>
 800b114:	f04f 32ff 	mov.w	r2, #4294967295
 800b118:	fa02 f303 	lsl.w	r3, r2, r3
 800b11c:	ea03 0a0a 	and.w	sl, r3, sl
 800b120:	e6e3      	b.n	800aeea <_strtod_l+0x622>
 800b122:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b126:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b12a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b12e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b132:	fa01 f308 	lsl.w	r3, r1, r8
 800b136:	9308      	str	r3, [sp, #32]
 800b138:	910d      	str	r1, [sp, #52]	; 0x34
 800b13a:	e746      	b.n	800afca <_strtod_l+0x702>
 800b13c:	2300      	movs	r3, #0
 800b13e:	9308      	str	r3, [sp, #32]
 800b140:	2301      	movs	r3, #1
 800b142:	930d      	str	r3, [sp, #52]	; 0x34
 800b144:	e741      	b.n	800afca <_strtod_l+0x702>
 800b146:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b148:	4642      	mov	r2, r8
 800b14a:	4620      	mov	r0, r4
 800b14c:	f001 febe 	bl	800cecc <__lshift>
 800b150:	9018      	str	r0, [sp, #96]	; 0x60
 800b152:	2800      	cmp	r0, #0
 800b154:	f47f af6b 	bne.w	800b02e <_strtod_l+0x766>
 800b158:	e5fe      	b.n	800ad58 <_strtod_l+0x490>
 800b15a:	465f      	mov	r7, fp
 800b15c:	d16e      	bne.n	800b23c <_strtod_l+0x974>
 800b15e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b160:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b164:	b342      	cbz	r2, 800b1b8 <_strtod_l+0x8f0>
 800b166:	4a32      	ldr	r2, [pc, #200]	; (800b230 <_strtod_l+0x968>)
 800b168:	4293      	cmp	r3, r2
 800b16a:	d128      	bne.n	800b1be <_strtod_l+0x8f6>
 800b16c:	9b04      	ldr	r3, [sp, #16]
 800b16e:	4651      	mov	r1, sl
 800b170:	b1eb      	cbz	r3, 800b1ae <_strtod_l+0x8e6>
 800b172:	4b2d      	ldr	r3, [pc, #180]	; (800b228 <_strtod_l+0x960>)
 800b174:	403b      	ands	r3, r7
 800b176:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b17a:	f04f 32ff 	mov.w	r2, #4294967295
 800b17e:	d819      	bhi.n	800b1b4 <_strtod_l+0x8ec>
 800b180:	0d1b      	lsrs	r3, r3, #20
 800b182:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b186:	fa02 f303 	lsl.w	r3, r2, r3
 800b18a:	4299      	cmp	r1, r3
 800b18c:	d117      	bne.n	800b1be <_strtod_l+0x8f6>
 800b18e:	4b29      	ldr	r3, [pc, #164]	; (800b234 <_strtod_l+0x96c>)
 800b190:	429f      	cmp	r7, r3
 800b192:	d102      	bne.n	800b19a <_strtod_l+0x8d2>
 800b194:	3101      	adds	r1, #1
 800b196:	f43f addf 	beq.w	800ad58 <_strtod_l+0x490>
 800b19a:	4b23      	ldr	r3, [pc, #140]	; (800b228 <_strtod_l+0x960>)
 800b19c:	403b      	ands	r3, r7
 800b19e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b1a2:	f04f 0a00 	mov.w	sl, #0
 800b1a6:	9b04      	ldr	r3, [sp, #16]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d1a4      	bne.n	800b0f6 <_strtod_l+0x82e>
 800b1ac:	e5de      	b.n	800ad6c <_strtod_l+0x4a4>
 800b1ae:	f04f 33ff 	mov.w	r3, #4294967295
 800b1b2:	e7ea      	b.n	800b18a <_strtod_l+0x8c2>
 800b1b4:	4613      	mov	r3, r2
 800b1b6:	e7e8      	b.n	800b18a <_strtod_l+0x8c2>
 800b1b8:	ea53 030a 	orrs.w	r3, r3, sl
 800b1bc:	d08c      	beq.n	800b0d8 <_strtod_l+0x810>
 800b1be:	9b08      	ldr	r3, [sp, #32]
 800b1c0:	b1db      	cbz	r3, 800b1fa <_strtod_l+0x932>
 800b1c2:	423b      	tst	r3, r7
 800b1c4:	d0ef      	beq.n	800b1a6 <_strtod_l+0x8de>
 800b1c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1c8:	9a04      	ldr	r2, [sp, #16]
 800b1ca:	4650      	mov	r0, sl
 800b1cc:	4659      	mov	r1, fp
 800b1ce:	b1c3      	cbz	r3, 800b202 <_strtod_l+0x93a>
 800b1d0:	f7ff fb5e 	bl	800a890 <sulp>
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	460b      	mov	r3, r1
 800b1d8:	ec51 0b18 	vmov	r0, r1, d8
 800b1dc:	f7f5 f856 	bl	800028c <__adddf3>
 800b1e0:	4682      	mov	sl, r0
 800b1e2:	468b      	mov	fp, r1
 800b1e4:	e7df      	b.n	800b1a6 <_strtod_l+0x8de>
 800b1e6:	4013      	ands	r3, r2
 800b1e8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b1ec:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b1f0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b1f4:	f04f 3aff 	mov.w	sl, #4294967295
 800b1f8:	e7d5      	b.n	800b1a6 <_strtod_l+0x8de>
 800b1fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1fc:	ea13 0f0a 	tst.w	r3, sl
 800b200:	e7e0      	b.n	800b1c4 <_strtod_l+0x8fc>
 800b202:	f7ff fb45 	bl	800a890 <sulp>
 800b206:	4602      	mov	r2, r0
 800b208:	460b      	mov	r3, r1
 800b20a:	ec51 0b18 	vmov	r0, r1, d8
 800b20e:	f7f5 f83b 	bl	8000288 <__aeabi_dsub>
 800b212:	2200      	movs	r2, #0
 800b214:	2300      	movs	r3, #0
 800b216:	4682      	mov	sl, r0
 800b218:	468b      	mov	fp, r1
 800b21a:	f7f5 fc55 	bl	8000ac8 <__aeabi_dcmpeq>
 800b21e:	2800      	cmp	r0, #0
 800b220:	d0c1      	beq.n	800b1a6 <_strtod_l+0x8de>
 800b222:	e611      	b.n	800ae48 <_strtod_l+0x580>
 800b224:	fffffc02 	.word	0xfffffc02
 800b228:	7ff00000 	.word	0x7ff00000
 800b22c:	39500000 	.word	0x39500000
 800b230:	000fffff 	.word	0x000fffff
 800b234:	7fefffff 	.word	0x7fefffff
 800b238:	0800ef68 	.word	0x0800ef68
 800b23c:	4631      	mov	r1, r6
 800b23e:	4628      	mov	r0, r5
 800b240:	f002 f832 	bl	800d2a8 <__ratio>
 800b244:	ec59 8b10 	vmov	r8, r9, d0
 800b248:	ee10 0a10 	vmov	r0, s0
 800b24c:	2200      	movs	r2, #0
 800b24e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b252:	4649      	mov	r1, r9
 800b254:	f7f5 fc4c 	bl	8000af0 <__aeabi_dcmple>
 800b258:	2800      	cmp	r0, #0
 800b25a:	d07a      	beq.n	800b352 <_strtod_l+0xa8a>
 800b25c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d04a      	beq.n	800b2f8 <_strtod_l+0xa30>
 800b262:	4b95      	ldr	r3, [pc, #596]	; (800b4b8 <_strtod_l+0xbf0>)
 800b264:	2200      	movs	r2, #0
 800b266:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b26a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b4b8 <_strtod_l+0xbf0>
 800b26e:	f04f 0800 	mov.w	r8, #0
 800b272:	4b92      	ldr	r3, [pc, #584]	; (800b4bc <_strtod_l+0xbf4>)
 800b274:	403b      	ands	r3, r7
 800b276:	930d      	str	r3, [sp, #52]	; 0x34
 800b278:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b27a:	4b91      	ldr	r3, [pc, #580]	; (800b4c0 <_strtod_l+0xbf8>)
 800b27c:	429a      	cmp	r2, r3
 800b27e:	f040 80b0 	bne.w	800b3e2 <_strtod_l+0xb1a>
 800b282:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b286:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b28a:	ec4b ab10 	vmov	d0, sl, fp
 800b28e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b292:	f001 ff31 	bl	800d0f8 <__ulp>
 800b296:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b29a:	ec53 2b10 	vmov	r2, r3, d0
 800b29e:	f7f5 f9ab 	bl	80005f8 <__aeabi_dmul>
 800b2a2:	4652      	mov	r2, sl
 800b2a4:	465b      	mov	r3, fp
 800b2a6:	f7f4 fff1 	bl	800028c <__adddf3>
 800b2aa:	460b      	mov	r3, r1
 800b2ac:	4983      	ldr	r1, [pc, #524]	; (800b4bc <_strtod_l+0xbf4>)
 800b2ae:	4a85      	ldr	r2, [pc, #532]	; (800b4c4 <_strtod_l+0xbfc>)
 800b2b0:	4019      	ands	r1, r3
 800b2b2:	4291      	cmp	r1, r2
 800b2b4:	4682      	mov	sl, r0
 800b2b6:	d960      	bls.n	800b37a <_strtod_l+0xab2>
 800b2b8:	ee18 3a90 	vmov	r3, s17
 800b2bc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b2c0:	4293      	cmp	r3, r2
 800b2c2:	d104      	bne.n	800b2ce <_strtod_l+0xa06>
 800b2c4:	ee18 3a10 	vmov	r3, s16
 800b2c8:	3301      	adds	r3, #1
 800b2ca:	f43f ad45 	beq.w	800ad58 <_strtod_l+0x490>
 800b2ce:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b4d0 <_strtod_l+0xc08>
 800b2d2:	f04f 3aff 	mov.w	sl, #4294967295
 800b2d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b2d8:	4620      	mov	r0, r4
 800b2da:	f001 fbdb 	bl	800ca94 <_Bfree>
 800b2de:	9905      	ldr	r1, [sp, #20]
 800b2e0:	4620      	mov	r0, r4
 800b2e2:	f001 fbd7 	bl	800ca94 <_Bfree>
 800b2e6:	4631      	mov	r1, r6
 800b2e8:	4620      	mov	r0, r4
 800b2ea:	f001 fbd3 	bl	800ca94 <_Bfree>
 800b2ee:	4629      	mov	r1, r5
 800b2f0:	4620      	mov	r0, r4
 800b2f2:	f001 fbcf 	bl	800ca94 <_Bfree>
 800b2f6:	e61a      	b.n	800af2e <_strtod_l+0x666>
 800b2f8:	f1ba 0f00 	cmp.w	sl, #0
 800b2fc:	d11b      	bne.n	800b336 <_strtod_l+0xa6e>
 800b2fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b302:	b9f3      	cbnz	r3, 800b342 <_strtod_l+0xa7a>
 800b304:	4b6c      	ldr	r3, [pc, #432]	; (800b4b8 <_strtod_l+0xbf0>)
 800b306:	2200      	movs	r2, #0
 800b308:	4640      	mov	r0, r8
 800b30a:	4649      	mov	r1, r9
 800b30c:	f7f5 fbe6 	bl	8000adc <__aeabi_dcmplt>
 800b310:	b9d0      	cbnz	r0, 800b348 <_strtod_l+0xa80>
 800b312:	4640      	mov	r0, r8
 800b314:	4649      	mov	r1, r9
 800b316:	4b6c      	ldr	r3, [pc, #432]	; (800b4c8 <_strtod_l+0xc00>)
 800b318:	2200      	movs	r2, #0
 800b31a:	f7f5 f96d 	bl	80005f8 <__aeabi_dmul>
 800b31e:	4680      	mov	r8, r0
 800b320:	4689      	mov	r9, r1
 800b322:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b326:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800b32a:	9315      	str	r3, [sp, #84]	; 0x54
 800b32c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b330:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b334:	e79d      	b.n	800b272 <_strtod_l+0x9aa>
 800b336:	f1ba 0f01 	cmp.w	sl, #1
 800b33a:	d102      	bne.n	800b342 <_strtod_l+0xa7a>
 800b33c:	2f00      	cmp	r7, #0
 800b33e:	f43f ad83 	beq.w	800ae48 <_strtod_l+0x580>
 800b342:	4b62      	ldr	r3, [pc, #392]	; (800b4cc <_strtod_l+0xc04>)
 800b344:	2200      	movs	r2, #0
 800b346:	e78e      	b.n	800b266 <_strtod_l+0x99e>
 800b348:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b4c8 <_strtod_l+0xc00>
 800b34c:	f04f 0800 	mov.w	r8, #0
 800b350:	e7e7      	b.n	800b322 <_strtod_l+0xa5a>
 800b352:	4b5d      	ldr	r3, [pc, #372]	; (800b4c8 <_strtod_l+0xc00>)
 800b354:	4640      	mov	r0, r8
 800b356:	4649      	mov	r1, r9
 800b358:	2200      	movs	r2, #0
 800b35a:	f7f5 f94d 	bl	80005f8 <__aeabi_dmul>
 800b35e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b360:	4680      	mov	r8, r0
 800b362:	4689      	mov	r9, r1
 800b364:	b933      	cbnz	r3, 800b374 <_strtod_l+0xaac>
 800b366:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b36a:	900e      	str	r0, [sp, #56]	; 0x38
 800b36c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b36e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b372:	e7dd      	b.n	800b330 <_strtod_l+0xa68>
 800b374:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b378:	e7f9      	b.n	800b36e <_strtod_l+0xaa6>
 800b37a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b37e:	9b04      	ldr	r3, [sp, #16]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d1a8      	bne.n	800b2d6 <_strtod_l+0xa0e>
 800b384:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b388:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b38a:	0d1b      	lsrs	r3, r3, #20
 800b38c:	051b      	lsls	r3, r3, #20
 800b38e:	429a      	cmp	r2, r3
 800b390:	d1a1      	bne.n	800b2d6 <_strtod_l+0xa0e>
 800b392:	4640      	mov	r0, r8
 800b394:	4649      	mov	r1, r9
 800b396:	f7f5 fc8f 	bl	8000cb8 <__aeabi_d2lz>
 800b39a:	f7f5 f8ff 	bl	800059c <__aeabi_l2d>
 800b39e:	4602      	mov	r2, r0
 800b3a0:	460b      	mov	r3, r1
 800b3a2:	4640      	mov	r0, r8
 800b3a4:	4649      	mov	r1, r9
 800b3a6:	f7f4 ff6f 	bl	8000288 <__aeabi_dsub>
 800b3aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b3ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b3b0:	ea43 030a 	orr.w	r3, r3, sl
 800b3b4:	4313      	orrs	r3, r2
 800b3b6:	4680      	mov	r8, r0
 800b3b8:	4689      	mov	r9, r1
 800b3ba:	d055      	beq.n	800b468 <_strtod_l+0xba0>
 800b3bc:	a336      	add	r3, pc, #216	; (adr r3, 800b498 <_strtod_l+0xbd0>)
 800b3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c2:	f7f5 fb8b 	bl	8000adc <__aeabi_dcmplt>
 800b3c6:	2800      	cmp	r0, #0
 800b3c8:	f47f acd0 	bne.w	800ad6c <_strtod_l+0x4a4>
 800b3cc:	a334      	add	r3, pc, #208	; (adr r3, 800b4a0 <_strtod_l+0xbd8>)
 800b3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d2:	4640      	mov	r0, r8
 800b3d4:	4649      	mov	r1, r9
 800b3d6:	f7f5 fb9f 	bl	8000b18 <__aeabi_dcmpgt>
 800b3da:	2800      	cmp	r0, #0
 800b3dc:	f43f af7b 	beq.w	800b2d6 <_strtod_l+0xa0e>
 800b3e0:	e4c4      	b.n	800ad6c <_strtod_l+0x4a4>
 800b3e2:	9b04      	ldr	r3, [sp, #16]
 800b3e4:	b333      	cbz	r3, 800b434 <_strtod_l+0xb6c>
 800b3e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3e8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b3ec:	d822      	bhi.n	800b434 <_strtod_l+0xb6c>
 800b3ee:	a32e      	add	r3, pc, #184	; (adr r3, 800b4a8 <_strtod_l+0xbe0>)
 800b3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f4:	4640      	mov	r0, r8
 800b3f6:	4649      	mov	r1, r9
 800b3f8:	f7f5 fb7a 	bl	8000af0 <__aeabi_dcmple>
 800b3fc:	b1a0      	cbz	r0, 800b428 <_strtod_l+0xb60>
 800b3fe:	4649      	mov	r1, r9
 800b400:	4640      	mov	r0, r8
 800b402:	f7f5 fbd1 	bl	8000ba8 <__aeabi_d2uiz>
 800b406:	2801      	cmp	r0, #1
 800b408:	bf38      	it	cc
 800b40a:	2001      	movcc	r0, #1
 800b40c:	f7f5 f87a 	bl	8000504 <__aeabi_ui2d>
 800b410:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b412:	4680      	mov	r8, r0
 800b414:	4689      	mov	r9, r1
 800b416:	bb23      	cbnz	r3, 800b462 <_strtod_l+0xb9a>
 800b418:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b41c:	9010      	str	r0, [sp, #64]	; 0x40
 800b41e:	9311      	str	r3, [sp, #68]	; 0x44
 800b420:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b424:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b42a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b42c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b430:	1a9b      	subs	r3, r3, r2
 800b432:	9309      	str	r3, [sp, #36]	; 0x24
 800b434:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b438:	eeb0 0a48 	vmov.f32	s0, s16
 800b43c:	eef0 0a68 	vmov.f32	s1, s17
 800b440:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b444:	f001 fe58 	bl	800d0f8 <__ulp>
 800b448:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b44c:	ec53 2b10 	vmov	r2, r3, d0
 800b450:	f7f5 f8d2 	bl	80005f8 <__aeabi_dmul>
 800b454:	ec53 2b18 	vmov	r2, r3, d8
 800b458:	f7f4 ff18 	bl	800028c <__adddf3>
 800b45c:	4682      	mov	sl, r0
 800b45e:	468b      	mov	fp, r1
 800b460:	e78d      	b.n	800b37e <_strtod_l+0xab6>
 800b462:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800b466:	e7db      	b.n	800b420 <_strtod_l+0xb58>
 800b468:	a311      	add	r3, pc, #68	; (adr r3, 800b4b0 <_strtod_l+0xbe8>)
 800b46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b46e:	f7f5 fb35 	bl	8000adc <__aeabi_dcmplt>
 800b472:	e7b2      	b.n	800b3da <_strtod_l+0xb12>
 800b474:	2300      	movs	r3, #0
 800b476:	930a      	str	r3, [sp, #40]	; 0x28
 800b478:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b47a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b47c:	6013      	str	r3, [r2, #0]
 800b47e:	f7ff ba6b 	b.w	800a958 <_strtod_l+0x90>
 800b482:	2a65      	cmp	r2, #101	; 0x65
 800b484:	f43f ab5f 	beq.w	800ab46 <_strtod_l+0x27e>
 800b488:	2a45      	cmp	r2, #69	; 0x45
 800b48a:	f43f ab5c 	beq.w	800ab46 <_strtod_l+0x27e>
 800b48e:	2301      	movs	r3, #1
 800b490:	f7ff bb94 	b.w	800abbc <_strtod_l+0x2f4>
 800b494:	f3af 8000 	nop.w
 800b498:	94a03595 	.word	0x94a03595
 800b49c:	3fdfffff 	.word	0x3fdfffff
 800b4a0:	35afe535 	.word	0x35afe535
 800b4a4:	3fe00000 	.word	0x3fe00000
 800b4a8:	ffc00000 	.word	0xffc00000
 800b4ac:	41dfffff 	.word	0x41dfffff
 800b4b0:	94a03595 	.word	0x94a03595
 800b4b4:	3fcfffff 	.word	0x3fcfffff
 800b4b8:	3ff00000 	.word	0x3ff00000
 800b4bc:	7ff00000 	.word	0x7ff00000
 800b4c0:	7fe00000 	.word	0x7fe00000
 800b4c4:	7c9fffff 	.word	0x7c9fffff
 800b4c8:	3fe00000 	.word	0x3fe00000
 800b4cc:	bff00000 	.word	0xbff00000
 800b4d0:	7fefffff 	.word	0x7fefffff

0800b4d4 <_strtod_r>:
 800b4d4:	4b01      	ldr	r3, [pc, #4]	; (800b4dc <_strtod_r+0x8>)
 800b4d6:	f7ff b9f7 	b.w	800a8c8 <_strtod_l>
 800b4da:	bf00      	nop
 800b4dc:	200002f4 	.word	0x200002f4

0800b4e0 <_strtol_l.constprop.0>:
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4e6:	d001      	beq.n	800b4ec <_strtol_l.constprop.0+0xc>
 800b4e8:	2b24      	cmp	r3, #36	; 0x24
 800b4ea:	d906      	bls.n	800b4fa <_strtol_l.constprop.0+0x1a>
 800b4ec:	f7fe fafe 	bl	8009aec <__errno>
 800b4f0:	2316      	movs	r3, #22
 800b4f2:	6003      	str	r3, [r0, #0]
 800b4f4:	2000      	movs	r0, #0
 800b4f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4fa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b5e0 <_strtol_l.constprop.0+0x100>
 800b4fe:	460d      	mov	r5, r1
 800b500:	462e      	mov	r6, r5
 800b502:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b506:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b50a:	f017 0708 	ands.w	r7, r7, #8
 800b50e:	d1f7      	bne.n	800b500 <_strtol_l.constprop.0+0x20>
 800b510:	2c2d      	cmp	r4, #45	; 0x2d
 800b512:	d132      	bne.n	800b57a <_strtol_l.constprop.0+0x9a>
 800b514:	782c      	ldrb	r4, [r5, #0]
 800b516:	2701      	movs	r7, #1
 800b518:	1cb5      	adds	r5, r6, #2
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d05b      	beq.n	800b5d6 <_strtol_l.constprop.0+0xf6>
 800b51e:	2b10      	cmp	r3, #16
 800b520:	d109      	bne.n	800b536 <_strtol_l.constprop.0+0x56>
 800b522:	2c30      	cmp	r4, #48	; 0x30
 800b524:	d107      	bne.n	800b536 <_strtol_l.constprop.0+0x56>
 800b526:	782c      	ldrb	r4, [r5, #0]
 800b528:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b52c:	2c58      	cmp	r4, #88	; 0x58
 800b52e:	d14d      	bne.n	800b5cc <_strtol_l.constprop.0+0xec>
 800b530:	786c      	ldrb	r4, [r5, #1]
 800b532:	2310      	movs	r3, #16
 800b534:	3502      	adds	r5, #2
 800b536:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b53a:	f108 38ff 	add.w	r8, r8, #4294967295
 800b53e:	f04f 0c00 	mov.w	ip, #0
 800b542:	fbb8 f9f3 	udiv	r9, r8, r3
 800b546:	4666      	mov	r6, ip
 800b548:	fb03 8a19 	mls	sl, r3, r9, r8
 800b54c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b550:	f1be 0f09 	cmp.w	lr, #9
 800b554:	d816      	bhi.n	800b584 <_strtol_l.constprop.0+0xa4>
 800b556:	4674      	mov	r4, lr
 800b558:	42a3      	cmp	r3, r4
 800b55a:	dd24      	ble.n	800b5a6 <_strtol_l.constprop.0+0xc6>
 800b55c:	f1bc 0f00 	cmp.w	ip, #0
 800b560:	db1e      	blt.n	800b5a0 <_strtol_l.constprop.0+0xc0>
 800b562:	45b1      	cmp	r9, r6
 800b564:	d31c      	bcc.n	800b5a0 <_strtol_l.constprop.0+0xc0>
 800b566:	d101      	bne.n	800b56c <_strtol_l.constprop.0+0x8c>
 800b568:	45a2      	cmp	sl, r4
 800b56a:	db19      	blt.n	800b5a0 <_strtol_l.constprop.0+0xc0>
 800b56c:	fb06 4603 	mla	r6, r6, r3, r4
 800b570:	f04f 0c01 	mov.w	ip, #1
 800b574:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b578:	e7e8      	b.n	800b54c <_strtol_l.constprop.0+0x6c>
 800b57a:	2c2b      	cmp	r4, #43	; 0x2b
 800b57c:	bf04      	itt	eq
 800b57e:	782c      	ldrbeq	r4, [r5, #0]
 800b580:	1cb5      	addeq	r5, r6, #2
 800b582:	e7ca      	b.n	800b51a <_strtol_l.constprop.0+0x3a>
 800b584:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b588:	f1be 0f19 	cmp.w	lr, #25
 800b58c:	d801      	bhi.n	800b592 <_strtol_l.constprop.0+0xb2>
 800b58e:	3c37      	subs	r4, #55	; 0x37
 800b590:	e7e2      	b.n	800b558 <_strtol_l.constprop.0+0x78>
 800b592:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b596:	f1be 0f19 	cmp.w	lr, #25
 800b59a:	d804      	bhi.n	800b5a6 <_strtol_l.constprop.0+0xc6>
 800b59c:	3c57      	subs	r4, #87	; 0x57
 800b59e:	e7db      	b.n	800b558 <_strtol_l.constprop.0+0x78>
 800b5a0:	f04f 3cff 	mov.w	ip, #4294967295
 800b5a4:	e7e6      	b.n	800b574 <_strtol_l.constprop.0+0x94>
 800b5a6:	f1bc 0f00 	cmp.w	ip, #0
 800b5aa:	da05      	bge.n	800b5b8 <_strtol_l.constprop.0+0xd8>
 800b5ac:	2322      	movs	r3, #34	; 0x22
 800b5ae:	6003      	str	r3, [r0, #0]
 800b5b0:	4646      	mov	r6, r8
 800b5b2:	b942      	cbnz	r2, 800b5c6 <_strtol_l.constprop.0+0xe6>
 800b5b4:	4630      	mov	r0, r6
 800b5b6:	e79e      	b.n	800b4f6 <_strtol_l.constprop.0+0x16>
 800b5b8:	b107      	cbz	r7, 800b5bc <_strtol_l.constprop.0+0xdc>
 800b5ba:	4276      	negs	r6, r6
 800b5bc:	2a00      	cmp	r2, #0
 800b5be:	d0f9      	beq.n	800b5b4 <_strtol_l.constprop.0+0xd4>
 800b5c0:	f1bc 0f00 	cmp.w	ip, #0
 800b5c4:	d000      	beq.n	800b5c8 <_strtol_l.constprop.0+0xe8>
 800b5c6:	1e69      	subs	r1, r5, #1
 800b5c8:	6011      	str	r1, [r2, #0]
 800b5ca:	e7f3      	b.n	800b5b4 <_strtol_l.constprop.0+0xd4>
 800b5cc:	2430      	movs	r4, #48	; 0x30
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d1b1      	bne.n	800b536 <_strtol_l.constprop.0+0x56>
 800b5d2:	2308      	movs	r3, #8
 800b5d4:	e7af      	b.n	800b536 <_strtol_l.constprop.0+0x56>
 800b5d6:	2c30      	cmp	r4, #48	; 0x30
 800b5d8:	d0a5      	beq.n	800b526 <_strtol_l.constprop.0+0x46>
 800b5da:	230a      	movs	r3, #10
 800b5dc:	e7ab      	b.n	800b536 <_strtol_l.constprop.0+0x56>
 800b5de:	bf00      	nop
 800b5e0:	0800ef91 	.word	0x0800ef91

0800b5e4 <_strtol_r>:
 800b5e4:	f7ff bf7c 	b.w	800b4e0 <_strtol_l.constprop.0>

0800b5e8 <quorem>:
 800b5e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5ec:	6903      	ldr	r3, [r0, #16]
 800b5ee:	690c      	ldr	r4, [r1, #16]
 800b5f0:	42a3      	cmp	r3, r4
 800b5f2:	4607      	mov	r7, r0
 800b5f4:	f2c0 8081 	blt.w	800b6fa <quorem+0x112>
 800b5f8:	3c01      	subs	r4, #1
 800b5fa:	f101 0814 	add.w	r8, r1, #20
 800b5fe:	f100 0514 	add.w	r5, r0, #20
 800b602:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b606:	9301      	str	r3, [sp, #4]
 800b608:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b60c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b610:	3301      	adds	r3, #1
 800b612:	429a      	cmp	r2, r3
 800b614:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b618:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b61c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b620:	d331      	bcc.n	800b686 <quorem+0x9e>
 800b622:	f04f 0e00 	mov.w	lr, #0
 800b626:	4640      	mov	r0, r8
 800b628:	46ac      	mov	ip, r5
 800b62a:	46f2      	mov	sl, lr
 800b62c:	f850 2b04 	ldr.w	r2, [r0], #4
 800b630:	b293      	uxth	r3, r2
 800b632:	fb06 e303 	mla	r3, r6, r3, lr
 800b636:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b63a:	b29b      	uxth	r3, r3
 800b63c:	ebaa 0303 	sub.w	r3, sl, r3
 800b640:	f8dc a000 	ldr.w	sl, [ip]
 800b644:	0c12      	lsrs	r2, r2, #16
 800b646:	fa13 f38a 	uxtah	r3, r3, sl
 800b64a:	fb06 e202 	mla	r2, r6, r2, lr
 800b64e:	9300      	str	r3, [sp, #0]
 800b650:	9b00      	ldr	r3, [sp, #0]
 800b652:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b656:	b292      	uxth	r2, r2
 800b658:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b65c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b660:	f8bd 3000 	ldrh.w	r3, [sp]
 800b664:	4581      	cmp	r9, r0
 800b666:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b66a:	f84c 3b04 	str.w	r3, [ip], #4
 800b66e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b672:	d2db      	bcs.n	800b62c <quorem+0x44>
 800b674:	f855 300b 	ldr.w	r3, [r5, fp]
 800b678:	b92b      	cbnz	r3, 800b686 <quorem+0x9e>
 800b67a:	9b01      	ldr	r3, [sp, #4]
 800b67c:	3b04      	subs	r3, #4
 800b67e:	429d      	cmp	r5, r3
 800b680:	461a      	mov	r2, r3
 800b682:	d32e      	bcc.n	800b6e2 <quorem+0xfa>
 800b684:	613c      	str	r4, [r7, #16]
 800b686:	4638      	mov	r0, r7
 800b688:	f001 fc90 	bl	800cfac <__mcmp>
 800b68c:	2800      	cmp	r0, #0
 800b68e:	db24      	blt.n	800b6da <quorem+0xf2>
 800b690:	3601      	adds	r6, #1
 800b692:	4628      	mov	r0, r5
 800b694:	f04f 0c00 	mov.w	ip, #0
 800b698:	f858 2b04 	ldr.w	r2, [r8], #4
 800b69c:	f8d0 e000 	ldr.w	lr, [r0]
 800b6a0:	b293      	uxth	r3, r2
 800b6a2:	ebac 0303 	sub.w	r3, ip, r3
 800b6a6:	0c12      	lsrs	r2, r2, #16
 800b6a8:	fa13 f38e 	uxtah	r3, r3, lr
 800b6ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b6b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b6b4:	b29b      	uxth	r3, r3
 800b6b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b6ba:	45c1      	cmp	r9, r8
 800b6bc:	f840 3b04 	str.w	r3, [r0], #4
 800b6c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b6c4:	d2e8      	bcs.n	800b698 <quorem+0xb0>
 800b6c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b6ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b6ce:	b922      	cbnz	r2, 800b6da <quorem+0xf2>
 800b6d0:	3b04      	subs	r3, #4
 800b6d2:	429d      	cmp	r5, r3
 800b6d4:	461a      	mov	r2, r3
 800b6d6:	d30a      	bcc.n	800b6ee <quorem+0x106>
 800b6d8:	613c      	str	r4, [r7, #16]
 800b6da:	4630      	mov	r0, r6
 800b6dc:	b003      	add	sp, #12
 800b6de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6e2:	6812      	ldr	r2, [r2, #0]
 800b6e4:	3b04      	subs	r3, #4
 800b6e6:	2a00      	cmp	r2, #0
 800b6e8:	d1cc      	bne.n	800b684 <quorem+0x9c>
 800b6ea:	3c01      	subs	r4, #1
 800b6ec:	e7c7      	b.n	800b67e <quorem+0x96>
 800b6ee:	6812      	ldr	r2, [r2, #0]
 800b6f0:	3b04      	subs	r3, #4
 800b6f2:	2a00      	cmp	r2, #0
 800b6f4:	d1f0      	bne.n	800b6d8 <quorem+0xf0>
 800b6f6:	3c01      	subs	r4, #1
 800b6f8:	e7eb      	b.n	800b6d2 <quorem+0xea>
 800b6fa:	2000      	movs	r0, #0
 800b6fc:	e7ee      	b.n	800b6dc <quorem+0xf4>
	...

0800b700 <_dtoa_r>:
 800b700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b704:	ed2d 8b04 	vpush	{d8-d9}
 800b708:	ec57 6b10 	vmov	r6, r7, d0
 800b70c:	b093      	sub	sp, #76	; 0x4c
 800b70e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b710:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b714:	9106      	str	r1, [sp, #24]
 800b716:	ee10 aa10 	vmov	sl, s0
 800b71a:	4604      	mov	r4, r0
 800b71c:	9209      	str	r2, [sp, #36]	; 0x24
 800b71e:	930c      	str	r3, [sp, #48]	; 0x30
 800b720:	46bb      	mov	fp, r7
 800b722:	b975      	cbnz	r5, 800b742 <_dtoa_r+0x42>
 800b724:	2010      	movs	r0, #16
 800b726:	f001 f94d 	bl	800c9c4 <malloc>
 800b72a:	4602      	mov	r2, r0
 800b72c:	6260      	str	r0, [r4, #36]	; 0x24
 800b72e:	b920      	cbnz	r0, 800b73a <_dtoa_r+0x3a>
 800b730:	4ba7      	ldr	r3, [pc, #668]	; (800b9d0 <_dtoa_r+0x2d0>)
 800b732:	21ea      	movs	r1, #234	; 0xea
 800b734:	48a7      	ldr	r0, [pc, #668]	; (800b9d4 <_dtoa_r+0x2d4>)
 800b736:	f002 f8bd 	bl	800d8b4 <__assert_func>
 800b73a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b73e:	6005      	str	r5, [r0, #0]
 800b740:	60c5      	str	r5, [r0, #12]
 800b742:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b744:	6819      	ldr	r1, [r3, #0]
 800b746:	b151      	cbz	r1, 800b75e <_dtoa_r+0x5e>
 800b748:	685a      	ldr	r2, [r3, #4]
 800b74a:	604a      	str	r2, [r1, #4]
 800b74c:	2301      	movs	r3, #1
 800b74e:	4093      	lsls	r3, r2
 800b750:	608b      	str	r3, [r1, #8]
 800b752:	4620      	mov	r0, r4
 800b754:	f001 f99e 	bl	800ca94 <_Bfree>
 800b758:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b75a:	2200      	movs	r2, #0
 800b75c:	601a      	str	r2, [r3, #0]
 800b75e:	1e3b      	subs	r3, r7, #0
 800b760:	bfaa      	itet	ge
 800b762:	2300      	movge	r3, #0
 800b764:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b768:	f8c8 3000 	strge.w	r3, [r8]
 800b76c:	4b9a      	ldr	r3, [pc, #616]	; (800b9d8 <_dtoa_r+0x2d8>)
 800b76e:	bfbc      	itt	lt
 800b770:	2201      	movlt	r2, #1
 800b772:	f8c8 2000 	strlt.w	r2, [r8]
 800b776:	ea33 030b 	bics.w	r3, r3, fp
 800b77a:	d11b      	bne.n	800b7b4 <_dtoa_r+0xb4>
 800b77c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b77e:	f242 730f 	movw	r3, #9999	; 0x270f
 800b782:	6013      	str	r3, [r2, #0]
 800b784:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b788:	4333      	orrs	r3, r6
 800b78a:	f000 8592 	beq.w	800c2b2 <_dtoa_r+0xbb2>
 800b78e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b790:	b963      	cbnz	r3, 800b7ac <_dtoa_r+0xac>
 800b792:	4b92      	ldr	r3, [pc, #584]	; (800b9dc <_dtoa_r+0x2dc>)
 800b794:	e022      	b.n	800b7dc <_dtoa_r+0xdc>
 800b796:	4b92      	ldr	r3, [pc, #584]	; (800b9e0 <_dtoa_r+0x2e0>)
 800b798:	9301      	str	r3, [sp, #4]
 800b79a:	3308      	adds	r3, #8
 800b79c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b79e:	6013      	str	r3, [r2, #0]
 800b7a0:	9801      	ldr	r0, [sp, #4]
 800b7a2:	b013      	add	sp, #76	; 0x4c
 800b7a4:	ecbd 8b04 	vpop	{d8-d9}
 800b7a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ac:	4b8b      	ldr	r3, [pc, #556]	; (800b9dc <_dtoa_r+0x2dc>)
 800b7ae:	9301      	str	r3, [sp, #4]
 800b7b0:	3303      	adds	r3, #3
 800b7b2:	e7f3      	b.n	800b79c <_dtoa_r+0x9c>
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	4650      	mov	r0, sl
 800b7ba:	4659      	mov	r1, fp
 800b7bc:	f7f5 f984 	bl	8000ac8 <__aeabi_dcmpeq>
 800b7c0:	ec4b ab19 	vmov	d9, sl, fp
 800b7c4:	4680      	mov	r8, r0
 800b7c6:	b158      	cbz	r0, 800b7e0 <_dtoa_r+0xe0>
 800b7c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	6013      	str	r3, [r2, #0]
 800b7ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	f000 856b 	beq.w	800c2ac <_dtoa_r+0xbac>
 800b7d6:	4883      	ldr	r0, [pc, #524]	; (800b9e4 <_dtoa_r+0x2e4>)
 800b7d8:	6018      	str	r0, [r3, #0]
 800b7da:	1e43      	subs	r3, r0, #1
 800b7dc:	9301      	str	r3, [sp, #4]
 800b7de:	e7df      	b.n	800b7a0 <_dtoa_r+0xa0>
 800b7e0:	ec4b ab10 	vmov	d0, sl, fp
 800b7e4:	aa10      	add	r2, sp, #64	; 0x40
 800b7e6:	a911      	add	r1, sp, #68	; 0x44
 800b7e8:	4620      	mov	r0, r4
 800b7ea:	f001 fd01 	bl	800d1f0 <__d2b>
 800b7ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b7f2:	ee08 0a10 	vmov	s16, r0
 800b7f6:	2d00      	cmp	r5, #0
 800b7f8:	f000 8084 	beq.w	800b904 <_dtoa_r+0x204>
 800b7fc:	ee19 3a90 	vmov	r3, s19
 800b800:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b804:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b808:	4656      	mov	r6, sl
 800b80a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b80e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b812:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b816:	4b74      	ldr	r3, [pc, #464]	; (800b9e8 <_dtoa_r+0x2e8>)
 800b818:	2200      	movs	r2, #0
 800b81a:	4630      	mov	r0, r6
 800b81c:	4639      	mov	r1, r7
 800b81e:	f7f4 fd33 	bl	8000288 <__aeabi_dsub>
 800b822:	a365      	add	r3, pc, #404	; (adr r3, 800b9b8 <_dtoa_r+0x2b8>)
 800b824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b828:	f7f4 fee6 	bl	80005f8 <__aeabi_dmul>
 800b82c:	a364      	add	r3, pc, #400	; (adr r3, 800b9c0 <_dtoa_r+0x2c0>)
 800b82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b832:	f7f4 fd2b 	bl	800028c <__adddf3>
 800b836:	4606      	mov	r6, r0
 800b838:	4628      	mov	r0, r5
 800b83a:	460f      	mov	r7, r1
 800b83c:	f7f4 fe72 	bl	8000524 <__aeabi_i2d>
 800b840:	a361      	add	r3, pc, #388	; (adr r3, 800b9c8 <_dtoa_r+0x2c8>)
 800b842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b846:	f7f4 fed7 	bl	80005f8 <__aeabi_dmul>
 800b84a:	4602      	mov	r2, r0
 800b84c:	460b      	mov	r3, r1
 800b84e:	4630      	mov	r0, r6
 800b850:	4639      	mov	r1, r7
 800b852:	f7f4 fd1b 	bl	800028c <__adddf3>
 800b856:	4606      	mov	r6, r0
 800b858:	460f      	mov	r7, r1
 800b85a:	f7f5 f97d 	bl	8000b58 <__aeabi_d2iz>
 800b85e:	2200      	movs	r2, #0
 800b860:	9000      	str	r0, [sp, #0]
 800b862:	2300      	movs	r3, #0
 800b864:	4630      	mov	r0, r6
 800b866:	4639      	mov	r1, r7
 800b868:	f7f5 f938 	bl	8000adc <__aeabi_dcmplt>
 800b86c:	b150      	cbz	r0, 800b884 <_dtoa_r+0x184>
 800b86e:	9800      	ldr	r0, [sp, #0]
 800b870:	f7f4 fe58 	bl	8000524 <__aeabi_i2d>
 800b874:	4632      	mov	r2, r6
 800b876:	463b      	mov	r3, r7
 800b878:	f7f5 f926 	bl	8000ac8 <__aeabi_dcmpeq>
 800b87c:	b910      	cbnz	r0, 800b884 <_dtoa_r+0x184>
 800b87e:	9b00      	ldr	r3, [sp, #0]
 800b880:	3b01      	subs	r3, #1
 800b882:	9300      	str	r3, [sp, #0]
 800b884:	9b00      	ldr	r3, [sp, #0]
 800b886:	2b16      	cmp	r3, #22
 800b888:	d85a      	bhi.n	800b940 <_dtoa_r+0x240>
 800b88a:	9a00      	ldr	r2, [sp, #0]
 800b88c:	4b57      	ldr	r3, [pc, #348]	; (800b9ec <_dtoa_r+0x2ec>)
 800b88e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b896:	ec51 0b19 	vmov	r0, r1, d9
 800b89a:	f7f5 f91f 	bl	8000adc <__aeabi_dcmplt>
 800b89e:	2800      	cmp	r0, #0
 800b8a0:	d050      	beq.n	800b944 <_dtoa_r+0x244>
 800b8a2:	9b00      	ldr	r3, [sp, #0]
 800b8a4:	3b01      	subs	r3, #1
 800b8a6:	9300      	str	r3, [sp, #0]
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b8ae:	1b5d      	subs	r5, r3, r5
 800b8b0:	1e6b      	subs	r3, r5, #1
 800b8b2:	9305      	str	r3, [sp, #20]
 800b8b4:	bf45      	ittet	mi
 800b8b6:	f1c5 0301 	rsbmi	r3, r5, #1
 800b8ba:	9304      	strmi	r3, [sp, #16]
 800b8bc:	2300      	movpl	r3, #0
 800b8be:	2300      	movmi	r3, #0
 800b8c0:	bf4c      	ite	mi
 800b8c2:	9305      	strmi	r3, [sp, #20]
 800b8c4:	9304      	strpl	r3, [sp, #16]
 800b8c6:	9b00      	ldr	r3, [sp, #0]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	db3d      	blt.n	800b948 <_dtoa_r+0x248>
 800b8cc:	9b05      	ldr	r3, [sp, #20]
 800b8ce:	9a00      	ldr	r2, [sp, #0]
 800b8d0:	920a      	str	r2, [sp, #40]	; 0x28
 800b8d2:	4413      	add	r3, r2
 800b8d4:	9305      	str	r3, [sp, #20]
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	9307      	str	r3, [sp, #28]
 800b8da:	9b06      	ldr	r3, [sp, #24]
 800b8dc:	2b09      	cmp	r3, #9
 800b8de:	f200 8089 	bhi.w	800b9f4 <_dtoa_r+0x2f4>
 800b8e2:	2b05      	cmp	r3, #5
 800b8e4:	bfc4      	itt	gt
 800b8e6:	3b04      	subgt	r3, #4
 800b8e8:	9306      	strgt	r3, [sp, #24]
 800b8ea:	9b06      	ldr	r3, [sp, #24]
 800b8ec:	f1a3 0302 	sub.w	r3, r3, #2
 800b8f0:	bfcc      	ite	gt
 800b8f2:	2500      	movgt	r5, #0
 800b8f4:	2501      	movle	r5, #1
 800b8f6:	2b03      	cmp	r3, #3
 800b8f8:	f200 8087 	bhi.w	800ba0a <_dtoa_r+0x30a>
 800b8fc:	e8df f003 	tbb	[pc, r3]
 800b900:	59383a2d 	.word	0x59383a2d
 800b904:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b908:	441d      	add	r5, r3
 800b90a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b90e:	2b20      	cmp	r3, #32
 800b910:	bfc1      	itttt	gt
 800b912:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b916:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b91a:	fa0b f303 	lslgt.w	r3, fp, r3
 800b91e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b922:	bfda      	itte	le
 800b924:	f1c3 0320 	rsble	r3, r3, #32
 800b928:	fa06 f003 	lslle.w	r0, r6, r3
 800b92c:	4318      	orrgt	r0, r3
 800b92e:	f7f4 fde9 	bl	8000504 <__aeabi_ui2d>
 800b932:	2301      	movs	r3, #1
 800b934:	4606      	mov	r6, r0
 800b936:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b93a:	3d01      	subs	r5, #1
 800b93c:	930e      	str	r3, [sp, #56]	; 0x38
 800b93e:	e76a      	b.n	800b816 <_dtoa_r+0x116>
 800b940:	2301      	movs	r3, #1
 800b942:	e7b2      	b.n	800b8aa <_dtoa_r+0x1aa>
 800b944:	900b      	str	r0, [sp, #44]	; 0x2c
 800b946:	e7b1      	b.n	800b8ac <_dtoa_r+0x1ac>
 800b948:	9b04      	ldr	r3, [sp, #16]
 800b94a:	9a00      	ldr	r2, [sp, #0]
 800b94c:	1a9b      	subs	r3, r3, r2
 800b94e:	9304      	str	r3, [sp, #16]
 800b950:	4253      	negs	r3, r2
 800b952:	9307      	str	r3, [sp, #28]
 800b954:	2300      	movs	r3, #0
 800b956:	930a      	str	r3, [sp, #40]	; 0x28
 800b958:	e7bf      	b.n	800b8da <_dtoa_r+0x1da>
 800b95a:	2300      	movs	r3, #0
 800b95c:	9308      	str	r3, [sp, #32]
 800b95e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b960:	2b00      	cmp	r3, #0
 800b962:	dc55      	bgt.n	800ba10 <_dtoa_r+0x310>
 800b964:	2301      	movs	r3, #1
 800b966:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b96a:	461a      	mov	r2, r3
 800b96c:	9209      	str	r2, [sp, #36]	; 0x24
 800b96e:	e00c      	b.n	800b98a <_dtoa_r+0x28a>
 800b970:	2301      	movs	r3, #1
 800b972:	e7f3      	b.n	800b95c <_dtoa_r+0x25c>
 800b974:	2300      	movs	r3, #0
 800b976:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b978:	9308      	str	r3, [sp, #32]
 800b97a:	9b00      	ldr	r3, [sp, #0]
 800b97c:	4413      	add	r3, r2
 800b97e:	9302      	str	r3, [sp, #8]
 800b980:	3301      	adds	r3, #1
 800b982:	2b01      	cmp	r3, #1
 800b984:	9303      	str	r3, [sp, #12]
 800b986:	bfb8      	it	lt
 800b988:	2301      	movlt	r3, #1
 800b98a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b98c:	2200      	movs	r2, #0
 800b98e:	6042      	str	r2, [r0, #4]
 800b990:	2204      	movs	r2, #4
 800b992:	f102 0614 	add.w	r6, r2, #20
 800b996:	429e      	cmp	r6, r3
 800b998:	6841      	ldr	r1, [r0, #4]
 800b99a:	d93d      	bls.n	800ba18 <_dtoa_r+0x318>
 800b99c:	4620      	mov	r0, r4
 800b99e:	f001 f839 	bl	800ca14 <_Balloc>
 800b9a2:	9001      	str	r0, [sp, #4]
 800b9a4:	2800      	cmp	r0, #0
 800b9a6:	d13b      	bne.n	800ba20 <_dtoa_r+0x320>
 800b9a8:	4b11      	ldr	r3, [pc, #68]	; (800b9f0 <_dtoa_r+0x2f0>)
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b9b0:	e6c0      	b.n	800b734 <_dtoa_r+0x34>
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	e7df      	b.n	800b976 <_dtoa_r+0x276>
 800b9b6:	bf00      	nop
 800b9b8:	636f4361 	.word	0x636f4361
 800b9bc:	3fd287a7 	.word	0x3fd287a7
 800b9c0:	8b60c8b3 	.word	0x8b60c8b3
 800b9c4:	3fc68a28 	.word	0x3fc68a28
 800b9c8:	509f79fb 	.word	0x509f79fb
 800b9cc:	3fd34413 	.word	0x3fd34413
 800b9d0:	0800f09e 	.word	0x0800f09e
 800b9d4:	0800f0b5 	.word	0x0800f0b5
 800b9d8:	7ff00000 	.word	0x7ff00000
 800b9dc:	0800f09a 	.word	0x0800f09a
 800b9e0:	0800f091 	.word	0x0800f091
 800b9e4:	0800ef15 	.word	0x0800ef15
 800b9e8:	3ff80000 	.word	0x3ff80000
 800b9ec:	0800f220 	.word	0x0800f220
 800b9f0:	0800f110 	.word	0x0800f110
 800b9f4:	2501      	movs	r5, #1
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	9306      	str	r3, [sp, #24]
 800b9fa:	9508      	str	r5, [sp, #32]
 800b9fc:	f04f 33ff 	mov.w	r3, #4294967295
 800ba00:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ba04:	2200      	movs	r2, #0
 800ba06:	2312      	movs	r3, #18
 800ba08:	e7b0      	b.n	800b96c <_dtoa_r+0x26c>
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	9308      	str	r3, [sp, #32]
 800ba0e:	e7f5      	b.n	800b9fc <_dtoa_r+0x2fc>
 800ba10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba12:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ba16:	e7b8      	b.n	800b98a <_dtoa_r+0x28a>
 800ba18:	3101      	adds	r1, #1
 800ba1a:	6041      	str	r1, [r0, #4]
 800ba1c:	0052      	lsls	r2, r2, #1
 800ba1e:	e7b8      	b.n	800b992 <_dtoa_r+0x292>
 800ba20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba22:	9a01      	ldr	r2, [sp, #4]
 800ba24:	601a      	str	r2, [r3, #0]
 800ba26:	9b03      	ldr	r3, [sp, #12]
 800ba28:	2b0e      	cmp	r3, #14
 800ba2a:	f200 809d 	bhi.w	800bb68 <_dtoa_r+0x468>
 800ba2e:	2d00      	cmp	r5, #0
 800ba30:	f000 809a 	beq.w	800bb68 <_dtoa_r+0x468>
 800ba34:	9b00      	ldr	r3, [sp, #0]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	dd32      	ble.n	800baa0 <_dtoa_r+0x3a0>
 800ba3a:	4ab7      	ldr	r2, [pc, #732]	; (800bd18 <_dtoa_r+0x618>)
 800ba3c:	f003 030f 	and.w	r3, r3, #15
 800ba40:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ba44:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ba48:	9b00      	ldr	r3, [sp, #0]
 800ba4a:	05d8      	lsls	r0, r3, #23
 800ba4c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ba50:	d516      	bpl.n	800ba80 <_dtoa_r+0x380>
 800ba52:	4bb2      	ldr	r3, [pc, #712]	; (800bd1c <_dtoa_r+0x61c>)
 800ba54:	ec51 0b19 	vmov	r0, r1, d9
 800ba58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ba5c:	f7f4 fef6 	bl	800084c <__aeabi_ddiv>
 800ba60:	f007 070f 	and.w	r7, r7, #15
 800ba64:	4682      	mov	sl, r0
 800ba66:	468b      	mov	fp, r1
 800ba68:	2503      	movs	r5, #3
 800ba6a:	4eac      	ldr	r6, [pc, #688]	; (800bd1c <_dtoa_r+0x61c>)
 800ba6c:	b957      	cbnz	r7, 800ba84 <_dtoa_r+0x384>
 800ba6e:	4642      	mov	r2, r8
 800ba70:	464b      	mov	r3, r9
 800ba72:	4650      	mov	r0, sl
 800ba74:	4659      	mov	r1, fp
 800ba76:	f7f4 fee9 	bl	800084c <__aeabi_ddiv>
 800ba7a:	4682      	mov	sl, r0
 800ba7c:	468b      	mov	fp, r1
 800ba7e:	e028      	b.n	800bad2 <_dtoa_r+0x3d2>
 800ba80:	2502      	movs	r5, #2
 800ba82:	e7f2      	b.n	800ba6a <_dtoa_r+0x36a>
 800ba84:	07f9      	lsls	r1, r7, #31
 800ba86:	d508      	bpl.n	800ba9a <_dtoa_r+0x39a>
 800ba88:	4640      	mov	r0, r8
 800ba8a:	4649      	mov	r1, r9
 800ba8c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ba90:	f7f4 fdb2 	bl	80005f8 <__aeabi_dmul>
 800ba94:	3501      	adds	r5, #1
 800ba96:	4680      	mov	r8, r0
 800ba98:	4689      	mov	r9, r1
 800ba9a:	107f      	asrs	r7, r7, #1
 800ba9c:	3608      	adds	r6, #8
 800ba9e:	e7e5      	b.n	800ba6c <_dtoa_r+0x36c>
 800baa0:	f000 809b 	beq.w	800bbda <_dtoa_r+0x4da>
 800baa4:	9b00      	ldr	r3, [sp, #0]
 800baa6:	4f9d      	ldr	r7, [pc, #628]	; (800bd1c <_dtoa_r+0x61c>)
 800baa8:	425e      	negs	r6, r3
 800baaa:	4b9b      	ldr	r3, [pc, #620]	; (800bd18 <_dtoa_r+0x618>)
 800baac:	f006 020f 	and.w	r2, r6, #15
 800bab0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab8:	ec51 0b19 	vmov	r0, r1, d9
 800babc:	f7f4 fd9c 	bl	80005f8 <__aeabi_dmul>
 800bac0:	1136      	asrs	r6, r6, #4
 800bac2:	4682      	mov	sl, r0
 800bac4:	468b      	mov	fp, r1
 800bac6:	2300      	movs	r3, #0
 800bac8:	2502      	movs	r5, #2
 800baca:	2e00      	cmp	r6, #0
 800bacc:	d17a      	bne.n	800bbc4 <_dtoa_r+0x4c4>
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d1d3      	bne.n	800ba7a <_dtoa_r+0x37a>
 800bad2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	f000 8082 	beq.w	800bbde <_dtoa_r+0x4de>
 800bada:	4b91      	ldr	r3, [pc, #580]	; (800bd20 <_dtoa_r+0x620>)
 800badc:	2200      	movs	r2, #0
 800bade:	4650      	mov	r0, sl
 800bae0:	4659      	mov	r1, fp
 800bae2:	f7f4 fffb 	bl	8000adc <__aeabi_dcmplt>
 800bae6:	2800      	cmp	r0, #0
 800bae8:	d079      	beq.n	800bbde <_dtoa_r+0x4de>
 800baea:	9b03      	ldr	r3, [sp, #12]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d076      	beq.n	800bbde <_dtoa_r+0x4de>
 800baf0:	9b02      	ldr	r3, [sp, #8]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	dd36      	ble.n	800bb64 <_dtoa_r+0x464>
 800baf6:	9b00      	ldr	r3, [sp, #0]
 800baf8:	4650      	mov	r0, sl
 800bafa:	4659      	mov	r1, fp
 800bafc:	1e5f      	subs	r7, r3, #1
 800bafe:	2200      	movs	r2, #0
 800bb00:	4b88      	ldr	r3, [pc, #544]	; (800bd24 <_dtoa_r+0x624>)
 800bb02:	f7f4 fd79 	bl	80005f8 <__aeabi_dmul>
 800bb06:	9e02      	ldr	r6, [sp, #8]
 800bb08:	4682      	mov	sl, r0
 800bb0a:	468b      	mov	fp, r1
 800bb0c:	3501      	adds	r5, #1
 800bb0e:	4628      	mov	r0, r5
 800bb10:	f7f4 fd08 	bl	8000524 <__aeabi_i2d>
 800bb14:	4652      	mov	r2, sl
 800bb16:	465b      	mov	r3, fp
 800bb18:	f7f4 fd6e 	bl	80005f8 <__aeabi_dmul>
 800bb1c:	4b82      	ldr	r3, [pc, #520]	; (800bd28 <_dtoa_r+0x628>)
 800bb1e:	2200      	movs	r2, #0
 800bb20:	f7f4 fbb4 	bl	800028c <__adddf3>
 800bb24:	46d0      	mov	r8, sl
 800bb26:	46d9      	mov	r9, fp
 800bb28:	4682      	mov	sl, r0
 800bb2a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bb2e:	2e00      	cmp	r6, #0
 800bb30:	d158      	bne.n	800bbe4 <_dtoa_r+0x4e4>
 800bb32:	4b7e      	ldr	r3, [pc, #504]	; (800bd2c <_dtoa_r+0x62c>)
 800bb34:	2200      	movs	r2, #0
 800bb36:	4640      	mov	r0, r8
 800bb38:	4649      	mov	r1, r9
 800bb3a:	f7f4 fba5 	bl	8000288 <__aeabi_dsub>
 800bb3e:	4652      	mov	r2, sl
 800bb40:	465b      	mov	r3, fp
 800bb42:	4680      	mov	r8, r0
 800bb44:	4689      	mov	r9, r1
 800bb46:	f7f4 ffe7 	bl	8000b18 <__aeabi_dcmpgt>
 800bb4a:	2800      	cmp	r0, #0
 800bb4c:	f040 8295 	bne.w	800c07a <_dtoa_r+0x97a>
 800bb50:	4652      	mov	r2, sl
 800bb52:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bb56:	4640      	mov	r0, r8
 800bb58:	4649      	mov	r1, r9
 800bb5a:	f7f4 ffbf 	bl	8000adc <__aeabi_dcmplt>
 800bb5e:	2800      	cmp	r0, #0
 800bb60:	f040 8289 	bne.w	800c076 <_dtoa_r+0x976>
 800bb64:	ec5b ab19 	vmov	sl, fp, d9
 800bb68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	f2c0 8148 	blt.w	800be00 <_dtoa_r+0x700>
 800bb70:	9a00      	ldr	r2, [sp, #0]
 800bb72:	2a0e      	cmp	r2, #14
 800bb74:	f300 8144 	bgt.w	800be00 <_dtoa_r+0x700>
 800bb78:	4b67      	ldr	r3, [pc, #412]	; (800bd18 <_dtoa_r+0x618>)
 800bb7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb7e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bb82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	f280 80d5 	bge.w	800bd34 <_dtoa_r+0x634>
 800bb8a:	9b03      	ldr	r3, [sp, #12]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	f300 80d1 	bgt.w	800bd34 <_dtoa_r+0x634>
 800bb92:	f040 826f 	bne.w	800c074 <_dtoa_r+0x974>
 800bb96:	4b65      	ldr	r3, [pc, #404]	; (800bd2c <_dtoa_r+0x62c>)
 800bb98:	2200      	movs	r2, #0
 800bb9a:	4640      	mov	r0, r8
 800bb9c:	4649      	mov	r1, r9
 800bb9e:	f7f4 fd2b 	bl	80005f8 <__aeabi_dmul>
 800bba2:	4652      	mov	r2, sl
 800bba4:	465b      	mov	r3, fp
 800bba6:	f7f4 ffad 	bl	8000b04 <__aeabi_dcmpge>
 800bbaa:	9e03      	ldr	r6, [sp, #12]
 800bbac:	4637      	mov	r7, r6
 800bbae:	2800      	cmp	r0, #0
 800bbb0:	f040 8245 	bne.w	800c03e <_dtoa_r+0x93e>
 800bbb4:	9d01      	ldr	r5, [sp, #4]
 800bbb6:	2331      	movs	r3, #49	; 0x31
 800bbb8:	f805 3b01 	strb.w	r3, [r5], #1
 800bbbc:	9b00      	ldr	r3, [sp, #0]
 800bbbe:	3301      	adds	r3, #1
 800bbc0:	9300      	str	r3, [sp, #0]
 800bbc2:	e240      	b.n	800c046 <_dtoa_r+0x946>
 800bbc4:	07f2      	lsls	r2, r6, #31
 800bbc6:	d505      	bpl.n	800bbd4 <_dtoa_r+0x4d4>
 800bbc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbcc:	f7f4 fd14 	bl	80005f8 <__aeabi_dmul>
 800bbd0:	3501      	adds	r5, #1
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	1076      	asrs	r6, r6, #1
 800bbd6:	3708      	adds	r7, #8
 800bbd8:	e777      	b.n	800baca <_dtoa_r+0x3ca>
 800bbda:	2502      	movs	r5, #2
 800bbdc:	e779      	b.n	800bad2 <_dtoa_r+0x3d2>
 800bbde:	9f00      	ldr	r7, [sp, #0]
 800bbe0:	9e03      	ldr	r6, [sp, #12]
 800bbe2:	e794      	b.n	800bb0e <_dtoa_r+0x40e>
 800bbe4:	9901      	ldr	r1, [sp, #4]
 800bbe6:	4b4c      	ldr	r3, [pc, #304]	; (800bd18 <_dtoa_r+0x618>)
 800bbe8:	4431      	add	r1, r6
 800bbea:	910d      	str	r1, [sp, #52]	; 0x34
 800bbec:	9908      	ldr	r1, [sp, #32]
 800bbee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bbf2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bbf6:	2900      	cmp	r1, #0
 800bbf8:	d043      	beq.n	800bc82 <_dtoa_r+0x582>
 800bbfa:	494d      	ldr	r1, [pc, #308]	; (800bd30 <_dtoa_r+0x630>)
 800bbfc:	2000      	movs	r0, #0
 800bbfe:	f7f4 fe25 	bl	800084c <__aeabi_ddiv>
 800bc02:	4652      	mov	r2, sl
 800bc04:	465b      	mov	r3, fp
 800bc06:	f7f4 fb3f 	bl	8000288 <__aeabi_dsub>
 800bc0a:	9d01      	ldr	r5, [sp, #4]
 800bc0c:	4682      	mov	sl, r0
 800bc0e:	468b      	mov	fp, r1
 800bc10:	4649      	mov	r1, r9
 800bc12:	4640      	mov	r0, r8
 800bc14:	f7f4 ffa0 	bl	8000b58 <__aeabi_d2iz>
 800bc18:	4606      	mov	r6, r0
 800bc1a:	f7f4 fc83 	bl	8000524 <__aeabi_i2d>
 800bc1e:	4602      	mov	r2, r0
 800bc20:	460b      	mov	r3, r1
 800bc22:	4640      	mov	r0, r8
 800bc24:	4649      	mov	r1, r9
 800bc26:	f7f4 fb2f 	bl	8000288 <__aeabi_dsub>
 800bc2a:	3630      	adds	r6, #48	; 0x30
 800bc2c:	f805 6b01 	strb.w	r6, [r5], #1
 800bc30:	4652      	mov	r2, sl
 800bc32:	465b      	mov	r3, fp
 800bc34:	4680      	mov	r8, r0
 800bc36:	4689      	mov	r9, r1
 800bc38:	f7f4 ff50 	bl	8000adc <__aeabi_dcmplt>
 800bc3c:	2800      	cmp	r0, #0
 800bc3e:	d163      	bne.n	800bd08 <_dtoa_r+0x608>
 800bc40:	4642      	mov	r2, r8
 800bc42:	464b      	mov	r3, r9
 800bc44:	4936      	ldr	r1, [pc, #216]	; (800bd20 <_dtoa_r+0x620>)
 800bc46:	2000      	movs	r0, #0
 800bc48:	f7f4 fb1e 	bl	8000288 <__aeabi_dsub>
 800bc4c:	4652      	mov	r2, sl
 800bc4e:	465b      	mov	r3, fp
 800bc50:	f7f4 ff44 	bl	8000adc <__aeabi_dcmplt>
 800bc54:	2800      	cmp	r0, #0
 800bc56:	f040 80b5 	bne.w	800bdc4 <_dtoa_r+0x6c4>
 800bc5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc5c:	429d      	cmp	r5, r3
 800bc5e:	d081      	beq.n	800bb64 <_dtoa_r+0x464>
 800bc60:	4b30      	ldr	r3, [pc, #192]	; (800bd24 <_dtoa_r+0x624>)
 800bc62:	2200      	movs	r2, #0
 800bc64:	4650      	mov	r0, sl
 800bc66:	4659      	mov	r1, fp
 800bc68:	f7f4 fcc6 	bl	80005f8 <__aeabi_dmul>
 800bc6c:	4b2d      	ldr	r3, [pc, #180]	; (800bd24 <_dtoa_r+0x624>)
 800bc6e:	4682      	mov	sl, r0
 800bc70:	468b      	mov	fp, r1
 800bc72:	4640      	mov	r0, r8
 800bc74:	4649      	mov	r1, r9
 800bc76:	2200      	movs	r2, #0
 800bc78:	f7f4 fcbe 	bl	80005f8 <__aeabi_dmul>
 800bc7c:	4680      	mov	r8, r0
 800bc7e:	4689      	mov	r9, r1
 800bc80:	e7c6      	b.n	800bc10 <_dtoa_r+0x510>
 800bc82:	4650      	mov	r0, sl
 800bc84:	4659      	mov	r1, fp
 800bc86:	f7f4 fcb7 	bl	80005f8 <__aeabi_dmul>
 800bc8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc8c:	9d01      	ldr	r5, [sp, #4]
 800bc8e:	930f      	str	r3, [sp, #60]	; 0x3c
 800bc90:	4682      	mov	sl, r0
 800bc92:	468b      	mov	fp, r1
 800bc94:	4649      	mov	r1, r9
 800bc96:	4640      	mov	r0, r8
 800bc98:	f7f4 ff5e 	bl	8000b58 <__aeabi_d2iz>
 800bc9c:	4606      	mov	r6, r0
 800bc9e:	f7f4 fc41 	bl	8000524 <__aeabi_i2d>
 800bca2:	3630      	adds	r6, #48	; 0x30
 800bca4:	4602      	mov	r2, r0
 800bca6:	460b      	mov	r3, r1
 800bca8:	4640      	mov	r0, r8
 800bcaa:	4649      	mov	r1, r9
 800bcac:	f7f4 faec 	bl	8000288 <__aeabi_dsub>
 800bcb0:	f805 6b01 	strb.w	r6, [r5], #1
 800bcb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcb6:	429d      	cmp	r5, r3
 800bcb8:	4680      	mov	r8, r0
 800bcba:	4689      	mov	r9, r1
 800bcbc:	f04f 0200 	mov.w	r2, #0
 800bcc0:	d124      	bne.n	800bd0c <_dtoa_r+0x60c>
 800bcc2:	4b1b      	ldr	r3, [pc, #108]	; (800bd30 <_dtoa_r+0x630>)
 800bcc4:	4650      	mov	r0, sl
 800bcc6:	4659      	mov	r1, fp
 800bcc8:	f7f4 fae0 	bl	800028c <__adddf3>
 800bccc:	4602      	mov	r2, r0
 800bcce:	460b      	mov	r3, r1
 800bcd0:	4640      	mov	r0, r8
 800bcd2:	4649      	mov	r1, r9
 800bcd4:	f7f4 ff20 	bl	8000b18 <__aeabi_dcmpgt>
 800bcd8:	2800      	cmp	r0, #0
 800bcda:	d173      	bne.n	800bdc4 <_dtoa_r+0x6c4>
 800bcdc:	4652      	mov	r2, sl
 800bcde:	465b      	mov	r3, fp
 800bce0:	4913      	ldr	r1, [pc, #76]	; (800bd30 <_dtoa_r+0x630>)
 800bce2:	2000      	movs	r0, #0
 800bce4:	f7f4 fad0 	bl	8000288 <__aeabi_dsub>
 800bce8:	4602      	mov	r2, r0
 800bcea:	460b      	mov	r3, r1
 800bcec:	4640      	mov	r0, r8
 800bcee:	4649      	mov	r1, r9
 800bcf0:	f7f4 fef4 	bl	8000adc <__aeabi_dcmplt>
 800bcf4:	2800      	cmp	r0, #0
 800bcf6:	f43f af35 	beq.w	800bb64 <_dtoa_r+0x464>
 800bcfa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bcfc:	1e6b      	subs	r3, r5, #1
 800bcfe:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd00:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bd04:	2b30      	cmp	r3, #48	; 0x30
 800bd06:	d0f8      	beq.n	800bcfa <_dtoa_r+0x5fa>
 800bd08:	9700      	str	r7, [sp, #0]
 800bd0a:	e049      	b.n	800bda0 <_dtoa_r+0x6a0>
 800bd0c:	4b05      	ldr	r3, [pc, #20]	; (800bd24 <_dtoa_r+0x624>)
 800bd0e:	f7f4 fc73 	bl	80005f8 <__aeabi_dmul>
 800bd12:	4680      	mov	r8, r0
 800bd14:	4689      	mov	r9, r1
 800bd16:	e7bd      	b.n	800bc94 <_dtoa_r+0x594>
 800bd18:	0800f220 	.word	0x0800f220
 800bd1c:	0800f1f8 	.word	0x0800f1f8
 800bd20:	3ff00000 	.word	0x3ff00000
 800bd24:	40240000 	.word	0x40240000
 800bd28:	401c0000 	.word	0x401c0000
 800bd2c:	40140000 	.word	0x40140000
 800bd30:	3fe00000 	.word	0x3fe00000
 800bd34:	9d01      	ldr	r5, [sp, #4]
 800bd36:	4656      	mov	r6, sl
 800bd38:	465f      	mov	r7, fp
 800bd3a:	4642      	mov	r2, r8
 800bd3c:	464b      	mov	r3, r9
 800bd3e:	4630      	mov	r0, r6
 800bd40:	4639      	mov	r1, r7
 800bd42:	f7f4 fd83 	bl	800084c <__aeabi_ddiv>
 800bd46:	f7f4 ff07 	bl	8000b58 <__aeabi_d2iz>
 800bd4a:	4682      	mov	sl, r0
 800bd4c:	f7f4 fbea 	bl	8000524 <__aeabi_i2d>
 800bd50:	4642      	mov	r2, r8
 800bd52:	464b      	mov	r3, r9
 800bd54:	f7f4 fc50 	bl	80005f8 <__aeabi_dmul>
 800bd58:	4602      	mov	r2, r0
 800bd5a:	460b      	mov	r3, r1
 800bd5c:	4630      	mov	r0, r6
 800bd5e:	4639      	mov	r1, r7
 800bd60:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bd64:	f7f4 fa90 	bl	8000288 <__aeabi_dsub>
 800bd68:	f805 6b01 	strb.w	r6, [r5], #1
 800bd6c:	9e01      	ldr	r6, [sp, #4]
 800bd6e:	9f03      	ldr	r7, [sp, #12]
 800bd70:	1bae      	subs	r6, r5, r6
 800bd72:	42b7      	cmp	r7, r6
 800bd74:	4602      	mov	r2, r0
 800bd76:	460b      	mov	r3, r1
 800bd78:	d135      	bne.n	800bde6 <_dtoa_r+0x6e6>
 800bd7a:	f7f4 fa87 	bl	800028c <__adddf3>
 800bd7e:	4642      	mov	r2, r8
 800bd80:	464b      	mov	r3, r9
 800bd82:	4606      	mov	r6, r0
 800bd84:	460f      	mov	r7, r1
 800bd86:	f7f4 fec7 	bl	8000b18 <__aeabi_dcmpgt>
 800bd8a:	b9d0      	cbnz	r0, 800bdc2 <_dtoa_r+0x6c2>
 800bd8c:	4642      	mov	r2, r8
 800bd8e:	464b      	mov	r3, r9
 800bd90:	4630      	mov	r0, r6
 800bd92:	4639      	mov	r1, r7
 800bd94:	f7f4 fe98 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd98:	b110      	cbz	r0, 800bda0 <_dtoa_r+0x6a0>
 800bd9a:	f01a 0f01 	tst.w	sl, #1
 800bd9e:	d110      	bne.n	800bdc2 <_dtoa_r+0x6c2>
 800bda0:	4620      	mov	r0, r4
 800bda2:	ee18 1a10 	vmov	r1, s16
 800bda6:	f000 fe75 	bl	800ca94 <_Bfree>
 800bdaa:	2300      	movs	r3, #0
 800bdac:	9800      	ldr	r0, [sp, #0]
 800bdae:	702b      	strb	r3, [r5, #0]
 800bdb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bdb2:	3001      	adds	r0, #1
 800bdb4:	6018      	str	r0, [r3, #0]
 800bdb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	f43f acf1 	beq.w	800b7a0 <_dtoa_r+0xa0>
 800bdbe:	601d      	str	r5, [r3, #0]
 800bdc0:	e4ee      	b.n	800b7a0 <_dtoa_r+0xa0>
 800bdc2:	9f00      	ldr	r7, [sp, #0]
 800bdc4:	462b      	mov	r3, r5
 800bdc6:	461d      	mov	r5, r3
 800bdc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bdcc:	2a39      	cmp	r2, #57	; 0x39
 800bdce:	d106      	bne.n	800bdde <_dtoa_r+0x6de>
 800bdd0:	9a01      	ldr	r2, [sp, #4]
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	d1f7      	bne.n	800bdc6 <_dtoa_r+0x6c6>
 800bdd6:	9901      	ldr	r1, [sp, #4]
 800bdd8:	2230      	movs	r2, #48	; 0x30
 800bdda:	3701      	adds	r7, #1
 800bddc:	700a      	strb	r2, [r1, #0]
 800bdde:	781a      	ldrb	r2, [r3, #0]
 800bde0:	3201      	adds	r2, #1
 800bde2:	701a      	strb	r2, [r3, #0]
 800bde4:	e790      	b.n	800bd08 <_dtoa_r+0x608>
 800bde6:	4ba6      	ldr	r3, [pc, #664]	; (800c080 <_dtoa_r+0x980>)
 800bde8:	2200      	movs	r2, #0
 800bdea:	f7f4 fc05 	bl	80005f8 <__aeabi_dmul>
 800bdee:	2200      	movs	r2, #0
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	4606      	mov	r6, r0
 800bdf4:	460f      	mov	r7, r1
 800bdf6:	f7f4 fe67 	bl	8000ac8 <__aeabi_dcmpeq>
 800bdfa:	2800      	cmp	r0, #0
 800bdfc:	d09d      	beq.n	800bd3a <_dtoa_r+0x63a>
 800bdfe:	e7cf      	b.n	800bda0 <_dtoa_r+0x6a0>
 800be00:	9a08      	ldr	r2, [sp, #32]
 800be02:	2a00      	cmp	r2, #0
 800be04:	f000 80d7 	beq.w	800bfb6 <_dtoa_r+0x8b6>
 800be08:	9a06      	ldr	r2, [sp, #24]
 800be0a:	2a01      	cmp	r2, #1
 800be0c:	f300 80ba 	bgt.w	800bf84 <_dtoa_r+0x884>
 800be10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be12:	2a00      	cmp	r2, #0
 800be14:	f000 80b2 	beq.w	800bf7c <_dtoa_r+0x87c>
 800be18:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800be1c:	9e07      	ldr	r6, [sp, #28]
 800be1e:	9d04      	ldr	r5, [sp, #16]
 800be20:	9a04      	ldr	r2, [sp, #16]
 800be22:	441a      	add	r2, r3
 800be24:	9204      	str	r2, [sp, #16]
 800be26:	9a05      	ldr	r2, [sp, #20]
 800be28:	2101      	movs	r1, #1
 800be2a:	441a      	add	r2, r3
 800be2c:	4620      	mov	r0, r4
 800be2e:	9205      	str	r2, [sp, #20]
 800be30:	f000 ff32 	bl	800cc98 <__i2b>
 800be34:	4607      	mov	r7, r0
 800be36:	2d00      	cmp	r5, #0
 800be38:	dd0c      	ble.n	800be54 <_dtoa_r+0x754>
 800be3a:	9b05      	ldr	r3, [sp, #20]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	dd09      	ble.n	800be54 <_dtoa_r+0x754>
 800be40:	42ab      	cmp	r3, r5
 800be42:	9a04      	ldr	r2, [sp, #16]
 800be44:	bfa8      	it	ge
 800be46:	462b      	movge	r3, r5
 800be48:	1ad2      	subs	r2, r2, r3
 800be4a:	9204      	str	r2, [sp, #16]
 800be4c:	9a05      	ldr	r2, [sp, #20]
 800be4e:	1aed      	subs	r5, r5, r3
 800be50:	1ad3      	subs	r3, r2, r3
 800be52:	9305      	str	r3, [sp, #20]
 800be54:	9b07      	ldr	r3, [sp, #28]
 800be56:	b31b      	cbz	r3, 800bea0 <_dtoa_r+0x7a0>
 800be58:	9b08      	ldr	r3, [sp, #32]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	f000 80af 	beq.w	800bfbe <_dtoa_r+0x8be>
 800be60:	2e00      	cmp	r6, #0
 800be62:	dd13      	ble.n	800be8c <_dtoa_r+0x78c>
 800be64:	4639      	mov	r1, r7
 800be66:	4632      	mov	r2, r6
 800be68:	4620      	mov	r0, r4
 800be6a:	f000 ffd5 	bl	800ce18 <__pow5mult>
 800be6e:	ee18 2a10 	vmov	r2, s16
 800be72:	4601      	mov	r1, r0
 800be74:	4607      	mov	r7, r0
 800be76:	4620      	mov	r0, r4
 800be78:	f000 ff24 	bl	800ccc4 <__multiply>
 800be7c:	ee18 1a10 	vmov	r1, s16
 800be80:	4680      	mov	r8, r0
 800be82:	4620      	mov	r0, r4
 800be84:	f000 fe06 	bl	800ca94 <_Bfree>
 800be88:	ee08 8a10 	vmov	s16, r8
 800be8c:	9b07      	ldr	r3, [sp, #28]
 800be8e:	1b9a      	subs	r2, r3, r6
 800be90:	d006      	beq.n	800bea0 <_dtoa_r+0x7a0>
 800be92:	ee18 1a10 	vmov	r1, s16
 800be96:	4620      	mov	r0, r4
 800be98:	f000 ffbe 	bl	800ce18 <__pow5mult>
 800be9c:	ee08 0a10 	vmov	s16, r0
 800bea0:	2101      	movs	r1, #1
 800bea2:	4620      	mov	r0, r4
 800bea4:	f000 fef8 	bl	800cc98 <__i2b>
 800bea8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800beaa:	2b00      	cmp	r3, #0
 800beac:	4606      	mov	r6, r0
 800beae:	f340 8088 	ble.w	800bfc2 <_dtoa_r+0x8c2>
 800beb2:	461a      	mov	r2, r3
 800beb4:	4601      	mov	r1, r0
 800beb6:	4620      	mov	r0, r4
 800beb8:	f000 ffae 	bl	800ce18 <__pow5mult>
 800bebc:	9b06      	ldr	r3, [sp, #24]
 800bebe:	2b01      	cmp	r3, #1
 800bec0:	4606      	mov	r6, r0
 800bec2:	f340 8081 	ble.w	800bfc8 <_dtoa_r+0x8c8>
 800bec6:	f04f 0800 	mov.w	r8, #0
 800beca:	6933      	ldr	r3, [r6, #16]
 800becc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bed0:	6918      	ldr	r0, [r3, #16]
 800bed2:	f000 fe91 	bl	800cbf8 <__hi0bits>
 800bed6:	f1c0 0020 	rsb	r0, r0, #32
 800beda:	9b05      	ldr	r3, [sp, #20]
 800bedc:	4418      	add	r0, r3
 800bede:	f010 001f 	ands.w	r0, r0, #31
 800bee2:	f000 8092 	beq.w	800c00a <_dtoa_r+0x90a>
 800bee6:	f1c0 0320 	rsb	r3, r0, #32
 800beea:	2b04      	cmp	r3, #4
 800beec:	f340 808a 	ble.w	800c004 <_dtoa_r+0x904>
 800bef0:	f1c0 001c 	rsb	r0, r0, #28
 800bef4:	9b04      	ldr	r3, [sp, #16]
 800bef6:	4403      	add	r3, r0
 800bef8:	9304      	str	r3, [sp, #16]
 800befa:	9b05      	ldr	r3, [sp, #20]
 800befc:	4403      	add	r3, r0
 800befe:	4405      	add	r5, r0
 800bf00:	9305      	str	r3, [sp, #20]
 800bf02:	9b04      	ldr	r3, [sp, #16]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	dd07      	ble.n	800bf18 <_dtoa_r+0x818>
 800bf08:	ee18 1a10 	vmov	r1, s16
 800bf0c:	461a      	mov	r2, r3
 800bf0e:	4620      	mov	r0, r4
 800bf10:	f000 ffdc 	bl	800cecc <__lshift>
 800bf14:	ee08 0a10 	vmov	s16, r0
 800bf18:	9b05      	ldr	r3, [sp, #20]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	dd05      	ble.n	800bf2a <_dtoa_r+0x82a>
 800bf1e:	4631      	mov	r1, r6
 800bf20:	461a      	mov	r2, r3
 800bf22:	4620      	mov	r0, r4
 800bf24:	f000 ffd2 	bl	800cecc <__lshift>
 800bf28:	4606      	mov	r6, r0
 800bf2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d06e      	beq.n	800c00e <_dtoa_r+0x90e>
 800bf30:	ee18 0a10 	vmov	r0, s16
 800bf34:	4631      	mov	r1, r6
 800bf36:	f001 f839 	bl	800cfac <__mcmp>
 800bf3a:	2800      	cmp	r0, #0
 800bf3c:	da67      	bge.n	800c00e <_dtoa_r+0x90e>
 800bf3e:	9b00      	ldr	r3, [sp, #0]
 800bf40:	3b01      	subs	r3, #1
 800bf42:	ee18 1a10 	vmov	r1, s16
 800bf46:	9300      	str	r3, [sp, #0]
 800bf48:	220a      	movs	r2, #10
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	4620      	mov	r0, r4
 800bf4e:	f000 fdc3 	bl	800cad8 <__multadd>
 800bf52:	9b08      	ldr	r3, [sp, #32]
 800bf54:	ee08 0a10 	vmov	s16, r0
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	f000 81b1 	beq.w	800c2c0 <_dtoa_r+0xbc0>
 800bf5e:	2300      	movs	r3, #0
 800bf60:	4639      	mov	r1, r7
 800bf62:	220a      	movs	r2, #10
 800bf64:	4620      	mov	r0, r4
 800bf66:	f000 fdb7 	bl	800cad8 <__multadd>
 800bf6a:	9b02      	ldr	r3, [sp, #8]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	4607      	mov	r7, r0
 800bf70:	f300 808e 	bgt.w	800c090 <_dtoa_r+0x990>
 800bf74:	9b06      	ldr	r3, [sp, #24]
 800bf76:	2b02      	cmp	r3, #2
 800bf78:	dc51      	bgt.n	800c01e <_dtoa_r+0x91e>
 800bf7a:	e089      	b.n	800c090 <_dtoa_r+0x990>
 800bf7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bf7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bf82:	e74b      	b.n	800be1c <_dtoa_r+0x71c>
 800bf84:	9b03      	ldr	r3, [sp, #12]
 800bf86:	1e5e      	subs	r6, r3, #1
 800bf88:	9b07      	ldr	r3, [sp, #28]
 800bf8a:	42b3      	cmp	r3, r6
 800bf8c:	bfbf      	itttt	lt
 800bf8e:	9b07      	ldrlt	r3, [sp, #28]
 800bf90:	9607      	strlt	r6, [sp, #28]
 800bf92:	1af2      	sublt	r2, r6, r3
 800bf94:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bf96:	bfb6      	itet	lt
 800bf98:	189b      	addlt	r3, r3, r2
 800bf9a:	1b9e      	subge	r6, r3, r6
 800bf9c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800bf9e:	9b03      	ldr	r3, [sp, #12]
 800bfa0:	bfb8      	it	lt
 800bfa2:	2600      	movlt	r6, #0
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	bfb7      	itett	lt
 800bfa8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800bfac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800bfb0:	1a9d      	sublt	r5, r3, r2
 800bfb2:	2300      	movlt	r3, #0
 800bfb4:	e734      	b.n	800be20 <_dtoa_r+0x720>
 800bfb6:	9e07      	ldr	r6, [sp, #28]
 800bfb8:	9d04      	ldr	r5, [sp, #16]
 800bfba:	9f08      	ldr	r7, [sp, #32]
 800bfbc:	e73b      	b.n	800be36 <_dtoa_r+0x736>
 800bfbe:	9a07      	ldr	r2, [sp, #28]
 800bfc0:	e767      	b.n	800be92 <_dtoa_r+0x792>
 800bfc2:	9b06      	ldr	r3, [sp, #24]
 800bfc4:	2b01      	cmp	r3, #1
 800bfc6:	dc18      	bgt.n	800bffa <_dtoa_r+0x8fa>
 800bfc8:	f1ba 0f00 	cmp.w	sl, #0
 800bfcc:	d115      	bne.n	800bffa <_dtoa_r+0x8fa>
 800bfce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bfd2:	b993      	cbnz	r3, 800bffa <_dtoa_r+0x8fa>
 800bfd4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bfd8:	0d1b      	lsrs	r3, r3, #20
 800bfda:	051b      	lsls	r3, r3, #20
 800bfdc:	b183      	cbz	r3, 800c000 <_dtoa_r+0x900>
 800bfde:	9b04      	ldr	r3, [sp, #16]
 800bfe0:	3301      	adds	r3, #1
 800bfe2:	9304      	str	r3, [sp, #16]
 800bfe4:	9b05      	ldr	r3, [sp, #20]
 800bfe6:	3301      	adds	r3, #1
 800bfe8:	9305      	str	r3, [sp, #20]
 800bfea:	f04f 0801 	mov.w	r8, #1
 800bfee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	f47f af6a 	bne.w	800beca <_dtoa_r+0x7ca>
 800bff6:	2001      	movs	r0, #1
 800bff8:	e76f      	b.n	800beda <_dtoa_r+0x7da>
 800bffa:	f04f 0800 	mov.w	r8, #0
 800bffe:	e7f6      	b.n	800bfee <_dtoa_r+0x8ee>
 800c000:	4698      	mov	r8, r3
 800c002:	e7f4      	b.n	800bfee <_dtoa_r+0x8ee>
 800c004:	f43f af7d 	beq.w	800bf02 <_dtoa_r+0x802>
 800c008:	4618      	mov	r0, r3
 800c00a:	301c      	adds	r0, #28
 800c00c:	e772      	b.n	800bef4 <_dtoa_r+0x7f4>
 800c00e:	9b03      	ldr	r3, [sp, #12]
 800c010:	2b00      	cmp	r3, #0
 800c012:	dc37      	bgt.n	800c084 <_dtoa_r+0x984>
 800c014:	9b06      	ldr	r3, [sp, #24]
 800c016:	2b02      	cmp	r3, #2
 800c018:	dd34      	ble.n	800c084 <_dtoa_r+0x984>
 800c01a:	9b03      	ldr	r3, [sp, #12]
 800c01c:	9302      	str	r3, [sp, #8]
 800c01e:	9b02      	ldr	r3, [sp, #8]
 800c020:	b96b      	cbnz	r3, 800c03e <_dtoa_r+0x93e>
 800c022:	4631      	mov	r1, r6
 800c024:	2205      	movs	r2, #5
 800c026:	4620      	mov	r0, r4
 800c028:	f000 fd56 	bl	800cad8 <__multadd>
 800c02c:	4601      	mov	r1, r0
 800c02e:	4606      	mov	r6, r0
 800c030:	ee18 0a10 	vmov	r0, s16
 800c034:	f000 ffba 	bl	800cfac <__mcmp>
 800c038:	2800      	cmp	r0, #0
 800c03a:	f73f adbb 	bgt.w	800bbb4 <_dtoa_r+0x4b4>
 800c03e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c040:	9d01      	ldr	r5, [sp, #4]
 800c042:	43db      	mvns	r3, r3
 800c044:	9300      	str	r3, [sp, #0]
 800c046:	f04f 0800 	mov.w	r8, #0
 800c04a:	4631      	mov	r1, r6
 800c04c:	4620      	mov	r0, r4
 800c04e:	f000 fd21 	bl	800ca94 <_Bfree>
 800c052:	2f00      	cmp	r7, #0
 800c054:	f43f aea4 	beq.w	800bda0 <_dtoa_r+0x6a0>
 800c058:	f1b8 0f00 	cmp.w	r8, #0
 800c05c:	d005      	beq.n	800c06a <_dtoa_r+0x96a>
 800c05e:	45b8      	cmp	r8, r7
 800c060:	d003      	beq.n	800c06a <_dtoa_r+0x96a>
 800c062:	4641      	mov	r1, r8
 800c064:	4620      	mov	r0, r4
 800c066:	f000 fd15 	bl	800ca94 <_Bfree>
 800c06a:	4639      	mov	r1, r7
 800c06c:	4620      	mov	r0, r4
 800c06e:	f000 fd11 	bl	800ca94 <_Bfree>
 800c072:	e695      	b.n	800bda0 <_dtoa_r+0x6a0>
 800c074:	2600      	movs	r6, #0
 800c076:	4637      	mov	r7, r6
 800c078:	e7e1      	b.n	800c03e <_dtoa_r+0x93e>
 800c07a:	9700      	str	r7, [sp, #0]
 800c07c:	4637      	mov	r7, r6
 800c07e:	e599      	b.n	800bbb4 <_dtoa_r+0x4b4>
 800c080:	40240000 	.word	0x40240000
 800c084:	9b08      	ldr	r3, [sp, #32]
 800c086:	2b00      	cmp	r3, #0
 800c088:	f000 80ca 	beq.w	800c220 <_dtoa_r+0xb20>
 800c08c:	9b03      	ldr	r3, [sp, #12]
 800c08e:	9302      	str	r3, [sp, #8]
 800c090:	2d00      	cmp	r5, #0
 800c092:	dd05      	ble.n	800c0a0 <_dtoa_r+0x9a0>
 800c094:	4639      	mov	r1, r7
 800c096:	462a      	mov	r2, r5
 800c098:	4620      	mov	r0, r4
 800c09a:	f000 ff17 	bl	800cecc <__lshift>
 800c09e:	4607      	mov	r7, r0
 800c0a0:	f1b8 0f00 	cmp.w	r8, #0
 800c0a4:	d05b      	beq.n	800c15e <_dtoa_r+0xa5e>
 800c0a6:	6879      	ldr	r1, [r7, #4]
 800c0a8:	4620      	mov	r0, r4
 800c0aa:	f000 fcb3 	bl	800ca14 <_Balloc>
 800c0ae:	4605      	mov	r5, r0
 800c0b0:	b928      	cbnz	r0, 800c0be <_dtoa_r+0x9be>
 800c0b2:	4b87      	ldr	r3, [pc, #540]	; (800c2d0 <_dtoa_r+0xbd0>)
 800c0b4:	4602      	mov	r2, r0
 800c0b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c0ba:	f7ff bb3b 	b.w	800b734 <_dtoa_r+0x34>
 800c0be:	693a      	ldr	r2, [r7, #16]
 800c0c0:	3202      	adds	r2, #2
 800c0c2:	0092      	lsls	r2, r2, #2
 800c0c4:	f107 010c 	add.w	r1, r7, #12
 800c0c8:	300c      	adds	r0, #12
 800c0ca:	f000 fc95 	bl	800c9f8 <memcpy>
 800c0ce:	2201      	movs	r2, #1
 800c0d0:	4629      	mov	r1, r5
 800c0d2:	4620      	mov	r0, r4
 800c0d4:	f000 fefa 	bl	800cecc <__lshift>
 800c0d8:	9b01      	ldr	r3, [sp, #4]
 800c0da:	f103 0901 	add.w	r9, r3, #1
 800c0de:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c0e2:	4413      	add	r3, r2
 800c0e4:	9305      	str	r3, [sp, #20]
 800c0e6:	f00a 0301 	and.w	r3, sl, #1
 800c0ea:	46b8      	mov	r8, r7
 800c0ec:	9304      	str	r3, [sp, #16]
 800c0ee:	4607      	mov	r7, r0
 800c0f0:	4631      	mov	r1, r6
 800c0f2:	ee18 0a10 	vmov	r0, s16
 800c0f6:	f7ff fa77 	bl	800b5e8 <quorem>
 800c0fa:	4641      	mov	r1, r8
 800c0fc:	9002      	str	r0, [sp, #8]
 800c0fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c102:	ee18 0a10 	vmov	r0, s16
 800c106:	f000 ff51 	bl	800cfac <__mcmp>
 800c10a:	463a      	mov	r2, r7
 800c10c:	9003      	str	r0, [sp, #12]
 800c10e:	4631      	mov	r1, r6
 800c110:	4620      	mov	r0, r4
 800c112:	f000 ff67 	bl	800cfe4 <__mdiff>
 800c116:	68c2      	ldr	r2, [r0, #12]
 800c118:	f109 3bff 	add.w	fp, r9, #4294967295
 800c11c:	4605      	mov	r5, r0
 800c11e:	bb02      	cbnz	r2, 800c162 <_dtoa_r+0xa62>
 800c120:	4601      	mov	r1, r0
 800c122:	ee18 0a10 	vmov	r0, s16
 800c126:	f000 ff41 	bl	800cfac <__mcmp>
 800c12a:	4602      	mov	r2, r0
 800c12c:	4629      	mov	r1, r5
 800c12e:	4620      	mov	r0, r4
 800c130:	9207      	str	r2, [sp, #28]
 800c132:	f000 fcaf 	bl	800ca94 <_Bfree>
 800c136:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c13a:	ea43 0102 	orr.w	r1, r3, r2
 800c13e:	9b04      	ldr	r3, [sp, #16]
 800c140:	430b      	orrs	r3, r1
 800c142:	464d      	mov	r5, r9
 800c144:	d10f      	bne.n	800c166 <_dtoa_r+0xa66>
 800c146:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c14a:	d02a      	beq.n	800c1a2 <_dtoa_r+0xaa2>
 800c14c:	9b03      	ldr	r3, [sp, #12]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	dd02      	ble.n	800c158 <_dtoa_r+0xa58>
 800c152:	9b02      	ldr	r3, [sp, #8]
 800c154:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c158:	f88b a000 	strb.w	sl, [fp]
 800c15c:	e775      	b.n	800c04a <_dtoa_r+0x94a>
 800c15e:	4638      	mov	r0, r7
 800c160:	e7ba      	b.n	800c0d8 <_dtoa_r+0x9d8>
 800c162:	2201      	movs	r2, #1
 800c164:	e7e2      	b.n	800c12c <_dtoa_r+0xa2c>
 800c166:	9b03      	ldr	r3, [sp, #12]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	db04      	blt.n	800c176 <_dtoa_r+0xa76>
 800c16c:	9906      	ldr	r1, [sp, #24]
 800c16e:	430b      	orrs	r3, r1
 800c170:	9904      	ldr	r1, [sp, #16]
 800c172:	430b      	orrs	r3, r1
 800c174:	d122      	bne.n	800c1bc <_dtoa_r+0xabc>
 800c176:	2a00      	cmp	r2, #0
 800c178:	ddee      	ble.n	800c158 <_dtoa_r+0xa58>
 800c17a:	ee18 1a10 	vmov	r1, s16
 800c17e:	2201      	movs	r2, #1
 800c180:	4620      	mov	r0, r4
 800c182:	f000 fea3 	bl	800cecc <__lshift>
 800c186:	4631      	mov	r1, r6
 800c188:	ee08 0a10 	vmov	s16, r0
 800c18c:	f000 ff0e 	bl	800cfac <__mcmp>
 800c190:	2800      	cmp	r0, #0
 800c192:	dc03      	bgt.n	800c19c <_dtoa_r+0xa9c>
 800c194:	d1e0      	bne.n	800c158 <_dtoa_r+0xa58>
 800c196:	f01a 0f01 	tst.w	sl, #1
 800c19a:	d0dd      	beq.n	800c158 <_dtoa_r+0xa58>
 800c19c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c1a0:	d1d7      	bne.n	800c152 <_dtoa_r+0xa52>
 800c1a2:	2339      	movs	r3, #57	; 0x39
 800c1a4:	f88b 3000 	strb.w	r3, [fp]
 800c1a8:	462b      	mov	r3, r5
 800c1aa:	461d      	mov	r5, r3
 800c1ac:	3b01      	subs	r3, #1
 800c1ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c1b2:	2a39      	cmp	r2, #57	; 0x39
 800c1b4:	d071      	beq.n	800c29a <_dtoa_r+0xb9a>
 800c1b6:	3201      	adds	r2, #1
 800c1b8:	701a      	strb	r2, [r3, #0]
 800c1ba:	e746      	b.n	800c04a <_dtoa_r+0x94a>
 800c1bc:	2a00      	cmp	r2, #0
 800c1be:	dd07      	ble.n	800c1d0 <_dtoa_r+0xad0>
 800c1c0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c1c4:	d0ed      	beq.n	800c1a2 <_dtoa_r+0xaa2>
 800c1c6:	f10a 0301 	add.w	r3, sl, #1
 800c1ca:	f88b 3000 	strb.w	r3, [fp]
 800c1ce:	e73c      	b.n	800c04a <_dtoa_r+0x94a>
 800c1d0:	9b05      	ldr	r3, [sp, #20]
 800c1d2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c1d6:	4599      	cmp	r9, r3
 800c1d8:	d047      	beq.n	800c26a <_dtoa_r+0xb6a>
 800c1da:	ee18 1a10 	vmov	r1, s16
 800c1de:	2300      	movs	r3, #0
 800c1e0:	220a      	movs	r2, #10
 800c1e2:	4620      	mov	r0, r4
 800c1e4:	f000 fc78 	bl	800cad8 <__multadd>
 800c1e8:	45b8      	cmp	r8, r7
 800c1ea:	ee08 0a10 	vmov	s16, r0
 800c1ee:	f04f 0300 	mov.w	r3, #0
 800c1f2:	f04f 020a 	mov.w	r2, #10
 800c1f6:	4641      	mov	r1, r8
 800c1f8:	4620      	mov	r0, r4
 800c1fa:	d106      	bne.n	800c20a <_dtoa_r+0xb0a>
 800c1fc:	f000 fc6c 	bl	800cad8 <__multadd>
 800c200:	4680      	mov	r8, r0
 800c202:	4607      	mov	r7, r0
 800c204:	f109 0901 	add.w	r9, r9, #1
 800c208:	e772      	b.n	800c0f0 <_dtoa_r+0x9f0>
 800c20a:	f000 fc65 	bl	800cad8 <__multadd>
 800c20e:	4639      	mov	r1, r7
 800c210:	4680      	mov	r8, r0
 800c212:	2300      	movs	r3, #0
 800c214:	220a      	movs	r2, #10
 800c216:	4620      	mov	r0, r4
 800c218:	f000 fc5e 	bl	800cad8 <__multadd>
 800c21c:	4607      	mov	r7, r0
 800c21e:	e7f1      	b.n	800c204 <_dtoa_r+0xb04>
 800c220:	9b03      	ldr	r3, [sp, #12]
 800c222:	9302      	str	r3, [sp, #8]
 800c224:	9d01      	ldr	r5, [sp, #4]
 800c226:	ee18 0a10 	vmov	r0, s16
 800c22a:	4631      	mov	r1, r6
 800c22c:	f7ff f9dc 	bl	800b5e8 <quorem>
 800c230:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c234:	9b01      	ldr	r3, [sp, #4]
 800c236:	f805 ab01 	strb.w	sl, [r5], #1
 800c23a:	1aea      	subs	r2, r5, r3
 800c23c:	9b02      	ldr	r3, [sp, #8]
 800c23e:	4293      	cmp	r3, r2
 800c240:	dd09      	ble.n	800c256 <_dtoa_r+0xb56>
 800c242:	ee18 1a10 	vmov	r1, s16
 800c246:	2300      	movs	r3, #0
 800c248:	220a      	movs	r2, #10
 800c24a:	4620      	mov	r0, r4
 800c24c:	f000 fc44 	bl	800cad8 <__multadd>
 800c250:	ee08 0a10 	vmov	s16, r0
 800c254:	e7e7      	b.n	800c226 <_dtoa_r+0xb26>
 800c256:	9b02      	ldr	r3, [sp, #8]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	bfc8      	it	gt
 800c25c:	461d      	movgt	r5, r3
 800c25e:	9b01      	ldr	r3, [sp, #4]
 800c260:	bfd8      	it	le
 800c262:	2501      	movle	r5, #1
 800c264:	441d      	add	r5, r3
 800c266:	f04f 0800 	mov.w	r8, #0
 800c26a:	ee18 1a10 	vmov	r1, s16
 800c26e:	2201      	movs	r2, #1
 800c270:	4620      	mov	r0, r4
 800c272:	f000 fe2b 	bl	800cecc <__lshift>
 800c276:	4631      	mov	r1, r6
 800c278:	ee08 0a10 	vmov	s16, r0
 800c27c:	f000 fe96 	bl	800cfac <__mcmp>
 800c280:	2800      	cmp	r0, #0
 800c282:	dc91      	bgt.n	800c1a8 <_dtoa_r+0xaa8>
 800c284:	d102      	bne.n	800c28c <_dtoa_r+0xb8c>
 800c286:	f01a 0f01 	tst.w	sl, #1
 800c28a:	d18d      	bne.n	800c1a8 <_dtoa_r+0xaa8>
 800c28c:	462b      	mov	r3, r5
 800c28e:	461d      	mov	r5, r3
 800c290:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c294:	2a30      	cmp	r2, #48	; 0x30
 800c296:	d0fa      	beq.n	800c28e <_dtoa_r+0xb8e>
 800c298:	e6d7      	b.n	800c04a <_dtoa_r+0x94a>
 800c29a:	9a01      	ldr	r2, [sp, #4]
 800c29c:	429a      	cmp	r2, r3
 800c29e:	d184      	bne.n	800c1aa <_dtoa_r+0xaaa>
 800c2a0:	9b00      	ldr	r3, [sp, #0]
 800c2a2:	3301      	adds	r3, #1
 800c2a4:	9300      	str	r3, [sp, #0]
 800c2a6:	2331      	movs	r3, #49	; 0x31
 800c2a8:	7013      	strb	r3, [r2, #0]
 800c2aa:	e6ce      	b.n	800c04a <_dtoa_r+0x94a>
 800c2ac:	4b09      	ldr	r3, [pc, #36]	; (800c2d4 <_dtoa_r+0xbd4>)
 800c2ae:	f7ff ba95 	b.w	800b7dc <_dtoa_r+0xdc>
 800c2b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	f47f aa6e 	bne.w	800b796 <_dtoa_r+0x96>
 800c2ba:	4b07      	ldr	r3, [pc, #28]	; (800c2d8 <_dtoa_r+0xbd8>)
 800c2bc:	f7ff ba8e 	b.w	800b7dc <_dtoa_r+0xdc>
 800c2c0:	9b02      	ldr	r3, [sp, #8]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	dcae      	bgt.n	800c224 <_dtoa_r+0xb24>
 800c2c6:	9b06      	ldr	r3, [sp, #24]
 800c2c8:	2b02      	cmp	r3, #2
 800c2ca:	f73f aea8 	bgt.w	800c01e <_dtoa_r+0x91e>
 800c2ce:	e7a9      	b.n	800c224 <_dtoa_r+0xb24>
 800c2d0:	0800f110 	.word	0x0800f110
 800c2d4:	0800ef14 	.word	0x0800ef14
 800c2d8:	0800f091 	.word	0x0800f091

0800c2dc <rshift>:
 800c2dc:	6903      	ldr	r3, [r0, #16]
 800c2de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c2e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c2e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c2ea:	f100 0414 	add.w	r4, r0, #20
 800c2ee:	dd45      	ble.n	800c37c <rshift+0xa0>
 800c2f0:	f011 011f 	ands.w	r1, r1, #31
 800c2f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c2f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c2fc:	d10c      	bne.n	800c318 <rshift+0x3c>
 800c2fe:	f100 0710 	add.w	r7, r0, #16
 800c302:	4629      	mov	r1, r5
 800c304:	42b1      	cmp	r1, r6
 800c306:	d334      	bcc.n	800c372 <rshift+0x96>
 800c308:	1a9b      	subs	r3, r3, r2
 800c30a:	009b      	lsls	r3, r3, #2
 800c30c:	1eea      	subs	r2, r5, #3
 800c30e:	4296      	cmp	r6, r2
 800c310:	bf38      	it	cc
 800c312:	2300      	movcc	r3, #0
 800c314:	4423      	add	r3, r4
 800c316:	e015      	b.n	800c344 <rshift+0x68>
 800c318:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c31c:	f1c1 0820 	rsb	r8, r1, #32
 800c320:	40cf      	lsrs	r7, r1
 800c322:	f105 0e04 	add.w	lr, r5, #4
 800c326:	46a1      	mov	r9, r4
 800c328:	4576      	cmp	r6, lr
 800c32a:	46f4      	mov	ip, lr
 800c32c:	d815      	bhi.n	800c35a <rshift+0x7e>
 800c32e:	1a9a      	subs	r2, r3, r2
 800c330:	0092      	lsls	r2, r2, #2
 800c332:	3a04      	subs	r2, #4
 800c334:	3501      	adds	r5, #1
 800c336:	42ae      	cmp	r6, r5
 800c338:	bf38      	it	cc
 800c33a:	2200      	movcc	r2, #0
 800c33c:	18a3      	adds	r3, r4, r2
 800c33e:	50a7      	str	r7, [r4, r2]
 800c340:	b107      	cbz	r7, 800c344 <rshift+0x68>
 800c342:	3304      	adds	r3, #4
 800c344:	1b1a      	subs	r2, r3, r4
 800c346:	42a3      	cmp	r3, r4
 800c348:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c34c:	bf08      	it	eq
 800c34e:	2300      	moveq	r3, #0
 800c350:	6102      	str	r2, [r0, #16]
 800c352:	bf08      	it	eq
 800c354:	6143      	streq	r3, [r0, #20]
 800c356:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c35a:	f8dc c000 	ldr.w	ip, [ip]
 800c35e:	fa0c fc08 	lsl.w	ip, ip, r8
 800c362:	ea4c 0707 	orr.w	r7, ip, r7
 800c366:	f849 7b04 	str.w	r7, [r9], #4
 800c36a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c36e:	40cf      	lsrs	r7, r1
 800c370:	e7da      	b.n	800c328 <rshift+0x4c>
 800c372:	f851 cb04 	ldr.w	ip, [r1], #4
 800c376:	f847 cf04 	str.w	ip, [r7, #4]!
 800c37a:	e7c3      	b.n	800c304 <rshift+0x28>
 800c37c:	4623      	mov	r3, r4
 800c37e:	e7e1      	b.n	800c344 <rshift+0x68>

0800c380 <__hexdig_fun>:
 800c380:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c384:	2b09      	cmp	r3, #9
 800c386:	d802      	bhi.n	800c38e <__hexdig_fun+0xe>
 800c388:	3820      	subs	r0, #32
 800c38a:	b2c0      	uxtb	r0, r0
 800c38c:	4770      	bx	lr
 800c38e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c392:	2b05      	cmp	r3, #5
 800c394:	d801      	bhi.n	800c39a <__hexdig_fun+0x1a>
 800c396:	3847      	subs	r0, #71	; 0x47
 800c398:	e7f7      	b.n	800c38a <__hexdig_fun+0xa>
 800c39a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c39e:	2b05      	cmp	r3, #5
 800c3a0:	d801      	bhi.n	800c3a6 <__hexdig_fun+0x26>
 800c3a2:	3827      	subs	r0, #39	; 0x27
 800c3a4:	e7f1      	b.n	800c38a <__hexdig_fun+0xa>
 800c3a6:	2000      	movs	r0, #0
 800c3a8:	4770      	bx	lr
	...

0800c3ac <__gethex>:
 800c3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3b0:	ed2d 8b02 	vpush	{d8}
 800c3b4:	b089      	sub	sp, #36	; 0x24
 800c3b6:	ee08 0a10 	vmov	s16, r0
 800c3ba:	9304      	str	r3, [sp, #16]
 800c3bc:	4bb4      	ldr	r3, [pc, #720]	; (800c690 <__gethex+0x2e4>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	9301      	str	r3, [sp, #4]
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	468b      	mov	fp, r1
 800c3c6:	4690      	mov	r8, r2
 800c3c8:	f7f3 ff02 	bl	80001d0 <strlen>
 800c3cc:	9b01      	ldr	r3, [sp, #4]
 800c3ce:	f8db 2000 	ldr.w	r2, [fp]
 800c3d2:	4403      	add	r3, r0
 800c3d4:	4682      	mov	sl, r0
 800c3d6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c3da:	9305      	str	r3, [sp, #20]
 800c3dc:	1c93      	adds	r3, r2, #2
 800c3de:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c3e2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c3e6:	32fe      	adds	r2, #254	; 0xfe
 800c3e8:	18d1      	adds	r1, r2, r3
 800c3ea:	461f      	mov	r7, r3
 800c3ec:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c3f0:	9100      	str	r1, [sp, #0]
 800c3f2:	2830      	cmp	r0, #48	; 0x30
 800c3f4:	d0f8      	beq.n	800c3e8 <__gethex+0x3c>
 800c3f6:	f7ff ffc3 	bl	800c380 <__hexdig_fun>
 800c3fa:	4604      	mov	r4, r0
 800c3fc:	2800      	cmp	r0, #0
 800c3fe:	d13a      	bne.n	800c476 <__gethex+0xca>
 800c400:	9901      	ldr	r1, [sp, #4]
 800c402:	4652      	mov	r2, sl
 800c404:	4638      	mov	r0, r7
 800c406:	f001 fa33 	bl	800d870 <strncmp>
 800c40a:	4605      	mov	r5, r0
 800c40c:	2800      	cmp	r0, #0
 800c40e:	d168      	bne.n	800c4e2 <__gethex+0x136>
 800c410:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c414:	eb07 060a 	add.w	r6, r7, sl
 800c418:	f7ff ffb2 	bl	800c380 <__hexdig_fun>
 800c41c:	2800      	cmp	r0, #0
 800c41e:	d062      	beq.n	800c4e6 <__gethex+0x13a>
 800c420:	4633      	mov	r3, r6
 800c422:	7818      	ldrb	r0, [r3, #0]
 800c424:	2830      	cmp	r0, #48	; 0x30
 800c426:	461f      	mov	r7, r3
 800c428:	f103 0301 	add.w	r3, r3, #1
 800c42c:	d0f9      	beq.n	800c422 <__gethex+0x76>
 800c42e:	f7ff ffa7 	bl	800c380 <__hexdig_fun>
 800c432:	2301      	movs	r3, #1
 800c434:	fab0 f480 	clz	r4, r0
 800c438:	0964      	lsrs	r4, r4, #5
 800c43a:	4635      	mov	r5, r6
 800c43c:	9300      	str	r3, [sp, #0]
 800c43e:	463a      	mov	r2, r7
 800c440:	4616      	mov	r6, r2
 800c442:	3201      	adds	r2, #1
 800c444:	7830      	ldrb	r0, [r6, #0]
 800c446:	f7ff ff9b 	bl	800c380 <__hexdig_fun>
 800c44a:	2800      	cmp	r0, #0
 800c44c:	d1f8      	bne.n	800c440 <__gethex+0x94>
 800c44e:	9901      	ldr	r1, [sp, #4]
 800c450:	4652      	mov	r2, sl
 800c452:	4630      	mov	r0, r6
 800c454:	f001 fa0c 	bl	800d870 <strncmp>
 800c458:	b980      	cbnz	r0, 800c47c <__gethex+0xd0>
 800c45a:	b94d      	cbnz	r5, 800c470 <__gethex+0xc4>
 800c45c:	eb06 050a 	add.w	r5, r6, sl
 800c460:	462a      	mov	r2, r5
 800c462:	4616      	mov	r6, r2
 800c464:	3201      	adds	r2, #1
 800c466:	7830      	ldrb	r0, [r6, #0]
 800c468:	f7ff ff8a 	bl	800c380 <__hexdig_fun>
 800c46c:	2800      	cmp	r0, #0
 800c46e:	d1f8      	bne.n	800c462 <__gethex+0xb6>
 800c470:	1bad      	subs	r5, r5, r6
 800c472:	00ad      	lsls	r5, r5, #2
 800c474:	e004      	b.n	800c480 <__gethex+0xd4>
 800c476:	2400      	movs	r4, #0
 800c478:	4625      	mov	r5, r4
 800c47a:	e7e0      	b.n	800c43e <__gethex+0x92>
 800c47c:	2d00      	cmp	r5, #0
 800c47e:	d1f7      	bne.n	800c470 <__gethex+0xc4>
 800c480:	7833      	ldrb	r3, [r6, #0]
 800c482:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c486:	2b50      	cmp	r3, #80	; 0x50
 800c488:	d13b      	bne.n	800c502 <__gethex+0x156>
 800c48a:	7873      	ldrb	r3, [r6, #1]
 800c48c:	2b2b      	cmp	r3, #43	; 0x2b
 800c48e:	d02c      	beq.n	800c4ea <__gethex+0x13e>
 800c490:	2b2d      	cmp	r3, #45	; 0x2d
 800c492:	d02e      	beq.n	800c4f2 <__gethex+0x146>
 800c494:	1c71      	adds	r1, r6, #1
 800c496:	f04f 0900 	mov.w	r9, #0
 800c49a:	7808      	ldrb	r0, [r1, #0]
 800c49c:	f7ff ff70 	bl	800c380 <__hexdig_fun>
 800c4a0:	1e43      	subs	r3, r0, #1
 800c4a2:	b2db      	uxtb	r3, r3
 800c4a4:	2b18      	cmp	r3, #24
 800c4a6:	d82c      	bhi.n	800c502 <__gethex+0x156>
 800c4a8:	f1a0 0210 	sub.w	r2, r0, #16
 800c4ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c4b0:	f7ff ff66 	bl	800c380 <__hexdig_fun>
 800c4b4:	1e43      	subs	r3, r0, #1
 800c4b6:	b2db      	uxtb	r3, r3
 800c4b8:	2b18      	cmp	r3, #24
 800c4ba:	d91d      	bls.n	800c4f8 <__gethex+0x14c>
 800c4bc:	f1b9 0f00 	cmp.w	r9, #0
 800c4c0:	d000      	beq.n	800c4c4 <__gethex+0x118>
 800c4c2:	4252      	negs	r2, r2
 800c4c4:	4415      	add	r5, r2
 800c4c6:	f8cb 1000 	str.w	r1, [fp]
 800c4ca:	b1e4      	cbz	r4, 800c506 <__gethex+0x15a>
 800c4cc:	9b00      	ldr	r3, [sp, #0]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	bf14      	ite	ne
 800c4d2:	2700      	movne	r7, #0
 800c4d4:	2706      	moveq	r7, #6
 800c4d6:	4638      	mov	r0, r7
 800c4d8:	b009      	add	sp, #36	; 0x24
 800c4da:	ecbd 8b02 	vpop	{d8}
 800c4de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4e2:	463e      	mov	r6, r7
 800c4e4:	4625      	mov	r5, r4
 800c4e6:	2401      	movs	r4, #1
 800c4e8:	e7ca      	b.n	800c480 <__gethex+0xd4>
 800c4ea:	f04f 0900 	mov.w	r9, #0
 800c4ee:	1cb1      	adds	r1, r6, #2
 800c4f0:	e7d3      	b.n	800c49a <__gethex+0xee>
 800c4f2:	f04f 0901 	mov.w	r9, #1
 800c4f6:	e7fa      	b.n	800c4ee <__gethex+0x142>
 800c4f8:	230a      	movs	r3, #10
 800c4fa:	fb03 0202 	mla	r2, r3, r2, r0
 800c4fe:	3a10      	subs	r2, #16
 800c500:	e7d4      	b.n	800c4ac <__gethex+0x100>
 800c502:	4631      	mov	r1, r6
 800c504:	e7df      	b.n	800c4c6 <__gethex+0x11a>
 800c506:	1bf3      	subs	r3, r6, r7
 800c508:	3b01      	subs	r3, #1
 800c50a:	4621      	mov	r1, r4
 800c50c:	2b07      	cmp	r3, #7
 800c50e:	dc0b      	bgt.n	800c528 <__gethex+0x17c>
 800c510:	ee18 0a10 	vmov	r0, s16
 800c514:	f000 fa7e 	bl	800ca14 <_Balloc>
 800c518:	4604      	mov	r4, r0
 800c51a:	b940      	cbnz	r0, 800c52e <__gethex+0x182>
 800c51c:	4b5d      	ldr	r3, [pc, #372]	; (800c694 <__gethex+0x2e8>)
 800c51e:	4602      	mov	r2, r0
 800c520:	21de      	movs	r1, #222	; 0xde
 800c522:	485d      	ldr	r0, [pc, #372]	; (800c698 <__gethex+0x2ec>)
 800c524:	f001 f9c6 	bl	800d8b4 <__assert_func>
 800c528:	3101      	adds	r1, #1
 800c52a:	105b      	asrs	r3, r3, #1
 800c52c:	e7ee      	b.n	800c50c <__gethex+0x160>
 800c52e:	f100 0914 	add.w	r9, r0, #20
 800c532:	f04f 0b00 	mov.w	fp, #0
 800c536:	f1ca 0301 	rsb	r3, sl, #1
 800c53a:	f8cd 9008 	str.w	r9, [sp, #8]
 800c53e:	f8cd b000 	str.w	fp, [sp]
 800c542:	9306      	str	r3, [sp, #24]
 800c544:	42b7      	cmp	r7, r6
 800c546:	d340      	bcc.n	800c5ca <__gethex+0x21e>
 800c548:	9802      	ldr	r0, [sp, #8]
 800c54a:	9b00      	ldr	r3, [sp, #0]
 800c54c:	f840 3b04 	str.w	r3, [r0], #4
 800c550:	eba0 0009 	sub.w	r0, r0, r9
 800c554:	1080      	asrs	r0, r0, #2
 800c556:	0146      	lsls	r6, r0, #5
 800c558:	6120      	str	r0, [r4, #16]
 800c55a:	4618      	mov	r0, r3
 800c55c:	f000 fb4c 	bl	800cbf8 <__hi0bits>
 800c560:	1a30      	subs	r0, r6, r0
 800c562:	f8d8 6000 	ldr.w	r6, [r8]
 800c566:	42b0      	cmp	r0, r6
 800c568:	dd63      	ble.n	800c632 <__gethex+0x286>
 800c56a:	1b87      	subs	r7, r0, r6
 800c56c:	4639      	mov	r1, r7
 800c56e:	4620      	mov	r0, r4
 800c570:	f000 fef0 	bl	800d354 <__any_on>
 800c574:	4682      	mov	sl, r0
 800c576:	b1a8      	cbz	r0, 800c5a4 <__gethex+0x1f8>
 800c578:	1e7b      	subs	r3, r7, #1
 800c57a:	1159      	asrs	r1, r3, #5
 800c57c:	f003 021f 	and.w	r2, r3, #31
 800c580:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c584:	f04f 0a01 	mov.w	sl, #1
 800c588:	fa0a f202 	lsl.w	r2, sl, r2
 800c58c:	420a      	tst	r2, r1
 800c58e:	d009      	beq.n	800c5a4 <__gethex+0x1f8>
 800c590:	4553      	cmp	r3, sl
 800c592:	dd05      	ble.n	800c5a0 <__gethex+0x1f4>
 800c594:	1eb9      	subs	r1, r7, #2
 800c596:	4620      	mov	r0, r4
 800c598:	f000 fedc 	bl	800d354 <__any_on>
 800c59c:	2800      	cmp	r0, #0
 800c59e:	d145      	bne.n	800c62c <__gethex+0x280>
 800c5a0:	f04f 0a02 	mov.w	sl, #2
 800c5a4:	4639      	mov	r1, r7
 800c5a6:	4620      	mov	r0, r4
 800c5a8:	f7ff fe98 	bl	800c2dc <rshift>
 800c5ac:	443d      	add	r5, r7
 800c5ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c5b2:	42ab      	cmp	r3, r5
 800c5b4:	da4c      	bge.n	800c650 <__gethex+0x2a4>
 800c5b6:	ee18 0a10 	vmov	r0, s16
 800c5ba:	4621      	mov	r1, r4
 800c5bc:	f000 fa6a 	bl	800ca94 <_Bfree>
 800c5c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	6013      	str	r3, [r2, #0]
 800c5c6:	27a3      	movs	r7, #163	; 0xa3
 800c5c8:	e785      	b.n	800c4d6 <__gethex+0x12a>
 800c5ca:	1e73      	subs	r3, r6, #1
 800c5cc:	9a05      	ldr	r2, [sp, #20]
 800c5ce:	9303      	str	r3, [sp, #12]
 800c5d0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c5d4:	4293      	cmp	r3, r2
 800c5d6:	d019      	beq.n	800c60c <__gethex+0x260>
 800c5d8:	f1bb 0f20 	cmp.w	fp, #32
 800c5dc:	d107      	bne.n	800c5ee <__gethex+0x242>
 800c5de:	9b02      	ldr	r3, [sp, #8]
 800c5e0:	9a00      	ldr	r2, [sp, #0]
 800c5e2:	f843 2b04 	str.w	r2, [r3], #4
 800c5e6:	9302      	str	r3, [sp, #8]
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	9300      	str	r3, [sp, #0]
 800c5ec:	469b      	mov	fp, r3
 800c5ee:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c5f2:	f7ff fec5 	bl	800c380 <__hexdig_fun>
 800c5f6:	9b00      	ldr	r3, [sp, #0]
 800c5f8:	f000 000f 	and.w	r0, r0, #15
 800c5fc:	fa00 f00b 	lsl.w	r0, r0, fp
 800c600:	4303      	orrs	r3, r0
 800c602:	9300      	str	r3, [sp, #0]
 800c604:	f10b 0b04 	add.w	fp, fp, #4
 800c608:	9b03      	ldr	r3, [sp, #12]
 800c60a:	e00d      	b.n	800c628 <__gethex+0x27c>
 800c60c:	9b03      	ldr	r3, [sp, #12]
 800c60e:	9a06      	ldr	r2, [sp, #24]
 800c610:	4413      	add	r3, r2
 800c612:	42bb      	cmp	r3, r7
 800c614:	d3e0      	bcc.n	800c5d8 <__gethex+0x22c>
 800c616:	4618      	mov	r0, r3
 800c618:	9901      	ldr	r1, [sp, #4]
 800c61a:	9307      	str	r3, [sp, #28]
 800c61c:	4652      	mov	r2, sl
 800c61e:	f001 f927 	bl	800d870 <strncmp>
 800c622:	9b07      	ldr	r3, [sp, #28]
 800c624:	2800      	cmp	r0, #0
 800c626:	d1d7      	bne.n	800c5d8 <__gethex+0x22c>
 800c628:	461e      	mov	r6, r3
 800c62a:	e78b      	b.n	800c544 <__gethex+0x198>
 800c62c:	f04f 0a03 	mov.w	sl, #3
 800c630:	e7b8      	b.n	800c5a4 <__gethex+0x1f8>
 800c632:	da0a      	bge.n	800c64a <__gethex+0x29e>
 800c634:	1a37      	subs	r7, r6, r0
 800c636:	4621      	mov	r1, r4
 800c638:	ee18 0a10 	vmov	r0, s16
 800c63c:	463a      	mov	r2, r7
 800c63e:	f000 fc45 	bl	800cecc <__lshift>
 800c642:	1bed      	subs	r5, r5, r7
 800c644:	4604      	mov	r4, r0
 800c646:	f100 0914 	add.w	r9, r0, #20
 800c64a:	f04f 0a00 	mov.w	sl, #0
 800c64e:	e7ae      	b.n	800c5ae <__gethex+0x202>
 800c650:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c654:	42a8      	cmp	r0, r5
 800c656:	dd72      	ble.n	800c73e <__gethex+0x392>
 800c658:	1b45      	subs	r5, r0, r5
 800c65a:	42ae      	cmp	r6, r5
 800c65c:	dc36      	bgt.n	800c6cc <__gethex+0x320>
 800c65e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c662:	2b02      	cmp	r3, #2
 800c664:	d02a      	beq.n	800c6bc <__gethex+0x310>
 800c666:	2b03      	cmp	r3, #3
 800c668:	d02c      	beq.n	800c6c4 <__gethex+0x318>
 800c66a:	2b01      	cmp	r3, #1
 800c66c:	d11c      	bne.n	800c6a8 <__gethex+0x2fc>
 800c66e:	42ae      	cmp	r6, r5
 800c670:	d11a      	bne.n	800c6a8 <__gethex+0x2fc>
 800c672:	2e01      	cmp	r6, #1
 800c674:	d112      	bne.n	800c69c <__gethex+0x2f0>
 800c676:	9a04      	ldr	r2, [sp, #16]
 800c678:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c67c:	6013      	str	r3, [r2, #0]
 800c67e:	2301      	movs	r3, #1
 800c680:	6123      	str	r3, [r4, #16]
 800c682:	f8c9 3000 	str.w	r3, [r9]
 800c686:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c688:	2762      	movs	r7, #98	; 0x62
 800c68a:	601c      	str	r4, [r3, #0]
 800c68c:	e723      	b.n	800c4d6 <__gethex+0x12a>
 800c68e:	bf00      	nop
 800c690:	0800f188 	.word	0x0800f188
 800c694:	0800f110 	.word	0x0800f110
 800c698:	0800f121 	.word	0x0800f121
 800c69c:	1e71      	subs	r1, r6, #1
 800c69e:	4620      	mov	r0, r4
 800c6a0:	f000 fe58 	bl	800d354 <__any_on>
 800c6a4:	2800      	cmp	r0, #0
 800c6a6:	d1e6      	bne.n	800c676 <__gethex+0x2ca>
 800c6a8:	ee18 0a10 	vmov	r0, s16
 800c6ac:	4621      	mov	r1, r4
 800c6ae:	f000 f9f1 	bl	800ca94 <_Bfree>
 800c6b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	6013      	str	r3, [r2, #0]
 800c6b8:	2750      	movs	r7, #80	; 0x50
 800c6ba:	e70c      	b.n	800c4d6 <__gethex+0x12a>
 800c6bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d1f2      	bne.n	800c6a8 <__gethex+0x2fc>
 800c6c2:	e7d8      	b.n	800c676 <__gethex+0x2ca>
 800c6c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d1d5      	bne.n	800c676 <__gethex+0x2ca>
 800c6ca:	e7ed      	b.n	800c6a8 <__gethex+0x2fc>
 800c6cc:	1e6f      	subs	r7, r5, #1
 800c6ce:	f1ba 0f00 	cmp.w	sl, #0
 800c6d2:	d131      	bne.n	800c738 <__gethex+0x38c>
 800c6d4:	b127      	cbz	r7, 800c6e0 <__gethex+0x334>
 800c6d6:	4639      	mov	r1, r7
 800c6d8:	4620      	mov	r0, r4
 800c6da:	f000 fe3b 	bl	800d354 <__any_on>
 800c6de:	4682      	mov	sl, r0
 800c6e0:	117b      	asrs	r3, r7, #5
 800c6e2:	2101      	movs	r1, #1
 800c6e4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c6e8:	f007 071f 	and.w	r7, r7, #31
 800c6ec:	fa01 f707 	lsl.w	r7, r1, r7
 800c6f0:	421f      	tst	r7, r3
 800c6f2:	4629      	mov	r1, r5
 800c6f4:	4620      	mov	r0, r4
 800c6f6:	bf18      	it	ne
 800c6f8:	f04a 0a02 	orrne.w	sl, sl, #2
 800c6fc:	1b76      	subs	r6, r6, r5
 800c6fe:	f7ff fded 	bl	800c2dc <rshift>
 800c702:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c706:	2702      	movs	r7, #2
 800c708:	f1ba 0f00 	cmp.w	sl, #0
 800c70c:	d048      	beq.n	800c7a0 <__gethex+0x3f4>
 800c70e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c712:	2b02      	cmp	r3, #2
 800c714:	d015      	beq.n	800c742 <__gethex+0x396>
 800c716:	2b03      	cmp	r3, #3
 800c718:	d017      	beq.n	800c74a <__gethex+0x39e>
 800c71a:	2b01      	cmp	r3, #1
 800c71c:	d109      	bne.n	800c732 <__gethex+0x386>
 800c71e:	f01a 0f02 	tst.w	sl, #2
 800c722:	d006      	beq.n	800c732 <__gethex+0x386>
 800c724:	f8d9 0000 	ldr.w	r0, [r9]
 800c728:	ea4a 0a00 	orr.w	sl, sl, r0
 800c72c:	f01a 0f01 	tst.w	sl, #1
 800c730:	d10e      	bne.n	800c750 <__gethex+0x3a4>
 800c732:	f047 0710 	orr.w	r7, r7, #16
 800c736:	e033      	b.n	800c7a0 <__gethex+0x3f4>
 800c738:	f04f 0a01 	mov.w	sl, #1
 800c73c:	e7d0      	b.n	800c6e0 <__gethex+0x334>
 800c73e:	2701      	movs	r7, #1
 800c740:	e7e2      	b.n	800c708 <__gethex+0x35c>
 800c742:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c744:	f1c3 0301 	rsb	r3, r3, #1
 800c748:	9315      	str	r3, [sp, #84]	; 0x54
 800c74a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d0f0      	beq.n	800c732 <__gethex+0x386>
 800c750:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c754:	f104 0314 	add.w	r3, r4, #20
 800c758:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c75c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c760:	f04f 0c00 	mov.w	ip, #0
 800c764:	4618      	mov	r0, r3
 800c766:	f853 2b04 	ldr.w	r2, [r3], #4
 800c76a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c76e:	d01c      	beq.n	800c7aa <__gethex+0x3fe>
 800c770:	3201      	adds	r2, #1
 800c772:	6002      	str	r2, [r0, #0]
 800c774:	2f02      	cmp	r7, #2
 800c776:	f104 0314 	add.w	r3, r4, #20
 800c77a:	d13f      	bne.n	800c7fc <__gethex+0x450>
 800c77c:	f8d8 2000 	ldr.w	r2, [r8]
 800c780:	3a01      	subs	r2, #1
 800c782:	42b2      	cmp	r2, r6
 800c784:	d10a      	bne.n	800c79c <__gethex+0x3f0>
 800c786:	1171      	asrs	r1, r6, #5
 800c788:	2201      	movs	r2, #1
 800c78a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c78e:	f006 061f 	and.w	r6, r6, #31
 800c792:	fa02 f606 	lsl.w	r6, r2, r6
 800c796:	421e      	tst	r6, r3
 800c798:	bf18      	it	ne
 800c79a:	4617      	movne	r7, r2
 800c79c:	f047 0720 	orr.w	r7, r7, #32
 800c7a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c7a2:	601c      	str	r4, [r3, #0]
 800c7a4:	9b04      	ldr	r3, [sp, #16]
 800c7a6:	601d      	str	r5, [r3, #0]
 800c7a8:	e695      	b.n	800c4d6 <__gethex+0x12a>
 800c7aa:	4299      	cmp	r1, r3
 800c7ac:	f843 cc04 	str.w	ip, [r3, #-4]
 800c7b0:	d8d8      	bhi.n	800c764 <__gethex+0x3b8>
 800c7b2:	68a3      	ldr	r3, [r4, #8]
 800c7b4:	459b      	cmp	fp, r3
 800c7b6:	db19      	blt.n	800c7ec <__gethex+0x440>
 800c7b8:	6861      	ldr	r1, [r4, #4]
 800c7ba:	ee18 0a10 	vmov	r0, s16
 800c7be:	3101      	adds	r1, #1
 800c7c0:	f000 f928 	bl	800ca14 <_Balloc>
 800c7c4:	4681      	mov	r9, r0
 800c7c6:	b918      	cbnz	r0, 800c7d0 <__gethex+0x424>
 800c7c8:	4b1a      	ldr	r3, [pc, #104]	; (800c834 <__gethex+0x488>)
 800c7ca:	4602      	mov	r2, r0
 800c7cc:	2184      	movs	r1, #132	; 0x84
 800c7ce:	e6a8      	b.n	800c522 <__gethex+0x176>
 800c7d0:	6922      	ldr	r2, [r4, #16]
 800c7d2:	3202      	adds	r2, #2
 800c7d4:	f104 010c 	add.w	r1, r4, #12
 800c7d8:	0092      	lsls	r2, r2, #2
 800c7da:	300c      	adds	r0, #12
 800c7dc:	f000 f90c 	bl	800c9f8 <memcpy>
 800c7e0:	4621      	mov	r1, r4
 800c7e2:	ee18 0a10 	vmov	r0, s16
 800c7e6:	f000 f955 	bl	800ca94 <_Bfree>
 800c7ea:	464c      	mov	r4, r9
 800c7ec:	6923      	ldr	r3, [r4, #16]
 800c7ee:	1c5a      	adds	r2, r3, #1
 800c7f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c7f4:	6122      	str	r2, [r4, #16]
 800c7f6:	2201      	movs	r2, #1
 800c7f8:	615a      	str	r2, [r3, #20]
 800c7fa:	e7bb      	b.n	800c774 <__gethex+0x3c8>
 800c7fc:	6922      	ldr	r2, [r4, #16]
 800c7fe:	455a      	cmp	r2, fp
 800c800:	dd0b      	ble.n	800c81a <__gethex+0x46e>
 800c802:	2101      	movs	r1, #1
 800c804:	4620      	mov	r0, r4
 800c806:	f7ff fd69 	bl	800c2dc <rshift>
 800c80a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c80e:	3501      	adds	r5, #1
 800c810:	42ab      	cmp	r3, r5
 800c812:	f6ff aed0 	blt.w	800c5b6 <__gethex+0x20a>
 800c816:	2701      	movs	r7, #1
 800c818:	e7c0      	b.n	800c79c <__gethex+0x3f0>
 800c81a:	f016 061f 	ands.w	r6, r6, #31
 800c81e:	d0fa      	beq.n	800c816 <__gethex+0x46a>
 800c820:	4453      	add	r3, sl
 800c822:	f1c6 0620 	rsb	r6, r6, #32
 800c826:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c82a:	f000 f9e5 	bl	800cbf8 <__hi0bits>
 800c82e:	42b0      	cmp	r0, r6
 800c830:	dbe7      	blt.n	800c802 <__gethex+0x456>
 800c832:	e7f0      	b.n	800c816 <__gethex+0x46a>
 800c834:	0800f110 	.word	0x0800f110

0800c838 <L_shift>:
 800c838:	f1c2 0208 	rsb	r2, r2, #8
 800c83c:	0092      	lsls	r2, r2, #2
 800c83e:	b570      	push	{r4, r5, r6, lr}
 800c840:	f1c2 0620 	rsb	r6, r2, #32
 800c844:	6843      	ldr	r3, [r0, #4]
 800c846:	6804      	ldr	r4, [r0, #0]
 800c848:	fa03 f506 	lsl.w	r5, r3, r6
 800c84c:	432c      	orrs	r4, r5
 800c84e:	40d3      	lsrs	r3, r2
 800c850:	6004      	str	r4, [r0, #0]
 800c852:	f840 3f04 	str.w	r3, [r0, #4]!
 800c856:	4288      	cmp	r0, r1
 800c858:	d3f4      	bcc.n	800c844 <L_shift+0xc>
 800c85a:	bd70      	pop	{r4, r5, r6, pc}

0800c85c <__match>:
 800c85c:	b530      	push	{r4, r5, lr}
 800c85e:	6803      	ldr	r3, [r0, #0]
 800c860:	3301      	adds	r3, #1
 800c862:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c866:	b914      	cbnz	r4, 800c86e <__match+0x12>
 800c868:	6003      	str	r3, [r0, #0]
 800c86a:	2001      	movs	r0, #1
 800c86c:	bd30      	pop	{r4, r5, pc}
 800c86e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c872:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c876:	2d19      	cmp	r5, #25
 800c878:	bf98      	it	ls
 800c87a:	3220      	addls	r2, #32
 800c87c:	42a2      	cmp	r2, r4
 800c87e:	d0f0      	beq.n	800c862 <__match+0x6>
 800c880:	2000      	movs	r0, #0
 800c882:	e7f3      	b.n	800c86c <__match+0x10>

0800c884 <__hexnan>:
 800c884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c888:	680b      	ldr	r3, [r1, #0]
 800c88a:	115e      	asrs	r6, r3, #5
 800c88c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c890:	f013 031f 	ands.w	r3, r3, #31
 800c894:	b087      	sub	sp, #28
 800c896:	bf18      	it	ne
 800c898:	3604      	addne	r6, #4
 800c89a:	2500      	movs	r5, #0
 800c89c:	1f37      	subs	r7, r6, #4
 800c89e:	4690      	mov	r8, r2
 800c8a0:	6802      	ldr	r2, [r0, #0]
 800c8a2:	9301      	str	r3, [sp, #4]
 800c8a4:	4682      	mov	sl, r0
 800c8a6:	f846 5c04 	str.w	r5, [r6, #-4]
 800c8aa:	46b9      	mov	r9, r7
 800c8ac:	463c      	mov	r4, r7
 800c8ae:	9502      	str	r5, [sp, #8]
 800c8b0:	46ab      	mov	fp, r5
 800c8b2:	7851      	ldrb	r1, [r2, #1]
 800c8b4:	1c53      	adds	r3, r2, #1
 800c8b6:	9303      	str	r3, [sp, #12]
 800c8b8:	b341      	cbz	r1, 800c90c <__hexnan+0x88>
 800c8ba:	4608      	mov	r0, r1
 800c8bc:	9205      	str	r2, [sp, #20]
 800c8be:	9104      	str	r1, [sp, #16]
 800c8c0:	f7ff fd5e 	bl	800c380 <__hexdig_fun>
 800c8c4:	2800      	cmp	r0, #0
 800c8c6:	d14f      	bne.n	800c968 <__hexnan+0xe4>
 800c8c8:	9904      	ldr	r1, [sp, #16]
 800c8ca:	9a05      	ldr	r2, [sp, #20]
 800c8cc:	2920      	cmp	r1, #32
 800c8ce:	d818      	bhi.n	800c902 <__hexnan+0x7e>
 800c8d0:	9b02      	ldr	r3, [sp, #8]
 800c8d2:	459b      	cmp	fp, r3
 800c8d4:	dd13      	ble.n	800c8fe <__hexnan+0x7a>
 800c8d6:	454c      	cmp	r4, r9
 800c8d8:	d206      	bcs.n	800c8e8 <__hexnan+0x64>
 800c8da:	2d07      	cmp	r5, #7
 800c8dc:	dc04      	bgt.n	800c8e8 <__hexnan+0x64>
 800c8de:	462a      	mov	r2, r5
 800c8e0:	4649      	mov	r1, r9
 800c8e2:	4620      	mov	r0, r4
 800c8e4:	f7ff ffa8 	bl	800c838 <L_shift>
 800c8e8:	4544      	cmp	r4, r8
 800c8ea:	d950      	bls.n	800c98e <__hexnan+0x10a>
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	f1a4 0904 	sub.w	r9, r4, #4
 800c8f2:	f844 3c04 	str.w	r3, [r4, #-4]
 800c8f6:	f8cd b008 	str.w	fp, [sp, #8]
 800c8fa:	464c      	mov	r4, r9
 800c8fc:	461d      	mov	r5, r3
 800c8fe:	9a03      	ldr	r2, [sp, #12]
 800c900:	e7d7      	b.n	800c8b2 <__hexnan+0x2e>
 800c902:	2929      	cmp	r1, #41	; 0x29
 800c904:	d156      	bne.n	800c9b4 <__hexnan+0x130>
 800c906:	3202      	adds	r2, #2
 800c908:	f8ca 2000 	str.w	r2, [sl]
 800c90c:	f1bb 0f00 	cmp.w	fp, #0
 800c910:	d050      	beq.n	800c9b4 <__hexnan+0x130>
 800c912:	454c      	cmp	r4, r9
 800c914:	d206      	bcs.n	800c924 <__hexnan+0xa0>
 800c916:	2d07      	cmp	r5, #7
 800c918:	dc04      	bgt.n	800c924 <__hexnan+0xa0>
 800c91a:	462a      	mov	r2, r5
 800c91c:	4649      	mov	r1, r9
 800c91e:	4620      	mov	r0, r4
 800c920:	f7ff ff8a 	bl	800c838 <L_shift>
 800c924:	4544      	cmp	r4, r8
 800c926:	d934      	bls.n	800c992 <__hexnan+0x10e>
 800c928:	f1a8 0204 	sub.w	r2, r8, #4
 800c92c:	4623      	mov	r3, r4
 800c92e:	f853 1b04 	ldr.w	r1, [r3], #4
 800c932:	f842 1f04 	str.w	r1, [r2, #4]!
 800c936:	429f      	cmp	r7, r3
 800c938:	d2f9      	bcs.n	800c92e <__hexnan+0xaa>
 800c93a:	1b3b      	subs	r3, r7, r4
 800c93c:	f023 0303 	bic.w	r3, r3, #3
 800c940:	3304      	adds	r3, #4
 800c942:	3401      	adds	r4, #1
 800c944:	3e03      	subs	r6, #3
 800c946:	42b4      	cmp	r4, r6
 800c948:	bf88      	it	hi
 800c94a:	2304      	movhi	r3, #4
 800c94c:	4443      	add	r3, r8
 800c94e:	2200      	movs	r2, #0
 800c950:	f843 2b04 	str.w	r2, [r3], #4
 800c954:	429f      	cmp	r7, r3
 800c956:	d2fb      	bcs.n	800c950 <__hexnan+0xcc>
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	b91b      	cbnz	r3, 800c964 <__hexnan+0xe0>
 800c95c:	4547      	cmp	r7, r8
 800c95e:	d127      	bne.n	800c9b0 <__hexnan+0x12c>
 800c960:	2301      	movs	r3, #1
 800c962:	603b      	str	r3, [r7, #0]
 800c964:	2005      	movs	r0, #5
 800c966:	e026      	b.n	800c9b6 <__hexnan+0x132>
 800c968:	3501      	adds	r5, #1
 800c96a:	2d08      	cmp	r5, #8
 800c96c:	f10b 0b01 	add.w	fp, fp, #1
 800c970:	dd06      	ble.n	800c980 <__hexnan+0xfc>
 800c972:	4544      	cmp	r4, r8
 800c974:	d9c3      	bls.n	800c8fe <__hexnan+0x7a>
 800c976:	2300      	movs	r3, #0
 800c978:	f844 3c04 	str.w	r3, [r4, #-4]
 800c97c:	2501      	movs	r5, #1
 800c97e:	3c04      	subs	r4, #4
 800c980:	6822      	ldr	r2, [r4, #0]
 800c982:	f000 000f 	and.w	r0, r0, #15
 800c986:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c98a:	6022      	str	r2, [r4, #0]
 800c98c:	e7b7      	b.n	800c8fe <__hexnan+0x7a>
 800c98e:	2508      	movs	r5, #8
 800c990:	e7b5      	b.n	800c8fe <__hexnan+0x7a>
 800c992:	9b01      	ldr	r3, [sp, #4]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d0df      	beq.n	800c958 <__hexnan+0xd4>
 800c998:	f04f 32ff 	mov.w	r2, #4294967295
 800c99c:	f1c3 0320 	rsb	r3, r3, #32
 800c9a0:	fa22 f303 	lsr.w	r3, r2, r3
 800c9a4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c9a8:	401a      	ands	r2, r3
 800c9aa:	f846 2c04 	str.w	r2, [r6, #-4]
 800c9ae:	e7d3      	b.n	800c958 <__hexnan+0xd4>
 800c9b0:	3f04      	subs	r7, #4
 800c9b2:	e7d1      	b.n	800c958 <__hexnan+0xd4>
 800c9b4:	2004      	movs	r0, #4
 800c9b6:	b007      	add	sp, #28
 800c9b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c9bc <_localeconv_r>:
 800c9bc:	4800      	ldr	r0, [pc, #0]	; (800c9c0 <_localeconv_r+0x4>)
 800c9be:	4770      	bx	lr
 800c9c0:	200003e4 	.word	0x200003e4

0800c9c4 <malloc>:
 800c9c4:	4b02      	ldr	r3, [pc, #8]	; (800c9d0 <malloc+0xc>)
 800c9c6:	4601      	mov	r1, r0
 800c9c8:	6818      	ldr	r0, [r3, #0]
 800c9ca:	f000 bd67 	b.w	800d49c <_malloc_r>
 800c9ce:	bf00      	nop
 800c9d0:	2000028c 	.word	0x2000028c

0800c9d4 <__ascii_mbtowc>:
 800c9d4:	b082      	sub	sp, #8
 800c9d6:	b901      	cbnz	r1, 800c9da <__ascii_mbtowc+0x6>
 800c9d8:	a901      	add	r1, sp, #4
 800c9da:	b142      	cbz	r2, 800c9ee <__ascii_mbtowc+0x1a>
 800c9dc:	b14b      	cbz	r3, 800c9f2 <__ascii_mbtowc+0x1e>
 800c9de:	7813      	ldrb	r3, [r2, #0]
 800c9e0:	600b      	str	r3, [r1, #0]
 800c9e2:	7812      	ldrb	r2, [r2, #0]
 800c9e4:	1e10      	subs	r0, r2, #0
 800c9e6:	bf18      	it	ne
 800c9e8:	2001      	movne	r0, #1
 800c9ea:	b002      	add	sp, #8
 800c9ec:	4770      	bx	lr
 800c9ee:	4610      	mov	r0, r2
 800c9f0:	e7fb      	b.n	800c9ea <__ascii_mbtowc+0x16>
 800c9f2:	f06f 0001 	mvn.w	r0, #1
 800c9f6:	e7f8      	b.n	800c9ea <__ascii_mbtowc+0x16>

0800c9f8 <memcpy>:
 800c9f8:	440a      	add	r2, r1
 800c9fa:	4291      	cmp	r1, r2
 800c9fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca00:	d100      	bne.n	800ca04 <memcpy+0xc>
 800ca02:	4770      	bx	lr
 800ca04:	b510      	push	{r4, lr}
 800ca06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca0e:	4291      	cmp	r1, r2
 800ca10:	d1f9      	bne.n	800ca06 <memcpy+0xe>
 800ca12:	bd10      	pop	{r4, pc}

0800ca14 <_Balloc>:
 800ca14:	b570      	push	{r4, r5, r6, lr}
 800ca16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ca18:	4604      	mov	r4, r0
 800ca1a:	460d      	mov	r5, r1
 800ca1c:	b976      	cbnz	r6, 800ca3c <_Balloc+0x28>
 800ca1e:	2010      	movs	r0, #16
 800ca20:	f7ff ffd0 	bl	800c9c4 <malloc>
 800ca24:	4602      	mov	r2, r0
 800ca26:	6260      	str	r0, [r4, #36]	; 0x24
 800ca28:	b920      	cbnz	r0, 800ca34 <_Balloc+0x20>
 800ca2a:	4b18      	ldr	r3, [pc, #96]	; (800ca8c <_Balloc+0x78>)
 800ca2c:	4818      	ldr	r0, [pc, #96]	; (800ca90 <_Balloc+0x7c>)
 800ca2e:	2166      	movs	r1, #102	; 0x66
 800ca30:	f000 ff40 	bl	800d8b4 <__assert_func>
 800ca34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca38:	6006      	str	r6, [r0, #0]
 800ca3a:	60c6      	str	r6, [r0, #12]
 800ca3c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ca3e:	68f3      	ldr	r3, [r6, #12]
 800ca40:	b183      	cbz	r3, 800ca64 <_Balloc+0x50>
 800ca42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca44:	68db      	ldr	r3, [r3, #12]
 800ca46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ca4a:	b9b8      	cbnz	r0, 800ca7c <_Balloc+0x68>
 800ca4c:	2101      	movs	r1, #1
 800ca4e:	fa01 f605 	lsl.w	r6, r1, r5
 800ca52:	1d72      	adds	r2, r6, #5
 800ca54:	0092      	lsls	r2, r2, #2
 800ca56:	4620      	mov	r0, r4
 800ca58:	f000 fc9d 	bl	800d396 <_calloc_r>
 800ca5c:	b160      	cbz	r0, 800ca78 <_Balloc+0x64>
 800ca5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ca62:	e00e      	b.n	800ca82 <_Balloc+0x6e>
 800ca64:	2221      	movs	r2, #33	; 0x21
 800ca66:	2104      	movs	r1, #4
 800ca68:	4620      	mov	r0, r4
 800ca6a:	f000 fc94 	bl	800d396 <_calloc_r>
 800ca6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca70:	60f0      	str	r0, [r6, #12]
 800ca72:	68db      	ldr	r3, [r3, #12]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d1e4      	bne.n	800ca42 <_Balloc+0x2e>
 800ca78:	2000      	movs	r0, #0
 800ca7a:	bd70      	pop	{r4, r5, r6, pc}
 800ca7c:	6802      	ldr	r2, [r0, #0]
 800ca7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ca82:	2300      	movs	r3, #0
 800ca84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ca88:	e7f7      	b.n	800ca7a <_Balloc+0x66>
 800ca8a:	bf00      	nop
 800ca8c:	0800f09e 	.word	0x0800f09e
 800ca90:	0800f19c 	.word	0x0800f19c

0800ca94 <_Bfree>:
 800ca94:	b570      	push	{r4, r5, r6, lr}
 800ca96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ca98:	4605      	mov	r5, r0
 800ca9a:	460c      	mov	r4, r1
 800ca9c:	b976      	cbnz	r6, 800cabc <_Bfree+0x28>
 800ca9e:	2010      	movs	r0, #16
 800caa0:	f7ff ff90 	bl	800c9c4 <malloc>
 800caa4:	4602      	mov	r2, r0
 800caa6:	6268      	str	r0, [r5, #36]	; 0x24
 800caa8:	b920      	cbnz	r0, 800cab4 <_Bfree+0x20>
 800caaa:	4b09      	ldr	r3, [pc, #36]	; (800cad0 <_Bfree+0x3c>)
 800caac:	4809      	ldr	r0, [pc, #36]	; (800cad4 <_Bfree+0x40>)
 800caae:	218a      	movs	r1, #138	; 0x8a
 800cab0:	f000 ff00 	bl	800d8b4 <__assert_func>
 800cab4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cab8:	6006      	str	r6, [r0, #0]
 800caba:	60c6      	str	r6, [r0, #12]
 800cabc:	b13c      	cbz	r4, 800cace <_Bfree+0x3a>
 800cabe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cac0:	6862      	ldr	r2, [r4, #4]
 800cac2:	68db      	ldr	r3, [r3, #12]
 800cac4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cac8:	6021      	str	r1, [r4, #0]
 800caca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cace:	bd70      	pop	{r4, r5, r6, pc}
 800cad0:	0800f09e 	.word	0x0800f09e
 800cad4:	0800f19c 	.word	0x0800f19c

0800cad8 <__multadd>:
 800cad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cadc:	690d      	ldr	r5, [r1, #16]
 800cade:	4607      	mov	r7, r0
 800cae0:	460c      	mov	r4, r1
 800cae2:	461e      	mov	r6, r3
 800cae4:	f101 0c14 	add.w	ip, r1, #20
 800cae8:	2000      	movs	r0, #0
 800caea:	f8dc 3000 	ldr.w	r3, [ip]
 800caee:	b299      	uxth	r1, r3
 800caf0:	fb02 6101 	mla	r1, r2, r1, r6
 800caf4:	0c1e      	lsrs	r6, r3, #16
 800caf6:	0c0b      	lsrs	r3, r1, #16
 800caf8:	fb02 3306 	mla	r3, r2, r6, r3
 800cafc:	b289      	uxth	r1, r1
 800cafe:	3001      	adds	r0, #1
 800cb00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cb04:	4285      	cmp	r5, r0
 800cb06:	f84c 1b04 	str.w	r1, [ip], #4
 800cb0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cb0e:	dcec      	bgt.n	800caea <__multadd+0x12>
 800cb10:	b30e      	cbz	r6, 800cb56 <__multadd+0x7e>
 800cb12:	68a3      	ldr	r3, [r4, #8]
 800cb14:	42ab      	cmp	r3, r5
 800cb16:	dc19      	bgt.n	800cb4c <__multadd+0x74>
 800cb18:	6861      	ldr	r1, [r4, #4]
 800cb1a:	4638      	mov	r0, r7
 800cb1c:	3101      	adds	r1, #1
 800cb1e:	f7ff ff79 	bl	800ca14 <_Balloc>
 800cb22:	4680      	mov	r8, r0
 800cb24:	b928      	cbnz	r0, 800cb32 <__multadd+0x5a>
 800cb26:	4602      	mov	r2, r0
 800cb28:	4b0c      	ldr	r3, [pc, #48]	; (800cb5c <__multadd+0x84>)
 800cb2a:	480d      	ldr	r0, [pc, #52]	; (800cb60 <__multadd+0x88>)
 800cb2c:	21b5      	movs	r1, #181	; 0xb5
 800cb2e:	f000 fec1 	bl	800d8b4 <__assert_func>
 800cb32:	6922      	ldr	r2, [r4, #16]
 800cb34:	3202      	adds	r2, #2
 800cb36:	f104 010c 	add.w	r1, r4, #12
 800cb3a:	0092      	lsls	r2, r2, #2
 800cb3c:	300c      	adds	r0, #12
 800cb3e:	f7ff ff5b 	bl	800c9f8 <memcpy>
 800cb42:	4621      	mov	r1, r4
 800cb44:	4638      	mov	r0, r7
 800cb46:	f7ff ffa5 	bl	800ca94 <_Bfree>
 800cb4a:	4644      	mov	r4, r8
 800cb4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cb50:	3501      	adds	r5, #1
 800cb52:	615e      	str	r6, [r3, #20]
 800cb54:	6125      	str	r5, [r4, #16]
 800cb56:	4620      	mov	r0, r4
 800cb58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb5c:	0800f110 	.word	0x0800f110
 800cb60:	0800f19c 	.word	0x0800f19c

0800cb64 <__s2b>:
 800cb64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb68:	460c      	mov	r4, r1
 800cb6a:	4615      	mov	r5, r2
 800cb6c:	461f      	mov	r7, r3
 800cb6e:	2209      	movs	r2, #9
 800cb70:	3308      	adds	r3, #8
 800cb72:	4606      	mov	r6, r0
 800cb74:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb78:	2100      	movs	r1, #0
 800cb7a:	2201      	movs	r2, #1
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	db09      	blt.n	800cb94 <__s2b+0x30>
 800cb80:	4630      	mov	r0, r6
 800cb82:	f7ff ff47 	bl	800ca14 <_Balloc>
 800cb86:	b940      	cbnz	r0, 800cb9a <__s2b+0x36>
 800cb88:	4602      	mov	r2, r0
 800cb8a:	4b19      	ldr	r3, [pc, #100]	; (800cbf0 <__s2b+0x8c>)
 800cb8c:	4819      	ldr	r0, [pc, #100]	; (800cbf4 <__s2b+0x90>)
 800cb8e:	21ce      	movs	r1, #206	; 0xce
 800cb90:	f000 fe90 	bl	800d8b4 <__assert_func>
 800cb94:	0052      	lsls	r2, r2, #1
 800cb96:	3101      	adds	r1, #1
 800cb98:	e7f0      	b.n	800cb7c <__s2b+0x18>
 800cb9a:	9b08      	ldr	r3, [sp, #32]
 800cb9c:	6143      	str	r3, [r0, #20]
 800cb9e:	2d09      	cmp	r5, #9
 800cba0:	f04f 0301 	mov.w	r3, #1
 800cba4:	6103      	str	r3, [r0, #16]
 800cba6:	dd16      	ble.n	800cbd6 <__s2b+0x72>
 800cba8:	f104 0909 	add.w	r9, r4, #9
 800cbac:	46c8      	mov	r8, r9
 800cbae:	442c      	add	r4, r5
 800cbb0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cbb4:	4601      	mov	r1, r0
 800cbb6:	3b30      	subs	r3, #48	; 0x30
 800cbb8:	220a      	movs	r2, #10
 800cbba:	4630      	mov	r0, r6
 800cbbc:	f7ff ff8c 	bl	800cad8 <__multadd>
 800cbc0:	45a0      	cmp	r8, r4
 800cbc2:	d1f5      	bne.n	800cbb0 <__s2b+0x4c>
 800cbc4:	f1a5 0408 	sub.w	r4, r5, #8
 800cbc8:	444c      	add	r4, r9
 800cbca:	1b2d      	subs	r5, r5, r4
 800cbcc:	1963      	adds	r3, r4, r5
 800cbce:	42bb      	cmp	r3, r7
 800cbd0:	db04      	blt.n	800cbdc <__s2b+0x78>
 800cbd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbd6:	340a      	adds	r4, #10
 800cbd8:	2509      	movs	r5, #9
 800cbda:	e7f6      	b.n	800cbca <__s2b+0x66>
 800cbdc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cbe0:	4601      	mov	r1, r0
 800cbe2:	3b30      	subs	r3, #48	; 0x30
 800cbe4:	220a      	movs	r2, #10
 800cbe6:	4630      	mov	r0, r6
 800cbe8:	f7ff ff76 	bl	800cad8 <__multadd>
 800cbec:	e7ee      	b.n	800cbcc <__s2b+0x68>
 800cbee:	bf00      	nop
 800cbf0:	0800f110 	.word	0x0800f110
 800cbf4:	0800f19c 	.word	0x0800f19c

0800cbf8 <__hi0bits>:
 800cbf8:	0c03      	lsrs	r3, r0, #16
 800cbfa:	041b      	lsls	r3, r3, #16
 800cbfc:	b9d3      	cbnz	r3, 800cc34 <__hi0bits+0x3c>
 800cbfe:	0400      	lsls	r0, r0, #16
 800cc00:	2310      	movs	r3, #16
 800cc02:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cc06:	bf04      	itt	eq
 800cc08:	0200      	lsleq	r0, r0, #8
 800cc0a:	3308      	addeq	r3, #8
 800cc0c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cc10:	bf04      	itt	eq
 800cc12:	0100      	lsleq	r0, r0, #4
 800cc14:	3304      	addeq	r3, #4
 800cc16:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cc1a:	bf04      	itt	eq
 800cc1c:	0080      	lsleq	r0, r0, #2
 800cc1e:	3302      	addeq	r3, #2
 800cc20:	2800      	cmp	r0, #0
 800cc22:	db05      	blt.n	800cc30 <__hi0bits+0x38>
 800cc24:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cc28:	f103 0301 	add.w	r3, r3, #1
 800cc2c:	bf08      	it	eq
 800cc2e:	2320      	moveq	r3, #32
 800cc30:	4618      	mov	r0, r3
 800cc32:	4770      	bx	lr
 800cc34:	2300      	movs	r3, #0
 800cc36:	e7e4      	b.n	800cc02 <__hi0bits+0xa>

0800cc38 <__lo0bits>:
 800cc38:	6803      	ldr	r3, [r0, #0]
 800cc3a:	f013 0207 	ands.w	r2, r3, #7
 800cc3e:	4601      	mov	r1, r0
 800cc40:	d00b      	beq.n	800cc5a <__lo0bits+0x22>
 800cc42:	07da      	lsls	r2, r3, #31
 800cc44:	d423      	bmi.n	800cc8e <__lo0bits+0x56>
 800cc46:	0798      	lsls	r0, r3, #30
 800cc48:	bf49      	itett	mi
 800cc4a:	085b      	lsrmi	r3, r3, #1
 800cc4c:	089b      	lsrpl	r3, r3, #2
 800cc4e:	2001      	movmi	r0, #1
 800cc50:	600b      	strmi	r3, [r1, #0]
 800cc52:	bf5c      	itt	pl
 800cc54:	600b      	strpl	r3, [r1, #0]
 800cc56:	2002      	movpl	r0, #2
 800cc58:	4770      	bx	lr
 800cc5a:	b298      	uxth	r0, r3
 800cc5c:	b9a8      	cbnz	r0, 800cc8a <__lo0bits+0x52>
 800cc5e:	0c1b      	lsrs	r3, r3, #16
 800cc60:	2010      	movs	r0, #16
 800cc62:	b2da      	uxtb	r2, r3
 800cc64:	b90a      	cbnz	r2, 800cc6a <__lo0bits+0x32>
 800cc66:	3008      	adds	r0, #8
 800cc68:	0a1b      	lsrs	r3, r3, #8
 800cc6a:	071a      	lsls	r2, r3, #28
 800cc6c:	bf04      	itt	eq
 800cc6e:	091b      	lsreq	r3, r3, #4
 800cc70:	3004      	addeq	r0, #4
 800cc72:	079a      	lsls	r2, r3, #30
 800cc74:	bf04      	itt	eq
 800cc76:	089b      	lsreq	r3, r3, #2
 800cc78:	3002      	addeq	r0, #2
 800cc7a:	07da      	lsls	r2, r3, #31
 800cc7c:	d403      	bmi.n	800cc86 <__lo0bits+0x4e>
 800cc7e:	085b      	lsrs	r3, r3, #1
 800cc80:	f100 0001 	add.w	r0, r0, #1
 800cc84:	d005      	beq.n	800cc92 <__lo0bits+0x5a>
 800cc86:	600b      	str	r3, [r1, #0]
 800cc88:	4770      	bx	lr
 800cc8a:	4610      	mov	r0, r2
 800cc8c:	e7e9      	b.n	800cc62 <__lo0bits+0x2a>
 800cc8e:	2000      	movs	r0, #0
 800cc90:	4770      	bx	lr
 800cc92:	2020      	movs	r0, #32
 800cc94:	4770      	bx	lr
	...

0800cc98 <__i2b>:
 800cc98:	b510      	push	{r4, lr}
 800cc9a:	460c      	mov	r4, r1
 800cc9c:	2101      	movs	r1, #1
 800cc9e:	f7ff feb9 	bl	800ca14 <_Balloc>
 800cca2:	4602      	mov	r2, r0
 800cca4:	b928      	cbnz	r0, 800ccb2 <__i2b+0x1a>
 800cca6:	4b05      	ldr	r3, [pc, #20]	; (800ccbc <__i2b+0x24>)
 800cca8:	4805      	ldr	r0, [pc, #20]	; (800ccc0 <__i2b+0x28>)
 800ccaa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ccae:	f000 fe01 	bl	800d8b4 <__assert_func>
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	6144      	str	r4, [r0, #20]
 800ccb6:	6103      	str	r3, [r0, #16]
 800ccb8:	bd10      	pop	{r4, pc}
 800ccba:	bf00      	nop
 800ccbc:	0800f110 	.word	0x0800f110
 800ccc0:	0800f19c 	.word	0x0800f19c

0800ccc4 <__multiply>:
 800ccc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccc8:	4691      	mov	r9, r2
 800ccca:	690a      	ldr	r2, [r1, #16]
 800cccc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ccd0:	429a      	cmp	r2, r3
 800ccd2:	bfb8      	it	lt
 800ccd4:	460b      	movlt	r3, r1
 800ccd6:	460c      	mov	r4, r1
 800ccd8:	bfbc      	itt	lt
 800ccda:	464c      	movlt	r4, r9
 800ccdc:	4699      	movlt	r9, r3
 800ccde:	6927      	ldr	r7, [r4, #16]
 800cce0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cce4:	68a3      	ldr	r3, [r4, #8]
 800cce6:	6861      	ldr	r1, [r4, #4]
 800cce8:	eb07 060a 	add.w	r6, r7, sl
 800ccec:	42b3      	cmp	r3, r6
 800ccee:	b085      	sub	sp, #20
 800ccf0:	bfb8      	it	lt
 800ccf2:	3101      	addlt	r1, #1
 800ccf4:	f7ff fe8e 	bl	800ca14 <_Balloc>
 800ccf8:	b930      	cbnz	r0, 800cd08 <__multiply+0x44>
 800ccfa:	4602      	mov	r2, r0
 800ccfc:	4b44      	ldr	r3, [pc, #272]	; (800ce10 <__multiply+0x14c>)
 800ccfe:	4845      	ldr	r0, [pc, #276]	; (800ce14 <__multiply+0x150>)
 800cd00:	f240 115d 	movw	r1, #349	; 0x15d
 800cd04:	f000 fdd6 	bl	800d8b4 <__assert_func>
 800cd08:	f100 0514 	add.w	r5, r0, #20
 800cd0c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cd10:	462b      	mov	r3, r5
 800cd12:	2200      	movs	r2, #0
 800cd14:	4543      	cmp	r3, r8
 800cd16:	d321      	bcc.n	800cd5c <__multiply+0x98>
 800cd18:	f104 0314 	add.w	r3, r4, #20
 800cd1c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cd20:	f109 0314 	add.w	r3, r9, #20
 800cd24:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cd28:	9202      	str	r2, [sp, #8]
 800cd2a:	1b3a      	subs	r2, r7, r4
 800cd2c:	3a15      	subs	r2, #21
 800cd2e:	f022 0203 	bic.w	r2, r2, #3
 800cd32:	3204      	adds	r2, #4
 800cd34:	f104 0115 	add.w	r1, r4, #21
 800cd38:	428f      	cmp	r7, r1
 800cd3a:	bf38      	it	cc
 800cd3c:	2204      	movcc	r2, #4
 800cd3e:	9201      	str	r2, [sp, #4]
 800cd40:	9a02      	ldr	r2, [sp, #8]
 800cd42:	9303      	str	r3, [sp, #12]
 800cd44:	429a      	cmp	r2, r3
 800cd46:	d80c      	bhi.n	800cd62 <__multiply+0x9e>
 800cd48:	2e00      	cmp	r6, #0
 800cd4a:	dd03      	ble.n	800cd54 <__multiply+0x90>
 800cd4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d05a      	beq.n	800ce0a <__multiply+0x146>
 800cd54:	6106      	str	r6, [r0, #16]
 800cd56:	b005      	add	sp, #20
 800cd58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd5c:	f843 2b04 	str.w	r2, [r3], #4
 800cd60:	e7d8      	b.n	800cd14 <__multiply+0x50>
 800cd62:	f8b3 a000 	ldrh.w	sl, [r3]
 800cd66:	f1ba 0f00 	cmp.w	sl, #0
 800cd6a:	d024      	beq.n	800cdb6 <__multiply+0xf2>
 800cd6c:	f104 0e14 	add.w	lr, r4, #20
 800cd70:	46a9      	mov	r9, r5
 800cd72:	f04f 0c00 	mov.w	ip, #0
 800cd76:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cd7a:	f8d9 1000 	ldr.w	r1, [r9]
 800cd7e:	fa1f fb82 	uxth.w	fp, r2
 800cd82:	b289      	uxth	r1, r1
 800cd84:	fb0a 110b 	mla	r1, sl, fp, r1
 800cd88:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cd8c:	f8d9 2000 	ldr.w	r2, [r9]
 800cd90:	4461      	add	r1, ip
 800cd92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cd96:	fb0a c20b 	mla	r2, sl, fp, ip
 800cd9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cd9e:	b289      	uxth	r1, r1
 800cda0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cda4:	4577      	cmp	r7, lr
 800cda6:	f849 1b04 	str.w	r1, [r9], #4
 800cdaa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cdae:	d8e2      	bhi.n	800cd76 <__multiply+0xb2>
 800cdb0:	9a01      	ldr	r2, [sp, #4]
 800cdb2:	f845 c002 	str.w	ip, [r5, r2]
 800cdb6:	9a03      	ldr	r2, [sp, #12]
 800cdb8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cdbc:	3304      	adds	r3, #4
 800cdbe:	f1b9 0f00 	cmp.w	r9, #0
 800cdc2:	d020      	beq.n	800ce06 <__multiply+0x142>
 800cdc4:	6829      	ldr	r1, [r5, #0]
 800cdc6:	f104 0c14 	add.w	ip, r4, #20
 800cdca:	46ae      	mov	lr, r5
 800cdcc:	f04f 0a00 	mov.w	sl, #0
 800cdd0:	f8bc b000 	ldrh.w	fp, [ip]
 800cdd4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cdd8:	fb09 220b 	mla	r2, r9, fp, r2
 800cddc:	4492      	add	sl, r2
 800cdde:	b289      	uxth	r1, r1
 800cde0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800cde4:	f84e 1b04 	str.w	r1, [lr], #4
 800cde8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cdec:	f8be 1000 	ldrh.w	r1, [lr]
 800cdf0:	0c12      	lsrs	r2, r2, #16
 800cdf2:	fb09 1102 	mla	r1, r9, r2, r1
 800cdf6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800cdfa:	4567      	cmp	r7, ip
 800cdfc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ce00:	d8e6      	bhi.n	800cdd0 <__multiply+0x10c>
 800ce02:	9a01      	ldr	r2, [sp, #4]
 800ce04:	50a9      	str	r1, [r5, r2]
 800ce06:	3504      	adds	r5, #4
 800ce08:	e79a      	b.n	800cd40 <__multiply+0x7c>
 800ce0a:	3e01      	subs	r6, #1
 800ce0c:	e79c      	b.n	800cd48 <__multiply+0x84>
 800ce0e:	bf00      	nop
 800ce10:	0800f110 	.word	0x0800f110
 800ce14:	0800f19c 	.word	0x0800f19c

0800ce18 <__pow5mult>:
 800ce18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce1c:	4615      	mov	r5, r2
 800ce1e:	f012 0203 	ands.w	r2, r2, #3
 800ce22:	4606      	mov	r6, r0
 800ce24:	460f      	mov	r7, r1
 800ce26:	d007      	beq.n	800ce38 <__pow5mult+0x20>
 800ce28:	4c25      	ldr	r4, [pc, #148]	; (800cec0 <__pow5mult+0xa8>)
 800ce2a:	3a01      	subs	r2, #1
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ce32:	f7ff fe51 	bl	800cad8 <__multadd>
 800ce36:	4607      	mov	r7, r0
 800ce38:	10ad      	asrs	r5, r5, #2
 800ce3a:	d03d      	beq.n	800ceb8 <__pow5mult+0xa0>
 800ce3c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ce3e:	b97c      	cbnz	r4, 800ce60 <__pow5mult+0x48>
 800ce40:	2010      	movs	r0, #16
 800ce42:	f7ff fdbf 	bl	800c9c4 <malloc>
 800ce46:	4602      	mov	r2, r0
 800ce48:	6270      	str	r0, [r6, #36]	; 0x24
 800ce4a:	b928      	cbnz	r0, 800ce58 <__pow5mult+0x40>
 800ce4c:	4b1d      	ldr	r3, [pc, #116]	; (800cec4 <__pow5mult+0xac>)
 800ce4e:	481e      	ldr	r0, [pc, #120]	; (800cec8 <__pow5mult+0xb0>)
 800ce50:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ce54:	f000 fd2e 	bl	800d8b4 <__assert_func>
 800ce58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ce5c:	6004      	str	r4, [r0, #0]
 800ce5e:	60c4      	str	r4, [r0, #12]
 800ce60:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ce64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ce68:	b94c      	cbnz	r4, 800ce7e <__pow5mult+0x66>
 800ce6a:	f240 2171 	movw	r1, #625	; 0x271
 800ce6e:	4630      	mov	r0, r6
 800ce70:	f7ff ff12 	bl	800cc98 <__i2b>
 800ce74:	2300      	movs	r3, #0
 800ce76:	f8c8 0008 	str.w	r0, [r8, #8]
 800ce7a:	4604      	mov	r4, r0
 800ce7c:	6003      	str	r3, [r0, #0]
 800ce7e:	f04f 0900 	mov.w	r9, #0
 800ce82:	07eb      	lsls	r3, r5, #31
 800ce84:	d50a      	bpl.n	800ce9c <__pow5mult+0x84>
 800ce86:	4639      	mov	r1, r7
 800ce88:	4622      	mov	r2, r4
 800ce8a:	4630      	mov	r0, r6
 800ce8c:	f7ff ff1a 	bl	800ccc4 <__multiply>
 800ce90:	4639      	mov	r1, r7
 800ce92:	4680      	mov	r8, r0
 800ce94:	4630      	mov	r0, r6
 800ce96:	f7ff fdfd 	bl	800ca94 <_Bfree>
 800ce9a:	4647      	mov	r7, r8
 800ce9c:	106d      	asrs	r5, r5, #1
 800ce9e:	d00b      	beq.n	800ceb8 <__pow5mult+0xa0>
 800cea0:	6820      	ldr	r0, [r4, #0]
 800cea2:	b938      	cbnz	r0, 800ceb4 <__pow5mult+0x9c>
 800cea4:	4622      	mov	r2, r4
 800cea6:	4621      	mov	r1, r4
 800cea8:	4630      	mov	r0, r6
 800ceaa:	f7ff ff0b 	bl	800ccc4 <__multiply>
 800ceae:	6020      	str	r0, [r4, #0]
 800ceb0:	f8c0 9000 	str.w	r9, [r0]
 800ceb4:	4604      	mov	r4, r0
 800ceb6:	e7e4      	b.n	800ce82 <__pow5mult+0x6a>
 800ceb8:	4638      	mov	r0, r7
 800ceba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cebe:	bf00      	nop
 800cec0:	0800f2e8 	.word	0x0800f2e8
 800cec4:	0800f09e 	.word	0x0800f09e
 800cec8:	0800f19c 	.word	0x0800f19c

0800cecc <__lshift>:
 800cecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ced0:	460c      	mov	r4, r1
 800ced2:	6849      	ldr	r1, [r1, #4]
 800ced4:	6923      	ldr	r3, [r4, #16]
 800ced6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ceda:	68a3      	ldr	r3, [r4, #8]
 800cedc:	4607      	mov	r7, r0
 800cede:	4691      	mov	r9, r2
 800cee0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cee4:	f108 0601 	add.w	r6, r8, #1
 800cee8:	42b3      	cmp	r3, r6
 800ceea:	db0b      	blt.n	800cf04 <__lshift+0x38>
 800ceec:	4638      	mov	r0, r7
 800ceee:	f7ff fd91 	bl	800ca14 <_Balloc>
 800cef2:	4605      	mov	r5, r0
 800cef4:	b948      	cbnz	r0, 800cf0a <__lshift+0x3e>
 800cef6:	4602      	mov	r2, r0
 800cef8:	4b2a      	ldr	r3, [pc, #168]	; (800cfa4 <__lshift+0xd8>)
 800cefa:	482b      	ldr	r0, [pc, #172]	; (800cfa8 <__lshift+0xdc>)
 800cefc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cf00:	f000 fcd8 	bl	800d8b4 <__assert_func>
 800cf04:	3101      	adds	r1, #1
 800cf06:	005b      	lsls	r3, r3, #1
 800cf08:	e7ee      	b.n	800cee8 <__lshift+0x1c>
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	f100 0114 	add.w	r1, r0, #20
 800cf10:	f100 0210 	add.w	r2, r0, #16
 800cf14:	4618      	mov	r0, r3
 800cf16:	4553      	cmp	r3, sl
 800cf18:	db37      	blt.n	800cf8a <__lshift+0xbe>
 800cf1a:	6920      	ldr	r0, [r4, #16]
 800cf1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cf20:	f104 0314 	add.w	r3, r4, #20
 800cf24:	f019 091f 	ands.w	r9, r9, #31
 800cf28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cf2c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cf30:	d02f      	beq.n	800cf92 <__lshift+0xc6>
 800cf32:	f1c9 0e20 	rsb	lr, r9, #32
 800cf36:	468a      	mov	sl, r1
 800cf38:	f04f 0c00 	mov.w	ip, #0
 800cf3c:	681a      	ldr	r2, [r3, #0]
 800cf3e:	fa02 f209 	lsl.w	r2, r2, r9
 800cf42:	ea42 020c 	orr.w	r2, r2, ip
 800cf46:	f84a 2b04 	str.w	r2, [sl], #4
 800cf4a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf4e:	4298      	cmp	r0, r3
 800cf50:	fa22 fc0e 	lsr.w	ip, r2, lr
 800cf54:	d8f2      	bhi.n	800cf3c <__lshift+0x70>
 800cf56:	1b03      	subs	r3, r0, r4
 800cf58:	3b15      	subs	r3, #21
 800cf5a:	f023 0303 	bic.w	r3, r3, #3
 800cf5e:	3304      	adds	r3, #4
 800cf60:	f104 0215 	add.w	r2, r4, #21
 800cf64:	4290      	cmp	r0, r2
 800cf66:	bf38      	it	cc
 800cf68:	2304      	movcc	r3, #4
 800cf6a:	f841 c003 	str.w	ip, [r1, r3]
 800cf6e:	f1bc 0f00 	cmp.w	ip, #0
 800cf72:	d001      	beq.n	800cf78 <__lshift+0xac>
 800cf74:	f108 0602 	add.w	r6, r8, #2
 800cf78:	3e01      	subs	r6, #1
 800cf7a:	4638      	mov	r0, r7
 800cf7c:	612e      	str	r6, [r5, #16]
 800cf7e:	4621      	mov	r1, r4
 800cf80:	f7ff fd88 	bl	800ca94 <_Bfree>
 800cf84:	4628      	mov	r0, r5
 800cf86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf8a:	f842 0f04 	str.w	r0, [r2, #4]!
 800cf8e:	3301      	adds	r3, #1
 800cf90:	e7c1      	b.n	800cf16 <__lshift+0x4a>
 800cf92:	3904      	subs	r1, #4
 800cf94:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf98:	f841 2f04 	str.w	r2, [r1, #4]!
 800cf9c:	4298      	cmp	r0, r3
 800cf9e:	d8f9      	bhi.n	800cf94 <__lshift+0xc8>
 800cfa0:	e7ea      	b.n	800cf78 <__lshift+0xac>
 800cfa2:	bf00      	nop
 800cfa4:	0800f110 	.word	0x0800f110
 800cfa8:	0800f19c 	.word	0x0800f19c

0800cfac <__mcmp>:
 800cfac:	b530      	push	{r4, r5, lr}
 800cfae:	6902      	ldr	r2, [r0, #16]
 800cfb0:	690c      	ldr	r4, [r1, #16]
 800cfb2:	1b12      	subs	r2, r2, r4
 800cfb4:	d10e      	bne.n	800cfd4 <__mcmp+0x28>
 800cfb6:	f100 0314 	add.w	r3, r0, #20
 800cfba:	3114      	adds	r1, #20
 800cfbc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cfc0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cfc4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cfc8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cfcc:	42a5      	cmp	r5, r4
 800cfce:	d003      	beq.n	800cfd8 <__mcmp+0x2c>
 800cfd0:	d305      	bcc.n	800cfde <__mcmp+0x32>
 800cfd2:	2201      	movs	r2, #1
 800cfd4:	4610      	mov	r0, r2
 800cfd6:	bd30      	pop	{r4, r5, pc}
 800cfd8:	4283      	cmp	r3, r0
 800cfda:	d3f3      	bcc.n	800cfc4 <__mcmp+0x18>
 800cfdc:	e7fa      	b.n	800cfd4 <__mcmp+0x28>
 800cfde:	f04f 32ff 	mov.w	r2, #4294967295
 800cfe2:	e7f7      	b.n	800cfd4 <__mcmp+0x28>

0800cfe4 <__mdiff>:
 800cfe4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfe8:	460c      	mov	r4, r1
 800cfea:	4606      	mov	r6, r0
 800cfec:	4611      	mov	r1, r2
 800cfee:	4620      	mov	r0, r4
 800cff0:	4690      	mov	r8, r2
 800cff2:	f7ff ffdb 	bl	800cfac <__mcmp>
 800cff6:	1e05      	subs	r5, r0, #0
 800cff8:	d110      	bne.n	800d01c <__mdiff+0x38>
 800cffa:	4629      	mov	r1, r5
 800cffc:	4630      	mov	r0, r6
 800cffe:	f7ff fd09 	bl	800ca14 <_Balloc>
 800d002:	b930      	cbnz	r0, 800d012 <__mdiff+0x2e>
 800d004:	4b3a      	ldr	r3, [pc, #232]	; (800d0f0 <__mdiff+0x10c>)
 800d006:	4602      	mov	r2, r0
 800d008:	f240 2132 	movw	r1, #562	; 0x232
 800d00c:	4839      	ldr	r0, [pc, #228]	; (800d0f4 <__mdiff+0x110>)
 800d00e:	f000 fc51 	bl	800d8b4 <__assert_func>
 800d012:	2301      	movs	r3, #1
 800d014:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d018:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d01c:	bfa4      	itt	ge
 800d01e:	4643      	movge	r3, r8
 800d020:	46a0      	movge	r8, r4
 800d022:	4630      	mov	r0, r6
 800d024:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d028:	bfa6      	itte	ge
 800d02a:	461c      	movge	r4, r3
 800d02c:	2500      	movge	r5, #0
 800d02e:	2501      	movlt	r5, #1
 800d030:	f7ff fcf0 	bl	800ca14 <_Balloc>
 800d034:	b920      	cbnz	r0, 800d040 <__mdiff+0x5c>
 800d036:	4b2e      	ldr	r3, [pc, #184]	; (800d0f0 <__mdiff+0x10c>)
 800d038:	4602      	mov	r2, r0
 800d03a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d03e:	e7e5      	b.n	800d00c <__mdiff+0x28>
 800d040:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d044:	6926      	ldr	r6, [r4, #16]
 800d046:	60c5      	str	r5, [r0, #12]
 800d048:	f104 0914 	add.w	r9, r4, #20
 800d04c:	f108 0514 	add.w	r5, r8, #20
 800d050:	f100 0e14 	add.w	lr, r0, #20
 800d054:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d058:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d05c:	f108 0210 	add.w	r2, r8, #16
 800d060:	46f2      	mov	sl, lr
 800d062:	2100      	movs	r1, #0
 800d064:	f859 3b04 	ldr.w	r3, [r9], #4
 800d068:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d06c:	fa1f f883 	uxth.w	r8, r3
 800d070:	fa11 f18b 	uxtah	r1, r1, fp
 800d074:	0c1b      	lsrs	r3, r3, #16
 800d076:	eba1 0808 	sub.w	r8, r1, r8
 800d07a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d07e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d082:	fa1f f888 	uxth.w	r8, r8
 800d086:	1419      	asrs	r1, r3, #16
 800d088:	454e      	cmp	r6, r9
 800d08a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d08e:	f84a 3b04 	str.w	r3, [sl], #4
 800d092:	d8e7      	bhi.n	800d064 <__mdiff+0x80>
 800d094:	1b33      	subs	r3, r6, r4
 800d096:	3b15      	subs	r3, #21
 800d098:	f023 0303 	bic.w	r3, r3, #3
 800d09c:	3304      	adds	r3, #4
 800d09e:	3415      	adds	r4, #21
 800d0a0:	42a6      	cmp	r6, r4
 800d0a2:	bf38      	it	cc
 800d0a4:	2304      	movcc	r3, #4
 800d0a6:	441d      	add	r5, r3
 800d0a8:	4473      	add	r3, lr
 800d0aa:	469e      	mov	lr, r3
 800d0ac:	462e      	mov	r6, r5
 800d0ae:	4566      	cmp	r6, ip
 800d0b0:	d30e      	bcc.n	800d0d0 <__mdiff+0xec>
 800d0b2:	f10c 0203 	add.w	r2, ip, #3
 800d0b6:	1b52      	subs	r2, r2, r5
 800d0b8:	f022 0203 	bic.w	r2, r2, #3
 800d0bc:	3d03      	subs	r5, #3
 800d0be:	45ac      	cmp	ip, r5
 800d0c0:	bf38      	it	cc
 800d0c2:	2200      	movcc	r2, #0
 800d0c4:	441a      	add	r2, r3
 800d0c6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d0ca:	b17b      	cbz	r3, 800d0ec <__mdiff+0x108>
 800d0cc:	6107      	str	r7, [r0, #16]
 800d0ce:	e7a3      	b.n	800d018 <__mdiff+0x34>
 800d0d0:	f856 8b04 	ldr.w	r8, [r6], #4
 800d0d4:	fa11 f288 	uxtah	r2, r1, r8
 800d0d8:	1414      	asrs	r4, r2, #16
 800d0da:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d0de:	b292      	uxth	r2, r2
 800d0e0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d0e4:	f84e 2b04 	str.w	r2, [lr], #4
 800d0e8:	1421      	asrs	r1, r4, #16
 800d0ea:	e7e0      	b.n	800d0ae <__mdiff+0xca>
 800d0ec:	3f01      	subs	r7, #1
 800d0ee:	e7ea      	b.n	800d0c6 <__mdiff+0xe2>
 800d0f0:	0800f110 	.word	0x0800f110
 800d0f4:	0800f19c 	.word	0x0800f19c

0800d0f8 <__ulp>:
 800d0f8:	b082      	sub	sp, #8
 800d0fa:	ed8d 0b00 	vstr	d0, [sp]
 800d0fe:	9b01      	ldr	r3, [sp, #4]
 800d100:	4912      	ldr	r1, [pc, #72]	; (800d14c <__ulp+0x54>)
 800d102:	4019      	ands	r1, r3
 800d104:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d108:	2900      	cmp	r1, #0
 800d10a:	dd05      	ble.n	800d118 <__ulp+0x20>
 800d10c:	2200      	movs	r2, #0
 800d10e:	460b      	mov	r3, r1
 800d110:	ec43 2b10 	vmov	d0, r2, r3
 800d114:	b002      	add	sp, #8
 800d116:	4770      	bx	lr
 800d118:	4249      	negs	r1, r1
 800d11a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d11e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d122:	f04f 0200 	mov.w	r2, #0
 800d126:	f04f 0300 	mov.w	r3, #0
 800d12a:	da04      	bge.n	800d136 <__ulp+0x3e>
 800d12c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d130:	fa41 f300 	asr.w	r3, r1, r0
 800d134:	e7ec      	b.n	800d110 <__ulp+0x18>
 800d136:	f1a0 0114 	sub.w	r1, r0, #20
 800d13a:	291e      	cmp	r1, #30
 800d13c:	bfda      	itte	le
 800d13e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d142:	fa20 f101 	lsrle.w	r1, r0, r1
 800d146:	2101      	movgt	r1, #1
 800d148:	460a      	mov	r2, r1
 800d14a:	e7e1      	b.n	800d110 <__ulp+0x18>
 800d14c:	7ff00000 	.word	0x7ff00000

0800d150 <__b2d>:
 800d150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d152:	6905      	ldr	r5, [r0, #16]
 800d154:	f100 0714 	add.w	r7, r0, #20
 800d158:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d15c:	1f2e      	subs	r6, r5, #4
 800d15e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d162:	4620      	mov	r0, r4
 800d164:	f7ff fd48 	bl	800cbf8 <__hi0bits>
 800d168:	f1c0 0320 	rsb	r3, r0, #32
 800d16c:	280a      	cmp	r0, #10
 800d16e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d1ec <__b2d+0x9c>
 800d172:	600b      	str	r3, [r1, #0]
 800d174:	dc14      	bgt.n	800d1a0 <__b2d+0x50>
 800d176:	f1c0 0e0b 	rsb	lr, r0, #11
 800d17a:	fa24 f10e 	lsr.w	r1, r4, lr
 800d17e:	42b7      	cmp	r7, r6
 800d180:	ea41 030c 	orr.w	r3, r1, ip
 800d184:	bf34      	ite	cc
 800d186:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d18a:	2100      	movcs	r1, #0
 800d18c:	3015      	adds	r0, #21
 800d18e:	fa04 f000 	lsl.w	r0, r4, r0
 800d192:	fa21 f10e 	lsr.w	r1, r1, lr
 800d196:	ea40 0201 	orr.w	r2, r0, r1
 800d19a:	ec43 2b10 	vmov	d0, r2, r3
 800d19e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1a0:	42b7      	cmp	r7, r6
 800d1a2:	bf3a      	itte	cc
 800d1a4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d1a8:	f1a5 0608 	subcc.w	r6, r5, #8
 800d1ac:	2100      	movcs	r1, #0
 800d1ae:	380b      	subs	r0, #11
 800d1b0:	d017      	beq.n	800d1e2 <__b2d+0x92>
 800d1b2:	f1c0 0c20 	rsb	ip, r0, #32
 800d1b6:	fa04 f500 	lsl.w	r5, r4, r0
 800d1ba:	42be      	cmp	r6, r7
 800d1bc:	fa21 f40c 	lsr.w	r4, r1, ip
 800d1c0:	ea45 0504 	orr.w	r5, r5, r4
 800d1c4:	bf8c      	ite	hi
 800d1c6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d1ca:	2400      	movls	r4, #0
 800d1cc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d1d0:	fa01 f000 	lsl.w	r0, r1, r0
 800d1d4:	fa24 f40c 	lsr.w	r4, r4, ip
 800d1d8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d1dc:	ea40 0204 	orr.w	r2, r0, r4
 800d1e0:	e7db      	b.n	800d19a <__b2d+0x4a>
 800d1e2:	ea44 030c 	orr.w	r3, r4, ip
 800d1e6:	460a      	mov	r2, r1
 800d1e8:	e7d7      	b.n	800d19a <__b2d+0x4a>
 800d1ea:	bf00      	nop
 800d1ec:	3ff00000 	.word	0x3ff00000

0800d1f0 <__d2b>:
 800d1f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d1f4:	4689      	mov	r9, r1
 800d1f6:	2101      	movs	r1, #1
 800d1f8:	ec57 6b10 	vmov	r6, r7, d0
 800d1fc:	4690      	mov	r8, r2
 800d1fe:	f7ff fc09 	bl	800ca14 <_Balloc>
 800d202:	4604      	mov	r4, r0
 800d204:	b930      	cbnz	r0, 800d214 <__d2b+0x24>
 800d206:	4602      	mov	r2, r0
 800d208:	4b25      	ldr	r3, [pc, #148]	; (800d2a0 <__d2b+0xb0>)
 800d20a:	4826      	ldr	r0, [pc, #152]	; (800d2a4 <__d2b+0xb4>)
 800d20c:	f240 310a 	movw	r1, #778	; 0x30a
 800d210:	f000 fb50 	bl	800d8b4 <__assert_func>
 800d214:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d218:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d21c:	bb35      	cbnz	r5, 800d26c <__d2b+0x7c>
 800d21e:	2e00      	cmp	r6, #0
 800d220:	9301      	str	r3, [sp, #4]
 800d222:	d028      	beq.n	800d276 <__d2b+0x86>
 800d224:	4668      	mov	r0, sp
 800d226:	9600      	str	r6, [sp, #0]
 800d228:	f7ff fd06 	bl	800cc38 <__lo0bits>
 800d22c:	9900      	ldr	r1, [sp, #0]
 800d22e:	b300      	cbz	r0, 800d272 <__d2b+0x82>
 800d230:	9a01      	ldr	r2, [sp, #4]
 800d232:	f1c0 0320 	rsb	r3, r0, #32
 800d236:	fa02 f303 	lsl.w	r3, r2, r3
 800d23a:	430b      	orrs	r3, r1
 800d23c:	40c2      	lsrs	r2, r0
 800d23e:	6163      	str	r3, [r4, #20]
 800d240:	9201      	str	r2, [sp, #4]
 800d242:	9b01      	ldr	r3, [sp, #4]
 800d244:	61a3      	str	r3, [r4, #24]
 800d246:	2b00      	cmp	r3, #0
 800d248:	bf14      	ite	ne
 800d24a:	2202      	movne	r2, #2
 800d24c:	2201      	moveq	r2, #1
 800d24e:	6122      	str	r2, [r4, #16]
 800d250:	b1d5      	cbz	r5, 800d288 <__d2b+0x98>
 800d252:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d256:	4405      	add	r5, r0
 800d258:	f8c9 5000 	str.w	r5, [r9]
 800d25c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d260:	f8c8 0000 	str.w	r0, [r8]
 800d264:	4620      	mov	r0, r4
 800d266:	b003      	add	sp, #12
 800d268:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d26c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d270:	e7d5      	b.n	800d21e <__d2b+0x2e>
 800d272:	6161      	str	r1, [r4, #20]
 800d274:	e7e5      	b.n	800d242 <__d2b+0x52>
 800d276:	a801      	add	r0, sp, #4
 800d278:	f7ff fcde 	bl	800cc38 <__lo0bits>
 800d27c:	9b01      	ldr	r3, [sp, #4]
 800d27e:	6163      	str	r3, [r4, #20]
 800d280:	2201      	movs	r2, #1
 800d282:	6122      	str	r2, [r4, #16]
 800d284:	3020      	adds	r0, #32
 800d286:	e7e3      	b.n	800d250 <__d2b+0x60>
 800d288:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d28c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d290:	f8c9 0000 	str.w	r0, [r9]
 800d294:	6918      	ldr	r0, [r3, #16]
 800d296:	f7ff fcaf 	bl	800cbf8 <__hi0bits>
 800d29a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d29e:	e7df      	b.n	800d260 <__d2b+0x70>
 800d2a0:	0800f110 	.word	0x0800f110
 800d2a4:	0800f19c 	.word	0x0800f19c

0800d2a8 <__ratio>:
 800d2a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2ac:	4688      	mov	r8, r1
 800d2ae:	4669      	mov	r1, sp
 800d2b0:	4681      	mov	r9, r0
 800d2b2:	f7ff ff4d 	bl	800d150 <__b2d>
 800d2b6:	a901      	add	r1, sp, #4
 800d2b8:	4640      	mov	r0, r8
 800d2ba:	ec55 4b10 	vmov	r4, r5, d0
 800d2be:	f7ff ff47 	bl	800d150 <__b2d>
 800d2c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d2c6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d2ca:	eba3 0c02 	sub.w	ip, r3, r2
 800d2ce:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d2d2:	1a9b      	subs	r3, r3, r2
 800d2d4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d2d8:	ec51 0b10 	vmov	r0, r1, d0
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	bfd6      	itet	le
 800d2e0:	460a      	movle	r2, r1
 800d2e2:	462a      	movgt	r2, r5
 800d2e4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d2e8:	468b      	mov	fp, r1
 800d2ea:	462f      	mov	r7, r5
 800d2ec:	bfd4      	ite	le
 800d2ee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d2f2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d2f6:	4620      	mov	r0, r4
 800d2f8:	ee10 2a10 	vmov	r2, s0
 800d2fc:	465b      	mov	r3, fp
 800d2fe:	4639      	mov	r1, r7
 800d300:	f7f3 faa4 	bl	800084c <__aeabi_ddiv>
 800d304:	ec41 0b10 	vmov	d0, r0, r1
 800d308:	b003      	add	sp, #12
 800d30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d30e <__copybits>:
 800d30e:	3901      	subs	r1, #1
 800d310:	b570      	push	{r4, r5, r6, lr}
 800d312:	1149      	asrs	r1, r1, #5
 800d314:	6914      	ldr	r4, [r2, #16]
 800d316:	3101      	adds	r1, #1
 800d318:	f102 0314 	add.w	r3, r2, #20
 800d31c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d320:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d324:	1f05      	subs	r5, r0, #4
 800d326:	42a3      	cmp	r3, r4
 800d328:	d30c      	bcc.n	800d344 <__copybits+0x36>
 800d32a:	1aa3      	subs	r3, r4, r2
 800d32c:	3b11      	subs	r3, #17
 800d32e:	f023 0303 	bic.w	r3, r3, #3
 800d332:	3211      	adds	r2, #17
 800d334:	42a2      	cmp	r2, r4
 800d336:	bf88      	it	hi
 800d338:	2300      	movhi	r3, #0
 800d33a:	4418      	add	r0, r3
 800d33c:	2300      	movs	r3, #0
 800d33e:	4288      	cmp	r0, r1
 800d340:	d305      	bcc.n	800d34e <__copybits+0x40>
 800d342:	bd70      	pop	{r4, r5, r6, pc}
 800d344:	f853 6b04 	ldr.w	r6, [r3], #4
 800d348:	f845 6f04 	str.w	r6, [r5, #4]!
 800d34c:	e7eb      	b.n	800d326 <__copybits+0x18>
 800d34e:	f840 3b04 	str.w	r3, [r0], #4
 800d352:	e7f4      	b.n	800d33e <__copybits+0x30>

0800d354 <__any_on>:
 800d354:	f100 0214 	add.w	r2, r0, #20
 800d358:	6900      	ldr	r0, [r0, #16]
 800d35a:	114b      	asrs	r3, r1, #5
 800d35c:	4298      	cmp	r0, r3
 800d35e:	b510      	push	{r4, lr}
 800d360:	db11      	blt.n	800d386 <__any_on+0x32>
 800d362:	dd0a      	ble.n	800d37a <__any_on+0x26>
 800d364:	f011 011f 	ands.w	r1, r1, #31
 800d368:	d007      	beq.n	800d37a <__any_on+0x26>
 800d36a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d36e:	fa24 f001 	lsr.w	r0, r4, r1
 800d372:	fa00 f101 	lsl.w	r1, r0, r1
 800d376:	428c      	cmp	r4, r1
 800d378:	d10b      	bne.n	800d392 <__any_on+0x3e>
 800d37a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d37e:	4293      	cmp	r3, r2
 800d380:	d803      	bhi.n	800d38a <__any_on+0x36>
 800d382:	2000      	movs	r0, #0
 800d384:	bd10      	pop	{r4, pc}
 800d386:	4603      	mov	r3, r0
 800d388:	e7f7      	b.n	800d37a <__any_on+0x26>
 800d38a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d38e:	2900      	cmp	r1, #0
 800d390:	d0f5      	beq.n	800d37e <__any_on+0x2a>
 800d392:	2001      	movs	r0, #1
 800d394:	e7f6      	b.n	800d384 <__any_on+0x30>

0800d396 <_calloc_r>:
 800d396:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d398:	fba1 2402 	umull	r2, r4, r1, r2
 800d39c:	b94c      	cbnz	r4, 800d3b2 <_calloc_r+0x1c>
 800d39e:	4611      	mov	r1, r2
 800d3a0:	9201      	str	r2, [sp, #4]
 800d3a2:	f000 f87b 	bl	800d49c <_malloc_r>
 800d3a6:	9a01      	ldr	r2, [sp, #4]
 800d3a8:	4605      	mov	r5, r0
 800d3aa:	b930      	cbnz	r0, 800d3ba <_calloc_r+0x24>
 800d3ac:	4628      	mov	r0, r5
 800d3ae:	b003      	add	sp, #12
 800d3b0:	bd30      	pop	{r4, r5, pc}
 800d3b2:	220c      	movs	r2, #12
 800d3b4:	6002      	str	r2, [r0, #0]
 800d3b6:	2500      	movs	r5, #0
 800d3b8:	e7f8      	b.n	800d3ac <_calloc_r+0x16>
 800d3ba:	4621      	mov	r1, r4
 800d3bc:	f7fc fbc0 	bl	8009b40 <memset>
 800d3c0:	e7f4      	b.n	800d3ac <_calloc_r+0x16>
	...

0800d3c4 <_free_r>:
 800d3c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d3c6:	2900      	cmp	r1, #0
 800d3c8:	d044      	beq.n	800d454 <_free_r+0x90>
 800d3ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3ce:	9001      	str	r0, [sp, #4]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	f1a1 0404 	sub.w	r4, r1, #4
 800d3d6:	bfb8      	it	lt
 800d3d8:	18e4      	addlt	r4, r4, r3
 800d3da:	f000 fab5 	bl	800d948 <__malloc_lock>
 800d3de:	4a1e      	ldr	r2, [pc, #120]	; (800d458 <_free_r+0x94>)
 800d3e0:	9801      	ldr	r0, [sp, #4]
 800d3e2:	6813      	ldr	r3, [r2, #0]
 800d3e4:	b933      	cbnz	r3, 800d3f4 <_free_r+0x30>
 800d3e6:	6063      	str	r3, [r4, #4]
 800d3e8:	6014      	str	r4, [r2, #0]
 800d3ea:	b003      	add	sp, #12
 800d3ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d3f0:	f000 bab0 	b.w	800d954 <__malloc_unlock>
 800d3f4:	42a3      	cmp	r3, r4
 800d3f6:	d908      	bls.n	800d40a <_free_r+0x46>
 800d3f8:	6825      	ldr	r5, [r4, #0]
 800d3fa:	1961      	adds	r1, r4, r5
 800d3fc:	428b      	cmp	r3, r1
 800d3fe:	bf01      	itttt	eq
 800d400:	6819      	ldreq	r1, [r3, #0]
 800d402:	685b      	ldreq	r3, [r3, #4]
 800d404:	1949      	addeq	r1, r1, r5
 800d406:	6021      	streq	r1, [r4, #0]
 800d408:	e7ed      	b.n	800d3e6 <_free_r+0x22>
 800d40a:	461a      	mov	r2, r3
 800d40c:	685b      	ldr	r3, [r3, #4]
 800d40e:	b10b      	cbz	r3, 800d414 <_free_r+0x50>
 800d410:	42a3      	cmp	r3, r4
 800d412:	d9fa      	bls.n	800d40a <_free_r+0x46>
 800d414:	6811      	ldr	r1, [r2, #0]
 800d416:	1855      	adds	r5, r2, r1
 800d418:	42a5      	cmp	r5, r4
 800d41a:	d10b      	bne.n	800d434 <_free_r+0x70>
 800d41c:	6824      	ldr	r4, [r4, #0]
 800d41e:	4421      	add	r1, r4
 800d420:	1854      	adds	r4, r2, r1
 800d422:	42a3      	cmp	r3, r4
 800d424:	6011      	str	r1, [r2, #0]
 800d426:	d1e0      	bne.n	800d3ea <_free_r+0x26>
 800d428:	681c      	ldr	r4, [r3, #0]
 800d42a:	685b      	ldr	r3, [r3, #4]
 800d42c:	6053      	str	r3, [r2, #4]
 800d42e:	4421      	add	r1, r4
 800d430:	6011      	str	r1, [r2, #0]
 800d432:	e7da      	b.n	800d3ea <_free_r+0x26>
 800d434:	d902      	bls.n	800d43c <_free_r+0x78>
 800d436:	230c      	movs	r3, #12
 800d438:	6003      	str	r3, [r0, #0]
 800d43a:	e7d6      	b.n	800d3ea <_free_r+0x26>
 800d43c:	6825      	ldr	r5, [r4, #0]
 800d43e:	1961      	adds	r1, r4, r5
 800d440:	428b      	cmp	r3, r1
 800d442:	bf04      	itt	eq
 800d444:	6819      	ldreq	r1, [r3, #0]
 800d446:	685b      	ldreq	r3, [r3, #4]
 800d448:	6063      	str	r3, [r4, #4]
 800d44a:	bf04      	itt	eq
 800d44c:	1949      	addeq	r1, r1, r5
 800d44e:	6021      	streq	r1, [r4, #0]
 800d450:	6054      	str	r4, [r2, #4]
 800d452:	e7ca      	b.n	800d3ea <_free_r+0x26>
 800d454:	b003      	add	sp, #12
 800d456:	bd30      	pop	{r4, r5, pc}
 800d458:	20000be0 	.word	0x20000be0

0800d45c <sbrk_aligned>:
 800d45c:	b570      	push	{r4, r5, r6, lr}
 800d45e:	4e0e      	ldr	r6, [pc, #56]	; (800d498 <sbrk_aligned+0x3c>)
 800d460:	460c      	mov	r4, r1
 800d462:	6831      	ldr	r1, [r6, #0]
 800d464:	4605      	mov	r5, r0
 800d466:	b911      	cbnz	r1, 800d46e <sbrk_aligned+0x12>
 800d468:	f000 f9f2 	bl	800d850 <_sbrk_r>
 800d46c:	6030      	str	r0, [r6, #0]
 800d46e:	4621      	mov	r1, r4
 800d470:	4628      	mov	r0, r5
 800d472:	f000 f9ed 	bl	800d850 <_sbrk_r>
 800d476:	1c43      	adds	r3, r0, #1
 800d478:	d00a      	beq.n	800d490 <sbrk_aligned+0x34>
 800d47a:	1cc4      	adds	r4, r0, #3
 800d47c:	f024 0403 	bic.w	r4, r4, #3
 800d480:	42a0      	cmp	r0, r4
 800d482:	d007      	beq.n	800d494 <sbrk_aligned+0x38>
 800d484:	1a21      	subs	r1, r4, r0
 800d486:	4628      	mov	r0, r5
 800d488:	f000 f9e2 	bl	800d850 <_sbrk_r>
 800d48c:	3001      	adds	r0, #1
 800d48e:	d101      	bne.n	800d494 <sbrk_aligned+0x38>
 800d490:	f04f 34ff 	mov.w	r4, #4294967295
 800d494:	4620      	mov	r0, r4
 800d496:	bd70      	pop	{r4, r5, r6, pc}
 800d498:	20000be4 	.word	0x20000be4

0800d49c <_malloc_r>:
 800d49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4a0:	1ccd      	adds	r5, r1, #3
 800d4a2:	f025 0503 	bic.w	r5, r5, #3
 800d4a6:	3508      	adds	r5, #8
 800d4a8:	2d0c      	cmp	r5, #12
 800d4aa:	bf38      	it	cc
 800d4ac:	250c      	movcc	r5, #12
 800d4ae:	2d00      	cmp	r5, #0
 800d4b0:	4607      	mov	r7, r0
 800d4b2:	db01      	blt.n	800d4b8 <_malloc_r+0x1c>
 800d4b4:	42a9      	cmp	r1, r5
 800d4b6:	d905      	bls.n	800d4c4 <_malloc_r+0x28>
 800d4b8:	230c      	movs	r3, #12
 800d4ba:	603b      	str	r3, [r7, #0]
 800d4bc:	2600      	movs	r6, #0
 800d4be:	4630      	mov	r0, r6
 800d4c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4c4:	4e2e      	ldr	r6, [pc, #184]	; (800d580 <_malloc_r+0xe4>)
 800d4c6:	f000 fa3f 	bl	800d948 <__malloc_lock>
 800d4ca:	6833      	ldr	r3, [r6, #0]
 800d4cc:	461c      	mov	r4, r3
 800d4ce:	bb34      	cbnz	r4, 800d51e <_malloc_r+0x82>
 800d4d0:	4629      	mov	r1, r5
 800d4d2:	4638      	mov	r0, r7
 800d4d4:	f7ff ffc2 	bl	800d45c <sbrk_aligned>
 800d4d8:	1c43      	adds	r3, r0, #1
 800d4da:	4604      	mov	r4, r0
 800d4dc:	d14d      	bne.n	800d57a <_malloc_r+0xde>
 800d4de:	6834      	ldr	r4, [r6, #0]
 800d4e0:	4626      	mov	r6, r4
 800d4e2:	2e00      	cmp	r6, #0
 800d4e4:	d140      	bne.n	800d568 <_malloc_r+0xcc>
 800d4e6:	6823      	ldr	r3, [r4, #0]
 800d4e8:	4631      	mov	r1, r6
 800d4ea:	4638      	mov	r0, r7
 800d4ec:	eb04 0803 	add.w	r8, r4, r3
 800d4f0:	f000 f9ae 	bl	800d850 <_sbrk_r>
 800d4f4:	4580      	cmp	r8, r0
 800d4f6:	d13a      	bne.n	800d56e <_malloc_r+0xd2>
 800d4f8:	6821      	ldr	r1, [r4, #0]
 800d4fa:	3503      	adds	r5, #3
 800d4fc:	1a6d      	subs	r5, r5, r1
 800d4fe:	f025 0503 	bic.w	r5, r5, #3
 800d502:	3508      	adds	r5, #8
 800d504:	2d0c      	cmp	r5, #12
 800d506:	bf38      	it	cc
 800d508:	250c      	movcc	r5, #12
 800d50a:	4629      	mov	r1, r5
 800d50c:	4638      	mov	r0, r7
 800d50e:	f7ff ffa5 	bl	800d45c <sbrk_aligned>
 800d512:	3001      	adds	r0, #1
 800d514:	d02b      	beq.n	800d56e <_malloc_r+0xd2>
 800d516:	6823      	ldr	r3, [r4, #0]
 800d518:	442b      	add	r3, r5
 800d51a:	6023      	str	r3, [r4, #0]
 800d51c:	e00e      	b.n	800d53c <_malloc_r+0xa0>
 800d51e:	6822      	ldr	r2, [r4, #0]
 800d520:	1b52      	subs	r2, r2, r5
 800d522:	d41e      	bmi.n	800d562 <_malloc_r+0xc6>
 800d524:	2a0b      	cmp	r2, #11
 800d526:	d916      	bls.n	800d556 <_malloc_r+0xba>
 800d528:	1961      	adds	r1, r4, r5
 800d52a:	42a3      	cmp	r3, r4
 800d52c:	6025      	str	r5, [r4, #0]
 800d52e:	bf18      	it	ne
 800d530:	6059      	strne	r1, [r3, #4]
 800d532:	6863      	ldr	r3, [r4, #4]
 800d534:	bf08      	it	eq
 800d536:	6031      	streq	r1, [r6, #0]
 800d538:	5162      	str	r2, [r4, r5]
 800d53a:	604b      	str	r3, [r1, #4]
 800d53c:	4638      	mov	r0, r7
 800d53e:	f104 060b 	add.w	r6, r4, #11
 800d542:	f000 fa07 	bl	800d954 <__malloc_unlock>
 800d546:	f026 0607 	bic.w	r6, r6, #7
 800d54a:	1d23      	adds	r3, r4, #4
 800d54c:	1af2      	subs	r2, r6, r3
 800d54e:	d0b6      	beq.n	800d4be <_malloc_r+0x22>
 800d550:	1b9b      	subs	r3, r3, r6
 800d552:	50a3      	str	r3, [r4, r2]
 800d554:	e7b3      	b.n	800d4be <_malloc_r+0x22>
 800d556:	6862      	ldr	r2, [r4, #4]
 800d558:	42a3      	cmp	r3, r4
 800d55a:	bf0c      	ite	eq
 800d55c:	6032      	streq	r2, [r6, #0]
 800d55e:	605a      	strne	r2, [r3, #4]
 800d560:	e7ec      	b.n	800d53c <_malloc_r+0xa0>
 800d562:	4623      	mov	r3, r4
 800d564:	6864      	ldr	r4, [r4, #4]
 800d566:	e7b2      	b.n	800d4ce <_malloc_r+0x32>
 800d568:	4634      	mov	r4, r6
 800d56a:	6876      	ldr	r6, [r6, #4]
 800d56c:	e7b9      	b.n	800d4e2 <_malloc_r+0x46>
 800d56e:	230c      	movs	r3, #12
 800d570:	603b      	str	r3, [r7, #0]
 800d572:	4638      	mov	r0, r7
 800d574:	f000 f9ee 	bl	800d954 <__malloc_unlock>
 800d578:	e7a1      	b.n	800d4be <_malloc_r+0x22>
 800d57a:	6025      	str	r5, [r4, #0]
 800d57c:	e7de      	b.n	800d53c <_malloc_r+0xa0>
 800d57e:	bf00      	nop
 800d580:	20000be0 	.word	0x20000be0

0800d584 <__ssputs_r>:
 800d584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d588:	688e      	ldr	r6, [r1, #8]
 800d58a:	429e      	cmp	r6, r3
 800d58c:	4682      	mov	sl, r0
 800d58e:	460c      	mov	r4, r1
 800d590:	4690      	mov	r8, r2
 800d592:	461f      	mov	r7, r3
 800d594:	d838      	bhi.n	800d608 <__ssputs_r+0x84>
 800d596:	898a      	ldrh	r2, [r1, #12]
 800d598:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d59c:	d032      	beq.n	800d604 <__ssputs_r+0x80>
 800d59e:	6825      	ldr	r5, [r4, #0]
 800d5a0:	6909      	ldr	r1, [r1, #16]
 800d5a2:	eba5 0901 	sub.w	r9, r5, r1
 800d5a6:	6965      	ldr	r5, [r4, #20]
 800d5a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d5ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d5b0:	3301      	adds	r3, #1
 800d5b2:	444b      	add	r3, r9
 800d5b4:	106d      	asrs	r5, r5, #1
 800d5b6:	429d      	cmp	r5, r3
 800d5b8:	bf38      	it	cc
 800d5ba:	461d      	movcc	r5, r3
 800d5bc:	0553      	lsls	r3, r2, #21
 800d5be:	d531      	bpl.n	800d624 <__ssputs_r+0xa0>
 800d5c0:	4629      	mov	r1, r5
 800d5c2:	f7ff ff6b 	bl	800d49c <_malloc_r>
 800d5c6:	4606      	mov	r6, r0
 800d5c8:	b950      	cbnz	r0, 800d5e0 <__ssputs_r+0x5c>
 800d5ca:	230c      	movs	r3, #12
 800d5cc:	f8ca 3000 	str.w	r3, [sl]
 800d5d0:	89a3      	ldrh	r3, [r4, #12]
 800d5d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5d6:	81a3      	strh	r3, [r4, #12]
 800d5d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d5dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5e0:	6921      	ldr	r1, [r4, #16]
 800d5e2:	464a      	mov	r2, r9
 800d5e4:	f7ff fa08 	bl	800c9f8 <memcpy>
 800d5e8:	89a3      	ldrh	r3, [r4, #12]
 800d5ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d5ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5f2:	81a3      	strh	r3, [r4, #12]
 800d5f4:	6126      	str	r6, [r4, #16]
 800d5f6:	6165      	str	r5, [r4, #20]
 800d5f8:	444e      	add	r6, r9
 800d5fa:	eba5 0509 	sub.w	r5, r5, r9
 800d5fe:	6026      	str	r6, [r4, #0]
 800d600:	60a5      	str	r5, [r4, #8]
 800d602:	463e      	mov	r6, r7
 800d604:	42be      	cmp	r6, r7
 800d606:	d900      	bls.n	800d60a <__ssputs_r+0x86>
 800d608:	463e      	mov	r6, r7
 800d60a:	6820      	ldr	r0, [r4, #0]
 800d60c:	4632      	mov	r2, r6
 800d60e:	4641      	mov	r1, r8
 800d610:	f000 f980 	bl	800d914 <memmove>
 800d614:	68a3      	ldr	r3, [r4, #8]
 800d616:	1b9b      	subs	r3, r3, r6
 800d618:	60a3      	str	r3, [r4, #8]
 800d61a:	6823      	ldr	r3, [r4, #0]
 800d61c:	4433      	add	r3, r6
 800d61e:	6023      	str	r3, [r4, #0]
 800d620:	2000      	movs	r0, #0
 800d622:	e7db      	b.n	800d5dc <__ssputs_r+0x58>
 800d624:	462a      	mov	r2, r5
 800d626:	f000 f99b 	bl	800d960 <_realloc_r>
 800d62a:	4606      	mov	r6, r0
 800d62c:	2800      	cmp	r0, #0
 800d62e:	d1e1      	bne.n	800d5f4 <__ssputs_r+0x70>
 800d630:	6921      	ldr	r1, [r4, #16]
 800d632:	4650      	mov	r0, sl
 800d634:	f7ff fec6 	bl	800d3c4 <_free_r>
 800d638:	e7c7      	b.n	800d5ca <__ssputs_r+0x46>
	...

0800d63c <_svfiprintf_r>:
 800d63c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d640:	4698      	mov	r8, r3
 800d642:	898b      	ldrh	r3, [r1, #12]
 800d644:	061b      	lsls	r3, r3, #24
 800d646:	b09d      	sub	sp, #116	; 0x74
 800d648:	4607      	mov	r7, r0
 800d64a:	460d      	mov	r5, r1
 800d64c:	4614      	mov	r4, r2
 800d64e:	d50e      	bpl.n	800d66e <_svfiprintf_r+0x32>
 800d650:	690b      	ldr	r3, [r1, #16]
 800d652:	b963      	cbnz	r3, 800d66e <_svfiprintf_r+0x32>
 800d654:	2140      	movs	r1, #64	; 0x40
 800d656:	f7ff ff21 	bl	800d49c <_malloc_r>
 800d65a:	6028      	str	r0, [r5, #0]
 800d65c:	6128      	str	r0, [r5, #16]
 800d65e:	b920      	cbnz	r0, 800d66a <_svfiprintf_r+0x2e>
 800d660:	230c      	movs	r3, #12
 800d662:	603b      	str	r3, [r7, #0]
 800d664:	f04f 30ff 	mov.w	r0, #4294967295
 800d668:	e0d1      	b.n	800d80e <_svfiprintf_r+0x1d2>
 800d66a:	2340      	movs	r3, #64	; 0x40
 800d66c:	616b      	str	r3, [r5, #20]
 800d66e:	2300      	movs	r3, #0
 800d670:	9309      	str	r3, [sp, #36]	; 0x24
 800d672:	2320      	movs	r3, #32
 800d674:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d678:	f8cd 800c 	str.w	r8, [sp, #12]
 800d67c:	2330      	movs	r3, #48	; 0x30
 800d67e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d828 <_svfiprintf_r+0x1ec>
 800d682:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d686:	f04f 0901 	mov.w	r9, #1
 800d68a:	4623      	mov	r3, r4
 800d68c:	469a      	mov	sl, r3
 800d68e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d692:	b10a      	cbz	r2, 800d698 <_svfiprintf_r+0x5c>
 800d694:	2a25      	cmp	r2, #37	; 0x25
 800d696:	d1f9      	bne.n	800d68c <_svfiprintf_r+0x50>
 800d698:	ebba 0b04 	subs.w	fp, sl, r4
 800d69c:	d00b      	beq.n	800d6b6 <_svfiprintf_r+0x7a>
 800d69e:	465b      	mov	r3, fp
 800d6a0:	4622      	mov	r2, r4
 800d6a2:	4629      	mov	r1, r5
 800d6a4:	4638      	mov	r0, r7
 800d6a6:	f7ff ff6d 	bl	800d584 <__ssputs_r>
 800d6aa:	3001      	adds	r0, #1
 800d6ac:	f000 80aa 	beq.w	800d804 <_svfiprintf_r+0x1c8>
 800d6b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d6b2:	445a      	add	r2, fp
 800d6b4:	9209      	str	r2, [sp, #36]	; 0x24
 800d6b6:	f89a 3000 	ldrb.w	r3, [sl]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	f000 80a2 	beq.w	800d804 <_svfiprintf_r+0x1c8>
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	f04f 32ff 	mov.w	r2, #4294967295
 800d6c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d6ca:	f10a 0a01 	add.w	sl, sl, #1
 800d6ce:	9304      	str	r3, [sp, #16]
 800d6d0:	9307      	str	r3, [sp, #28]
 800d6d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d6d6:	931a      	str	r3, [sp, #104]	; 0x68
 800d6d8:	4654      	mov	r4, sl
 800d6da:	2205      	movs	r2, #5
 800d6dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6e0:	4851      	ldr	r0, [pc, #324]	; (800d828 <_svfiprintf_r+0x1ec>)
 800d6e2:	f7f2 fd7d 	bl	80001e0 <memchr>
 800d6e6:	9a04      	ldr	r2, [sp, #16]
 800d6e8:	b9d8      	cbnz	r0, 800d722 <_svfiprintf_r+0xe6>
 800d6ea:	06d0      	lsls	r0, r2, #27
 800d6ec:	bf44      	itt	mi
 800d6ee:	2320      	movmi	r3, #32
 800d6f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d6f4:	0711      	lsls	r1, r2, #28
 800d6f6:	bf44      	itt	mi
 800d6f8:	232b      	movmi	r3, #43	; 0x2b
 800d6fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d6fe:	f89a 3000 	ldrb.w	r3, [sl]
 800d702:	2b2a      	cmp	r3, #42	; 0x2a
 800d704:	d015      	beq.n	800d732 <_svfiprintf_r+0xf6>
 800d706:	9a07      	ldr	r2, [sp, #28]
 800d708:	4654      	mov	r4, sl
 800d70a:	2000      	movs	r0, #0
 800d70c:	f04f 0c0a 	mov.w	ip, #10
 800d710:	4621      	mov	r1, r4
 800d712:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d716:	3b30      	subs	r3, #48	; 0x30
 800d718:	2b09      	cmp	r3, #9
 800d71a:	d94e      	bls.n	800d7ba <_svfiprintf_r+0x17e>
 800d71c:	b1b0      	cbz	r0, 800d74c <_svfiprintf_r+0x110>
 800d71e:	9207      	str	r2, [sp, #28]
 800d720:	e014      	b.n	800d74c <_svfiprintf_r+0x110>
 800d722:	eba0 0308 	sub.w	r3, r0, r8
 800d726:	fa09 f303 	lsl.w	r3, r9, r3
 800d72a:	4313      	orrs	r3, r2
 800d72c:	9304      	str	r3, [sp, #16]
 800d72e:	46a2      	mov	sl, r4
 800d730:	e7d2      	b.n	800d6d8 <_svfiprintf_r+0x9c>
 800d732:	9b03      	ldr	r3, [sp, #12]
 800d734:	1d19      	adds	r1, r3, #4
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	9103      	str	r1, [sp, #12]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	bfbb      	ittet	lt
 800d73e:	425b      	neglt	r3, r3
 800d740:	f042 0202 	orrlt.w	r2, r2, #2
 800d744:	9307      	strge	r3, [sp, #28]
 800d746:	9307      	strlt	r3, [sp, #28]
 800d748:	bfb8      	it	lt
 800d74a:	9204      	strlt	r2, [sp, #16]
 800d74c:	7823      	ldrb	r3, [r4, #0]
 800d74e:	2b2e      	cmp	r3, #46	; 0x2e
 800d750:	d10c      	bne.n	800d76c <_svfiprintf_r+0x130>
 800d752:	7863      	ldrb	r3, [r4, #1]
 800d754:	2b2a      	cmp	r3, #42	; 0x2a
 800d756:	d135      	bne.n	800d7c4 <_svfiprintf_r+0x188>
 800d758:	9b03      	ldr	r3, [sp, #12]
 800d75a:	1d1a      	adds	r2, r3, #4
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	9203      	str	r2, [sp, #12]
 800d760:	2b00      	cmp	r3, #0
 800d762:	bfb8      	it	lt
 800d764:	f04f 33ff 	movlt.w	r3, #4294967295
 800d768:	3402      	adds	r4, #2
 800d76a:	9305      	str	r3, [sp, #20]
 800d76c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d838 <_svfiprintf_r+0x1fc>
 800d770:	7821      	ldrb	r1, [r4, #0]
 800d772:	2203      	movs	r2, #3
 800d774:	4650      	mov	r0, sl
 800d776:	f7f2 fd33 	bl	80001e0 <memchr>
 800d77a:	b140      	cbz	r0, 800d78e <_svfiprintf_r+0x152>
 800d77c:	2340      	movs	r3, #64	; 0x40
 800d77e:	eba0 000a 	sub.w	r0, r0, sl
 800d782:	fa03 f000 	lsl.w	r0, r3, r0
 800d786:	9b04      	ldr	r3, [sp, #16]
 800d788:	4303      	orrs	r3, r0
 800d78a:	3401      	adds	r4, #1
 800d78c:	9304      	str	r3, [sp, #16]
 800d78e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d792:	4826      	ldr	r0, [pc, #152]	; (800d82c <_svfiprintf_r+0x1f0>)
 800d794:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d798:	2206      	movs	r2, #6
 800d79a:	f7f2 fd21 	bl	80001e0 <memchr>
 800d79e:	2800      	cmp	r0, #0
 800d7a0:	d038      	beq.n	800d814 <_svfiprintf_r+0x1d8>
 800d7a2:	4b23      	ldr	r3, [pc, #140]	; (800d830 <_svfiprintf_r+0x1f4>)
 800d7a4:	bb1b      	cbnz	r3, 800d7ee <_svfiprintf_r+0x1b2>
 800d7a6:	9b03      	ldr	r3, [sp, #12]
 800d7a8:	3307      	adds	r3, #7
 800d7aa:	f023 0307 	bic.w	r3, r3, #7
 800d7ae:	3308      	adds	r3, #8
 800d7b0:	9303      	str	r3, [sp, #12]
 800d7b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7b4:	4433      	add	r3, r6
 800d7b6:	9309      	str	r3, [sp, #36]	; 0x24
 800d7b8:	e767      	b.n	800d68a <_svfiprintf_r+0x4e>
 800d7ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800d7be:	460c      	mov	r4, r1
 800d7c0:	2001      	movs	r0, #1
 800d7c2:	e7a5      	b.n	800d710 <_svfiprintf_r+0xd4>
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	3401      	adds	r4, #1
 800d7c8:	9305      	str	r3, [sp, #20]
 800d7ca:	4619      	mov	r1, r3
 800d7cc:	f04f 0c0a 	mov.w	ip, #10
 800d7d0:	4620      	mov	r0, r4
 800d7d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d7d6:	3a30      	subs	r2, #48	; 0x30
 800d7d8:	2a09      	cmp	r2, #9
 800d7da:	d903      	bls.n	800d7e4 <_svfiprintf_r+0x1a8>
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d0c5      	beq.n	800d76c <_svfiprintf_r+0x130>
 800d7e0:	9105      	str	r1, [sp, #20]
 800d7e2:	e7c3      	b.n	800d76c <_svfiprintf_r+0x130>
 800d7e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800d7e8:	4604      	mov	r4, r0
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	e7f0      	b.n	800d7d0 <_svfiprintf_r+0x194>
 800d7ee:	ab03      	add	r3, sp, #12
 800d7f0:	9300      	str	r3, [sp, #0]
 800d7f2:	462a      	mov	r2, r5
 800d7f4:	4b0f      	ldr	r3, [pc, #60]	; (800d834 <_svfiprintf_r+0x1f8>)
 800d7f6:	a904      	add	r1, sp, #16
 800d7f8:	4638      	mov	r0, r7
 800d7fa:	f7fc fa49 	bl	8009c90 <_printf_float>
 800d7fe:	1c42      	adds	r2, r0, #1
 800d800:	4606      	mov	r6, r0
 800d802:	d1d6      	bne.n	800d7b2 <_svfiprintf_r+0x176>
 800d804:	89ab      	ldrh	r3, [r5, #12]
 800d806:	065b      	lsls	r3, r3, #25
 800d808:	f53f af2c 	bmi.w	800d664 <_svfiprintf_r+0x28>
 800d80c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d80e:	b01d      	add	sp, #116	; 0x74
 800d810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d814:	ab03      	add	r3, sp, #12
 800d816:	9300      	str	r3, [sp, #0]
 800d818:	462a      	mov	r2, r5
 800d81a:	4b06      	ldr	r3, [pc, #24]	; (800d834 <_svfiprintf_r+0x1f8>)
 800d81c:	a904      	add	r1, sp, #16
 800d81e:	4638      	mov	r0, r7
 800d820:	f7fc fcda 	bl	800a1d8 <_printf_i>
 800d824:	e7eb      	b.n	800d7fe <_svfiprintf_r+0x1c2>
 800d826:	bf00      	nop
 800d828:	0800f2f4 	.word	0x0800f2f4
 800d82c:	0800f2fe 	.word	0x0800f2fe
 800d830:	08009c91 	.word	0x08009c91
 800d834:	0800d585 	.word	0x0800d585
 800d838:	0800f2fa 	.word	0x0800f2fa
 800d83c:	00000000 	.word	0x00000000

0800d840 <nan>:
 800d840:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d848 <nan+0x8>
 800d844:	4770      	bx	lr
 800d846:	bf00      	nop
 800d848:	00000000 	.word	0x00000000
 800d84c:	7ff80000 	.word	0x7ff80000

0800d850 <_sbrk_r>:
 800d850:	b538      	push	{r3, r4, r5, lr}
 800d852:	4d06      	ldr	r5, [pc, #24]	; (800d86c <_sbrk_r+0x1c>)
 800d854:	2300      	movs	r3, #0
 800d856:	4604      	mov	r4, r0
 800d858:	4608      	mov	r0, r1
 800d85a:	602b      	str	r3, [r5, #0]
 800d85c:	f7f5 feb4 	bl	80035c8 <_sbrk>
 800d860:	1c43      	adds	r3, r0, #1
 800d862:	d102      	bne.n	800d86a <_sbrk_r+0x1a>
 800d864:	682b      	ldr	r3, [r5, #0]
 800d866:	b103      	cbz	r3, 800d86a <_sbrk_r+0x1a>
 800d868:	6023      	str	r3, [r4, #0]
 800d86a:	bd38      	pop	{r3, r4, r5, pc}
 800d86c:	20000be8 	.word	0x20000be8

0800d870 <strncmp>:
 800d870:	b510      	push	{r4, lr}
 800d872:	b17a      	cbz	r2, 800d894 <strncmp+0x24>
 800d874:	4603      	mov	r3, r0
 800d876:	3901      	subs	r1, #1
 800d878:	1884      	adds	r4, r0, r2
 800d87a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d87e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d882:	4290      	cmp	r0, r2
 800d884:	d101      	bne.n	800d88a <strncmp+0x1a>
 800d886:	42a3      	cmp	r3, r4
 800d888:	d101      	bne.n	800d88e <strncmp+0x1e>
 800d88a:	1a80      	subs	r0, r0, r2
 800d88c:	bd10      	pop	{r4, pc}
 800d88e:	2800      	cmp	r0, #0
 800d890:	d1f3      	bne.n	800d87a <strncmp+0xa>
 800d892:	e7fa      	b.n	800d88a <strncmp+0x1a>
 800d894:	4610      	mov	r0, r2
 800d896:	e7f9      	b.n	800d88c <strncmp+0x1c>

0800d898 <__ascii_wctomb>:
 800d898:	b149      	cbz	r1, 800d8ae <__ascii_wctomb+0x16>
 800d89a:	2aff      	cmp	r2, #255	; 0xff
 800d89c:	bf85      	ittet	hi
 800d89e:	238a      	movhi	r3, #138	; 0x8a
 800d8a0:	6003      	strhi	r3, [r0, #0]
 800d8a2:	700a      	strbls	r2, [r1, #0]
 800d8a4:	f04f 30ff 	movhi.w	r0, #4294967295
 800d8a8:	bf98      	it	ls
 800d8aa:	2001      	movls	r0, #1
 800d8ac:	4770      	bx	lr
 800d8ae:	4608      	mov	r0, r1
 800d8b0:	4770      	bx	lr
	...

0800d8b4 <__assert_func>:
 800d8b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d8b6:	4614      	mov	r4, r2
 800d8b8:	461a      	mov	r2, r3
 800d8ba:	4b09      	ldr	r3, [pc, #36]	; (800d8e0 <__assert_func+0x2c>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	4605      	mov	r5, r0
 800d8c0:	68d8      	ldr	r0, [r3, #12]
 800d8c2:	b14c      	cbz	r4, 800d8d8 <__assert_func+0x24>
 800d8c4:	4b07      	ldr	r3, [pc, #28]	; (800d8e4 <__assert_func+0x30>)
 800d8c6:	9100      	str	r1, [sp, #0]
 800d8c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d8cc:	4906      	ldr	r1, [pc, #24]	; (800d8e8 <__assert_func+0x34>)
 800d8ce:	462b      	mov	r3, r5
 800d8d0:	f000 f80e 	bl	800d8f0 <fiprintf>
 800d8d4:	f000 fa8c 	bl	800ddf0 <abort>
 800d8d8:	4b04      	ldr	r3, [pc, #16]	; (800d8ec <__assert_func+0x38>)
 800d8da:	461c      	mov	r4, r3
 800d8dc:	e7f3      	b.n	800d8c6 <__assert_func+0x12>
 800d8de:	bf00      	nop
 800d8e0:	2000028c 	.word	0x2000028c
 800d8e4:	0800f305 	.word	0x0800f305
 800d8e8:	0800f312 	.word	0x0800f312
 800d8ec:	0800f340 	.word	0x0800f340

0800d8f0 <fiprintf>:
 800d8f0:	b40e      	push	{r1, r2, r3}
 800d8f2:	b503      	push	{r0, r1, lr}
 800d8f4:	4601      	mov	r1, r0
 800d8f6:	ab03      	add	r3, sp, #12
 800d8f8:	4805      	ldr	r0, [pc, #20]	; (800d910 <fiprintf+0x20>)
 800d8fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8fe:	6800      	ldr	r0, [r0, #0]
 800d900:	9301      	str	r3, [sp, #4]
 800d902:	f000 f885 	bl	800da10 <_vfiprintf_r>
 800d906:	b002      	add	sp, #8
 800d908:	f85d eb04 	ldr.w	lr, [sp], #4
 800d90c:	b003      	add	sp, #12
 800d90e:	4770      	bx	lr
 800d910:	2000028c 	.word	0x2000028c

0800d914 <memmove>:
 800d914:	4288      	cmp	r0, r1
 800d916:	b510      	push	{r4, lr}
 800d918:	eb01 0402 	add.w	r4, r1, r2
 800d91c:	d902      	bls.n	800d924 <memmove+0x10>
 800d91e:	4284      	cmp	r4, r0
 800d920:	4623      	mov	r3, r4
 800d922:	d807      	bhi.n	800d934 <memmove+0x20>
 800d924:	1e43      	subs	r3, r0, #1
 800d926:	42a1      	cmp	r1, r4
 800d928:	d008      	beq.n	800d93c <memmove+0x28>
 800d92a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d92e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d932:	e7f8      	b.n	800d926 <memmove+0x12>
 800d934:	4402      	add	r2, r0
 800d936:	4601      	mov	r1, r0
 800d938:	428a      	cmp	r2, r1
 800d93a:	d100      	bne.n	800d93e <memmove+0x2a>
 800d93c:	bd10      	pop	{r4, pc}
 800d93e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d942:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d946:	e7f7      	b.n	800d938 <memmove+0x24>

0800d948 <__malloc_lock>:
 800d948:	4801      	ldr	r0, [pc, #4]	; (800d950 <__malloc_lock+0x8>)
 800d94a:	f000 bc11 	b.w	800e170 <__retarget_lock_acquire_recursive>
 800d94e:	bf00      	nop
 800d950:	20000bec 	.word	0x20000bec

0800d954 <__malloc_unlock>:
 800d954:	4801      	ldr	r0, [pc, #4]	; (800d95c <__malloc_unlock+0x8>)
 800d956:	f000 bc0c 	b.w	800e172 <__retarget_lock_release_recursive>
 800d95a:	bf00      	nop
 800d95c:	20000bec 	.word	0x20000bec

0800d960 <_realloc_r>:
 800d960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d964:	4680      	mov	r8, r0
 800d966:	4614      	mov	r4, r2
 800d968:	460e      	mov	r6, r1
 800d96a:	b921      	cbnz	r1, 800d976 <_realloc_r+0x16>
 800d96c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d970:	4611      	mov	r1, r2
 800d972:	f7ff bd93 	b.w	800d49c <_malloc_r>
 800d976:	b92a      	cbnz	r2, 800d984 <_realloc_r+0x24>
 800d978:	f7ff fd24 	bl	800d3c4 <_free_r>
 800d97c:	4625      	mov	r5, r4
 800d97e:	4628      	mov	r0, r5
 800d980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d984:	f000 fc5c 	bl	800e240 <_malloc_usable_size_r>
 800d988:	4284      	cmp	r4, r0
 800d98a:	4607      	mov	r7, r0
 800d98c:	d802      	bhi.n	800d994 <_realloc_r+0x34>
 800d98e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d992:	d812      	bhi.n	800d9ba <_realloc_r+0x5a>
 800d994:	4621      	mov	r1, r4
 800d996:	4640      	mov	r0, r8
 800d998:	f7ff fd80 	bl	800d49c <_malloc_r>
 800d99c:	4605      	mov	r5, r0
 800d99e:	2800      	cmp	r0, #0
 800d9a0:	d0ed      	beq.n	800d97e <_realloc_r+0x1e>
 800d9a2:	42bc      	cmp	r4, r7
 800d9a4:	4622      	mov	r2, r4
 800d9a6:	4631      	mov	r1, r6
 800d9a8:	bf28      	it	cs
 800d9aa:	463a      	movcs	r2, r7
 800d9ac:	f7ff f824 	bl	800c9f8 <memcpy>
 800d9b0:	4631      	mov	r1, r6
 800d9b2:	4640      	mov	r0, r8
 800d9b4:	f7ff fd06 	bl	800d3c4 <_free_r>
 800d9b8:	e7e1      	b.n	800d97e <_realloc_r+0x1e>
 800d9ba:	4635      	mov	r5, r6
 800d9bc:	e7df      	b.n	800d97e <_realloc_r+0x1e>

0800d9be <__sfputc_r>:
 800d9be:	6893      	ldr	r3, [r2, #8]
 800d9c0:	3b01      	subs	r3, #1
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	b410      	push	{r4}
 800d9c6:	6093      	str	r3, [r2, #8]
 800d9c8:	da08      	bge.n	800d9dc <__sfputc_r+0x1e>
 800d9ca:	6994      	ldr	r4, [r2, #24]
 800d9cc:	42a3      	cmp	r3, r4
 800d9ce:	db01      	blt.n	800d9d4 <__sfputc_r+0x16>
 800d9d0:	290a      	cmp	r1, #10
 800d9d2:	d103      	bne.n	800d9dc <__sfputc_r+0x1e>
 800d9d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9d8:	f000 b94a 	b.w	800dc70 <__swbuf_r>
 800d9dc:	6813      	ldr	r3, [r2, #0]
 800d9de:	1c58      	adds	r0, r3, #1
 800d9e0:	6010      	str	r0, [r2, #0]
 800d9e2:	7019      	strb	r1, [r3, #0]
 800d9e4:	4608      	mov	r0, r1
 800d9e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9ea:	4770      	bx	lr

0800d9ec <__sfputs_r>:
 800d9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9ee:	4606      	mov	r6, r0
 800d9f0:	460f      	mov	r7, r1
 800d9f2:	4614      	mov	r4, r2
 800d9f4:	18d5      	adds	r5, r2, r3
 800d9f6:	42ac      	cmp	r4, r5
 800d9f8:	d101      	bne.n	800d9fe <__sfputs_r+0x12>
 800d9fa:	2000      	movs	r0, #0
 800d9fc:	e007      	b.n	800da0e <__sfputs_r+0x22>
 800d9fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da02:	463a      	mov	r2, r7
 800da04:	4630      	mov	r0, r6
 800da06:	f7ff ffda 	bl	800d9be <__sfputc_r>
 800da0a:	1c43      	adds	r3, r0, #1
 800da0c:	d1f3      	bne.n	800d9f6 <__sfputs_r+0xa>
 800da0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800da10 <_vfiprintf_r>:
 800da10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da14:	460d      	mov	r5, r1
 800da16:	b09d      	sub	sp, #116	; 0x74
 800da18:	4614      	mov	r4, r2
 800da1a:	4698      	mov	r8, r3
 800da1c:	4606      	mov	r6, r0
 800da1e:	b118      	cbz	r0, 800da28 <_vfiprintf_r+0x18>
 800da20:	6983      	ldr	r3, [r0, #24]
 800da22:	b90b      	cbnz	r3, 800da28 <_vfiprintf_r+0x18>
 800da24:	f000 fb06 	bl	800e034 <__sinit>
 800da28:	4b89      	ldr	r3, [pc, #548]	; (800dc50 <_vfiprintf_r+0x240>)
 800da2a:	429d      	cmp	r5, r3
 800da2c:	d11b      	bne.n	800da66 <_vfiprintf_r+0x56>
 800da2e:	6875      	ldr	r5, [r6, #4]
 800da30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da32:	07d9      	lsls	r1, r3, #31
 800da34:	d405      	bmi.n	800da42 <_vfiprintf_r+0x32>
 800da36:	89ab      	ldrh	r3, [r5, #12]
 800da38:	059a      	lsls	r2, r3, #22
 800da3a:	d402      	bmi.n	800da42 <_vfiprintf_r+0x32>
 800da3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da3e:	f000 fb97 	bl	800e170 <__retarget_lock_acquire_recursive>
 800da42:	89ab      	ldrh	r3, [r5, #12]
 800da44:	071b      	lsls	r3, r3, #28
 800da46:	d501      	bpl.n	800da4c <_vfiprintf_r+0x3c>
 800da48:	692b      	ldr	r3, [r5, #16]
 800da4a:	b9eb      	cbnz	r3, 800da88 <_vfiprintf_r+0x78>
 800da4c:	4629      	mov	r1, r5
 800da4e:	4630      	mov	r0, r6
 800da50:	f000 f960 	bl	800dd14 <__swsetup_r>
 800da54:	b1c0      	cbz	r0, 800da88 <_vfiprintf_r+0x78>
 800da56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da58:	07dc      	lsls	r4, r3, #31
 800da5a:	d50e      	bpl.n	800da7a <_vfiprintf_r+0x6a>
 800da5c:	f04f 30ff 	mov.w	r0, #4294967295
 800da60:	b01d      	add	sp, #116	; 0x74
 800da62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da66:	4b7b      	ldr	r3, [pc, #492]	; (800dc54 <_vfiprintf_r+0x244>)
 800da68:	429d      	cmp	r5, r3
 800da6a:	d101      	bne.n	800da70 <_vfiprintf_r+0x60>
 800da6c:	68b5      	ldr	r5, [r6, #8]
 800da6e:	e7df      	b.n	800da30 <_vfiprintf_r+0x20>
 800da70:	4b79      	ldr	r3, [pc, #484]	; (800dc58 <_vfiprintf_r+0x248>)
 800da72:	429d      	cmp	r5, r3
 800da74:	bf08      	it	eq
 800da76:	68f5      	ldreq	r5, [r6, #12]
 800da78:	e7da      	b.n	800da30 <_vfiprintf_r+0x20>
 800da7a:	89ab      	ldrh	r3, [r5, #12]
 800da7c:	0598      	lsls	r0, r3, #22
 800da7e:	d4ed      	bmi.n	800da5c <_vfiprintf_r+0x4c>
 800da80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da82:	f000 fb76 	bl	800e172 <__retarget_lock_release_recursive>
 800da86:	e7e9      	b.n	800da5c <_vfiprintf_r+0x4c>
 800da88:	2300      	movs	r3, #0
 800da8a:	9309      	str	r3, [sp, #36]	; 0x24
 800da8c:	2320      	movs	r3, #32
 800da8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da92:	f8cd 800c 	str.w	r8, [sp, #12]
 800da96:	2330      	movs	r3, #48	; 0x30
 800da98:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dc5c <_vfiprintf_r+0x24c>
 800da9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800daa0:	f04f 0901 	mov.w	r9, #1
 800daa4:	4623      	mov	r3, r4
 800daa6:	469a      	mov	sl, r3
 800daa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800daac:	b10a      	cbz	r2, 800dab2 <_vfiprintf_r+0xa2>
 800daae:	2a25      	cmp	r2, #37	; 0x25
 800dab0:	d1f9      	bne.n	800daa6 <_vfiprintf_r+0x96>
 800dab2:	ebba 0b04 	subs.w	fp, sl, r4
 800dab6:	d00b      	beq.n	800dad0 <_vfiprintf_r+0xc0>
 800dab8:	465b      	mov	r3, fp
 800daba:	4622      	mov	r2, r4
 800dabc:	4629      	mov	r1, r5
 800dabe:	4630      	mov	r0, r6
 800dac0:	f7ff ff94 	bl	800d9ec <__sfputs_r>
 800dac4:	3001      	adds	r0, #1
 800dac6:	f000 80aa 	beq.w	800dc1e <_vfiprintf_r+0x20e>
 800daca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dacc:	445a      	add	r2, fp
 800dace:	9209      	str	r2, [sp, #36]	; 0x24
 800dad0:	f89a 3000 	ldrb.w	r3, [sl]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	f000 80a2 	beq.w	800dc1e <_vfiprintf_r+0x20e>
 800dada:	2300      	movs	r3, #0
 800dadc:	f04f 32ff 	mov.w	r2, #4294967295
 800dae0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dae4:	f10a 0a01 	add.w	sl, sl, #1
 800dae8:	9304      	str	r3, [sp, #16]
 800daea:	9307      	str	r3, [sp, #28]
 800daec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800daf0:	931a      	str	r3, [sp, #104]	; 0x68
 800daf2:	4654      	mov	r4, sl
 800daf4:	2205      	movs	r2, #5
 800daf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dafa:	4858      	ldr	r0, [pc, #352]	; (800dc5c <_vfiprintf_r+0x24c>)
 800dafc:	f7f2 fb70 	bl	80001e0 <memchr>
 800db00:	9a04      	ldr	r2, [sp, #16]
 800db02:	b9d8      	cbnz	r0, 800db3c <_vfiprintf_r+0x12c>
 800db04:	06d1      	lsls	r1, r2, #27
 800db06:	bf44      	itt	mi
 800db08:	2320      	movmi	r3, #32
 800db0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db0e:	0713      	lsls	r3, r2, #28
 800db10:	bf44      	itt	mi
 800db12:	232b      	movmi	r3, #43	; 0x2b
 800db14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db18:	f89a 3000 	ldrb.w	r3, [sl]
 800db1c:	2b2a      	cmp	r3, #42	; 0x2a
 800db1e:	d015      	beq.n	800db4c <_vfiprintf_r+0x13c>
 800db20:	9a07      	ldr	r2, [sp, #28]
 800db22:	4654      	mov	r4, sl
 800db24:	2000      	movs	r0, #0
 800db26:	f04f 0c0a 	mov.w	ip, #10
 800db2a:	4621      	mov	r1, r4
 800db2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db30:	3b30      	subs	r3, #48	; 0x30
 800db32:	2b09      	cmp	r3, #9
 800db34:	d94e      	bls.n	800dbd4 <_vfiprintf_r+0x1c4>
 800db36:	b1b0      	cbz	r0, 800db66 <_vfiprintf_r+0x156>
 800db38:	9207      	str	r2, [sp, #28]
 800db3a:	e014      	b.n	800db66 <_vfiprintf_r+0x156>
 800db3c:	eba0 0308 	sub.w	r3, r0, r8
 800db40:	fa09 f303 	lsl.w	r3, r9, r3
 800db44:	4313      	orrs	r3, r2
 800db46:	9304      	str	r3, [sp, #16]
 800db48:	46a2      	mov	sl, r4
 800db4a:	e7d2      	b.n	800daf2 <_vfiprintf_r+0xe2>
 800db4c:	9b03      	ldr	r3, [sp, #12]
 800db4e:	1d19      	adds	r1, r3, #4
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	9103      	str	r1, [sp, #12]
 800db54:	2b00      	cmp	r3, #0
 800db56:	bfbb      	ittet	lt
 800db58:	425b      	neglt	r3, r3
 800db5a:	f042 0202 	orrlt.w	r2, r2, #2
 800db5e:	9307      	strge	r3, [sp, #28]
 800db60:	9307      	strlt	r3, [sp, #28]
 800db62:	bfb8      	it	lt
 800db64:	9204      	strlt	r2, [sp, #16]
 800db66:	7823      	ldrb	r3, [r4, #0]
 800db68:	2b2e      	cmp	r3, #46	; 0x2e
 800db6a:	d10c      	bne.n	800db86 <_vfiprintf_r+0x176>
 800db6c:	7863      	ldrb	r3, [r4, #1]
 800db6e:	2b2a      	cmp	r3, #42	; 0x2a
 800db70:	d135      	bne.n	800dbde <_vfiprintf_r+0x1ce>
 800db72:	9b03      	ldr	r3, [sp, #12]
 800db74:	1d1a      	adds	r2, r3, #4
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	9203      	str	r2, [sp, #12]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	bfb8      	it	lt
 800db7e:	f04f 33ff 	movlt.w	r3, #4294967295
 800db82:	3402      	adds	r4, #2
 800db84:	9305      	str	r3, [sp, #20]
 800db86:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dc6c <_vfiprintf_r+0x25c>
 800db8a:	7821      	ldrb	r1, [r4, #0]
 800db8c:	2203      	movs	r2, #3
 800db8e:	4650      	mov	r0, sl
 800db90:	f7f2 fb26 	bl	80001e0 <memchr>
 800db94:	b140      	cbz	r0, 800dba8 <_vfiprintf_r+0x198>
 800db96:	2340      	movs	r3, #64	; 0x40
 800db98:	eba0 000a 	sub.w	r0, r0, sl
 800db9c:	fa03 f000 	lsl.w	r0, r3, r0
 800dba0:	9b04      	ldr	r3, [sp, #16]
 800dba2:	4303      	orrs	r3, r0
 800dba4:	3401      	adds	r4, #1
 800dba6:	9304      	str	r3, [sp, #16]
 800dba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbac:	482c      	ldr	r0, [pc, #176]	; (800dc60 <_vfiprintf_r+0x250>)
 800dbae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dbb2:	2206      	movs	r2, #6
 800dbb4:	f7f2 fb14 	bl	80001e0 <memchr>
 800dbb8:	2800      	cmp	r0, #0
 800dbba:	d03f      	beq.n	800dc3c <_vfiprintf_r+0x22c>
 800dbbc:	4b29      	ldr	r3, [pc, #164]	; (800dc64 <_vfiprintf_r+0x254>)
 800dbbe:	bb1b      	cbnz	r3, 800dc08 <_vfiprintf_r+0x1f8>
 800dbc0:	9b03      	ldr	r3, [sp, #12]
 800dbc2:	3307      	adds	r3, #7
 800dbc4:	f023 0307 	bic.w	r3, r3, #7
 800dbc8:	3308      	adds	r3, #8
 800dbca:	9303      	str	r3, [sp, #12]
 800dbcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbce:	443b      	add	r3, r7
 800dbd0:	9309      	str	r3, [sp, #36]	; 0x24
 800dbd2:	e767      	b.n	800daa4 <_vfiprintf_r+0x94>
 800dbd4:	fb0c 3202 	mla	r2, ip, r2, r3
 800dbd8:	460c      	mov	r4, r1
 800dbda:	2001      	movs	r0, #1
 800dbdc:	e7a5      	b.n	800db2a <_vfiprintf_r+0x11a>
 800dbde:	2300      	movs	r3, #0
 800dbe0:	3401      	adds	r4, #1
 800dbe2:	9305      	str	r3, [sp, #20]
 800dbe4:	4619      	mov	r1, r3
 800dbe6:	f04f 0c0a 	mov.w	ip, #10
 800dbea:	4620      	mov	r0, r4
 800dbec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dbf0:	3a30      	subs	r2, #48	; 0x30
 800dbf2:	2a09      	cmp	r2, #9
 800dbf4:	d903      	bls.n	800dbfe <_vfiprintf_r+0x1ee>
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d0c5      	beq.n	800db86 <_vfiprintf_r+0x176>
 800dbfa:	9105      	str	r1, [sp, #20]
 800dbfc:	e7c3      	b.n	800db86 <_vfiprintf_r+0x176>
 800dbfe:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc02:	4604      	mov	r4, r0
 800dc04:	2301      	movs	r3, #1
 800dc06:	e7f0      	b.n	800dbea <_vfiprintf_r+0x1da>
 800dc08:	ab03      	add	r3, sp, #12
 800dc0a:	9300      	str	r3, [sp, #0]
 800dc0c:	462a      	mov	r2, r5
 800dc0e:	4b16      	ldr	r3, [pc, #88]	; (800dc68 <_vfiprintf_r+0x258>)
 800dc10:	a904      	add	r1, sp, #16
 800dc12:	4630      	mov	r0, r6
 800dc14:	f7fc f83c 	bl	8009c90 <_printf_float>
 800dc18:	4607      	mov	r7, r0
 800dc1a:	1c78      	adds	r0, r7, #1
 800dc1c:	d1d6      	bne.n	800dbcc <_vfiprintf_r+0x1bc>
 800dc1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc20:	07d9      	lsls	r1, r3, #31
 800dc22:	d405      	bmi.n	800dc30 <_vfiprintf_r+0x220>
 800dc24:	89ab      	ldrh	r3, [r5, #12]
 800dc26:	059a      	lsls	r2, r3, #22
 800dc28:	d402      	bmi.n	800dc30 <_vfiprintf_r+0x220>
 800dc2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dc2c:	f000 faa1 	bl	800e172 <__retarget_lock_release_recursive>
 800dc30:	89ab      	ldrh	r3, [r5, #12]
 800dc32:	065b      	lsls	r3, r3, #25
 800dc34:	f53f af12 	bmi.w	800da5c <_vfiprintf_r+0x4c>
 800dc38:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc3a:	e711      	b.n	800da60 <_vfiprintf_r+0x50>
 800dc3c:	ab03      	add	r3, sp, #12
 800dc3e:	9300      	str	r3, [sp, #0]
 800dc40:	462a      	mov	r2, r5
 800dc42:	4b09      	ldr	r3, [pc, #36]	; (800dc68 <_vfiprintf_r+0x258>)
 800dc44:	a904      	add	r1, sp, #16
 800dc46:	4630      	mov	r0, r6
 800dc48:	f7fc fac6 	bl	800a1d8 <_printf_i>
 800dc4c:	e7e4      	b.n	800dc18 <_vfiprintf_r+0x208>
 800dc4e:	bf00      	nop
 800dc50:	0800f364 	.word	0x0800f364
 800dc54:	0800f384 	.word	0x0800f384
 800dc58:	0800f344 	.word	0x0800f344
 800dc5c:	0800f2f4 	.word	0x0800f2f4
 800dc60:	0800f2fe 	.word	0x0800f2fe
 800dc64:	08009c91 	.word	0x08009c91
 800dc68:	0800d9ed 	.word	0x0800d9ed
 800dc6c:	0800f2fa 	.word	0x0800f2fa

0800dc70 <__swbuf_r>:
 800dc70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc72:	460e      	mov	r6, r1
 800dc74:	4614      	mov	r4, r2
 800dc76:	4605      	mov	r5, r0
 800dc78:	b118      	cbz	r0, 800dc82 <__swbuf_r+0x12>
 800dc7a:	6983      	ldr	r3, [r0, #24]
 800dc7c:	b90b      	cbnz	r3, 800dc82 <__swbuf_r+0x12>
 800dc7e:	f000 f9d9 	bl	800e034 <__sinit>
 800dc82:	4b21      	ldr	r3, [pc, #132]	; (800dd08 <__swbuf_r+0x98>)
 800dc84:	429c      	cmp	r4, r3
 800dc86:	d12b      	bne.n	800dce0 <__swbuf_r+0x70>
 800dc88:	686c      	ldr	r4, [r5, #4]
 800dc8a:	69a3      	ldr	r3, [r4, #24]
 800dc8c:	60a3      	str	r3, [r4, #8]
 800dc8e:	89a3      	ldrh	r3, [r4, #12]
 800dc90:	071a      	lsls	r2, r3, #28
 800dc92:	d52f      	bpl.n	800dcf4 <__swbuf_r+0x84>
 800dc94:	6923      	ldr	r3, [r4, #16]
 800dc96:	b36b      	cbz	r3, 800dcf4 <__swbuf_r+0x84>
 800dc98:	6923      	ldr	r3, [r4, #16]
 800dc9a:	6820      	ldr	r0, [r4, #0]
 800dc9c:	1ac0      	subs	r0, r0, r3
 800dc9e:	6963      	ldr	r3, [r4, #20]
 800dca0:	b2f6      	uxtb	r6, r6
 800dca2:	4283      	cmp	r3, r0
 800dca4:	4637      	mov	r7, r6
 800dca6:	dc04      	bgt.n	800dcb2 <__swbuf_r+0x42>
 800dca8:	4621      	mov	r1, r4
 800dcaa:	4628      	mov	r0, r5
 800dcac:	f000 f92e 	bl	800df0c <_fflush_r>
 800dcb0:	bb30      	cbnz	r0, 800dd00 <__swbuf_r+0x90>
 800dcb2:	68a3      	ldr	r3, [r4, #8]
 800dcb4:	3b01      	subs	r3, #1
 800dcb6:	60a3      	str	r3, [r4, #8]
 800dcb8:	6823      	ldr	r3, [r4, #0]
 800dcba:	1c5a      	adds	r2, r3, #1
 800dcbc:	6022      	str	r2, [r4, #0]
 800dcbe:	701e      	strb	r6, [r3, #0]
 800dcc0:	6963      	ldr	r3, [r4, #20]
 800dcc2:	3001      	adds	r0, #1
 800dcc4:	4283      	cmp	r3, r0
 800dcc6:	d004      	beq.n	800dcd2 <__swbuf_r+0x62>
 800dcc8:	89a3      	ldrh	r3, [r4, #12]
 800dcca:	07db      	lsls	r3, r3, #31
 800dccc:	d506      	bpl.n	800dcdc <__swbuf_r+0x6c>
 800dcce:	2e0a      	cmp	r6, #10
 800dcd0:	d104      	bne.n	800dcdc <__swbuf_r+0x6c>
 800dcd2:	4621      	mov	r1, r4
 800dcd4:	4628      	mov	r0, r5
 800dcd6:	f000 f919 	bl	800df0c <_fflush_r>
 800dcda:	b988      	cbnz	r0, 800dd00 <__swbuf_r+0x90>
 800dcdc:	4638      	mov	r0, r7
 800dcde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dce0:	4b0a      	ldr	r3, [pc, #40]	; (800dd0c <__swbuf_r+0x9c>)
 800dce2:	429c      	cmp	r4, r3
 800dce4:	d101      	bne.n	800dcea <__swbuf_r+0x7a>
 800dce6:	68ac      	ldr	r4, [r5, #8]
 800dce8:	e7cf      	b.n	800dc8a <__swbuf_r+0x1a>
 800dcea:	4b09      	ldr	r3, [pc, #36]	; (800dd10 <__swbuf_r+0xa0>)
 800dcec:	429c      	cmp	r4, r3
 800dcee:	bf08      	it	eq
 800dcf0:	68ec      	ldreq	r4, [r5, #12]
 800dcf2:	e7ca      	b.n	800dc8a <__swbuf_r+0x1a>
 800dcf4:	4621      	mov	r1, r4
 800dcf6:	4628      	mov	r0, r5
 800dcf8:	f000 f80c 	bl	800dd14 <__swsetup_r>
 800dcfc:	2800      	cmp	r0, #0
 800dcfe:	d0cb      	beq.n	800dc98 <__swbuf_r+0x28>
 800dd00:	f04f 37ff 	mov.w	r7, #4294967295
 800dd04:	e7ea      	b.n	800dcdc <__swbuf_r+0x6c>
 800dd06:	bf00      	nop
 800dd08:	0800f364 	.word	0x0800f364
 800dd0c:	0800f384 	.word	0x0800f384
 800dd10:	0800f344 	.word	0x0800f344

0800dd14 <__swsetup_r>:
 800dd14:	4b32      	ldr	r3, [pc, #200]	; (800dde0 <__swsetup_r+0xcc>)
 800dd16:	b570      	push	{r4, r5, r6, lr}
 800dd18:	681d      	ldr	r5, [r3, #0]
 800dd1a:	4606      	mov	r6, r0
 800dd1c:	460c      	mov	r4, r1
 800dd1e:	b125      	cbz	r5, 800dd2a <__swsetup_r+0x16>
 800dd20:	69ab      	ldr	r3, [r5, #24]
 800dd22:	b913      	cbnz	r3, 800dd2a <__swsetup_r+0x16>
 800dd24:	4628      	mov	r0, r5
 800dd26:	f000 f985 	bl	800e034 <__sinit>
 800dd2a:	4b2e      	ldr	r3, [pc, #184]	; (800dde4 <__swsetup_r+0xd0>)
 800dd2c:	429c      	cmp	r4, r3
 800dd2e:	d10f      	bne.n	800dd50 <__swsetup_r+0x3c>
 800dd30:	686c      	ldr	r4, [r5, #4]
 800dd32:	89a3      	ldrh	r3, [r4, #12]
 800dd34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dd38:	0719      	lsls	r1, r3, #28
 800dd3a:	d42c      	bmi.n	800dd96 <__swsetup_r+0x82>
 800dd3c:	06dd      	lsls	r5, r3, #27
 800dd3e:	d411      	bmi.n	800dd64 <__swsetup_r+0x50>
 800dd40:	2309      	movs	r3, #9
 800dd42:	6033      	str	r3, [r6, #0]
 800dd44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dd48:	81a3      	strh	r3, [r4, #12]
 800dd4a:	f04f 30ff 	mov.w	r0, #4294967295
 800dd4e:	e03e      	b.n	800ddce <__swsetup_r+0xba>
 800dd50:	4b25      	ldr	r3, [pc, #148]	; (800dde8 <__swsetup_r+0xd4>)
 800dd52:	429c      	cmp	r4, r3
 800dd54:	d101      	bne.n	800dd5a <__swsetup_r+0x46>
 800dd56:	68ac      	ldr	r4, [r5, #8]
 800dd58:	e7eb      	b.n	800dd32 <__swsetup_r+0x1e>
 800dd5a:	4b24      	ldr	r3, [pc, #144]	; (800ddec <__swsetup_r+0xd8>)
 800dd5c:	429c      	cmp	r4, r3
 800dd5e:	bf08      	it	eq
 800dd60:	68ec      	ldreq	r4, [r5, #12]
 800dd62:	e7e6      	b.n	800dd32 <__swsetup_r+0x1e>
 800dd64:	0758      	lsls	r0, r3, #29
 800dd66:	d512      	bpl.n	800dd8e <__swsetup_r+0x7a>
 800dd68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dd6a:	b141      	cbz	r1, 800dd7e <__swsetup_r+0x6a>
 800dd6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dd70:	4299      	cmp	r1, r3
 800dd72:	d002      	beq.n	800dd7a <__swsetup_r+0x66>
 800dd74:	4630      	mov	r0, r6
 800dd76:	f7ff fb25 	bl	800d3c4 <_free_r>
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	6363      	str	r3, [r4, #52]	; 0x34
 800dd7e:	89a3      	ldrh	r3, [r4, #12]
 800dd80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dd84:	81a3      	strh	r3, [r4, #12]
 800dd86:	2300      	movs	r3, #0
 800dd88:	6063      	str	r3, [r4, #4]
 800dd8a:	6923      	ldr	r3, [r4, #16]
 800dd8c:	6023      	str	r3, [r4, #0]
 800dd8e:	89a3      	ldrh	r3, [r4, #12]
 800dd90:	f043 0308 	orr.w	r3, r3, #8
 800dd94:	81a3      	strh	r3, [r4, #12]
 800dd96:	6923      	ldr	r3, [r4, #16]
 800dd98:	b94b      	cbnz	r3, 800ddae <__swsetup_r+0x9a>
 800dd9a:	89a3      	ldrh	r3, [r4, #12]
 800dd9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dda0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dda4:	d003      	beq.n	800ddae <__swsetup_r+0x9a>
 800dda6:	4621      	mov	r1, r4
 800dda8:	4630      	mov	r0, r6
 800ddaa:	f000 fa09 	bl	800e1c0 <__smakebuf_r>
 800ddae:	89a0      	ldrh	r0, [r4, #12]
 800ddb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ddb4:	f010 0301 	ands.w	r3, r0, #1
 800ddb8:	d00a      	beq.n	800ddd0 <__swsetup_r+0xbc>
 800ddba:	2300      	movs	r3, #0
 800ddbc:	60a3      	str	r3, [r4, #8]
 800ddbe:	6963      	ldr	r3, [r4, #20]
 800ddc0:	425b      	negs	r3, r3
 800ddc2:	61a3      	str	r3, [r4, #24]
 800ddc4:	6923      	ldr	r3, [r4, #16]
 800ddc6:	b943      	cbnz	r3, 800ddda <__swsetup_r+0xc6>
 800ddc8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ddcc:	d1ba      	bne.n	800dd44 <__swsetup_r+0x30>
 800ddce:	bd70      	pop	{r4, r5, r6, pc}
 800ddd0:	0781      	lsls	r1, r0, #30
 800ddd2:	bf58      	it	pl
 800ddd4:	6963      	ldrpl	r3, [r4, #20]
 800ddd6:	60a3      	str	r3, [r4, #8]
 800ddd8:	e7f4      	b.n	800ddc4 <__swsetup_r+0xb0>
 800ddda:	2000      	movs	r0, #0
 800dddc:	e7f7      	b.n	800ddce <__swsetup_r+0xba>
 800ddde:	bf00      	nop
 800dde0:	2000028c 	.word	0x2000028c
 800dde4:	0800f364 	.word	0x0800f364
 800dde8:	0800f384 	.word	0x0800f384
 800ddec:	0800f344 	.word	0x0800f344

0800ddf0 <abort>:
 800ddf0:	b508      	push	{r3, lr}
 800ddf2:	2006      	movs	r0, #6
 800ddf4:	f000 fa54 	bl	800e2a0 <raise>
 800ddf8:	2001      	movs	r0, #1
 800ddfa:	f7f5 fb6d 	bl	80034d8 <_exit>
	...

0800de00 <__sflush_r>:
 800de00:	898a      	ldrh	r2, [r1, #12]
 800de02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de06:	4605      	mov	r5, r0
 800de08:	0710      	lsls	r0, r2, #28
 800de0a:	460c      	mov	r4, r1
 800de0c:	d458      	bmi.n	800dec0 <__sflush_r+0xc0>
 800de0e:	684b      	ldr	r3, [r1, #4]
 800de10:	2b00      	cmp	r3, #0
 800de12:	dc05      	bgt.n	800de20 <__sflush_r+0x20>
 800de14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800de16:	2b00      	cmp	r3, #0
 800de18:	dc02      	bgt.n	800de20 <__sflush_r+0x20>
 800de1a:	2000      	movs	r0, #0
 800de1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800de22:	2e00      	cmp	r6, #0
 800de24:	d0f9      	beq.n	800de1a <__sflush_r+0x1a>
 800de26:	2300      	movs	r3, #0
 800de28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800de2c:	682f      	ldr	r7, [r5, #0]
 800de2e:	602b      	str	r3, [r5, #0]
 800de30:	d032      	beq.n	800de98 <__sflush_r+0x98>
 800de32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800de34:	89a3      	ldrh	r3, [r4, #12]
 800de36:	075a      	lsls	r2, r3, #29
 800de38:	d505      	bpl.n	800de46 <__sflush_r+0x46>
 800de3a:	6863      	ldr	r3, [r4, #4]
 800de3c:	1ac0      	subs	r0, r0, r3
 800de3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800de40:	b10b      	cbz	r3, 800de46 <__sflush_r+0x46>
 800de42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800de44:	1ac0      	subs	r0, r0, r3
 800de46:	2300      	movs	r3, #0
 800de48:	4602      	mov	r2, r0
 800de4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800de4c:	6a21      	ldr	r1, [r4, #32]
 800de4e:	4628      	mov	r0, r5
 800de50:	47b0      	blx	r6
 800de52:	1c43      	adds	r3, r0, #1
 800de54:	89a3      	ldrh	r3, [r4, #12]
 800de56:	d106      	bne.n	800de66 <__sflush_r+0x66>
 800de58:	6829      	ldr	r1, [r5, #0]
 800de5a:	291d      	cmp	r1, #29
 800de5c:	d82c      	bhi.n	800deb8 <__sflush_r+0xb8>
 800de5e:	4a2a      	ldr	r2, [pc, #168]	; (800df08 <__sflush_r+0x108>)
 800de60:	40ca      	lsrs	r2, r1
 800de62:	07d6      	lsls	r6, r2, #31
 800de64:	d528      	bpl.n	800deb8 <__sflush_r+0xb8>
 800de66:	2200      	movs	r2, #0
 800de68:	6062      	str	r2, [r4, #4]
 800de6a:	04d9      	lsls	r1, r3, #19
 800de6c:	6922      	ldr	r2, [r4, #16]
 800de6e:	6022      	str	r2, [r4, #0]
 800de70:	d504      	bpl.n	800de7c <__sflush_r+0x7c>
 800de72:	1c42      	adds	r2, r0, #1
 800de74:	d101      	bne.n	800de7a <__sflush_r+0x7a>
 800de76:	682b      	ldr	r3, [r5, #0]
 800de78:	b903      	cbnz	r3, 800de7c <__sflush_r+0x7c>
 800de7a:	6560      	str	r0, [r4, #84]	; 0x54
 800de7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de7e:	602f      	str	r7, [r5, #0]
 800de80:	2900      	cmp	r1, #0
 800de82:	d0ca      	beq.n	800de1a <__sflush_r+0x1a>
 800de84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de88:	4299      	cmp	r1, r3
 800de8a:	d002      	beq.n	800de92 <__sflush_r+0x92>
 800de8c:	4628      	mov	r0, r5
 800de8e:	f7ff fa99 	bl	800d3c4 <_free_r>
 800de92:	2000      	movs	r0, #0
 800de94:	6360      	str	r0, [r4, #52]	; 0x34
 800de96:	e7c1      	b.n	800de1c <__sflush_r+0x1c>
 800de98:	6a21      	ldr	r1, [r4, #32]
 800de9a:	2301      	movs	r3, #1
 800de9c:	4628      	mov	r0, r5
 800de9e:	47b0      	blx	r6
 800dea0:	1c41      	adds	r1, r0, #1
 800dea2:	d1c7      	bne.n	800de34 <__sflush_r+0x34>
 800dea4:	682b      	ldr	r3, [r5, #0]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d0c4      	beq.n	800de34 <__sflush_r+0x34>
 800deaa:	2b1d      	cmp	r3, #29
 800deac:	d001      	beq.n	800deb2 <__sflush_r+0xb2>
 800deae:	2b16      	cmp	r3, #22
 800deb0:	d101      	bne.n	800deb6 <__sflush_r+0xb6>
 800deb2:	602f      	str	r7, [r5, #0]
 800deb4:	e7b1      	b.n	800de1a <__sflush_r+0x1a>
 800deb6:	89a3      	ldrh	r3, [r4, #12]
 800deb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800debc:	81a3      	strh	r3, [r4, #12]
 800debe:	e7ad      	b.n	800de1c <__sflush_r+0x1c>
 800dec0:	690f      	ldr	r7, [r1, #16]
 800dec2:	2f00      	cmp	r7, #0
 800dec4:	d0a9      	beq.n	800de1a <__sflush_r+0x1a>
 800dec6:	0793      	lsls	r3, r2, #30
 800dec8:	680e      	ldr	r6, [r1, #0]
 800deca:	bf08      	it	eq
 800decc:	694b      	ldreq	r3, [r1, #20]
 800dece:	600f      	str	r7, [r1, #0]
 800ded0:	bf18      	it	ne
 800ded2:	2300      	movne	r3, #0
 800ded4:	eba6 0807 	sub.w	r8, r6, r7
 800ded8:	608b      	str	r3, [r1, #8]
 800deda:	f1b8 0f00 	cmp.w	r8, #0
 800dede:	dd9c      	ble.n	800de1a <__sflush_r+0x1a>
 800dee0:	6a21      	ldr	r1, [r4, #32]
 800dee2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dee4:	4643      	mov	r3, r8
 800dee6:	463a      	mov	r2, r7
 800dee8:	4628      	mov	r0, r5
 800deea:	47b0      	blx	r6
 800deec:	2800      	cmp	r0, #0
 800deee:	dc06      	bgt.n	800defe <__sflush_r+0xfe>
 800def0:	89a3      	ldrh	r3, [r4, #12]
 800def2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800def6:	81a3      	strh	r3, [r4, #12]
 800def8:	f04f 30ff 	mov.w	r0, #4294967295
 800defc:	e78e      	b.n	800de1c <__sflush_r+0x1c>
 800defe:	4407      	add	r7, r0
 800df00:	eba8 0800 	sub.w	r8, r8, r0
 800df04:	e7e9      	b.n	800deda <__sflush_r+0xda>
 800df06:	bf00      	nop
 800df08:	20400001 	.word	0x20400001

0800df0c <_fflush_r>:
 800df0c:	b538      	push	{r3, r4, r5, lr}
 800df0e:	690b      	ldr	r3, [r1, #16]
 800df10:	4605      	mov	r5, r0
 800df12:	460c      	mov	r4, r1
 800df14:	b913      	cbnz	r3, 800df1c <_fflush_r+0x10>
 800df16:	2500      	movs	r5, #0
 800df18:	4628      	mov	r0, r5
 800df1a:	bd38      	pop	{r3, r4, r5, pc}
 800df1c:	b118      	cbz	r0, 800df26 <_fflush_r+0x1a>
 800df1e:	6983      	ldr	r3, [r0, #24]
 800df20:	b90b      	cbnz	r3, 800df26 <_fflush_r+0x1a>
 800df22:	f000 f887 	bl	800e034 <__sinit>
 800df26:	4b14      	ldr	r3, [pc, #80]	; (800df78 <_fflush_r+0x6c>)
 800df28:	429c      	cmp	r4, r3
 800df2a:	d11b      	bne.n	800df64 <_fflush_r+0x58>
 800df2c:	686c      	ldr	r4, [r5, #4]
 800df2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d0ef      	beq.n	800df16 <_fflush_r+0xa>
 800df36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800df38:	07d0      	lsls	r0, r2, #31
 800df3a:	d404      	bmi.n	800df46 <_fflush_r+0x3a>
 800df3c:	0599      	lsls	r1, r3, #22
 800df3e:	d402      	bmi.n	800df46 <_fflush_r+0x3a>
 800df40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df42:	f000 f915 	bl	800e170 <__retarget_lock_acquire_recursive>
 800df46:	4628      	mov	r0, r5
 800df48:	4621      	mov	r1, r4
 800df4a:	f7ff ff59 	bl	800de00 <__sflush_r>
 800df4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800df50:	07da      	lsls	r2, r3, #31
 800df52:	4605      	mov	r5, r0
 800df54:	d4e0      	bmi.n	800df18 <_fflush_r+0xc>
 800df56:	89a3      	ldrh	r3, [r4, #12]
 800df58:	059b      	lsls	r3, r3, #22
 800df5a:	d4dd      	bmi.n	800df18 <_fflush_r+0xc>
 800df5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df5e:	f000 f908 	bl	800e172 <__retarget_lock_release_recursive>
 800df62:	e7d9      	b.n	800df18 <_fflush_r+0xc>
 800df64:	4b05      	ldr	r3, [pc, #20]	; (800df7c <_fflush_r+0x70>)
 800df66:	429c      	cmp	r4, r3
 800df68:	d101      	bne.n	800df6e <_fflush_r+0x62>
 800df6a:	68ac      	ldr	r4, [r5, #8]
 800df6c:	e7df      	b.n	800df2e <_fflush_r+0x22>
 800df6e:	4b04      	ldr	r3, [pc, #16]	; (800df80 <_fflush_r+0x74>)
 800df70:	429c      	cmp	r4, r3
 800df72:	bf08      	it	eq
 800df74:	68ec      	ldreq	r4, [r5, #12]
 800df76:	e7da      	b.n	800df2e <_fflush_r+0x22>
 800df78:	0800f364 	.word	0x0800f364
 800df7c:	0800f384 	.word	0x0800f384
 800df80:	0800f344 	.word	0x0800f344

0800df84 <std>:
 800df84:	2300      	movs	r3, #0
 800df86:	b510      	push	{r4, lr}
 800df88:	4604      	mov	r4, r0
 800df8a:	e9c0 3300 	strd	r3, r3, [r0]
 800df8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800df92:	6083      	str	r3, [r0, #8]
 800df94:	8181      	strh	r1, [r0, #12]
 800df96:	6643      	str	r3, [r0, #100]	; 0x64
 800df98:	81c2      	strh	r2, [r0, #14]
 800df9a:	6183      	str	r3, [r0, #24]
 800df9c:	4619      	mov	r1, r3
 800df9e:	2208      	movs	r2, #8
 800dfa0:	305c      	adds	r0, #92	; 0x5c
 800dfa2:	f7fb fdcd 	bl	8009b40 <memset>
 800dfa6:	4b05      	ldr	r3, [pc, #20]	; (800dfbc <std+0x38>)
 800dfa8:	6263      	str	r3, [r4, #36]	; 0x24
 800dfaa:	4b05      	ldr	r3, [pc, #20]	; (800dfc0 <std+0x3c>)
 800dfac:	62a3      	str	r3, [r4, #40]	; 0x28
 800dfae:	4b05      	ldr	r3, [pc, #20]	; (800dfc4 <std+0x40>)
 800dfb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dfb2:	4b05      	ldr	r3, [pc, #20]	; (800dfc8 <std+0x44>)
 800dfb4:	6224      	str	r4, [r4, #32]
 800dfb6:	6323      	str	r3, [r4, #48]	; 0x30
 800dfb8:	bd10      	pop	{r4, pc}
 800dfba:	bf00      	nop
 800dfbc:	0800e2d9 	.word	0x0800e2d9
 800dfc0:	0800e2fb 	.word	0x0800e2fb
 800dfc4:	0800e333 	.word	0x0800e333
 800dfc8:	0800e357 	.word	0x0800e357

0800dfcc <_cleanup_r>:
 800dfcc:	4901      	ldr	r1, [pc, #4]	; (800dfd4 <_cleanup_r+0x8>)
 800dfce:	f000 b8af 	b.w	800e130 <_fwalk_reent>
 800dfd2:	bf00      	nop
 800dfd4:	0800df0d 	.word	0x0800df0d

0800dfd8 <__sfmoreglue>:
 800dfd8:	b570      	push	{r4, r5, r6, lr}
 800dfda:	2268      	movs	r2, #104	; 0x68
 800dfdc:	1e4d      	subs	r5, r1, #1
 800dfde:	4355      	muls	r5, r2
 800dfe0:	460e      	mov	r6, r1
 800dfe2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dfe6:	f7ff fa59 	bl	800d49c <_malloc_r>
 800dfea:	4604      	mov	r4, r0
 800dfec:	b140      	cbz	r0, 800e000 <__sfmoreglue+0x28>
 800dfee:	2100      	movs	r1, #0
 800dff0:	e9c0 1600 	strd	r1, r6, [r0]
 800dff4:	300c      	adds	r0, #12
 800dff6:	60a0      	str	r0, [r4, #8]
 800dff8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dffc:	f7fb fda0 	bl	8009b40 <memset>
 800e000:	4620      	mov	r0, r4
 800e002:	bd70      	pop	{r4, r5, r6, pc}

0800e004 <__sfp_lock_acquire>:
 800e004:	4801      	ldr	r0, [pc, #4]	; (800e00c <__sfp_lock_acquire+0x8>)
 800e006:	f000 b8b3 	b.w	800e170 <__retarget_lock_acquire_recursive>
 800e00a:	bf00      	nop
 800e00c:	20000bed 	.word	0x20000bed

0800e010 <__sfp_lock_release>:
 800e010:	4801      	ldr	r0, [pc, #4]	; (800e018 <__sfp_lock_release+0x8>)
 800e012:	f000 b8ae 	b.w	800e172 <__retarget_lock_release_recursive>
 800e016:	bf00      	nop
 800e018:	20000bed 	.word	0x20000bed

0800e01c <__sinit_lock_acquire>:
 800e01c:	4801      	ldr	r0, [pc, #4]	; (800e024 <__sinit_lock_acquire+0x8>)
 800e01e:	f000 b8a7 	b.w	800e170 <__retarget_lock_acquire_recursive>
 800e022:	bf00      	nop
 800e024:	20000bee 	.word	0x20000bee

0800e028 <__sinit_lock_release>:
 800e028:	4801      	ldr	r0, [pc, #4]	; (800e030 <__sinit_lock_release+0x8>)
 800e02a:	f000 b8a2 	b.w	800e172 <__retarget_lock_release_recursive>
 800e02e:	bf00      	nop
 800e030:	20000bee 	.word	0x20000bee

0800e034 <__sinit>:
 800e034:	b510      	push	{r4, lr}
 800e036:	4604      	mov	r4, r0
 800e038:	f7ff fff0 	bl	800e01c <__sinit_lock_acquire>
 800e03c:	69a3      	ldr	r3, [r4, #24]
 800e03e:	b11b      	cbz	r3, 800e048 <__sinit+0x14>
 800e040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e044:	f7ff bff0 	b.w	800e028 <__sinit_lock_release>
 800e048:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e04c:	6523      	str	r3, [r4, #80]	; 0x50
 800e04e:	4b13      	ldr	r3, [pc, #76]	; (800e09c <__sinit+0x68>)
 800e050:	4a13      	ldr	r2, [pc, #76]	; (800e0a0 <__sinit+0x6c>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	62a2      	str	r2, [r4, #40]	; 0x28
 800e056:	42a3      	cmp	r3, r4
 800e058:	bf04      	itt	eq
 800e05a:	2301      	moveq	r3, #1
 800e05c:	61a3      	streq	r3, [r4, #24]
 800e05e:	4620      	mov	r0, r4
 800e060:	f000 f820 	bl	800e0a4 <__sfp>
 800e064:	6060      	str	r0, [r4, #4]
 800e066:	4620      	mov	r0, r4
 800e068:	f000 f81c 	bl	800e0a4 <__sfp>
 800e06c:	60a0      	str	r0, [r4, #8]
 800e06e:	4620      	mov	r0, r4
 800e070:	f000 f818 	bl	800e0a4 <__sfp>
 800e074:	2200      	movs	r2, #0
 800e076:	60e0      	str	r0, [r4, #12]
 800e078:	2104      	movs	r1, #4
 800e07a:	6860      	ldr	r0, [r4, #4]
 800e07c:	f7ff ff82 	bl	800df84 <std>
 800e080:	68a0      	ldr	r0, [r4, #8]
 800e082:	2201      	movs	r2, #1
 800e084:	2109      	movs	r1, #9
 800e086:	f7ff ff7d 	bl	800df84 <std>
 800e08a:	68e0      	ldr	r0, [r4, #12]
 800e08c:	2202      	movs	r2, #2
 800e08e:	2112      	movs	r1, #18
 800e090:	f7ff ff78 	bl	800df84 <std>
 800e094:	2301      	movs	r3, #1
 800e096:	61a3      	str	r3, [r4, #24]
 800e098:	e7d2      	b.n	800e040 <__sinit+0xc>
 800e09a:	bf00      	nop
 800e09c:	0800ef00 	.word	0x0800ef00
 800e0a0:	0800dfcd 	.word	0x0800dfcd

0800e0a4 <__sfp>:
 800e0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0a6:	4607      	mov	r7, r0
 800e0a8:	f7ff ffac 	bl	800e004 <__sfp_lock_acquire>
 800e0ac:	4b1e      	ldr	r3, [pc, #120]	; (800e128 <__sfp+0x84>)
 800e0ae:	681e      	ldr	r6, [r3, #0]
 800e0b0:	69b3      	ldr	r3, [r6, #24]
 800e0b2:	b913      	cbnz	r3, 800e0ba <__sfp+0x16>
 800e0b4:	4630      	mov	r0, r6
 800e0b6:	f7ff ffbd 	bl	800e034 <__sinit>
 800e0ba:	3648      	adds	r6, #72	; 0x48
 800e0bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e0c0:	3b01      	subs	r3, #1
 800e0c2:	d503      	bpl.n	800e0cc <__sfp+0x28>
 800e0c4:	6833      	ldr	r3, [r6, #0]
 800e0c6:	b30b      	cbz	r3, 800e10c <__sfp+0x68>
 800e0c8:	6836      	ldr	r6, [r6, #0]
 800e0ca:	e7f7      	b.n	800e0bc <__sfp+0x18>
 800e0cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e0d0:	b9d5      	cbnz	r5, 800e108 <__sfp+0x64>
 800e0d2:	4b16      	ldr	r3, [pc, #88]	; (800e12c <__sfp+0x88>)
 800e0d4:	60e3      	str	r3, [r4, #12]
 800e0d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e0da:	6665      	str	r5, [r4, #100]	; 0x64
 800e0dc:	f000 f847 	bl	800e16e <__retarget_lock_init_recursive>
 800e0e0:	f7ff ff96 	bl	800e010 <__sfp_lock_release>
 800e0e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e0e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e0ec:	6025      	str	r5, [r4, #0]
 800e0ee:	61a5      	str	r5, [r4, #24]
 800e0f0:	2208      	movs	r2, #8
 800e0f2:	4629      	mov	r1, r5
 800e0f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e0f8:	f7fb fd22 	bl	8009b40 <memset>
 800e0fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e100:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e104:	4620      	mov	r0, r4
 800e106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e108:	3468      	adds	r4, #104	; 0x68
 800e10a:	e7d9      	b.n	800e0c0 <__sfp+0x1c>
 800e10c:	2104      	movs	r1, #4
 800e10e:	4638      	mov	r0, r7
 800e110:	f7ff ff62 	bl	800dfd8 <__sfmoreglue>
 800e114:	4604      	mov	r4, r0
 800e116:	6030      	str	r0, [r6, #0]
 800e118:	2800      	cmp	r0, #0
 800e11a:	d1d5      	bne.n	800e0c8 <__sfp+0x24>
 800e11c:	f7ff ff78 	bl	800e010 <__sfp_lock_release>
 800e120:	230c      	movs	r3, #12
 800e122:	603b      	str	r3, [r7, #0]
 800e124:	e7ee      	b.n	800e104 <__sfp+0x60>
 800e126:	bf00      	nop
 800e128:	0800ef00 	.word	0x0800ef00
 800e12c:	ffff0001 	.word	0xffff0001

0800e130 <_fwalk_reent>:
 800e130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e134:	4606      	mov	r6, r0
 800e136:	4688      	mov	r8, r1
 800e138:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e13c:	2700      	movs	r7, #0
 800e13e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e142:	f1b9 0901 	subs.w	r9, r9, #1
 800e146:	d505      	bpl.n	800e154 <_fwalk_reent+0x24>
 800e148:	6824      	ldr	r4, [r4, #0]
 800e14a:	2c00      	cmp	r4, #0
 800e14c:	d1f7      	bne.n	800e13e <_fwalk_reent+0xe>
 800e14e:	4638      	mov	r0, r7
 800e150:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e154:	89ab      	ldrh	r3, [r5, #12]
 800e156:	2b01      	cmp	r3, #1
 800e158:	d907      	bls.n	800e16a <_fwalk_reent+0x3a>
 800e15a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e15e:	3301      	adds	r3, #1
 800e160:	d003      	beq.n	800e16a <_fwalk_reent+0x3a>
 800e162:	4629      	mov	r1, r5
 800e164:	4630      	mov	r0, r6
 800e166:	47c0      	blx	r8
 800e168:	4307      	orrs	r7, r0
 800e16a:	3568      	adds	r5, #104	; 0x68
 800e16c:	e7e9      	b.n	800e142 <_fwalk_reent+0x12>

0800e16e <__retarget_lock_init_recursive>:
 800e16e:	4770      	bx	lr

0800e170 <__retarget_lock_acquire_recursive>:
 800e170:	4770      	bx	lr

0800e172 <__retarget_lock_release_recursive>:
 800e172:	4770      	bx	lr

0800e174 <__swhatbuf_r>:
 800e174:	b570      	push	{r4, r5, r6, lr}
 800e176:	460e      	mov	r6, r1
 800e178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e17c:	2900      	cmp	r1, #0
 800e17e:	b096      	sub	sp, #88	; 0x58
 800e180:	4614      	mov	r4, r2
 800e182:	461d      	mov	r5, r3
 800e184:	da08      	bge.n	800e198 <__swhatbuf_r+0x24>
 800e186:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e18a:	2200      	movs	r2, #0
 800e18c:	602a      	str	r2, [r5, #0]
 800e18e:	061a      	lsls	r2, r3, #24
 800e190:	d410      	bmi.n	800e1b4 <__swhatbuf_r+0x40>
 800e192:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e196:	e00e      	b.n	800e1b6 <__swhatbuf_r+0x42>
 800e198:	466a      	mov	r2, sp
 800e19a:	f000 f903 	bl	800e3a4 <_fstat_r>
 800e19e:	2800      	cmp	r0, #0
 800e1a0:	dbf1      	blt.n	800e186 <__swhatbuf_r+0x12>
 800e1a2:	9a01      	ldr	r2, [sp, #4]
 800e1a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e1a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e1ac:	425a      	negs	r2, r3
 800e1ae:	415a      	adcs	r2, r3
 800e1b0:	602a      	str	r2, [r5, #0]
 800e1b2:	e7ee      	b.n	800e192 <__swhatbuf_r+0x1e>
 800e1b4:	2340      	movs	r3, #64	; 0x40
 800e1b6:	2000      	movs	r0, #0
 800e1b8:	6023      	str	r3, [r4, #0]
 800e1ba:	b016      	add	sp, #88	; 0x58
 800e1bc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e1c0 <__smakebuf_r>:
 800e1c0:	898b      	ldrh	r3, [r1, #12]
 800e1c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e1c4:	079d      	lsls	r5, r3, #30
 800e1c6:	4606      	mov	r6, r0
 800e1c8:	460c      	mov	r4, r1
 800e1ca:	d507      	bpl.n	800e1dc <__smakebuf_r+0x1c>
 800e1cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e1d0:	6023      	str	r3, [r4, #0]
 800e1d2:	6123      	str	r3, [r4, #16]
 800e1d4:	2301      	movs	r3, #1
 800e1d6:	6163      	str	r3, [r4, #20]
 800e1d8:	b002      	add	sp, #8
 800e1da:	bd70      	pop	{r4, r5, r6, pc}
 800e1dc:	ab01      	add	r3, sp, #4
 800e1de:	466a      	mov	r2, sp
 800e1e0:	f7ff ffc8 	bl	800e174 <__swhatbuf_r>
 800e1e4:	9900      	ldr	r1, [sp, #0]
 800e1e6:	4605      	mov	r5, r0
 800e1e8:	4630      	mov	r0, r6
 800e1ea:	f7ff f957 	bl	800d49c <_malloc_r>
 800e1ee:	b948      	cbnz	r0, 800e204 <__smakebuf_r+0x44>
 800e1f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1f4:	059a      	lsls	r2, r3, #22
 800e1f6:	d4ef      	bmi.n	800e1d8 <__smakebuf_r+0x18>
 800e1f8:	f023 0303 	bic.w	r3, r3, #3
 800e1fc:	f043 0302 	orr.w	r3, r3, #2
 800e200:	81a3      	strh	r3, [r4, #12]
 800e202:	e7e3      	b.n	800e1cc <__smakebuf_r+0xc>
 800e204:	4b0d      	ldr	r3, [pc, #52]	; (800e23c <__smakebuf_r+0x7c>)
 800e206:	62b3      	str	r3, [r6, #40]	; 0x28
 800e208:	89a3      	ldrh	r3, [r4, #12]
 800e20a:	6020      	str	r0, [r4, #0]
 800e20c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e210:	81a3      	strh	r3, [r4, #12]
 800e212:	9b00      	ldr	r3, [sp, #0]
 800e214:	6163      	str	r3, [r4, #20]
 800e216:	9b01      	ldr	r3, [sp, #4]
 800e218:	6120      	str	r0, [r4, #16]
 800e21a:	b15b      	cbz	r3, 800e234 <__smakebuf_r+0x74>
 800e21c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e220:	4630      	mov	r0, r6
 800e222:	f000 f8d1 	bl	800e3c8 <_isatty_r>
 800e226:	b128      	cbz	r0, 800e234 <__smakebuf_r+0x74>
 800e228:	89a3      	ldrh	r3, [r4, #12]
 800e22a:	f023 0303 	bic.w	r3, r3, #3
 800e22e:	f043 0301 	orr.w	r3, r3, #1
 800e232:	81a3      	strh	r3, [r4, #12]
 800e234:	89a0      	ldrh	r0, [r4, #12]
 800e236:	4305      	orrs	r5, r0
 800e238:	81a5      	strh	r5, [r4, #12]
 800e23a:	e7cd      	b.n	800e1d8 <__smakebuf_r+0x18>
 800e23c:	0800dfcd 	.word	0x0800dfcd

0800e240 <_malloc_usable_size_r>:
 800e240:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e244:	1f18      	subs	r0, r3, #4
 800e246:	2b00      	cmp	r3, #0
 800e248:	bfbc      	itt	lt
 800e24a:	580b      	ldrlt	r3, [r1, r0]
 800e24c:	18c0      	addlt	r0, r0, r3
 800e24e:	4770      	bx	lr

0800e250 <_raise_r>:
 800e250:	291f      	cmp	r1, #31
 800e252:	b538      	push	{r3, r4, r5, lr}
 800e254:	4604      	mov	r4, r0
 800e256:	460d      	mov	r5, r1
 800e258:	d904      	bls.n	800e264 <_raise_r+0x14>
 800e25a:	2316      	movs	r3, #22
 800e25c:	6003      	str	r3, [r0, #0]
 800e25e:	f04f 30ff 	mov.w	r0, #4294967295
 800e262:	bd38      	pop	{r3, r4, r5, pc}
 800e264:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e266:	b112      	cbz	r2, 800e26e <_raise_r+0x1e>
 800e268:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e26c:	b94b      	cbnz	r3, 800e282 <_raise_r+0x32>
 800e26e:	4620      	mov	r0, r4
 800e270:	f000 f830 	bl	800e2d4 <_getpid_r>
 800e274:	462a      	mov	r2, r5
 800e276:	4601      	mov	r1, r0
 800e278:	4620      	mov	r0, r4
 800e27a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e27e:	f000 b817 	b.w	800e2b0 <_kill_r>
 800e282:	2b01      	cmp	r3, #1
 800e284:	d00a      	beq.n	800e29c <_raise_r+0x4c>
 800e286:	1c59      	adds	r1, r3, #1
 800e288:	d103      	bne.n	800e292 <_raise_r+0x42>
 800e28a:	2316      	movs	r3, #22
 800e28c:	6003      	str	r3, [r0, #0]
 800e28e:	2001      	movs	r0, #1
 800e290:	e7e7      	b.n	800e262 <_raise_r+0x12>
 800e292:	2400      	movs	r4, #0
 800e294:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e298:	4628      	mov	r0, r5
 800e29a:	4798      	blx	r3
 800e29c:	2000      	movs	r0, #0
 800e29e:	e7e0      	b.n	800e262 <_raise_r+0x12>

0800e2a0 <raise>:
 800e2a0:	4b02      	ldr	r3, [pc, #8]	; (800e2ac <raise+0xc>)
 800e2a2:	4601      	mov	r1, r0
 800e2a4:	6818      	ldr	r0, [r3, #0]
 800e2a6:	f7ff bfd3 	b.w	800e250 <_raise_r>
 800e2aa:	bf00      	nop
 800e2ac:	2000028c 	.word	0x2000028c

0800e2b0 <_kill_r>:
 800e2b0:	b538      	push	{r3, r4, r5, lr}
 800e2b2:	4d07      	ldr	r5, [pc, #28]	; (800e2d0 <_kill_r+0x20>)
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	4604      	mov	r4, r0
 800e2b8:	4608      	mov	r0, r1
 800e2ba:	4611      	mov	r1, r2
 800e2bc:	602b      	str	r3, [r5, #0]
 800e2be:	f7f5 f8fb 	bl	80034b8 <_kill>
 800e2c2:	1c43      	adds	r3, r0, #1
 800e2c4:	d102      	bne.n	800e2cc <_kill_r+0x1c>
 800e2c6:	682b      	ldr	r3, [r5, #0]
 800e2c8:	b103      	cbz	r3, 800e2cc <_kill_r+0x1c>
 800e2ca:	6023      	str	r3, [r4, #0]
 800e2cc:	bd38      	pop	{r3, r4, r5, pc}
 800e2ce:	bf00      	nop
 800e2d0:	20000be8 	.word	0x20000be8

0800e2d4 <_getpid_r>:
 800e2d4:	f7f5 b8e8 	b.w	80034a8 <_getpid>

0800e2d8 <__sread>:
 800e2d8:	b510      	push	{r4, lr}
 800e2da:	460c      	mov	r4, r1
 800e2dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2e0:	f000 f894 	bl	800e40c <_read_r>
 800e2e4:	2800      	cmp	r0, #0
 800e2e6:	bfab      	itete	ge
 800e2e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e2ea:	89a3      	ldrhlt	r3, [r4, #12]
 800e2ec:	181b      	addge	r3, r3, r0
 800e2ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e2f2:	bfac      	ite	ge
 800e2f4:	6563      	strge	r3, [r4, #84]	; 0x54
 800e2f6:	81a3      	strhlt	r3, [r4, #12]
 800e2f8:	bd10      	pop	{r4, pc}

0800e2fa <__swrite>:
 800e2fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2fe:	461f      	mov	r7, r3
 800e300:	898b      	ldrh	r3, [r1, #12]
 800e302:	05db      	lsls	r3, r3, #23
 800e304:	4605      	mov	r5, r0
 800e306:	460c      	mov	r4, r1
 800e308:	4616      	mov	r6, r2
 800e30a:	d505      	bpl.n	800e318 <__swrite+0x1e>
 800e30c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e310:	2302      	movs	r3, #2
 800e312:	2200      	movs	r2, #0
 800e314:	f000 f868 	bl	800e3e8 <_lseek_r>
 800e318:	89a3      	ldrh	r3, [r4, #12]
 800e31a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e31e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e322:	81a3      	strh	r3, [r4, #12]
 800e324:	4632      	mov	r2, r6
 800e326:	463b      	mov	r3, r7
 800e328:	4628      	mov	r0, r5
 800e32a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e32e:	f000 b817 	b.w	800e360 <_write_r>

0800e332 <__sseek>:
 800e332:	b510      	push	{r4, lr}
 800e334:	460c      	mov	r4, r1
 800e336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e33a:	f000 f855 	bl	800e3e8 <_lseek_r>
 800e33e:	1c43      	adds	r3, r0, #1
 800e340:	89a3      	ldrh	r3, [r4, #12]
 800e342:	bf15      	itete	ne
 800e344:	6560      	strne	r0, [r4, #84]	; 0x54
 800e346:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e34a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e34e:	81a3      	strheq	r3, [r4, #12]
 800e350:	bf18      	it	ne
 800e352:	81a3      	strhne	r3, [r4, #12]
 800e354:	bd10      	pop	{r4, pc}

0800e356 <__sclose>:
 800e356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e35a:	f000 b813 	b.w	800e384 <_close_r>
	...

0800e360 <_write_r>:
 800e360:	b538      	push	{r3, r4, r5, lr}
 800e362:	4d07      	ldr	r5, [pc, #28]	; (800e380 <_write_r+0x20>)
 800e364:	4604      	mov	r4, r0
 800e366:	4608      	mov	r0, r1
 800e368:	4611      	mov	r1, r2
 800e36a:	2200      	movs	r2, #0
 800e36c:	602a      	str	r2, [r5, #0]
 800e36e:	461a      	mov	r2, r3
 800e370:	f7f5 f8d9 	bl	8003526 <_write>
 800e374:	1c43      	adds	r3, r0, #1
 800e376:	d102      	bne.n	800e37e <_write_r+0x1e>
 800e378:	682b      	ldr	r3, [r5, #0]
 800e37a:	b103      	cbz	r3, 800e37e <_write_r+0x1e>
 800e37c:	6023      	str	r3, [r4, #0]
 800e37e:	bd38      	pop	{r3, r4, r5, pc}
 800e380:	20000be8 	.word	0x20000be8

0800e384 <_close_r>:
 800e384:	b538      	push	{r3, r4, r5, lr}
 800e386:	4d06      	ldr	r5, [pc, #24]	; (800e3a0 <_close_r+0x1c>)
 800e388:	2300      	movs	r3, #0
 800e38a:	4604      	mov	r4, r0
 800e38c:	4608      	mov	r0, r1
 800e38e:	602b      	str	r3, [r5, #0]
 800e390:	f7f5 f8e5 	bl	800355e <_close>
 800e394:	1c43      	adds	r3, r0, #1
 800e396:	d102      	bne.n	800e39e <_close_r+0x1a>
 800e398:	682b      	ldr	r3, [r5, #0]
 800e39a:	b103      	cbz	r3, 800e39e <_close_r+0x1a>
 800e39c:	6023      	str	r3, [r4, #0]
 800e39e:	bd38      	pop	{r3, r4, r5, pc}
 800e3a0:	20000be8 	.word	0x20000be8

0800e3a4 <_fstat_r>:
 800e3a4:	b538      	push	{r3, r4, r5, lr}
 800e3a6:	4d07      	ldr	r5, [pc, #28]	; (800e3c4 <_fstat_r+0x20>)
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	4604      	mov	r4, r0
 800e3ac:	4608      	mov	r0, r1
 800e3ae:	4611      	mov	r1, r2
 800e3b0:	602b      	str	r3, [r5, #0]
 800e3b2:	f7f5 f8e0 	bl	8003576 <_fstat>
 800e3b6:	1c43      	adds	r3, r0, #1
 800e3b8:	d102      	bne.n	800e3c0 <_fstat_r+0x1c>
 800e3ba:	682b      	ldr	r3, [r5, #0]
 800e3bc:	b103      	cbz	r3, 800e3c0 <_fstat_r+0x1c>
 800e3be:	6023      	str	r3, [r4, #0]
 800e3c0:	bd38      	pop	{r3, r4, r5, pc}
 800e3c2:	bf00      	nop
 800e3c4:	20000be8 	.word	0x20000be8

0800e3c8 <_isatty_r>:
 800e3c8:	b538      	push	{r3, r4, r5, lr}
 800e3ca:	4d06      	ldr	r5, [pc, #24]	; (800e3e4 <_isatty_r+0x1c>)
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	4604      	mov	r4, r0
 800e3d0:	4608      	mov	r0, r1
 800e3d2:	602b      	str	r3, [r5, #0]
 800e3d4:	f7f5 f8df 	bl	8003596 <_isatty>
 800e3d8:	1c43      	adds	r3, r0, #1
 800e3da:	d102      	bne.n	800e3e2 <_isatty_r+0x1a>
 800e3dc:	682b      	ldr	r3, [r5, #0]
 800e3de:	b103      	cbz	r3, 800e3e2 <_isatty_r+0x1a>
 800e3e0:	6023      	str	r3, [r4, #0]
 800e3e2:	bd38      	pop	{r3, r4, r5, pc}
 800e3e4:	20000be8 	.word	0x20000be8

0800e3e8 <_lseek_r>:
 800e3e8:	b538      	push	{r3, r4, r5, lr}
 800e3ea:	4d07      	ldr	r5, [pc, #28]	; (800e408 <_lseek_r+0x20>)
 800e3ec:	4604      	mov	r4, r0
 800e3ee:	4608      	mov	r0, r1
 800e3f0:	4611      	mov	r1, r2
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	602a      	str	r2, [r5, #0]
 800e3f6:	461a      	mov	r2, r3
 800e3f8:	f7f5 f8d8 	bl	80035ac <_lseek>
 800e3fc:	1c43      	adds	r3, r0, #1
 800e3fe:	d102      	bne.n	800e406 <_lseek_r+0x1e>
 800e400:	682b      	ldr	r3, [r5, #0]
 800e402:	b103      	cbz	r3, 800e406 <_lseek_r+0x1e>
 800e404:	6023      	str	r3, [r4, #0]
 800e406:	bd38      	pop	{r3, r4, r5, pc}
 800e408:	20000be8 	.word	0x20000be8

0800e40c <_read_r>:
 800e40c:	b538      	push	{r3, r4, r5, lr}
 800e40e:	4d07      	ldr	r5, [pc, #28]	; (800e42c <_read_r+0x20>)
 800e410:	4604      	mov	r4, r0
 800e412:	4608      	mov	r0, r1
 800e414:	4611      	mov	r1, r2
 800e416:	2200      	movs	r2, #0
 800e418:	602a      	str	r2, [r5, #0]
 800e41a:	461a      	mov	r2, r3
 800e41c:	f7f5 f866 	bl	80034ec <_read>
 800e420:	1c43      	adds	r3, r0, #1
 800e422:	d102      	bne.n	800e42a <_read_r+0x1e>
 800e424:	682b      	ldr	r3, [r5, #0]
 800e426:	b103      	cbz	r3, 800e42a <_read_r+0x1e>
 800e428:	6023      	str	r3, [r4, #0]
 800e42a:	bd38      	pop	{r3, r4, r5, pc}
 800e42c:	20000be8 	.word	0x20000be8

0800e430 <atan2>:
 800e430:	f000 b822 	b.w	800e478 <__ieee754_atan2>

0800e434 <atan2f>:
 800e434:	f000 b8ea 	b.w	800e60c <__ieee754_atan2f>

0800e438 <sqrtf>:
 800e438:	b508      	push	{r3, lr}
 800e43a:	ed2d 8b02 	vpush	{d8}
 800e43e:	eeb0 8a40 	vmov.f32	s16, s0
 800e442:	f000 f983 	bl	800e74c <__ieee754_sqrtf>
 800e446:	eeb4 8a48 	vcmp.f32	s16, s16
 800e44a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e44e:	d60c      	bvs.n	800e46a <sqrtf+0x32>
 800e450:	eddf 8a07 	vldr	s17, [pc, #28]	; 800e470 <sqrtf+0x38>
 800e454:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e45c:	d505      	bpl.n	800e46a <sqrtf+0x32>
 800e45e:	f7fb fb45 	bl	8009aec <__errno>
 800e462:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800e466:	2321      	movs	r3, #33	; 0x21
 800e468:	6003      	str	r3, [r0, #0]
 800e46a:	ecbd 8b02 	vpop	{d8}
 800e46e:	bd08      	pop	{r3, pc}
	...

0800e478 <__ieee754_atan2>:
 800e478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e47c:	ec57 6b11 	vmov	r6, r7, d1
 800e480:	4273      	negs	r3, r6
 800e482:	f8df e184 	ldr.w	lr, [pc, #388]	; 800e608 <__ieee754_atan2+0x190>
 800e486:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800e48a:	4333      	orrs	r3, r6
 800e48c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800e490:	4573      	cmp	r3, lr
 800e492:	ec51 0b10 	vmov	r0, r1, d0
 800e496:	ee11 8a10 	vmov	r8, s2
 800e49a:	d80a      	bhi.n	800e4b2 <__ieee754_atan2+0x3a>
 800e49c:	4244      	negs	r4, r0
 800e49e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e4a2:	4304      	orrs	r4, r0
 800e4a4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800e4a8:	4574      	cmp	r4, lr
 800e4aa:	ee10 9a10 	vmov	r9, s0
 800e4ae:	468c      	mov	ip, r1
 800e4b0:	d907      	bls.n	800e4c2 <__ieee754_atan2+0x4a>
 800e4b2:	4632      	mov	r2, r6
 800e4b4:	463b      	mov	r3, r7
 800e4b6:	f7f1 fee9 	bl	800028c <__adddf3>
 800e4ba:	ec41 0b10 	vmov	d0, r0, r1
 800e4be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4c2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800e4c6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e4ca:	4334      	orrs	r4, r6
 800e4cc:	d103      	bne.n	800e4d6 <__ieee754_atan2+0x5e>
 800e4ce:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4d2:	f000 b941 	b.w	800e758 <atan>
 800e4d6:	17bc      	asrs	r4, r7, #30
 800e4d8:	f004 0402 	and.w	r4, r4, #2
 800e4dc:	ea53 0909 	orrs.w	r9, r3, r9
 800e4e0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800e4e4:	d107      	bne.n	800e4f6 <__ieee754_atan2+0x7e>
 800e4e6:	2c02      	cmp	r4, #2
 800e4e8:	d060      	beq.n	800e5ac <__ieee754_atan2+0x134>
 800e4ea:	2c03      	cmp	r4, #3
 800e4ec:	d1e5      	bne.n	800e4ba <__ieee754_atan2+0x42>
 800e4ee:	a142      	add	r1, pc, #264	; (adr r1, 800e5f8 <__ieee754_atan2+0x180>)
 800e4f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4f4:	e7e1      	b.n	800e4ba <__ieee754_atan2+0x42>
 800e4f6:	ea52 0808 	orrs.w	r8, r2, r8
 800e4fa:	d106      	bne.n	800e50a <__ieee754_atan2+0x92>
 800e4fc:	f1bc 0f00 	cmp.w	ip, #0
 800e500:	da5f      	bge.n	800e5c2 <__ieee754_atan2+0x14a>
 800e502:	a13f      	add	r1, pc, #252	; (adr r1, 800e600 <__ieee754_atan2+0x188>)
 800e504:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e508:	e7d7      	b.n	800e4ba <__ieee754_atan2+0x42>
 800e50a:	4572      	cmp	r2, lr
 800e50c:	d10f      	bne.n	800e52e <__ieee754_atan2+0xb6>
 800e50e:	4293      	cmp	r3, r2
 800e510:	f104 34ff 	add.w	r4, r4, #4294967295
 800e514:	d107      	bne.n	800e526 <__ieee754_atan2+0xae>
 800e516:	2c02      	cmp	r4, #2
 800e518:	d84c      	bhi.n	800e5b4 <__ieee754_atan2+0x13c>
 800e51a:	4b35      	ldr	r3, [pc, #212]	; (800e5f0 <__ieee754_atan2+0x178>)
 800e51c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e520:	e9d4 0100 	ldrd	r0, r1, [r4]
 800e524:	e7c9      	b.n	800e4ba <__ieee754_atan2+0x42>
 800e526:	2c02      	cmp	r4, #2
 800e528:	d848      	bhi.n	800e5bc <__ieee754_atan2+0x144>
 800e52a:	4b32      	ldr	r3, [pc, #200]	; (800e5f4 <__ieee754_atan2+0x17c>)
 800e52c:	e7f6      	b.n	800e51c <__ieee754_atan2+0xa4>
 800e52e:	4573      	cmp	r3, lr
 800e530:	d0e4      	beq.n	800e4fc <__ieee754_atan2+0x84>
 800e532:	1a9b      	subs	r3, r3, r2
 800e534:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800e538:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e53c:	da1e      	bge.n	800e57c <__ieee754_atan2+0x104>
 800e53e:	2f00      	cmp	r7, #0
 800e540:	da01      	bge.n	800e546 <__ieee754_atan2+0xce>
 800e542:	323c      	adds	r2, #60	; 0x3c
 800e544:	db1e      	blt.n	800e584 <__ieee754_atan2+0x10c>
 800e546:	4632      	mov	r2, r6
 800e548:	463b      	mov	r3, r7
 800e54a:	f7f2 f97f 	bl	800084c <__aeabi_ddiv>
 800e54e:	ec41 0b10 	vmov	d0, r0, r1
 800e552:	f000 faa1 	bl	800ea98 <fabs>
 800e556:	f000 f8ff 	bl	800e758 <atan>
 800e55a:	ec51 0b10 	vmov	r0, r1, d0
 800e55e:	2c01      	cmp	r4, #1
 800e560:	d013      	beq.n	800e58a <__ieee754_atan2+0x112>
 800e562:	2c02      	cmp	r4, #2
 800e564:	d015      	beq.n	800e592 <__ieee754_atan2+0x11a>
 800e566:	2c00      	cmp	r4, #0
 800e568:	d0a7      	beq.n	800e4ba <__ieee754_atan2+0x42>
 800e56a:	a319      	add	r3, pc, #100	; (adr r3, 800e5d0 <__ieee754_atan2+0x158>)
 800e56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e570:	f7f1 fe8a 	bl	8000288 <__aeabi_dsub>
 800e574:	a318      	add	r3, pc, #96	; (adr r3, 800e5d8 <__ieee754_atan2+0x160>)
 800e576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e57a:	e014      	b.n	800e5a6 <__ieee754_atan2+0x12e>
 800e57c:	a118      	add	r1, pc, #96	; (adr r1, 800e5e0 <__ieee754_atan2+0x168>)
 800e57e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e582:	e7ec      	b.n	800e55e <__ieee754_atan2+0xe6>
 800e584:	2000      	movs	r0, #0
 800e586:	2100      	movs	r1, #0
 800e588:	e7e9      	b.n	800e55e <__ieee754_atan2+0xe6>
 800e58a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e58e:	4619      	mov	r1, r3
 800e590:	e793      	b.n	800e4ba <__ieee754_atan2+0x42>
 800e592:	a30f      	add	r3, pc, #60	; (adr r3, 800e5d0 <__ieee754_atan2+0x158>)
 800e594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e598:	f7f1 fe76 	bl	8000288 <__aeabi_dsub>
 800e59c:	4602      	mov	r2, r0
 800e59e:	460b      	mov	r3, r1
 800e5a0:	a10d      	add	r1, pc, #52	; (adr r1, 800e5d8 <__ieee754_atan2+0x160>)
 800e5a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e5a6:	f7f1 fe6f 	bl	8000288 <__aeabi_dsub>
 800e5aa:	e786      	b.n	800e4ba <__ieee754_atan2+0x42>
 800e5ac:	a10a      	add	r1, pc, #40	; (adr r1, 800e5d8 <__ieee754_atan2+0x160>)
 800e5ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e5b2:	e782      	b.n	800e4ba <__ieee754_atan2+0x42>
 800e5b4:	a10c      	add	r1, pc, #48	; (adr r1, 800e5e8 <__ieee754_atan2+0x170>)
 800e5b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e5ba:	e77e      	b.n	800e4ba <__ieee754_atan2+0x42>
 800e5bc:	2000      	movs	r0, #0
 800e5be:	2100      	movs	r1, #0
 800e5c0:	e77b      	b.n	800e4ba <__ieee754_atan2+0x42>
 800e5c2:	a107      	add	r1, pc, #28	; (adr r1, 800e5e0 <__ieee754_atan2+0x168>)
 800e5c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e5c8:	e777      	b.n	800e4ba <__ieee754_atan2+0x42>
 800e5ca:	bf00      	nop
 800e5cc:	f3af 8000 	nop.w
 800e5d0:	33145c07 	.word	0x33145c07
 800e5d4:	3ca1a626 	.word	0x3ca1a626
 800e5d8:	54442d18 	.word	0x54442d18
 800e5dc:	400921fb 	.word	0x400921fb
 800e5e0:	54442d18 	.word	0x54442d18
 800e5e4:	3ff921fb 	.word	0x3ff921fb
 800e5e8:	54442d18 	.word	0x54442d18
 800e5ec:	3fe921fb 	.word	0x3fe921fb
 800e5f0:	0800f3a8 	.word	0x0800f3a8
 800e5f4:	0800f3c0 	.word	0x0800f3c0
 800e5f8:	54442d18 	.word	0x54442d18
 800e5fc:	c00921fb 	.word	0xc00921fb
 800e600:	54442d18 	.word	0x54442d18
 800e604:	bff921fb 	.word	0xbff921fb
 800e608:	7ff00000 	.word	0x7ff00000

0800e60c <__ieee754_atan2f>:
 800e60c:	ee10 2a90 	vmov	r2, s1
 800e610:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800e614:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800e618:	b510      	push	{r4, lr}
 800e61a:	eef0 7a40 	vmov.f32	s15, s0
 800e61e:	dc06      	bgt.n	800e62e <__ieee754_atan2f+0x22>
 800e620:	ee10 0a10 	vmov	r0, s0
 800e624:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800e628:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e62c:	dd04      	ble.n	800e638 <__ieee754_atan2f+0x2c>
 800e62e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800e632:	eeb0 0a67 	vmov.f32	s0, s15
 800e636:	bd10      	pop	{r4, pc}
 800e638:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800e63c:	d103      	bne.n	800e646 <__ieee754_atan2f+0x3a>
 800e63e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e642:	f000 ba33 	b.w	800eaac <atanf>
 800e646:	1794      	asrs	r4, r2, #30
 800e648:	f004 0402 	and.w	r4, r4, #2
 800e64c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800e650:	b943      	cbnz	r3, 800e664 <__ieee754_atan2f+0x58>
 800e652:	2c02      	cmp	r4, #2
 800e654:	d05e      	beq.n	800e714 <__ieee754_atan2f+0x108>
 800e656:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800e728 <__ieee754_atan2f+0x11c>
 800e65a:	2c03      	cmp	r4, #3
 800e65c:	bf08      	it	eq
 800e65e:	eef0 7a47 	vmoveq.f32	s15, s14
 800e662:	e7e6      	b.n	800e632 <__ieee754_atan2f+0x26>
 800e664:	b941      	cbnz	r1, 800e678 <__ieee754_atan2f+0x6c>
 800e666:	eddf 7a31 	vldr	s15, [pc, #196]	; 800e72c <__ieee754_atan2f+0x120>
 800e66a:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800e730 <__ieee754_atan2f+0x124>
 800e66e:	2800      	cmp	r0, #0
 800e670:	bfb8      	it	lt
 800e672:	eef0 7a40 	vmovlt.f32	s15, s0
 800e676:	e7dc      	b.n	800e632 <__ieee754_atan2f+0x26>
 800e678:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800e67c:	d110      	bne.n	800e6a0 <__ieee754_atan2f+0x94>
 800e67e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e682:	f104 34ff 	add.w	r4, r4, #4294967295
 800e686:	d107      	bne.n	800e698 <__ieee754_atan2f+0x8c>
 800e688:	2c02      	cmp	r4, #2
 800e68a:	d846      	bhi.n	800e71a <__ieee754_atan2f+0x10e>
 800e68c:	4b29      	ldr	r3, [pc, #164]	; (800e734 <__ieee754_atan2f+0x128>)
 800e68e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e692:	edd4 7a00 	vldr	s15, [r4]
 800e696:	e7cc      	b.n	800e632 <__ieee754_atan2f+0x26>
 800e698:	2c02      	cmp	r4, #2
 800e69a:	d841      	bhi.n	800e720 <__ieee754_atan2f+0x114>
 800e69c:	4b26      	ldr	r3, [pc, #152]	; (800e738 <__ieee754_atan2f+0x12c>)
 800e69e:	e7f6      	b.n	800e68e <__ieee754_atan2f+0x82>
 800e6a0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e6a4:	d0df      	beq.n	800e666 <__ieee754_atan2f+0x5a>
 800e6a6:	1a5b      	subs	r3, r3, r1
 800e6a8:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800e6ac:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800e6b0:	da1a      	bge.n	800e6e8 <__ieee754_atan2f+0xdc>
 800e6b2:	2a00      	cmp	r2, #0
 800e6b4:	da01      	bge.n	800e6ba <__ieee754_atan2f+0xae>
 800e6b6:	313c      	adds	r1, #60	; 0x3c
 800e6b8:	db19      	blt.n	800e6ee <__ieee754_atan2f+0xe2>
 800e6ba:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800e6be:	f000 fac9 	bl	800ec54 <fabsf>
 800e6c2:	f000 f9f3 	bl	800eaac <atanf>
 800e6c6:	eef0 7a40 	vmov.f32	s15, s0
 800e6ca:	2c01      	cmp	r4, #1
 800e6cc:	d012      	beq.n	800e6f4 <__ieee754_atan2f+0xe8>
 800e6ce:	2c02      	cmp	r4, #2
 800e6d0:	d017      	beq.n	800e702 <__ieee754_atan2f+0xf6>
 800e6d2:	2c00      	cmp	r4, #0
 800e6d4:	d0ad      	beq.n	800e632 <__ieee754_atan2f+0x26>
 800e6d6:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800e73c <__ieee754_atan2f+0x130>
 800e6da:	ee77 7a80 	vadd.f32	s15, s15, s0
 800e6de:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800e740 <__ieee754_atan2f+0x134>
 800e6e2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800e6e6:	e7a4      	b.n	800e632 <__ieee754_atan2f+0x26>
 800e6e8:	eddf 7a10 	vldr	s15, [pc, #64]	; 800e72c <__ieee754_atan2f+0x120>
 800e6ec:	e7ed      	b.n	800e6ca <__ieee754_atan2f+0xbe>
 800e6ee:	eddf 7a15 	vldr	s15, [pc, #84]	; 800e744 <__ieee754_atan2f+0x138>
 800e6f2:	e7ea      	b.n	800e6ca <__ieee754_atan2f+0xbe>
 800e6f4:	ee17 3a90 	vmov	r3, s15
 800e6f8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e6fc:	ee07 3a90 	vmov	s15, r3
 800e700:	e797      	b.n	800e632 <__ieee754_atan2f+0x26>
 800e702:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800e73c <__ieee754_atan2f+0x130>
 800e706:	ee77 7a80 	vadd.f32	s15, s15, s0
 800e70a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800e740 <__ieee754_atan2f+0x134>
 800e70e:	ee70 7a67 	vsub.f32	s15, s0, s15
 800e712:	e78e      	b.n	800e632 <__ieee754_atan2f+0x26>
 800e714:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800e740 <__ieee754_atan2f+0x134>
 800e718:	e78b      	b.n	800e632 <__ieee754_atan2f+0x26>
 800e71a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800e748 <__ieee754_atan2f+0x13c>
 800e71e:	e788      	b.n	800e632 <__ieee754_atan2f+0x26>
 800e720:	eddf 7a08 	vldr	s15, [pc, #32]	; 800e744 <__ieee754_atan2f+0x138>
 800e724:	e785      	b.n	800e632 <__ieee754_atan2f+0x26>
 800e726:	bf00      	nop
 800e728:	c0490fdb 	.word	0xc0490fdb
 800e72c:	3fc90fdb 	.word	0x3fc90fdb
 800e730:	bfc90fdb 	.word	0xbfc90fdb
 800e734:	0800f3d8 	.word	0x0800f3d8
 800e738:	0800f3e4 	.word	0x0800f3e4
 800e73c:	33bbbd2e 	.word	0x33bbbd2e
 800e740:	40490fdb 	.word	0x40490fdb
 800e744:	00000000 	.word	0x00000000
 800e748:	3f490fdb 	.word	0x3f490fdb

0800e74c <__ieee754_sqrtf>:
 800e74c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e750:	4770      	bx	lr
 800e752:	0000      	movs	r0, r0
 800e754:	0000      	movs	r0, r0
	...

0800e758 <atan>:
 800e758:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e75c:	ec55 4b10 	vmov	r4, r5, d0
 800e760:	4bc3      	ldr	r3, [pc, #780]	; (800ea70 <atan+0x318>)
 800e762:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e766:	429e      	cmp	r6, r3
 800e768:	46ab      	mov	fp, r5
 800e76a:	dd18      	ble.n	800e79e <atan+0x46>
 800e76c:	4bc1      	ldr	r3, [pc, #772]	; (800ea74 <atan+0x31c>)
 800e76e:	429e      	cmp	r6, r3
 800e770:	dc01      	bgt.n	800e776 <atan+0x1e>
 800e772:	d109      	bne.n	800e788 <atan+0x30>
 800e774:	b144      	cbz	r4, 800e788 <atan+0x30>
 800e776:	4622      	mov	r2, r4
 800e778:	462b      	mov	r3, r5
 800e77a:	4620      	mov	r0, r4
 800e77c:	4629      	mov	r1, r5
 800e77e:	f7f1 fd85 	bl	800028c <__adddf3>
 800e782:	4604      	mov	r4, r0
 800e784:	460d      	mov	r5, r1
 800e786:	e006      	b.n	800e796 <atan+0x3e>
 800e788:	f1bb 0f00 	cmp.w	fp, #0
 800e78c:	f300 8131 	bgt.w	800e9f2 <atan+0x29a>
 800e790:	a59b      	add	r5, pc, #620	; (adr r5, 800ea00 <atan+0x2a8>)
 800e792:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e796:	ec45 4b10 	vmov	d0, r4, r5
 800e79a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e79e:	4bb6      	ldr	r3, [pc, #728]	; (800ea78 <atan+0x320>)
 800e7a0:	429e      	cmp	r6, r3
 800e7a2:	dc14      	bgt.n	800e7ce <atan+0x76>
 800e7a4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800e7a8:	429e      	cmp	r6, r3
 800e7aa:	dc0d      	bgt.n	800e7c8 <atan+0x70>
 800e7ac:	a396      	add	r3, pc, #600	; (adr r3, 800ea08 <atan+0x2b0>)
 800e7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7b2:	ee10 0a10 	vmov	r0, s0
 800e7b6:	4629      	mov	r1, r5
 800e7b8:	f7f1 fd68 	bl	800028c <__adddf3>
 800e7bc:	4baf      	ldr	r3, [pc, #700]	; (800ea7c <atan+0x324>)
 800e7be:	2200      	movs	r2, #0
 800e7c0:	f7f2 f9aa 	bl	8000b18 <__aeabi_dcmpgt>
 800e7c4:	2800      	cmp	r0, #0
 800e7c6:	d1e6      	bne.n	800e796 <atan+0x3e>
 800e7c8:	f04f 3aff 	mov.w	sl, #4294967295
 800e7cc:	e02b      	b.n	800e826 <atan+0xce>
 800e7ce:	f000 f963 	bl	800ea98 <fabs>
 800e7d2:	4bab      	ldr	r3, [pc, #684]	; (800ea80 <atan+0x328>)
 800e7d4:	429e      	cmp	r6, r3
 800e7d6:	ec55 4b10 	vmov	r4, r5, d0
 800e7da:	f300 80bf 	bgt.w	800e95c <atan+0x204>
 800e7de:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800e7e2:	429e      	cmp	r6, r3
 800e7e4:	f300 80a0 	bgt.w	800e928 <atan+0x1d0>
 800e7e8:	ee10 2a10 	vmov	r2, s0
 800e7ec:	ee10 0a10 	vmov	r0, s0
 800e7f0:	462b      	mov	r3, r5
 800e7f2:	4629      	mov	r1, r5
 800e7f4:	f7f1 fd4a 	bl	800028c <__adddf3>
 800e7f8:	4ba0      	ldr	r3, [pc, #640]	; (800ea7c <atan+0x324>)
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	f7f1 fd44 	bl	8000288 <__aeabi_dsub>
 800e800:	2200      	movs	r2, #0
 800e802:	4606      	mov	r6, r0
 800e804:	460f      	mov	r7, r1
 800e806:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e80a:	4620      	mov	r0, r4
 800e80c:	4629      	mov	r1, r5
 800e80e:	f7f1 fd3d 	bl	800028c <__adddf3>
 800e812:	4602      	mov	r2, r0
 800e814:	460b      	mov	r3, r1
 800e816:	4630      	mov	r0, r6
 800e818:	4639      	mov	r1, r7
 800e81a:	f7f2 f817 	bl	800084c <__aeabi_ddiv>
 800e81e:	f04f 0a00 	mov.w	sl, #0
 800e822:	4604      	mov	r4, r0
 800e824:	460d      	mov	r5, r1
 800e826:	4622      	mov	r2, r4
 800e828:	462b      	mov	r3, r5
 800e82a:	4620      	mov	r0, r4
 800e82c:	4629      	mov	r1, r5
 800e82e:	f7f1 fee3 	bl	80005f8 <__aeabi_dmul>
 800e832:	4602      	mov	r2, r0
 800e834:	460b      	mov	r3, r1
 800e836:	4680      	mov	r8, r0
 800e838:	4689      	mov	r9, r1
 800e83a:	f7f1 fedd 	bl	80005f8 <__aeabi_dmul>
 800e83e:	a374      	add	r3, pc, #464	; (adr r3, 800ea10 <atan+0x2b8>)
 800e840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e844:	4606      	mov	r6, r0
 800e846:	460f      	mov	r7, r1
 800e848:	f7f1 fed6 	bl	80005f8 <__aeabi_dmul>
 800e84c:	a372      	add	r3, pc, #456	; (adr r3, 800ea18 <atan+0x2c0>)
 800e84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e852:	f7f1 fd1b 	bl	800028c <__adddf3>
 800e856:	4632      	mov	r2, r6
 800e858:	463b      	mov	r3, r7
 800e85a:	f7f1 fecd 	bl	80005f8 <__aeabi_dmul>
 800e85e:	a370      	add	r3, pc, #448	; (adr r3, 800ea20 <atan+0x2c8>)
 800e860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e864:	f7f1 fd12 	bl	800028c <__adddf3>
 800e868:	4632      	mov	r2, r6
 800e86a:	463b      	mov	r3, r7
 800e86c:	f7f1 fec4 	bl	80005f8 <__aeabi_dmul>
 800e870:	a36d      	add	r3, pc, #436	; (adr r3, 800ea28 <atan+0x2d0>)
 800e872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e876:	f7f1 fd09 	bl	800028c <__adddf3>
 800e87a:	4632      	mov	r2, r6
 800e87c:	463b      	mov	r3, r7
 800e87e:	f7f1 febb 	bl	80005f8 <__aeabi_dmul>
 800e882:	a36b      	add	r3, pc, #428	; (adr r3, 800ea30 <atan+0x2d8>)
 800e884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e888:	f7f1 fd00 	bl	800028c <__adddf3>
 800e88c:	4632      	mov	r2, r6
 800e88e:	463b      	mov	r3, r7
 800e890:	f7f1 feb2 	bl	80005f8 <__aeabi_dmul>
 800e894:	a368      	add	r3, pc, #416	; (adr r3, 800ea38 <atan+0x2e0>)
 800e896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e89a:	f7f1 fcf7 	bl	800028c <__adddf3>
 800e89e:	4642      	mov	r2, r8
 800e8a0:	464b      	mov	r3, r9
 800e8a2:	f7f1 fea9 	bl	80005f8 <__aeabi_dmul>
 800e8a6:	a366      	add	r3, pc, #408	; (adr r3, 800ea40 <atan+0x2e8>)
 800e8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ac:	4680      	mov	r8, r0
 800e8ae:	4689      	mov	r9, r1
 800e8b0:	4630      	mov	r0, r6
 800e8b2:	4639      	mov	r1, r7
 800e8b4:	f7f1 fea0 	bl	80005f8 <__aeabi_dmul>
 800e8b8:	a363      	add	r3, pc, #396	; (adr r3, 800ea48 <atan+0x2f0>)
 800e8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8be:	f7f1 fce3 	bl	8000288 <__aeabi_dsub>
 800e8c2:	4632      	mov	r2, r6
 800e8c4:	463b      	mov	r3, r7
 800e8c6:	f7f1 fe97 	bl	80005f8 <__aeabi_dmul>
 800e8ca:	a361      	add	r3, pc, #388	; (adr r3, 800ea50 <atan+0x2f8>)
 800e8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8d0:	f7f1 fcda 	bl	8000288 <__aeabi_dsub>
 800e8d4:	4632      	mov	r2, r6
 800e8d6:	463b      	mov	r3, r7
 800e8d8:	f7f1 fe8e 	bl	80005f8 <__aeabi_dmul>
 800e8dc:	a35e      	add	r3, pc, #376	; (adr r3, 800ea58 <atan+0x300>)
 800e8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8e2:	f7f1 fcd1 	bl	8000288 <__aeabi_dsub>
 800e8e6:	4632      	mov	r2, r6
 800e8e8:	463b      	mov	r3, r7
 800e8ea:	f7f1 fe85 	bl	80005f8 <__aeabi_dmul>
 800e8ee:	a35c      	add	r3, pc, #368	; (adr r3, 800ea60 <atan+0x308>)
 800e8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8f4:	f7f1 fcc8 	bl	8000288 <__aeabi_dsub>
 800e8f8:	4632      	mov	r2, r6
 800e8fa:	463b      	mov	r3, r7
 800e8fc:	f7f1 fe7c 	bl	80005f8 <__aeabi_dmul>
 800e900:	4602      	mov	r2, r0
 800e902:	460b      	mov	r3, r1
 800e904:	4640      	mov	r0, r8
 800e906:	4649      	mov	r1, r9
 800e908:	f7f1 fcc0 	bl	800028c <__adddf3>
 800e90c:	4622      	mov	r2, r4
 800e90e:	462b      	mov	r3, r5
 800e910:	f7f1 fe72 	bl	80005f8 <__aeabi_dmul>
 800e914:	f1ba 3fff 	cmp.w	sl, #4294967295
 800e918:	4602      	mov	r2, r0
 800e91a:	460b      	mov	r3, r1
 800e91c:	d14b      	bne.n	800e9b6 <atan+0x25e>
 800e91e:	4620      	mov	r0, r4
 800e920:	4629      	mov	r1, r5
 800e922:	f7f1 fcb1 	bl	8000288 <__aeabi_dsub>
 800e926:	e72c      	b.n	800e782 <atan+0x2a>
 800e928:	ee10 0a10 	vmov	r0, s0
 800e92c:	4b53      	ldr	r3, [pc, #332]	; (800ea7c <atan+0x324>)
 800e92e:	2200      	movs	r2, #0
 800e930:	4629      	mov	r1, r5
 800e932:	f7f1 fca9 	bl	8000288 <__aeabi_dsub>
 800e936:	4b51      	ldr	r3, [pc, #324]	; (800ea7c <atan+0x324>)
 800e938:	4606      	mov	r6, r0
 800e93a:	460f      	mov	r7, r1
 800e93c:	2200      	movs	r2, #0
 800e93e:	4620      	mov	r0, r4
 800e940:	4629      	mov	r1, r5
 800e942:	f7f1 fca3 	bl	800028c <__adddf3>
 800e946:	4602      	mov	r2, r0
 800e948:	460b      	mov	r3, r1
 800e94a:	4630      	mov	r0, r6
 800e94c:	4639      	mov	r1, r7
 800e94e:	f7f1 ff7d 	bl	800084c <__aeabi_ddiv>
 800e952:	f04f 0a01 	mov.w	sl, #1
 800e956:	4604      	mov	r4, r0
 800e958:	460d      	mov	r5, r1
 800e95a:	e764      	b.n	800e826 <atan+0xce>
 800e95c:	4b49      	ldr	r3, [pc, #292]	; (800ea84 <atan+0x32c>)
 800e95e:	429e      	cmp	r6, r3
 800e960:	da1d      	bge.n	800e99e <atan+0x246>
 800e962:	ee10 0a10 	vmov	r0, s0
 800e966:	4b48      	ldr	r3, [pc, #288]	; (800ea88 <atan+0x330>)
 800e968:	2200      	movs	r2, #0
 800e96a:	4629      	mov	r1, r5
 800e96c:	f7f1 fc8c 	bl	8000288 <__aeabi_dsub>
 800e970:	4b45      	ldr	r3, [pc, #276]	; (800ea88 <atan+0x330>)
 800e972:	4606      	mov	r6, r0
 800e974:	460f      	mov	r7, r1
 800e976:	2200      	movs	r2, #0
 800e978:	4620      	mov	r0, r4
 800e97a:	4629      	mov	r1, r5
 800e97c:	f7f1 fe3c 	bl	80005f8 <__aeabi_dmul>
 800e980:	4b3e      	ldr	r3, [pc, #248]	; (800ea7c <atan+0x324>)
 800e982:	2200      	movs	r2, #0
 800e984:	f7f1 fc82 	bl	800028c <__adddf3>
 800e988:	4602      	mov	r2, r0
 800e98a:	460b      	mov	r3, r1
 800e98c:	4630      	mov	r0, r6
 800e98e:	4639      	mov	r1, r7
 800e990:	f7f1 ff5c 	bl	800084c <__aeabi_ddiv>
 800e994:	f04f 0a02 	mov.w	sl, #2
 800e998:	4604      	mov	r4, r0
 800e99a:	460d      	mov	r5, r1
 800e99c:	e743      	b.n	800e826 <atan+0xce>
 800e99e:	462b      	mov	r3, r5
 800e9a0:	ee10 2a10 	vmov	r2, s0
 800e9a4:	4939      	ldr	r1, [pc, #228]	; (800ea8c <atan+0x334>)
 800e9a6:	2000      	movs	r0, #0
 800e9a8:	f7f1 ff50 	bl	800084c <__aeabi_ddiv>
 800e9ac:	f04f 0a03 	mov.w	sl, #3
 800e9b0:	4604      	mov	r4, r0
 800e9b2:	460d      	mov	r5, r1
 800e9b4:	e737      	b.n	800e826 <atan+0xce>
 800e9b6:	4b36      	ldr	r3, [pc, #216]	; (800ea90 <atan+0x338>)
 800e9b8:	4e36      	ldr	r6, [pc, #216]	; (800ea94 <atan+0x33c>)
 800e9ba:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800e9be:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800e9c2:	e9da 2300 	ldrd	r2, r3, [sl]
 800e9c6:	f7f1 fc5f 	bl	8000288 <__aeabi_dsub>
 800e9ca:	4622      	mov	r2, r4
 800e9cc:	462b      	mov	r3, r5
 800e9ce:	f7f1 fc5b 	bl	8000288 <__aeabi_dsub>
 800e9d2:	4602      	mov	r2, r0
 800e9d4:	460b      	mov	r3, r1
 800e9d6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800e9da:	f7f1 fc55 	bl	8000288 <__aeabi_dsub>
 800e9de:	f1bb 0f00 	cmp.w	fp, #0
 800e9e2:	4604      	mov	r4, r0
 800e9e4:	460d      	mov	r5, r1
 800e9e6:	f6bf aed6 	bge.w	800e796 <atan+0x3e>
 800e9ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e9ee:	461d      	mov	r5, r3
 800e9f0:	e6d1      	b.n	800e796 <atan+0x3e>
 800e9f2:	a51d      	add	r5, pc, #116	; (adr r5, 800ea68 <atan+0x310>)
 800e9f4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e9f8:	e6cd      	b.n	800e796 <atan+0x3e>
 800e9fa:	bf00      	nop
 800e9fc:	f3af 8000 	nop.w
 800ea00:	54442d18 	.word	0x54442d18
 800ea04:	bff921fb 	.word	0xbff921fb
 800ea08:	8800759c 	.word	0x8800759c
 800ea0c:	7e37e43c 	.word	0x7e37e43c
 800ea10:	e322da11 	.word	0xe322da11
 800ea14:	3f90ad3a 	.word	0x3f90ad3a
 800ea18:	24760deb 	.word	0x24760deb
 800ea1c:	3fa97b4b 	.word	0x3fa97b4b
 800ea20:	a0d03d51 	.word	0xa0d03d51
 800ea24:	3fb10d66 	.word	0x3fb10d66
 800ea28:	c54c206e 	.word	0xc54c206e
 800ea2c:	3fb745cd 	.word	0x3fb745cd
 800ea30:	920083ff 	.word	0x920083ff
 800ea34:	3fc24924 	.word	0x3fc24924
 800ea38:	5555550d 	.word	0x5555550d
 800ea3c:	3fd55555 	.word	0x3fd55555
 800ea40:	2c6a6c2f 	.word	0x2c6a6c2f
 800ea44:	bfa2b444 	.word	0xbfa2b444
 800ea48:	52defd9a 	.word	0x52defd9a
 800ea4c:	3fadde2d 	.word	0x3fadde2d
 800ea50:	af749a6d 	.word	0xaf749a6d
 800ea54:	3fb3b0f2 	.word	0x3fb3b0f2
 800ea58:	fe231671 	.word	0xfe231671
 800ea5c:	3fbc71c6 	.word	0x3fbc71c6
 800ea60:	9998ebc4 	.word	0x9998ebc4
 800ea64:	3fc99999 	.word	0x3fc99999
 800ea68:	54442d18 	.word	0x54442d18
 800ea6c:	3ff921fb 	.word	0x3ff921fb
 800ea70:	440fffff 	.word	0x440fffff
 800ea74:	7ff00000 	.word	0x7ff00000
 800ea78:	3fdbffff 	.word	0x3fdbffff
 800ea7c:	3ff00000 	.word	0x3ff00000
 800ea80:	3ff2ffff 	.word	0x3ff2ffff
 800ea84:	40038000 	.word	0x40038000
 800ea88:	3ff80000 	.word	0x3ff80000
 800ea8c:	bff00000 	.word	0xbff00000
 800ea90:	0800f410 	.word	0x0800f410
 800ea94:	0800f3f0 	.word	0x0800f3f0

0800ea98 <fabs>:
 800ea98:	ec51 0b10 	vmov	r0, r1, d0
 800ea9c:	ee10 2a10 	vmov	r2, s0
 800eaa0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800eaa4:	ec43 2b10 	vmov	d0, r2, r3
 800eaa8:	4770      	bx	lr
	...

0800eaac <atanf>:
 800eaac:	b538      	push	{r3, r4, r5, lr}
 800eaae:	ee10 5a10 	vmov	r5, s0
 800eab2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800eab6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800eaba:	eef0 7a40 	vmov.f32	s15, s0
 800eabe:	db10      	blt.n	800eae2 <atanf+0x36>
 800eac0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800eac4:	dd04      	ble.n	800ead0 <atanf+0x24>
 800eac6:	ee70 7a00 	vadd.f32	s15, s0, s0
 800eaca:	eeb0 0a67 	vmov.f32	s0, s15
 800eace:	bd38      	pop	{r3, r4, r5, pc}
 800ead0:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800ec08 <atanf+0x15c>
 800ead4:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800ec0c <atanf+0x160>
 800ead8:	2d00      	cmp	r5, #0
 800eada:	bfd8      	it	le
 800eadc:	eef0 7a40 	vmovle.f32	s15, s0
 800eae0:	e7f3      	b.n	800eaca <atanf+0x1e>
 800eae2:	4b4b      	ldr	r3, [pc, #300]	; (800ec10 <atanf+0x164>)
 800eae4:	429c      	cmp	r4, r3
 800eae6:	dc10      	bgt.n	800eb0a <atanf+0x5e>
 800eae8:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800eaec:	da0a      	bge.n	800eb04 <atanf+0x58>
 800eaee:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800ec14 <atanf+0x168>
 800eaf2:	ee30 7a07 	vadd.f32	s14, s0, s14
 800eaf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eafa:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800eafe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb02:	dce2      	bgt.n	800eaca <atanf+0x1e>
 800eb04:	f04f 33ff 	mov.w	r3, #4294967295
 800eb08:	e013      	b.n	800eb32 <atanf+0x86>
 800eb0a:	f000 f8a3 	bl	800ec54 <fabsf>
 800eb0e:	4b42      	ldr	r3, [pc, #264]	; (800ec18 <atanf+0x16c>)
 800eb10:	429c      	cmp	r4, r3
 800eb12:	dc4f      	bgt.n	800ebb4 <atanf+0x108>
 800eb14:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800eb18:	429c      	cmp	r4, r3
 800eb1a:	dc41      	bgt.n	800eba0 <atanf+0xf4>
 800eb1c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800eb20:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800eb24:	eea0 7a27 	vfma.f32	s14, s0, s15
 800eb28:	2300      	movs	r3, #0
 800eb2a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800eb2e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800eb32:	1c5a      	adds	r2, r3, #1
 800eb34:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800eb38:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800ec1c <atanf+0x170>
 800eb3c:	eddf 5a38 	vldr	s11, [pc, #224]	; 800ec20 <atanf+0x174>
 800eb40:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800ec24 <atanf+0x178>
 800eb44:	ee66 6a06 	vmul.f32	s13, s12, s12
 800eb48:	eee6 5a87 	vfma.f32	s11, s13, s14
 800eb4c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800ec28 <atanf+0x17c>
 800eb50:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800eb54:	eddf 5a35 	vldr	s11, [pc, #212]	; 800ec2c <atanf+0x180>
 800eb58:	eee7 5a26 	vfma.f32	s11, s14, s13
 800eb5c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800ec30 <atanf+0x184>
 800eb60:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800eb64:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ec34 <atanf+0x188>
 800eb68:	eee7 5a26 	vfma.f32	s11, s14, s13
 800eb6c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800ec38 <atanf+0x18c>
 800eb70:	eea6 5a87 	vfma.f32	s10, s13, s14
 800eb74:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800ec3c <atanf+0x190>
 800eb78:	eea5 7a26 	vfma.f32	s14, s10, s13
 800eb7c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800ec40 <atanf+0x194>
 800eb80:	eea7 5a26 	vfma.f32	s10, s14, s13
 800eb84:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800ec44 <atanf+0x198>
 800eb88:	eea5 7a26 	vfma.f32	s14, s10, s13
 800eb8c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800eb90:	eea5 7a86 	vfma.f32	s14, s11, s12
 800eb94:	ee27 7a87 	vmul.f32	s14, s15, s14
 800eb98:	d121      	bne.n	800ebde <atanf+0x132>
 800eb9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eb9e:	e794      	b.n	800eaca <atanf+0x1e>
 800eba0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800eba4:	ee30 7a67 	vsub.f32	s14, s0, s15
 800eba8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ebac:	2301      	movs	r3, #1
 800ebae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ebb2:	e7be      	b.n	800eb32 <atanf+0x86>
 800ebb4:	4b24      	ldr	r3, [pc, #144]	; (800ec48 <atanf+0x19c>)
 800ebb6:	429c      	cmp	r4, r3
 800ebb8:	dc0b      	bgt.n	800ebd2 <atanf+0x126>
 800ebba:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800ebbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ebc2:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ebc6:	2302      	movs	r3, #2
 800ebc8:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ebcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ebd0:	e7af      	b.n	800eb32 <atanf+0x86>
 800ebd2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ebd6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ebda:	2303      	movs	r3, #3
 800ebdc:	e7a9      	b.n	800eb32 <atanf+0x86>
 800ebde:	4a1b      	ldr	r2, [pc, #108]	; (800ec4c <atanf+0x1a0>)
 800ebe0:	491b      	ldr	r1, [pc, #108]	; (800ec50 <atanf+0x1a4>)
 800ebe2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ebe6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ebea:	ed93 0a00 	vldr	s0, [r3]
 800ebee:	ee37 7a40 	vsub.f32	s14, s14, s0
 800ebf2:	ed92 0a00 	vldr	s0, [r2]
 800ebf6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ebfa:	2d00      	cmp	r5, #0
 800ebfc:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ec00:	bfb8      	it	lt
 800ec02:	eef1 7a67 	vneglt.f32	s15, s15
 800ec06:	e760      	b.n	800eaca <atanf+0x1e>
 800ec08:	3fc90fdb 	.word	0x3fc90fdb
 800ec0c:	bfc90fdb 	.word	0xbfc90fdb
 800ec10:	3edfffff 	.word	0x3edfffff
 800ec14:	7149f2ca 	.word	0x7149f2ca
 800ec18:	3f97ffff 	.word	0x3f97ffff
 800ec1c:	3c8569d7 	.word	0x3c8569d7
 800ec20:	3d4bda59 	.word	0x3d4bda59
 800ec24:	bd6ef16b 	.word	0xbd6ef16b
 800ec28:	3d886b35 	.word	0x3d886b35
 800ec2c:	3dba2e6e 	.word	0x3dba2e6e
 800ec30:	3e124925 	.word	0x3e124925
 800ec34:	3eaaaaab 	.word	0x3eaaaaab
 800ec38:	bd15a221 	.word	0xbd15a221
 800ec3c:	bd9d8795 	.word	0xbd9d8795
 800ec40:	bde38e38 	.word	0xbde38e38
 800ec44:	be4ccccd 	.word	0xbe4ccccd
 800ec48:	401bffff 	.word	0x401bffff
 800ec4c:	0800f430 	.word	0x0800f430
 800ec50:	0800f440 	.word	0x0800f440

0800ec54 <fabsf>:
 800ec54:	ee10 3a10 	vmov	r3, s0
 800ec58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ec5c:	ee00 3a10 	vmov	s0, r3
 800ec60:	4770      	bx	lr
	...

0800ec64 <_init>:
 800ec64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec66:	bf00      	nop
 800ec68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec6a:	bc08      	pop	{r3}
 800ec6c:	469e      	mov	lr, r3
 800ec6e:	4770      	bx	lr

0800ec70 <_fini>:
 800ec70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec72:	bf00      	nop
 800ec74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec76:	bc08      	pop	{r3}
 800ec78:	469e      	mov	lr, r3
 800ec7a:	4770      	bx	lr
