
Lenna-Bardia-MCU-Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ea9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c0  0800ec30  0800ec30  0001ec30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f3f0  0800f3f0  00020460  2**0
                  CONTENTS
  4 .ARM          00000008  0800f3f0  0800f3f0  0001f3f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f3f8  0800f3f8  00020460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f3f8  0800f3f8  0001f3f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f3fc  0800f3fc  0001f3fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000460  20000000  0800f400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020460  2**0
                  CONTENTS
 10 .bss          00000788  20000460  20000460  00020460  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000be8  20000be8  00020460  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020460  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d2fb  00000000  00000000  00020490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a90  00000000  00000000  0003d78b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016a8  00000000  00000000  00041220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001518  00000000  00000000  000428c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027119  00000000  00000000  00043de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ddf2  00000000  00000000  0006aef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5de3  00000000  00000000  00088ceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016eace  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007668  00000000  00000000  0016eb20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000460 	.word	0x20000460
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ec14 	.word	0x0800ec14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000464 	.word	0x20000464
 80001cc:	0800ec14 	.word	0x0800ec14

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ffe:	463b      	mov	r3, r7
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800100a:	4b21      	ldr	r3, [pc, #132]	; (8001090 <MX_ADC1_Init+0x98>)
 800100c:	4a21      	ldr	r2, [pc, #132]	; (8001094 <MX_ADC1_Init+0x9c>)
 800100e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001010:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <MX_ADC1_Init+0x98>)
 8001012:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001016:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001018:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <MX_ADC1_Init+0x98>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800101e:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <MX_ADC1_Init+0x98>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001024:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <MX_ADC1_Init+0x98>)
 8001026:	2200      	movs	r2, #0
 8001028:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800102a:	4b19      	ldr	r3, [pc, #100]	; (8001090 <MX_ADC1_Init+0x98>)
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001032:	4b17      	ldr	r3, [pc, #92]	; (8001090 <MX_ADC1_Init+0x98>)
 8001034:	2200      	movs	r2, #0
 8001036:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001038:	4b15      	ldr	r3, [pc, #84]	; (8001090 <MX_ADC1_Init+0x98>)
 800103a:	4a17      	ldr	r2, [pc, #92]	; (8001098 <MX_ADC1_Init+0xa0>)
 800103c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <MX_ADC1_Init+0x98>)
 8001040:	2200      	movs	r2, #0
 8001042:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <MX_ADC1_Init+0x98>)
 8001046:	2201      	movs	r2, #1
 8001048:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800104a:	4b11      	ldr	r3, [pc, #68]	; (8001090 <MX_ADC1_Init+0x98>)
 800104c:	2200      	movs	r2, #0
 800104e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001052:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <MX_ADC1_Init+0x98>)
 8001054:	2201      	movs	r2, #1
 8001056:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001058:	480d      	ldr	r0, [pc, #52]	; (8001090 <MX_ADC1_Init+0x98>)
 800105a:	f003 f8e3 	bl	8004224 <HAL_ADC_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001064:	f000 fcee 	bl	8001a44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001068:	2305      	movs	r3, #5
 800106a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800106c:	2301      	movs	r3, #1
 800106e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001070:	2300      	movs	r3, #0
 8001072:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001074:	463b      	mov	r3, r7
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_ADC1_Init+0x98>)
 800107a:	f003 f917 	bl	80042ac <HAL_ADC_ConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001084:	f000 fcde 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	2000047c 	.word	0x2000047c
 8001094:	40012000 	.word	0x40012000
 8001098:	0f000001 	.word	0x0f000001

0800109c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a17      	ldr	r2, [pc, #92]	; (8001118 <HAL_ADC_MspInit+0x7c>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d127      	bne.n	800110e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b16      	ldr	r3, [pc, #88]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	4a15      	ldr	r2, [pc, #84]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010cc:	6453      	str	r3, [r2, #68]	; 0x44
 80010ce:	4b13      	ldr	r3, [pc, #76]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a0e      	ldr	r2, [pc, #56]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = Battery_ADC_Pin;
 80010f6:	2320      	movs	r3, #32
 80010f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fa:	2303      	movs	r3, #3
 80010fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Battery_ADC_GPIO_Port, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	4805      	ldr	r0, [pc, #20]	; (8001120 <HAL_ADC_MspInit+0x84>)
 800110a:	f003 ffb9 	bl	8005080 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800110e:	bf00      	nop
 8001110:	3728      	adds	r7, #40	; 0x28
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40012000 	.word	0x40012000
 800111c:	40023800 	.word	0x40023800
 8001120:	40020000 	.word	0x40020000

08001124 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001128:	4b1f      	ldr	r3, [pc, #124]	; (80011a8 <MX_ETH_Init+0x84>)
 800112a:	4a20      	ldr	r2, [pc, #128]	; (80011ac <MX_ETH_Init+0x88>)
 800112c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800112e:	4b20      	ldr	r3, [pc, #128]	; (80011b0 <MX_ETH_Init+0x8c>)
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001134:	4b1e      	ldr	r3, [pc, #120]	; (80011b0 <MX_ETH_Init+0x8c>)
 8001136:	2280      	movs	r2, #128	; 0x80
 8001138:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800113a:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <MX_ETH_Init+0x8c>)
 800113c:	22e1      	movs	r2, #225	; 0xe1
 800113e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001140:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <MX_ETH_Init+0x8c>)
 8001142:	2200      	movs	r2, #0
 8001144:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001146:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <MX_ETH_Init+0x8c>)
 8001148:	2200      	movs	r2, #0
 800114a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800114c:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <MX_ETH_Init+0x8c>)
 800114e:	2200      	movs	r2, #0
 8001150:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <MX_ETH_Init+0x84>)
 8001154:	4a16      	ldr	r2, [pc, #88]	; (80011b0 <MX_ETH_Init+0x8c>)
 8001156:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001158:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <MX_ETH_Init+0x84>)
 800115a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800115e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001160:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <MX_ETH_Init+0x84>)
 8001162:	4a14      	ldr	r2, [pc, #80]	; (80011b4 <MX_ETH_Init+0x90>)
 8001164:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <MX_ETH_Init+0x84>)
 8001168:	4a13      	ldr	r2, [pc, #76]	; (80011b8 <MX_ETH_Init+0x94>)
 800116a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800116c:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <MX_ETH_Init+0x84>)
 800116e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001172:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001174:	480c      	ldr	r0, [pc, #48]	; (80011a8 <MX_ETH_Init+0x84>)
 8001176:	f003 fc5b 	bl	8004a30 <HAL_ETH_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001180:	f000 fc60 	bl	8001a44 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001184:	2238      	movs	r2, #56	; 0x38
 8001186:	2100      	movs	r1, #0
 8001188:	480c      	ldr	r0, [pc, #48]	; (80011bc <MX_ETH_Init+0x98>)
 800118a:	f008 fcaf 	bl	8009aec <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800118e:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <MX_ETH_Init+0x98>)
 8001190:	2221      	movs	r2, #33	; 0x21
 8001192:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001194:	4b09      	ldr	r3, [pc, #36]	; (80011bc <MX_ETH_Init+0x98>)
 8001196:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800119a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800119c:	4b07      	ldr	r3, [pc, #28]	; (80011bc <MX_ETH_Init+0x98>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	2000063c 	.word	0x2000063c
 80011ac:	40028000 	.word	0x40028000
 80011b0:	200006ec 	.word	0x200006ec
 80011b4:	20000564 	.word	0x20000564
 80011b8:	200004c4 	.word	0x200004c4
 80011bc:	20000604 	.word	0x20000604

080011c0 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08e      	sub	sp, #56	; 0x38
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a46      	ldr	r2, [pc, #280]	; (80012f8 <HAL_ETH_MspInit+0x138>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	f040 8085 	bne.w	80012ee <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80011e4:	2300      	movs	r3, #0
 80011e6:	623b      	str	r3, [r7, #32]
 80011e8:	4b44      	ldr	r3, [pc, #272]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 80011ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ec:	4a43      	ldr	r2, [pc, #268]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 80011ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011f2:	6313      	str	r3, [r2, #48]	; 0x30
 80011f4:	4b41      	ldr	r3, [pc, #260]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 80011f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011fc:	623b      	str	r3, [r7, #32]
 80011fe:	6a3b      	ldr	r3, [r7, #32]
 8001200:	2300      	movs	r3, #0
 8001202:	61fb      	str	r3, [r7, #28]
 8001204:	4b3d      	ldr	r3, [pc, #244]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 8001206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001208:	4a3c      	ldr	r2, [pc, #240]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 800120a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800120e:	6313      	str	r3, [r2, #48]	; 0x30
 8001210:	4b3a      	ldr	r3, [pc, #232]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 8001212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001214:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001218:	61fb      	str	r3, [r7, #28]
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	2300      	movs	r3, #0
 800121e:	61bb      	str	r3, [r7, #24]
 8001220:	4b36      	ldr	r3, [pc, #216]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 8001222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001224:	4a35      	ldr	r2, [pc, #212]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 8001226:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800122a:	6313      	str	r3, [r2, #48]	; 0x30
 800122c:	4b33      	ldr	r3, [pc, #204]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 800122e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001234:	61bb      	str	r3, [r7, #24]
 8001236:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	4b2f      	ldr	r3, [pc, #188]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 800123e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001240:	4a2e      	ldr	r2, [pc, #184]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 8001242:	f043 0304 	orr.w	r3, r3, #4
 8001246:	6313      	str	r3, [r2, #48]	; 0x30
 8001248:	4b2c      	ldr	r3, [pc, #176]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 800124a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124c:	f003 0304 	and.w	r3, r3, #4
 8001250:	617b      	str	r3, [r7, #20]
 8001252:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001254:	2300      	movs	r3, #0
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	4b28      	ldr	r3, [pc, #160]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 800125a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125c:	4a27      	ldr	r2, [pc, #156]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	6313      	str	r3, [r2, #48]	; 0x30
 8001264:	4b25      	ldr	r3, [pc, #148]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 8001266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	613b      	str	r3, [r7, #16]
 800126e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	4b21      	ldr	r3, [pc, #132]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 8001276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001278:	4a20      	ldr	r2, [pc, #128]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 800127a:	f043 0302 	orr.w	r3, r3, #2
 800127e:	6313      	str	r3, [r2, #48]	; 0x30
 8001280:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 8001282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800128c:	2332      	movs	r3, #50	; 0x32
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001298:	2303      	movs	r3, #3
 800129a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800129c:	230b      	movs	r3, #11
 800129e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a4:	4619      	mov	r1, r3
 80012a6:	4816      	ldr	r0, [pc, #88]	; (8001300 <HAL_ETH_MspInit+0x140>)
 80012a8:	f003 feea 	bl	8005080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80012ac:	2386      	movs	r3, #134	; 0x86
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b8:	2303      	movs	r3, #3
 80012ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012bc:	230b      	movs	r3, #11
 80012be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c4:	4619      	mov	r1, r3
 80012c6:	480f      	ldr	r0, [pc, #60]	; (8001304 <HAL_ETH_MspInit+0x144>)
 80012c8:	f003 feda 	bl	8005080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80012cc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012da:	2303      	movs	r3, #3
 80012dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012de:	230b      	movs	r3, #11
 80012e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e6:	4619      	mov	r1, r3
 80012e8:	4807      	ldr	r0, [pc, #28]	; (8001308 <HAL_ETH_MspInit+0x148>)
 80012ea:	f003 fec9 	bl	8005080 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80012ee:	bf00      	nop
 80012f0:	3738      	adds	r7, #56	; 0x38
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40028000 	.word	0x40028000
 80012fc:	40023800 	.word	0x40023800
 8001300:	40020800 	.word	0x40020800
 8001304:	40020000 	.word	0x40020000
 8001308:	40020400 	.word	0x40020400

0800130c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08c      	sub	sp, #48	; 0x30
 8001310:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001312:	f107 031c 	add.w	r3, r7, #28
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
 8001320:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	61bb      	str	r3, [r7, #24]
 8001326:	4b63      	ldr	r3, [pc, #396]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4a62      	ldr	r2, [pc, #392]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 800132c:	f043 0310 	orr.w	r3, r3, #16
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4b60      	ldr	r3, [pc, #384]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f003 0310 	and.w	r3, r3, #16
 800133a:	61bb      	str	r3, [r7, #24]
 800133c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]
 8001342:	4b5c      	ldr	r3, [pc, #368]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a5b      	ldr	r2, [pc, #364]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 8001348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b59      	ldr	r3, [pc, #356]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	4b55      	ldr	r3, [pc, #340]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a54      	ldr	r2, [pc, #336]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 8001364:	f043 0304 	orr.w	r3, r3, #4
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b52      	ldr	r3, [pc, #328]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0304 	and.w	r3, r3, #4
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	4b4e      	ldr	r3, [pc, #312]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a4d      	ldr	r2, [pc, #308]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b4b      	ldr	r3, [pc, #300]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	4b47      	ldr	r3, [pc, #284]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a46      	ldr	r2, [pc, #280]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b44      	ldr	r3, [pc, #272]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	4b40      	ldr	r3, [pc, #256]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a3f      	ldr	r2, [pc, #252]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 80013b8:	f043 0308 	orr.w	r3, r3, #8
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b3d      	ldr	r3, [pc, #244]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TRIG_HC_3_Pin|TRIG_HC_4_Pin|GPIO_PIN_7|GPIO_PIN_8
 80013ca:	2200      	movs	r2, #0
 80013cc:	f64f 719b 	movw	r1, #65435	; 0xff9b
 80013d0:	4839      	ldr	r0, [pc, #228]	; (80014b8 <MX_GPIO_Init+0x1ac>)
 80013d2:	f003 fff1 	bl	80053b8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|TRIG_HC_1_Pin
                          |TRIG_HC_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Buzzer_Pin|GPIO_PIN_11, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	f44f 6101 	mov.w	r1, #2064	; 0x810
 80013dc:	4837      	ldr	r0, [pc, #220]	; (80014bc <MX_GPIO_Init+0x1b0>)
 80013de:	f003 ffeb 	bl	80053b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80013e2:	2200      	movs	r2, #0
 80013e4:	f24c 0103 	movw	r1, #49155	; 0xc003
 80013e8:	4835      	ldr	r0, [pc, #212]	; (80014c0 <MX_GPIO_Init+0x1b4>)
 80013ea:	f003 ffe5 	bl	80053b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80013ee:	2200      	movs	r2, #0
 80013f0:	f643 711b 	movw	r1, #16155	; 0x3f1b
 80013f4:	4833      	ldr	r0, [pc, #204]	; (80014c4 <MX_GPIO_Init+0x1b8>)
 80013f6:	f003 ffdf 	bl	80053b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PE7 PE8
                           PE9 PE10 PE11 PE12
                           PE13 PE14 PE15 PEPin
                           PEPin */
  GPIO_InitStruct.Pin = TRIG_HC_3_Pin|TRIG_HC_4_Pin|GPIO_PIN_7|GPIO_PIN_8
 80013fa:	f64f 739b 	movw	r3, #65435	; 0xff9b
 80013fe:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|TRIG_HC_1_Pin
                          |TRIG_HC_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001400:	2301      	movs	r3, #1
 8001402:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	2300      	movs	r3, #0
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800140c:	f107 031c 	add.w	r3, r7, #28
 8001410:	4619      	mov	r1, r3
 8001412:	4829      	ldr	r0, [pc, #164]	; (80014b8 <MX_GPIO_Init+0x1ac>)
 8001414:	f003 fe34 	bl	8005080 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8001418:	2310      	movs	r3, #16
 800141a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141c:	2301      	movs	r3, #1
 800141e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001420:	2302      	movs	r3, #2
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001424:	2300      	movs	r3, #0
 8001426:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001428:	f107 031c 	add.w	r3, r7, #28
 800142c:	4619      	mov	r1, r3
 800142e:	4823      	ldr	r0, [pc, #140]	; (80014bc <MX_GPIO_Init+0x1b0>)
 8001430:	f003 fe26 	bl	8005080 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_15;
 8001434:	f24c 0303 	movw	r3, #49155	; 0xc003
 8001438:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143a:	2301      	movs	r3, #1
 800143c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	2300      	movs	r3, #0
 8001444:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001446:	f107 031c 	add.w	r3, r7, #28
 800144a:	4619      	mov	r1, r3
 800144c:	481c      	ldr	r0, [pc, #112]	; (80014c0 <MX_GPIO_Init+0x1b4>)
 800144e:	f003 fe17 	bl	8005080 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001452:	f643 731b 	movw	r3, #16155	; 0x3f1b
 8001456:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|MOTOR2_B_Pin|MOTOR2_A_Pin
                          |MOTOR1_B_Pin|MOTOR1_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001458:	2301      	movs	r3, #1
 800145a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2300      	movs	r3, #0
 8001462:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001464:	f107 031c 	add.w	r3, r7, #28
 8001468:	4619      	mov	r1, r3
 800146a:	4816      	ldr	r0, [pc, #88]	; (80014c4 <MX_GPIO_Init+0x1b8>)
 800146c:	f003 fe08 	bl	8005080 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001470:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001474:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001476:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800147a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001480:	f107 031c 	add.w	r3, r7, #28
 8001484:	4619      	mov	r1, r3
 8001486:	480f      	ldr	r0, [pc, #60]	; (80014c4 <MX_GPIO_Init+0x1b8>)
 8001488:	f003 fdfa 	bl	8005080 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800148c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001492:	2301      	movs	r3, #1
 8001494:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2300      	movs	r3, #0
 800149c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149e:	f107 031c 	add.w	r3, r7, #28
 80014a2:	4619      	mov	r1, r3
 80014a4:	4805      	ldr	r0, [pc, #20]	; (80014bc <MX_GPIO_Init+0x1b0>)
 80014a6:	f003 fdeb 	bl	8005080 <HAL_GPIO_Init>

}
 80014aa:	bf00      	nop
 80014ac:	3730      	adds	r7, #48	; 0x30
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40020000 	.word	0x40020000
 80014c0:	40020400 	.word	0x40020400
 80014c4:	40020c00 	.word	0x40020c00

080014c8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <MX_I2C1_Init+0x50>)
 80014ce:	4a13      	ldr	r2, [pc, #76]	; (800151c <MX_I2C1_Init+0x54>)
 80014d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014d2:	4b11      	ldr	r3, [pc, #68]	; (8001518 <MX_I2C1_Init+0x50>)
 80014d4:	4a12      	ldr	r2, [pc, #72]	; (8001520 <MX_I2C1_Init+0x58>)
 80014d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014d8:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <MX_I2C1_Init+0x50>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014de:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <MX_I2C1_Init+0x50>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <MX_I2C1_Init+0x50>)
 80014e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014ec:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <MX_I2C1_Init+0x50>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014f2:	4b09      	ldr	r3, [pc, #36]	; (8001518 <MX_I2C1_Init+0x50>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014f8:	4b07      	ldr	r3, [pc, #28]	; (8001518 <MX_I2C1_Init+0x50>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <MX_I2C1_Init+0x50>)
 8001500:	2200      	movs	r2, #0
 8001502:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001504:	4804      	ldr	r0, [pc, #16]	; (8001518 <MX_I2C1_Init+0x50>)
 8001506:	f003 ff71 	bl	80053ec <HAL_I2C_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001510:	f000 fa98 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}
 8001518:	200006f4 	.word	0x200006f4
 800151c:	40005400 	.word	0x40005400
 8001520:	000186a0 	.word	0x000186a0

08001524 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001528:	4b12      	ldr	r3, [pc, #72]	; (8001574 <MX_I2C3_Init+0x50>)
 800152a:	4a13      	ldr	r2, [pc, #76]	; (8001578 <MX_I2C3_Init+0x54>)
 800152c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <MX_I2C3_Init+0x50>)
 8001530:	4a12      	ldr	r2, [pc, #72]	; (800157c <MX_I2C3_Init+0x58>)
 8001532:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <MX_I2C3_Init+0x50>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800153a:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <MX_I2C3_Init+0x50>)
 800153c:	2200      	movs	r2, #0
 800153e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <MX_I2C3_Init+0x50>)
 8001542:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001546:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001548:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <MX_I2C3_Init+0x50>)
 800154a:	2200      	movs	r2, #0
 800154c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800154e:	4b09      	ldr	r3, [pc, #36]	; (8001574 <MX_I2C3_Init+0x50>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001554:	4b07      	ldr	r3, [pc, #28]	; (8001574 <MX_I2C3_Init+0x50>)
 8001556:	2200      	movs	r2, #0
 8001558:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800155a:	4b06      	ldr	r3, [pc, #24]	; (8001574 <MX_I2C3_Init+0x50>)
 800155c:	2200      	movs	r2, #0
 800155e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001560:	4804      	ldr	r0, [pc, #16]	; (8001574 <MX_I2C3_Init+0x50>)
 8001562:	f003 ff43 	bl	80053ec <HAL_I2C_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800156c:	f000 fa6a 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20000748 	.word	0x20000748
 8001578:	40005c00 	.word	0x40005c00
 800157c:	000186a0 	.word	0x000186a0

08001580 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08c      	sub	sp, #48	; 0x30
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 031c 	add.w	r3, r7, #28
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a42      	ldr	r2, [pc, #264]	; (80016a8 <HAL_I2C_MspInit+0x128>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d12c      	bne.n	80015fc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	61bb      	str	r3, [r7, #24]
 80015a6:	4b41      	ldr	r3, [pc, #260]	; (80016ac <HAL_I2C_MspInit+0x12c>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a40      	ldr	r2, [pc, #256]	; (80016ac <HAL_I2C_MspInit+0x12c>)
 80015ac:	f043 0302 	orr.w	r3, r3, #2
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b3e      	ldr	r3, [pc, #248]	; (80016ac <HAL_I2C_MspInit+0x12c>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	61bb      	str	r3, [r7, #24]
 80015bc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = JET_I2C_SCL_Pin|JET_I2C_SDA_Pin;
 80015be:	23c0      	movs	r3, #192	; 0xc0
 80015c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015c2:	2312      	movs	r3, #18
 80015c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ca:	2303      	movs	r3, #3
 80015cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015ce:	2304      	movs	r3, #4
 80015d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d2:	f107 031c 	add.w	r3, r7, #28
 80015d6:	4619      	mov	r1, r3
 80015d8:	4835      	ldr	r0, [pc, #212]	; (80016b0 <HAL_I2C_MspInit+0x130>)
 80015da:	f003 fd51 	bl	8005080 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
 80015e2:	4b32      	ldr	r3, [pc, #200]	; (80016ac <HAL_I2C_MspInit+0x12c>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	4a31      	ldr	r2, [pc, #196]	; (80016ac <HAL_I2C_MspInit+0x12c>)
 80015e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015ec:	6413      	str	r3, [r2, #64]	; 0x40
 80015ee:	4b2f      	ldr	r3, [pc, #188]	; (80016ac <HAL_I2C_MspInit+0x12c>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f6:	617b      	str	r3, [r7, #20]
 80015f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80015fa:	e050      	b.n	800169e <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a2c      	ldr	r2, [pc, #176]	; (80016b4 <HAL_I2C_MspInit+0x134>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d14b      	bne.n	800169e <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
 800160a:	4b28      	ldr	r3, [pc, #160]	; (80016ac <HAL_I2C_MspInit+0x12c>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4a27      	ldr	r2, [pc, #156]	; (80016ac <HAL_I2C_MspInit+0x12c>)
 8001610:	f043 0304 	orr.w	r3, r3, #4
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4b25      	ldr	r3, [pc, #148]	; (80016ac <HAL_I2C_MspInit+0x12c>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0304 	and.w	r3, r3, #4
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	4b21      	ldr	r3, [pc, #132]	; (80016ac <HAL_I2C_MspInit+0x12c>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a20      	ldr	r2, [pc, #128]	; (80016ac <HAL_I2C_MspInit+0x12c>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b1e      	ldr	r3, [pc, #120]	; (80016ac <HAL_I2C_MspInit+0x12c>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUS_SDA_Pin;
 800163e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001644:	2312      	movs	r3, #18
 8001646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164c:	2303      	movs	r3, #3
 800164e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001650:	2304      	movs	r3, #4
 8001652:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BUS_SDA_GPIO_Port, &GPIO_InitStruct);
 8001654:	f107 031c 	add.w	r3, r7, #28
 8001658:	4619      	mov	r1, r3
 800165a:	4817      	ldr	r0, [pc, #92]	; (80016b8 <HAL_I2C_MspInit+0x138>)
 800165c:	f003 fd10 	bl	8005080 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BUS_SCL_Pin;
 8001660:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001666:	2312      	movs	r3, #18
 8001668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166e:	2303      	movs	r3, #3
 8001670:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001672:	2304      	movs	r3, #4
 8001674:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BUS_SCL_GPIO_Port, &GPIO_InitStruct);
 8001676:	f107 031c 	add.w	r3, r7, #28
 800167a:	4619      	mov	r1, r3
 800167c:	480f      	ldr	r0, [pc, #60]	; (80016bc <HAL_I2C_MspInit+0x13c>)
 800167e:	f003 fcff 	bl	8005080 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <HAL_I2C_MspInit+0x12c>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	4a08      	ldr	r2, [pc, #32]	; (80016ac <HAL_I2C_MspInit+0x12c>)
 800168c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001690:	6413      	str	r3, [r2, #64]	; 0x40
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <HAL_I2C_MspInit+0x12c>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	68bb      	ldr	r3, [r7, #8]
}
 800169e:	bf00      	nop
 80016a0:	3730      	adds	r7, #48	; 0x30
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40005400 	.word	0x40005400
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40020400 	.word	0x40020400
 80016b4:	40005c00 	.word	0x40005c00
 80016b8:	40020800 	.word	0x40020800
 80016bc:	40020000 	.word	0x40020000

080016c0 <__io_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// ####################   UART Tx -> printf   ####################
PUTCHAR_PROTOTYPE
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80016c8:	1d39      	adds	r1, r7, #4
 80016ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016ce:	2201      	movs	r2, #1
 80016d0:	4803      	ldr	r0, [pc, #12]	; (80016e0 <__io_putchar+0x20>)
 80016d2:	f007 f8d0 	bl	8008876 <HAL_UART_Transmit>

  return ch;
 80016d6:	687b      	ldr	r3, [r7, #4]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000b4c 	.word	0x20000b4c

080016e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016e6:	b091      	sub	sp, #68	; 0x44
 80016e8:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016ea:	f002 fd05 	bl	80040f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016ee:	f000 f905 	bl	80018fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016f2:	f7ff fe0b 	bl	800130c <MX_GPIO_Init>
  MX_ADC1_Init();
 80016f6:	f7ff fc7f 	bl	8000ff8 <MX_ADC1_Init>
  MX_ETH_Init();
 80016fa:	f7ff fd13 	bl	8001124 <MX_ETH_Init>
  MX_I2C1_Init();
 80016fe:	f7ff fee3 	bl	80014c8 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001702:	f7ff ff0f 	bl	8001524 <MX_I2C3_Init>
  MX_SPI2_Init();
 8001706:	f001 fd21 	bl	800314c <MX_SPI2_Init>
  MX_SPI3_Init();
 800170a:	f001 fd55 	bl	80031b8 <MX_SPI3_Init>
  MX_TIM2_Init();
 800170e:	f001 ffc9 	bl	80036a4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001712:	f002 f81b 	bl	800374c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001716:	f002 f86d 	bl	80037f4 <MX_TIM4_Init>
  MX_TIM8_Init();
 800171a:	f002 f935 	bl	8003988 <MX_TIM8_Init>
  MX_TIM9_Init();
 800171e:	f002 f9df 	bl	8003ae0 <MX_TIM9_Init>
  MX_USART1_UART_Init();
 8001722:	f002 fbdd 	bl	8003ee0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001726:	f002 fc05 	bl	8003f34 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800172a:	f001 ff6b 	bl	8003604 <MX_TIM1_Init>
  MX_TIM5_Init();
 800172e:	f002 f8dd 	bl	80038ec <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001732:	2100      	movs	r1, #0
 8001734:	485f      	ldr	r0, [pc, #380]	; (80018b4 <main+0x1d0>)
 8001736:	f005 fd93 	bl	8007260 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800173a:	2104      	movs	r1, #4
 800173c:	485d      	ldr	r0, [pc, #372]	; (80018b4 <main+0x1d0>)
 800173e:	f005 fd8f 	bl	8007260 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001742:	213c      	movs	r1, #60	; 0x3c
 8001744:	485c      	ldr	r0, [pc, #368]	; (80018b8 <main+0x1d4>)
 8001746:	f005 ff48 	bl	80075da <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800174a:	213c      	movs	r1, #60	; 0x3c
 800174c:	485b      	ldr	r0, [pc, #364]	; (80018bc <main+0x1d8>)
 800174e:	f005 ff44 	bl	80075da <HAL_TIM_Encoder_Start>
//  HAL_TIM_Base_Init(&htim5);
  HAL_TIM_Base_Start_IT(&htim5);
 8001752:	485b      	ldr	r0, [pc, #364]	; (80018c0 <main+0x1dc>)
 8001754:	f005 fcba 	bl	80070cc <HAL_TIM_Base_Start_IT>
  HAL_I2C_Init(&hi2c3);
 8001758:	485a      	ldr	r0, [pc, #360]	; (80018c4 <main+0x1e0>)
 800175a:	f003 fe47 	bl	80053ec <HAL_I2C_Init>

// #################### Initializations   ####################

//  /* main code initialization

  LRL_PID_Init(&pid_motor_left,  1);
 800175e:	2101      	movs	r1, #1
 8001760:	4859      	ldr	r0, [pc, #356]	; (80018c8 <main+0x1e4>)
 8001762:	f001 fbfb 	bl	8002f5c <LRL_PID_Init>
  LRL_PID_Init(&pid_motor_right, 1);
 8001766:	2101      	movs	r1, #1
 8001768:	4858      	ldr	r0, [pc, #352]	; (80018cc <main+0x1e8>)
 800176a:	f001 fbf7 	bl	8002f5c <LRL_PID_Init>

  LRL_Encoder_Init(&odom);
 800176e:	4858      	ldr	r0, [pc, #352]	; (80018d0 <main+0x1ec>)
 8001770:	f001 f8ec 	bl	800294c <LRL_Encoder_Init>

  LRL_MPU6050_Init(&odom);
 8001774:	4856      	ldr	r0, [pc, #344]	; (80018d0 <main+0x1ec>)
 8001776:	f000 fb5d 	bl	8001e34 <LRL_MPU6050_Init>

  LRL_HMC5883L_Init(&odom);
 800177a:	4855      	ldr	r0, [pc, #340]	; (80018d0 <main+0x1ec>)
 800177c:	f000 f9f0 	bl	8001b60 <LRL_HMC5883L_Init>

  int16_t motor_speed_left = 0, motor_speed_right = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	80fb      	strh	r3, [r7, #6]
 8001784:	2300      	movs	r3, #0
 8001786:	80bb      	strh	r3, [r7, #4]
//  HAL_UART_Transmit(&huart1, msgBuffer, 32, 100);

//  HAL_Delay(1000);
  for(int c = 0; c< 3 ; c++)
 8001788:	2300      	movs	r3, #0
 800178a:	603b      	str	r3, [r7, #0]
 800178c:	e016      	b.n	80017bc <main+0xd8>
  {
	  HAL_GPIO_WritePin(BLINK_LED_PORT, BLINK_LED_PIN, 1);
 800178e:	2201      	movs	r2, #1
 8001790:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001794:	484f      	ldr	r0, [pc, #316]	; (80018d4 <main+0x1f0>)
 8001796:	f003 fe0f 	bl	80053b8 <HAL_GPIO_WritePin>
	  HAL_Delay(300);
 800179a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800179e:	f002 fd1d 	bl	80041dc <HAL_Delay>
	  HAL_GPIO_WritePin(BLINK_LED_PORT, BLINK_LED_PIN, 0);
 80017a2:	2200      	movs	r2, #0
 80017a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017a8:	484a      	ldr	r0, [pc, #296]	; (80018d4 <main+0x1f0>)
 80017aa:	f003 fe05 	bl	80053b8 <HAL_GPIO_WritePin>
	  HAL_Delay(300);
 80017ae:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80017b2:	f002 fd13 	bl	80041dc <HAL_Delay>
  for(int c = 0; c< 3 ; c++)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	3301      	adds	r3, #1
 80017ba:	603b      	str	r3, [r7, #0]
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	2b02      	cmp	r3, #2
 80017c0:	dde5      	ble.n	800178e <main+0xaa>
  }

  LRL_handShake(&rx_packet);
 80017c2:	4845      	ldr	r0, [pc, #276]	; (80018d8 <main+0x1f4>)
 80017c4:	f001 fb9a 	bl	8002efc <LRL_handShake>

//  LRL_RX_Init(&rx_packet);
//  LRL_Packet_Init(&rx_packet);

  HAL_UART_Receive_IT(&huart2, testBuffer, 10);
 80017c8:	220a      	movs	r2, #10
 80017ca:	4944      	ldr	r1, [pc, #272]	; (80018dc <main+0x1f8>)
 80017cc:	4844      	ldr	r0, [pc, #272]	; (80018e0 <main+0x1fc>)
 80017ce:	f007 f9cb 	bl	8008b68 <HAL_UART_Receive_IT>

  txBuffer[0] = 0xFF;
 80017d2:	4b44      	ldr	r3, [pc, #272]	; (80018e4 <main+0x200>)
 80017d4:	22ff      	movs	r2, #255	; 0xff
 80017d6:	701a      	strb	r2, [r3, #0]
  txBuffer[1] = 0xFF;
 80017d8:	4b42      	ldr	r3, [pc, #264]	; (80018e4 <main+0x200>)
 80017da:	22ff      	movs	r2, #255	; 0xff
 80017dc:	705a      	strb	r2, [r3, #1]

  odom.dist.right = 0;
 80017de:	4b3c      	ldr	r3, [pc, #240]	; (80018d0 <main+0x1ec>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
  odom.dist.left = 0;
 80017e6:	4b3a      	ldr	r3, [pc, #232]	; (80018d0 <main+0x1ec>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
		LRL_Motion_Control(diff_robot, pid_motor_left.Control_Signal,pid_motor_right.Control_Signal);
		pid_tim_flag = 0;
	  }
	*/
	  /* this part is for the problem handling and debugging  */
	  if(serial_flag == 1)
 80017ee:	4b3e      	ldr	r3, [pc, #248]	; (80018e8 <main+0x204>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d11f      	bne.n	8001836 <main+0x152>
	  {
		  HAL_UART_Receive_IT(&huart2, testBuffer, 10);
 80017f6:	220a      	movs	r2, #10
 80017f8:	4938      	ldr	r1, [pc, #224]	; (80018dc <main+0x1f8>)
 80017fa:	4839      	ldr	r0, [pc, #228]	; (80018e0 <main+0x1fc>)
 80017fc:	f007 f9b4 	bl	8008b68 <HAL_UART_Receive_IT>
	  	  HAL_UART_Transmit(&huart1, testBuffer,sizeof(testBuffer),1);
 8001800:	2301      	movs	r3, #1
 8001802:	220a      	movs	r2, #10
 8001804:	4935      	ldr	r1, [pc, #212]	; (80018dc <main+0x1f8>)
 8001806:	4839      	ldr	r0, [pc, #228]	; (80018ec <main+0x208>)
 8001808:	f007 f835 	bl	8008876 <HAL_UART_Transmit>
		  motor_speed_left = (int16_t)((testBuffer[4] << 8) | testBuffer[5]);
 800180c:	4b33      	ldr	r3, [pc, #204]	; (80018dc <main+0x1f8>)
 800180e:	791b      	ldrb	r3, [r3, #4]
 8001810:	021b      	lsls	r3, r3, #8
 8001812:	b21a      	sxth	r2, r3
 8001814:	4b31      	ldr	r3, [pc, #196]	; (80018dc <main+0x1f8>)
 8001816:	795b      	ldrb	r3, [r3, #5]
 8001818:	b21b      	sxth	r3, r3
 800181a:	4313      	orrs	r3, r2
 800181c:	80fb      	strh	r3, [r7, #6]
		  motor_speed_right = (int16_t)((testBuffer[6] << 8) | testBuffer[7]);
 800181e:	4b2f      	ldr	r3, [pc, #188]	; (80018dc <main+0x1f8>)
 8001820:	799b      	ldrb	r3, [r3, #6]
 8001822:	021b      	lsls	r3, r3, #8
 8001824:	b21a      	sxth	r2, r3
 8001826:	4b2d      	ldr	r3, [pc, #180]	; (80018dc <main+0x1f8>)
 8001828:	79db      	ldrb	r3, [r3, #7]
 800182a:	b21b      	sxth	r3, r3
 800182c:	4313      	orrs	r3, r2
 800182e:	80bb      	strh	r3, [r7, #4]

	  	  serial_flag = 0;
 8001830:	4b2d      	ldr	r3, [pc, #180]	; (80018e8 <main+0x204>)
 8001832:	2200      	movs	r2, #0
 8001834:	701a      	strb	r2, [r3, #0]
//	  	  HAL_Delay(10);
	  }
	  if(pid_tim_flag == 1)
 8001836:	4b2e      	ldr	r3, [pc, #184]	; (80018f0 <main+0x20c>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d1d7      	bne.n	80017ee <main+0x10a>
	  {
		  LRL_MPU6050_ReadAll(&odom);
 800183e:	4824      	ldr	r0, [pc, #144]	; (80018d0 <main+0x1ec>)
 8001840:	f000 fe14 	bl	800246c <LRL_MPU6050_ReadAll>
		  LRL_HMC5883L_ReadHeading(&odom);
 8001844:	4822      	ldr	r0, [pc, #136]	; (80018d0 <main+0x1ec>)
 8001846:	f000 fa13 	bl	8001c70 <LRL_HMC5883L_ReadHeading>
		  LRL_Encoder_ReadAngularSpeed(&odom);
 800184a:	4821      	ldr	r0, [pc, #132]	; (80018d0 <main+0x1ec>)
 800184c:	f001 f8a0 	bl	8002990 <LRL_Encoder_ReadAngularSpeed>
		  LRL_PID_Update(&pid_motor_left, odom.vel.left, motor_speed_left);
 8001850:	4b1f      	ldr	r3, [pc, #124]	; (80018d0 <main+0x1ec>)
 8001852:	f9b3 30c6 	ldrsh.w	r3, [r3, #198]	; 0xc6
 8001856:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800185a:	4619      	mov	r1, r3
 800185c:	481a      	ldr	r0, [pc, #104]	; (80018c8 <main+0x1e4>)
 800185e:	f001 fb9d 	bl	8002f9c <LRL_PID_Update>
		  LRL_PID_Update(&pid_motor_right, odom.vel.right,motor_speed_right);
 8001862:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <main+0x1ec>)
 8001864:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	; 0xc4
 8001868:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800186c:	4619      	mov	r1, r3
 800186e:	4817      	ldr	r0, [pc, #92]	; (80018cc <main+0x1e8>)
 8001870:	f001 fb94 	bl	8002f9c <LRL_PID_Update>
		  LRL_Motion_Control(diff_robot, pid_motor_left.Control_Signal,pid_motor_right.Control_Signal);
 8001874:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <main+0x1e4>)
 8001876:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 800187a:	4a14      	ldr	r2, [pc, #80]	; (80018cc <main+0x1e8>)
 800187c:	f992 2024 	ldrsb.w	r2, [r2, #36]	; 0x24
 8001880:	4e1c      	ldr	r6, [pc, #112]	; (80018f4 <main+0x210>)
 8001882:	920d      	str	r2, [sp, #52]	; 0x34
 8001884:	930c      	str	r3, [sp, #48]	; 0x30
 8001886:	466d      	mov	r5, sp
 8001888:	f106 0410 	add.w	r4, r6, #16
 800188c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800188e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001890:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001892:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001894:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001898:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800189c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80018a0:	f000 f930 	bl	8001b04 <LRL_Motion_Control>

		  LRL_txPacket(&tx_packet, &odom);
 80018a4:	490a      	ldr	r1, [pc, #40]	; (80018d0 <main+0x1ec>)
 80018a6:	4814      	ldr	r0, [pc, #80]	; (80018f8 <main+0x214>)
 80018a8:	f001 fa3a 	bl	8002d20 <LRL_txPacket>
		  pid_tim_flag = 0;
 80018ac:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <main+0x20c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]
	  if(serial_flag == 1)
 80018b2:	e79c      	b.n	80017ee <main+0x10a>
 80018b4:	20000abc 	.word	0x20000abc
 80018b8:	200009e4 	.word	0x200009e4
 80018bc:	2000099c 	.word	0x2000099c
 80018c0:	20000a74 	.word	0x20000a74
 80018c4:	20000748 	.word	0x20000748
 80018c8:	200000cc 	.word	0x200000cc
 80018cc:	20000100 	.word	0x20000100
 80018d0:	20000000 	.word	0x20000000
 80018d4:	40020c00 	.word	0x40020c00
 80018d8:	20000134 	.word	0x20000134
 80018dc:	20000830 	.word	0x20000830
 80018e0:	20000b90 	.word	0x20000b90
 80018e4:	2000079c 	.word	0x2000079c
 80018e8:	2000082d 	.word	0x2000082d
 80018ec:	20000b4c 	.word	0x20000b4c
 80018f0:	2000082c 	.word	0x2000082c
 80018f4:	0800ec48 	.word	0x0800ec48
 80018f8:	200001d4 	.word	0x200001d4

080018fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b094      	sub	sp, #80	; 0x50
 8001900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001902:	f107 0320 	add.w	r3, r7, #32
 8001906:	2230      	movs	r2, #48	; 0x30
 8001908:	2100      	movs	r1, #0
 800190a:	4618      	mov	r0, r3
 800190c:	f008 f8ee 	bl	8009aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001910:	f107 030c 	add.w	r3, r7, #12
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001920:	2300      	movs	r3, #0
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	4b28      	ldr	r3, [pc, #160]	; (80019c8 <SystemClock_Config+0xcc>)
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	4a27      	ldr	r2, [pc, #156]	; (80019c8 <SystemClock_Config+0xcc>)
 800192a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800192e:	6413      	str	r3, [r2, #64]	; 0x40
 8001930:	4b25      	ldr	r3, [pc, #148]	; (80019c8 <SystemClock_Config+0xcc>)
 8001932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800193c:	2300      	movs	r3, #0
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	4b22      	ldr	r3, [pc, #136]	; (80019cc <SystemClock_Config+0xd0>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a21      	ldr	r2, [pc, #132]	; (80019cc <SystemClock_Config+0xd0>)
 8001946:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800194a:	6013      	str	r3, [r2, #0]
 800194c:	4b1f      	ldr	r3, [pc, #124]	; (80019cc <SystemClock_Config+0xd0>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001954:	607b      	str	r3, [r7, #4]
 8001956:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001958:	2301      	movs	r3, #1
 800195a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800195c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001962:	2302      	movs	r3, #2
 8001964:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001966:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800196a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800196c:	2319      	movs	r3, #25
 800196e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001970:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001974:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001976:	2302      	movs	r3, #2
 8001978:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800197a:	2304      	movs	r3, #4
 800197c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800197e:	f107 0320 	add.w	r3, r7, #32
 8001982:	4618      	mov	r0, r3
 8001984:	f004 fe72 	bl	800666c <HAL_RCC_OscConfig>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800198e:	f000 f859 	bl	8001a44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001992:	230f      	movs	r3, #15
 8001994:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001996:	2302      	movs	r3, #2
 8001998:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800199e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80019aa:	f107 030c 	add.w	r3, r7, #12
 80019ae:	2105      	movs	r1, #5
 80019b0:	4618      	mov	r0, r3
 80019b2:	f005 f8d3 	bl	8006b5c <HAL_RCC_ClockConfig>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80019bc:	f000 f842 	bl	8001a44 <Error_Handler>
  }
}
 80019c0:	bf00      	nop
 80019c2:	3750      	adds	r7, #80	; 0x50
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40023800 	.word	0x40023800
 80019cc:	40007000 	.word	0x40007000

080019d0 <HAL_UART_RxCpltCallback>:
//	LRL_US_TMR_IC_ISR(htim, us_front);
//}

// ####################   UART Receive Callback   ####################

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]

	USART_TypeDef *inst = huart->Instance;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	60fb      	str	r3, [r7, #12]
	if(inst == USART2){
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	4a09      	ldr	r2, [pc, #36]	; (8001a08 <HAL_UART_RxCpltCallback+0x38>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d10b      	bne.n	80019fe <HAL_UART_RxCpltCallback+0x2e>
		HAL_GPIO_WritePin(BLINK_LED_PORT, BLINK_LED_PIN, GPIO_PIN_SET);
 80019e6:	2201      	movs	r2, #1
 80019e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019ec:	4807      	ldr	r0, [pc, #28]	; (8001a0c <HAL_UART_RxCpltCallback+0x3c>)
 80019ee:	f003 fce3 	bl	80053b8 <HAL_GPIO_WritePin>
		rx_packet.rx_byteReady = 1;
 80019f2:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <HAL_UART_RxCpltCallback+0x40>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	71da      	strb	r2, [r3, #7]
		serial_flag = 1;
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_UART_RxCpltCallback+0x44>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	701a      	strb	r2, [r3, #0]
//	{
//		HAL_UART_Receive_IT(&huart1,&input_speed, 1);
//		flag_tx = 1;
//	}

}
 80019fe:	bf00      	nop
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40004400 	.word	0x40004400
 8001a0c:	40020c00 	.word	0x40020c00
 8001a10:	20000134 	.word	0x20000134
 8001a14:	2000082d 	.word	0x2000082d

08001a18 <HAL_TIM_PeriodElapsedCallback>:

// ####################   Timer To Creat 0.01 Delay Callback   ####################

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a06      	ldr	r2, [pc, #24]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d102      	bne.n	8001a2e <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		pid_tim_flag = 1;
 8001a28:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	701a      	strb	r2, [r3, #0]
	}

}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	20000a74 	.word	0x20000a74
 8001a40:	2000082c 	.word	0x2000082c

08001a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a48:	b672      	cpsid	i
}
 8001a4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a4c:	e7fe      	b.n	8001a4c <Error_Handler+0x8>
	...

08001a50 <LRL_Motor_Speed>:
//	HAL_TIM_Encoder_Start(motor_left.TIM_ENC_Handle, TIM_CHANNEL_ALL);
//	HAL_TIM_Encoder_Start(motor_right.TIM_ENC_Handle, TIM_CHANNEL_ALL);
//}

void LRL_Motor_Speed(motor_cfgType motor, int8_t duty_cycle)
{
 8001a50:	b084      	sub	sp, #16
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	f107 0c10 	add.w	ip, r7, #16
 8001a5c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	bool dir;
	uint32_t motor_pwm;

	dir = (duty_cycle >> 7) & 0x01;	// if MSB is 1 -> neg
 8001a60:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8001a64:	11db      	asrs	r3, r3, #7
 8001a66:	b25b      	sxtb	r3, r3
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	bf14      	ite	ne
 8001a72:	2301      	movne	r3, #1
 8001a74:	2300      	moveq	r3, #0
 8001a76:	71fb      	strb	r3, [r7, #7]
	duty_cycle = abs(duty_cycle);
 8001a78:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	bfb8      	it	lt
 8001a80:	425b      	neglt	r3, r3
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	motor_pwm = (uint32_t) ((motor.MAX_ARR * duty_cycle) / 100);
 8001a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a8a:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 8001a8e:	fb02 f303 	mul.w	r3, r2, r3
 8001a92:	4a1b      	ldr	r2, [pc, #108]	; (8001b00 <LRL_Motor_Speed+0xb0>)
 8001a94:	fba2 2303 	umull	r2, r3, r2, r3
 8001a98:	095b      	lsrs	r3, r3, #5
 8001a9a:	603b      	str	r3, [r7, #0]

    HAL_GPIO_WritePin(motor.MOTOR_1_GPIO, motor.MOTOR_1_PIN, !dir);
 8001a9c:	6938      	ldr	r0, [r7, #16]
 8001a9e:	8ab9      	ldrh	r1, [r7, #20]
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	f083 0301 	eor.w	r3, r3, #1
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	f003 fc85 	bl	80053b8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(motor.MOTOR_2_GPIO, motor.MOTOR_2_PIN, dir);
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	8bb9      	ldrh	r1, [r7, #28]
 8001ab2:	79fa      	ldrb	r2, [r7, #7]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f003 fc7f 	bl	80053b8 <HAL_GPIO_WritePin>

    if (motor.TIM_PWM_Channel == TIM_CHANNEL_1)
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d104      	bne.n	8001aca <LRL_Motor_Speed+0x7a>
    	motor.TIM_PWM_Handle->Instance->CCR1 = motor_pwm;
 8001ac0:	6a3b      	ldr	r3, [r7, #32]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	635a      	str	r2, [r3, #52]	; 0x34
    	motor.TIM_PWM_Handle->Instance->CCR2 = motor_pwm;
    else if (motor.TIM_PWM_Channel == TIM_CHANNEL_3)
    	motor.TIM_PWM_Handle->Instance->CCR3 = motor_pwm;
    else
    	motor.TIM_PWM_Handle->Instance->CCR4 = motor_pwm;
}
 8001ac8:	e013      	b.n	8001af2 <LRL_Motor_Speed+0xa2>
    else if (motor.TIM_PWM_Channel == TIM_CHANNEL_2)
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	2b04      	cmp	r3, #4
 8001ace:	d104      	bne.n	8001ada <LRL_Motor_Speed+0x8a>
    	motor.TIM_PWM_Handle->Instance->CCR2 = motor_pwm;
 8001ad0:	6a3b      	ldr	r3, [r7, #32]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001ad8:	e00b      	b.n	8001af2 <LRL_Motor_Speed+0xa2>
    else if (motor.TIM_PWM_Channel == TIM_CHANNEL_3)
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	2b08      	cmp	r3, #8
 8001ade:	d104      	bne.n	8001aea <LRL_Motor_Speed+0x9a>
    	motor.TIM_PWM_Handle->Instance->CCR3 = motor_pwm;
 8001ae0:	6a3b      	ldr	r3, [r7, #32]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001ae8:	e003      	b.n	8001af2 <LRL_Motor_Speed+0xa2>
    	motor.TIM_PWM_Handle->Instance->CCR4 = motor_pwm;
 8001aea:	6a3b      	ldr	r3, [r7, #32]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001afc:	b004      	add	sp, #16
 8001afe:	4770      	bx	lr
 8001b00:	51eb851f 	.word	0x51eb851f

08001b04 <LRL_Motion_Control>:

void LRL_Motion_Control(diffDrive_cfgType diffRobot, int8_t duty_cycle_left, int8_t duty_cycle_right)
{
 8001b04:	b084      	sub	sp, #16
 8001b06:	b590      	push	{r4, r7, lr}
 8001b08:	b085      	sub	sp, #20
 8001b0a:	af04      	add	r7, sp, #16
 8001b0c:	f107 0410 	add.w	r4, r7, #16
 8001b10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LRL_Motor_Speed(diffRobot.MOTOR_LEFT, duty_cycle_left);
 8001b14:	f997 3050 	ldrsb.w	r3, [r7, #80]	; 0x50
 8001b18:	9303      	str	r3, [sp, #12]
 8001b1a:	466c      	mov	r4, sp
 8001b1c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b20:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001b24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001b28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b2e:	f7ff ff8f 	bl	8001a50 <LRL_Motor_Speed>
	LRL_Motor_Speed(diffRobot.MOTOR_RIGHT, duty_cycle_right);
 8001b32:	f997 3054 	ldrsb.w	r3, [r7, #84]	; 0x54
 8001b36:	9303      	str	r3, [sp, #12]
 8001b38:	466c      	mov	r4, sp
 8001b3a:	f107 0320 	add.w	r3, r7, #32
 8001b3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001b42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001b46:	f107 0310 	add.w	r3, r7, #16
 8001b4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b4c:	f7ff ff80 	bl	8001a50 <LRL_Motor_Speed>
}
 8001b50:	bf00      	nop
 8001b52:	3704      	adds	r7, #4
 8001b54:	46bd      	mov	sp, r7
 8001b56:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001b5a:	b004      	add	sp, #16
 8001b5c:	4770      	bx	lr
	...

08001b60 <LRL_HMC5883L_Init>:
// ############################################################
// ####################  HMC MAGNETOMETER  ####################
// ############################################################

void LRL_HMC5883L_Init(odom_cfgType * odom)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b088      	sub	sp, #32
 8001b64:	af04      	add	r7, sp, #16
 8001b66:	6078      	str	r0, [r7, #4]
	_LRL_MPU6050_EnableBypass(odom, 1);
 8001b68:	2101      	movs	r1, #1
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 fc90 	bl	8002490 <_LRL_MPU6050_EnableBypass>
    // write CONFIG_A register
	HAL_I2C_Master_Transmit(odom->imu.hi2c, HMC5883L_ADDRESS, (uint8_t *)HMC5883L_ADDRESS_WRITE, 1, DELAY_TIMEOUT);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6818      	ldr	r0, [r3, #0]
 8001b74:	230a      	movs	r3, #10
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	2301      	movs	r3, #1
 8001b7a:	223c      	movs	r2, #60	; 0x3c
 8001b7c:	213c      	movs	r1, #60	; 0x3c
 8001b7e:	f003 fd79 	bl	8005674 <HAL_I2C_Master_Transmit>
	_i2c_reg_data = 0x10;
 8001b82:	4b37      	ldr	r3, [pc, #220]	; (8001c60 <LRL_HMC5883L_Init+0x100>)
 8001b84:	2210      	movs	r2, #16
 8001b86:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(odom->imu.hi2c, HMC5883L_ADDRESS, HMC5883L_RA_CONFIG_A, 1, &_i2c_reg_data, 1, DELAY_TIMEOUT);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6818      	ldr	r0, [r3, #0]
 8001b8c:	230a      	movs	r3, #10
 8001b8e:	9302      	str	r3, [sp, #8]
 8001b90:	2301      	movs	r3, #1
 8001b92:	9301      	str	r3, [sp, #4]
 8001b94:	4b32      	ldr	r3, [pc, #200]	; (8001c60 <LRL_HMC5883L_Init+0x100>)
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	2301      	movs	r3, #1
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	213c      	movs	r1, #60	; 0x3c
 8001b9e:	f003 fe67 	bl	8005870 <HAL_I2C_Mem_Write>

	// write CONFIG_B register
	HAL_I2C_Master_Transmit(odom->imu.hi2c, HMC5883L_ADDRESS, (uint8_t *)HMC5883L_ADDRESS_WRITE, 1, DELAY_TIMEOUT);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6818      	ldr	r0, [r3, #0]
 8001ba6:	230a      	movs	r3, #10
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	2301      	movs	r3, #1
 8001bac:	223c      	movs	r2, #60	; 0x3c
 8001bae:	213c      	movs	r1, #60	; 0x3c
 8001bb0:	f003 fd60 	bl	8005674 <HAL_I2C_Master_Transmit>
	_i2c_reg_data = 0xE0;
 8001bb4:	4b2a      	ldr	r3, [pc, #168]	; (8001c60 <LRL_HMC5883L_Init+0x100>)
 8001bb6:	22e0      	movs	r2, #224	; 0xe0
 8001bb8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(odom->imu.hi2c, HMC5883L_ADDRESS, HMC5883L_RA_CONFIG_B, 1, &_i2c_reg_data, 1, DELAY_TIMEOUT);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6818      	ldr	r0, [r3, #0]
 8001bbe:	230a      	movs	r3, #10
 8001bc0:	9302      	str	r3, [sp, #8]
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	9301      	str	r3, [sp, #4]
 8001bc6:	4b26      	ldr	r3, [pc, #152]	; (8001c60 <LRL_HMC5883L_Init+0x100>)
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	2301      	movs	r3, #1
 8001bcc:	2201      	movs	r2, #1
 8001bce:	213c      	movs	r1, #60	; 0x3c
 8001bd0:	f003 fe4e 	bl	8005870 <HAL_I2C_Mem_Write>

	// write MODE register
	HAL_I2C_Master_Transmit(odom->imu.hi2c, HMC5883L_ADDRESS, (uint8_t *)HMC5883L_ADDRESS_WRITE, 1, DELAY_TIMEOUT);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6818      	ldr	r0, [r3, #0]
 8001bd8:	230a      	movs	r3, #10
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	2301      	movs	r3, #1
 8001bde:	223c      	movs	r2, #60	; 0x3c
 8001be0:	213c      	movs	r1, #60	; 0x3c
 8001be2:	f003 fd47 	bl	8005674 <HAL_I2C_Master_Transmit>
	HAL_I2C_Mem_Write(odom->imu.hi2c, HMC5883L_ADDRESS, HMC5883L_RA_MODE, 1, (uint8_t *)HMC5883L_MODE_SINGLE, 1, DELAY_TIMEOUT);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6818      	ldr	r0, [r3, #0]
 8001bea:	230a      	movs	r3, #10
 8001bec:	9302      	str	r3, [sp, #8]
 8001bee:	2301      	movs	r3, #1
 8001bf0:	9301      	str	r3, [sp, #4]
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	213c      	movs	r1, #60	; 0x3c
 8001bfc:	f003 fe38 	bl	8005870 <HAL_I2C_Mem_Write>

	HAL_Delay(10);
 8001c00:	200a      	movs	r0, #10
 8001c02:	f002 faeb 	bl	80041dc <HAL_Delay>

	odom->mag.offset_heading = 0;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2

	for(int i = 0; i<100; i++)
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	e012      	b.n	8001c3a <LRL_HMC5883L_Init+0xda>
	{
		LRL_HMC5883L_ReadHeading(odom);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f82b 	bl	8001c70 <LRL_HMC5883L_ReadHeading>
		_tmp_cal_mag += odom->mag.heading;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	4b10      	ldr	r3, [pc, #64]	; (8001c64 <LRL_HMC5883L_Init+0x104>)
 8001c24:	881b      	ldrh	r3, [r3, #0]
 8001c26:	4413      	add	r3, r2
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <LRL_HMC5883L_Init+0x104>)
 8001c2c:	801a      	strh	r2, [r3, #0]
		HAL_Delay(10);
 8001c2e:	200a      	movs	r0, #10
 8001c30:	f002 fad4 	bl	80041dc <HAL_Delay>
	for(int i = 0; i<100; i++)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	3301      	adds	r3, #1
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2b63      	cmp	r3, #99	; 0x63
 8001c3e:	dde9      	ble.n	8001c14 <LRL_HMC5883L_Init+0xb4>
	}

	odom->mag.offset_heading = (_tmp_cal_mag / 100);
 8001c40:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <LRL_HMC5883L_Init+0x104>)
 8001c42:	881b      	ldrh	r3, [r3, #0]
 8001c44:	4a08      	ldr	r2, [pc, #32]	; (8001c68 <LRL_HMC5883L_Init+0x108>)
 8001c46:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4a:	095b      	lsrs	r3, r3, #5
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	b21a      	sxth	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
}
 8001c56:	bf00      	nop
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	2000083a 	.word	0x2000083a
 8001c64:	2000089c 	.word	0x2000089c
 8001c68:	51eb851f 	.word	0x51eb851f
 8001c6c:	00000000 	.word	0x00000000

08001c70 <LRL_HMC5883L_ReadHeading>:

	return ((_dir)* ( declination_degs + (1/60 * declination_mins)) * (M_PI / 180));
}

void LRL_HMC5883L_ReadHeading(odom_cfgType * odom)
{
 8001c70:	b5b0      	push	{r4, r5, r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af04      	add	r7, sp, #16
 8001c76:	6078      	str	r0, [r7, #4]
	_LRL_MPU6050_EnableBypass(odom, 1);
 8001c78:	2101      	movs	r1, #1
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 fc08 	bl	8002490 <_LRL_MPU6050_EnableBypass>
	HAL_I2C_Master_Transmit(odom->imu.hi2c, HMC5883L_ADDRESS, (uint8_t *)HMC5883L_ADDRESS_READ, 1, DELAY_TIMEOUT);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6818      	ldr	r0, [r3, #0]
 8001c84:	230a      	movs	r3, #10
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	2301      	movs	r3, #1
 8001c8a:	223d      	movs	r2, #61	; 0x3d
 8001c8c:	213c      	movs	r1, #60	; 0x3c
 8001c8e:	f003 fcf1 	bl	8005674 <HAL_I2C_Master_Transmit>
	HAL_I2C_Mem_Read(odom->imu.hi2c, HMC5883L_ADDRESS, HMC5883L_RA_DATAX_H, 1, (uint8_t *)&_mag_buffer, 6, DELAY_TIMEOUT);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6818      	ldr	r0, [r3, #0]
 8001c96:	230a      	movs	r3, #10
 8001c98:	9302      	str	r3, [sp, #8]
 8001c9a:	2306      	movs	r3, #6
 8001c9c:	9301      	str	r3, [sp, #4]
 8001c9e:	4b62      	ldr	r3, [pc, #392]	; (8001e28 <LRL_HMC5883L_ReadHeading+0x1b8>)
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	2203      	movs	r2, #3
 8001ca6:	213c      	movs	r1, #60	; 0x3c
 8001ca8:	f003 fedc 	bl	8005a64 <HAL_I2C_Mem_Read>

	odom->mag.x = (int16_t)((_mag_buffer[0] << 8) | _mag_buffer[1]);
 8001cac:	4b5e      	ldr	r3, [pc, #376]	; (8001e28 <LRL_HMC5883L_ReadHeading+0x1b8>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	021b      	lsls	r3, r3, #8
 8001cb2:	b21a      	sxth	r2, r3
 8001cb4:	4b5c      	ldr	r3, [pc, #368]	; (8001e28 <LRL_HMC5883L_ReadHeading+0x1b8>)
 8001cb6:	785b      	ldrb	r3, [r3, #1]
 8001cb8:	b21b      	sxth	r3, r3
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	b21b      	sxth	r3, r3
 8001cbe:	ee07 3a90 	vmov	s15, r3
 8001cc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
	odom->mag.y = (int16_t)((_mag_buffer[4] << 8) | _mag_buffer[5]);
 8001ccc:	4b56      	ldr	r3, [pc, #344]	; (8001e28 <LRL_HMC5883L_ReadHeading+0x1b8>)
 8001cce:	791b      	ldrb	r3, [r3, #4]
 8001cd0:	021b      	lsls	r3, r3, #8
 8001cd2:	b21a      	sxth	r2, r3
 8001cd4:	4b54      	ldr	r3, [pc, #336]	; (8001e28 <LRL_HMC5883L_ReadHeading+0x1b8>)
 8001cd6:	795b      	ldrb	r3, [r3, #5]
 8001cd8:	b21b      	sxth	r3, r3
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	b21b      	sxth	r3, r3
 8001cde:	ee07 3a90 	vmov	s15, r3
 8001ce2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8
	odom->mag.z = (int16_t)((_mag_buffer[2] << 8) | _mag_buffer[3]);
 8001cec:	4b4e      	ldr	r3, [pc, #312]	; (8001e28 <LRL_HMC5883L_ReadHeading+0x1b8>)
 8001cee:	789b      	ldrb	r3, [r3, #2]
 8001cf0:	021b      	lsls	r3, r3, #8
 8001cf2:	b21a      	sxth	r2, r3
 8001cf4:	4b4c      	ldr	r3, [pc, #304]	; (8001e28 <LRL_HMC5883L_ReadHeading+0x1b8>)
 8001cf6:	78db      	ldrb	r3, [r3, #3]
 8001cf8:	b21b      	sxth	r3, r3
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	b21b      	sxth	r3, r3
 8001cfe:	ee07 3a90 	vmov	s15, r3
 8001d02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc

	// Evaluate Heading and Correcting Declination (IRAN Coordinates)
	_mag_heading_temp = atan2(odom->mag.x, odom->mag.y) + MAGNETIC_DECLINATION;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe fc18 	bl	8000548 <__aeabi_f2d>
 8001d18:	4604      	mov	r4, r0
 8001d1a:	460d      	mov	r5, r1
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7fe fc10 	bl	8000548 <__aeabi_f2d>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	ec43 2b11 	vmov	d1, r2, r3
 8001d30:	ec45 4b10 	vmov	d0, r4, r5
 8001d34:	f00c fb54 	bl	800e3e0 <atan2>
 8001d38:	ec51 0b10 	vmov	r0, r1, d0
 8001d3c:	a336      	add	r3, pc, #216	; (adr r3, 8001e18 <LRL_HMC5883L_ReadHeading+0x1a8>)
 8001d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d42:	f7fe faa3 	bl	800028c <__adddf3>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f7fe ff4b 	bl	8000be8 <__aeabi_d2f>
 8001d52:	4603      	mov	r3, r0
 8001d54:	4a35      	ldr	r2, [pc, #212]	; (8001e2c <LRL_HMC5883L_ReadHeading+0x1bc>)
 8001d56:	6013      	str	r3, [r2, #0]

    // Convert radians to degrees for readability.
    odom->mag.heading = _mag_heading_temp * 180/M_PI;
 8001d58:	4b34      	ldr	r3, [pc, #208]	; (8001e2c <LRL_HMC5883L_ReadHeading+0x1bc>)
 8001d5a:	edd3 7a00 	vldr	s15, [r3]
 8001d5e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001e30 <LRL_HMC5883L_ReadHeading+0x1c0>
 8001d62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d66:	ee17 0a90 	vmov	r0, s15
 8001d6a:	f7fe fbed 	bl	8000548 <__aeabi_f2d>
 8001d6e:	a32c      	add	r3, pc, #176	; (adr r3, 8001e20 <LRL_HMC5883L_ReadHeading+0x1b0>)
 8001d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d74:	f7fe fd6a 	bl	800084c <__aeabi_ddiv>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	4619      	mov	r1, r3
 8001d80:	f7fe feea 	bl	8000b58 <__aeabi_d2iz>
 8001d84:	4603      	mov	r3, r0
 8001d86:	b21a      	sxth	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0

	// Correct for when signs are reversed.
    if(odom->mag.heading < 0)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	da0a      	bge.n	8001dae <LRL_HMC5883L_ReadHeading+0x13e>
    	odom->mag.heading += 360;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	b21a      	sxth	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0

    // Check for wrap due to addition of declination.
    if(odom->mag.heading > 360)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 8001db4:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001db8:	dd0a      	ble.n	8001dd0 <LRL_HMC5883L_ReadHeading+0x160>
    	odom->mag.heading -= 360;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	b21a      	sxth	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0

    // Evaluate the effect of calibration offset
    odom->mag.heading -= odom->mag.offset_heading;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	; 0xc2
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	b21a      	sxth	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    if(odom->mag.heading < 0)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	da0a      	bge.n	8001e0c <LRL_HMC5883L_ReadHeading+0x19c>
    	odom->mag.heading += 360;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	b21a      	sxth	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
}
 8001e0c:	bf00      	nop
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bdb0      	pop	{r4, r5, r7, pc}
 8001e14:	f3af 8000 	nop.w
 8001e18:	bac710cb 	.word	0xbac710cb
 8001e1c:	3fb68db8 	.word	0x3fb68db8
 8001e20:	54442d18 	.word	0x54442d18
 8001e24:	400921fb 	.word	0x400921fb
 8001e28:	2000083c 	.word	0x2000083c
 8001e2c:	20000844 	.word	0x20000844
 8001e30:	43340000 	.word	0x43340000

08001e34 <LRL_MPU6050_Init>:
// #######################################################
// ####################  IMU MPU6050  ####################
// #######################################################

void LRL_MPU6050_Init(odom_cfgType * odom)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b088      	sub	sp, #32
 8001e38:	af04      	add	r7, sp, #16
 8001e3a:	6078      	str	r0, [r7, #4]
	_LRL_MPU6050_EnableBypass(odom, 0);
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 fb26 	bl	8002490 <_LRL_MPU6050_EnableBypass>
    HAL_I2C_Mem_Read(odom->imu.hi2c, MPU_ADDR, WHO_AM_I, 1, &_imu_addr_check, 1, DELAY_TIMEOUT);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6818      	ldr	r0, [r3, #0]
 8001e48:	230a      	movs	r3, #10
 8001e4a:	9302      	str	r3, [sp, #8]
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	9301      	str	r3, [sp, #4]
 8001e50:	4b94      	ldr	r3, [pc, #592]	; (80020a4 <LRL_MPU6050_Init+0x270>)
 8001e52:	9300      	str	r3, [sp, #0]
 8001e54:	2301      	movs	r3, #1
 8001e56:	2275      	movs	r2, #117	; 0x75
 8001e58:	21d0      	movs	r1, #208	; 0xd0
 8001e5a:	f003 fe03 	bl	8005a64 <HAL_I2C_Mem_Read>

    if (_imu_addr_check == 0x68) // 0x68 will be returned by the sensor if everything goes well
 8001e5e:	4b91      	ldr	r3, [pc, #580]	; (80020a4 <LRL_MPU6050_Init+0x270>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b68      	cmp	r3, #104	; 0x68
 8001e64:	d13f      	bne.n	8001ee6 <LRL_MPU6050_Init+0xb2>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        _i2c_reg_data = 0x00;
 8001e66:	4b90      	ldr	r3, [pc, #576]	; (80020a8 <LRL_MPU6050_Init+0x274>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(odom->imu.hi2c, MPU_ADDR, PWR_MGMT_1, 1, &_i2c_reg_data, 1, DELAY_TIMEOUT);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6818      	ldr	r0, [r3, #0]
 8001e70:	230a      	movs	r3, #10
 8001e72:	9302      	str	r3, [sp, #8]
 8001e74:	2301      	movs	r3, #1
 8001e76:	9301      	str	r3, [sp, #4]
 8001e78:	4b8b      	ldr	r3, [pc, #556]	; (80020a8 <LRL_MPU6050_Init+0x274>)
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	226b      	movs	r2, #107	; 0x6b
 8001e80:	21d0      	movs	r1, #208	; 0xd0
 8001e82:	f003 fcf5 	bl	8005870 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        _i2c_reg_data = 0x07;
 8001e86:	4b88      	ldr	r3, [pc, #544]	; (80020a8 <LRL_MPU6050_Init+0x274>)
 8001e88:	2207      	movs	r2, #7
 8001e8a:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(odom->imu.hi2c, MPU_ADDR, SMPLRT_DIV, 1, &_i2c_reg_data, 1, DELAY_TIMEOUT);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6818      	ldr	r0, [r3, #0]
 8001e90:	230a      	movs	r3, #10
 8001e92:	9302      	str	r3, [sp, #8]
 8001e94:	2301      	movs	r3, #1
 8001e96:	9301      	str	r3, [sp, #4]
 8001e98:	4b83      	ldr	r3, [pc, #524]	; (80020a8 <LRL_MPU6050_Init+0x274>)
 8001e9a:	9300      	str	r3, [sp, #0]
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	2219      	movs	r2, #25
 8001ea0:	21d0      	movs	r1, #208	; 0xd0
 8001ea2:	f003 fce5 	bl	8005870 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        _i2c_reg_data = 0x00;
 8001ea6:	4b80      	ldr	r3, [pc, #512]	; (80020a8 <LRL_MPU6050_Init+0x274>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(odom->imu.hi2c, MPU_ADDR, ACCEL_CONFIG, 1, &_i2c_reg_data, 1, DELAY_TIMEOUT);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6818      	ldr	r0, [r3, #0]
 8001eb0:	230a      	movs	r3, #10
 8001eb2:	9302      	str	r3, [sp, #8]
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	9301      	str	r3, [sp, #4]
 8001eb8:	4b7b      	ldr	r3, [pc, #492]	; (80020a8 <LRL_MPU6050_Init+0x274>)
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	221c      	movs	r2, #28
 8001ec0:	21d0      	movs	r1, #208	; 0xd0
 8001ec2:	f003 fcd5 	bl	8005870 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 ->  250 �/s
        _i2c_reg_data = 0x00;
 8001ec6:	4b78      	ldr	r3, [pc, #480]	; (80020a8 <LRL_MPU6050_Init+0x274>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Mem_Write(odom->imu.hi2c, MPU_ADDR, GYRO_CONFIG, 1, &_i2c_reg_data, 1, DELAY_TIMEOUT);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6818      	ldr	r0, [r3, #0]
 8001ed0:	230a      	movs	r3, #10
 8001ed2:	9302      	str	r3, [sp, #8]
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	4b73      	ldr	r3, [pc, #460]	; (80020a8 <LRL_MPU6050_Init+0x274>)
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	2301      	movs	r3, #1
 8001ede:	221b      	movs	r2, #27
 8001ee0:	21d0      	movs	r1, #208	; 0xd0
 8001ee2:	f003 fcc5 	bl	8005870 <HAL_I2C_Mem_Write>
    }

    odom->imu.offset_gyro_x = 0;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	809a      	strh	r2, [r3, #4]
    odom->imu.offset_gyro_y = 0;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	80da      	strh	r2, [r3, #6]
    odom->imu.offset_gyro_z = 0;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	811a      	strh	r2, [r3, #8]

    odom->imu.offset_accel_x = 0;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	815a      	strh	r2, [r3, #10]
    odom->imu.offset_accel_y = 0;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	819a      	strh	r2, [r3, #12]
    odom->imu.offset_accel_z = 0;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	81da      	strh	r2, [r3, #14]

    for(int i = 0; i<500; i++)
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	e062      	b.n	8001fd6 <LRL_MPU6050_Init+0x1a2>
    {
    	LRL_MPU6050_ReadAll(odom);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 faab 	bl	800246c <LRL_MPU6050_ReadAll>
    	_tmp_cal_gy_x += odom->gyro.x;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f9b3 30a6 	ldrsh.w	r3, [r3, #166]	; 0xa6
 8001f1c:	ee07 3a90 	vmov	s15, r3
 8001f20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f24:	4b61      	ldr	r3, [pc, #388]	; (80020ac <LRL_MPU6050_Init+0x278>)
 8001f26:	edd3 7a00 	vldr	s15, [r3]
 8001f2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f2e:	4b5f      	ldr	r3, [pc, #380]	; (80020ac <LRL_MPU6050_Init+0x278>)
 8001f30:	edc3 7a00 	vstr	s15, [r3]
    	_tmp_cal_gy_y += odom->gyro.y;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f9b3 30a8 	ldrsh.w	r3, [r3, #168]	; 0xa8
 8001f3a:	ee07 3a90 	vmov	s15, r3
 8001f3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f42:	4b5b      	ldr	r3, [pc, #364]	; (80020b0 <LRL_MPU6050_Init+0x27c>)
 8001f44:	edd3 7a00 	vldr	s15, [r3]
 8001f48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f4c:	4b58      	ldr	r3, [pc, #352]	; (80020b0 <LRL_MPU6050_Init+0x27c>)
 8001f4e:	edc3 7a00 	vstr	s15, [r3]
    	_tmp_cal_gy_z += odom->gyro.z;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f9b3 30aa 	ldrsh.w	r3, [r3, #170]	; 0xaa
 8001f58:	ee07 3a90 	vmov	s15, r3
 8001f5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f60:	4b54      	ldr	r3, [pc, #336]	; (80020b4 <LRL_MPU6050_Init+0x280>)
 8001f62:	edd3 7a00 	vldr	s15, [r3]
 8001f66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f6a:	4b52      	ldr	r3, [pc, #328]	; (80020b4 <LRL_MPU6050_Init+0x280>)
 8001f6c:	edc3 7a00 	vstr	s15, [r3]

    	_tmp_cal_ac_x += odom->accel.x;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 8001f76:	ee07 3a90 	vmov	s15, r3
 8001f7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f7e:	4b4e      	ldr	r3, [pc, #312]	; (80020b8 <LRL_MPU6050_Init+0x284>)
 8001f80:	edd3 7a00 	vldr	s15, [r3]
 8001f84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f88:	4b4b      	ldr	r3, [pc, #300]	; (80020b8 <LRL_MPU6050_Init+0x284>)
 8001f8a:	edc3 7a00 	vstr	s15, [r3]
    	_tmp_cal_ac_y += odom->accel.y;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
 8001f94:	ee07 3a90 	vmov	s15, r3
 8001f98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f9c:	4b47      	ldr	r3, [pc, #284]	; (80020bc <LRL_MPU6050_Init+0x288>)
 8001f9e:	edd3 7a00 	vldr	s15, [r3]
 8001fa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fa6:	4b45      	ldr	r3, [pc, #276]	; (80020bc <LRL_MPU6050_Init+0x288>)
 8001fa8:	edc3 7a00 	vstr	s15, [r3]
    	_tmp_cal_ac_z += odom->accel.z;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	; 0x9e
 8001fb2:	ee07 3a90 	vmov	s15, r3
 8001fb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fba:	4b41      	ldr	r3, [pc, #260]	; (80020c0 <LRL_MPU6050_Init+0x28c>)
 8001fbc:	edd3 7a00 	vldr	s15, [r3]
 8001fc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fc4:	4b3e      	ldr	r3, [pc, #248]	; (80020c0 <LRL_MPU6050_Init+0x28c>)
 8001fc6:	edc3 7a00 	vstr	s15, [r3]

    	HAL_Delay(5);
 8001fca:	2005      	movs	r0, #5
 8001fcc:	f002 f906 	bl	80041dc <HAL_Delay>
    for(int i = 0; i<500; i++)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001fdc:	db98      	blt.n	8001f10 <LRL_MPU6050_Init+0xdc>
    }

    odom->imu.offset_accel_x = (_tmp_cal_ac_x/500);
 8001fde:	4b36      	ldr	r3, [pc, #216]	; (80020b8 <LRL_MPU6050_Init+0x284>)
 8001fe0:	ed93 7a00 	vldr	s14, [r3]
 8001fe4:	eddf 6a37 	vldr	s13, [pc, #220]	; 80020c4 <LRL_MPU6050_Init+0x290>
 8001fe8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ff0:	ee17 3a90 	vmov	r3, s15
 8001ff4:	b21a      	sxth	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	815a      	strh	r2, [r3, #10]
    odom->imu.offset_accel_y = (_tmp_cal_ac_y/500);
 8001ffa:	4b30      	ldr	r3, [pc, #192]	; (80020bc <LRL_MPU6050_Init+0x288>)
 8001ffc:	ed93 7a00 	vldr	s14, [r3]
 8002000:	eddf 6a30 	vldr	s13, [pc, #192]	; 80020c4 <LRL_MPU6050_Init+0x290>
 8002004:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002008:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800200c:	ee17 3a90 	vmov	r3, s15
 8002010:	b21a      	sxth	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	819a      	strh	r2, [r3, #12]
    odom->imu.offset_accel_z = (_tmp_cal_ac_z/500);
 8002016:	4b2a      	ldr	r3, [pc, #168]	; (80020c0 <LRL_MPU6050_Init+0x28c>)
 8002018:	ed93 7a00 	vldr	s14, [r3]
 800201c:	eddf 6a29 	vldr	s13, [pc, #164]	; 80020c4 <LRL_MPU6050_Init+0x290>
 8002020:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002024:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002028:	ee17 3a90 	vmov	r3, s15
 800202c:	b21a      	sxth	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	81da      	strh	r2, [r3, #14]

    odom->imu.offset_gyro_x = (_tmp_cal_gy_x/500);
 8002032:	4b1e      	ldr	r3, [pc, #120]	; (80020ac <LRL_MPU6050_Init+0x278>)
 8002034:	ed93 7a00 	vldr	s14, [r3]
 8002038:	eddf 6a22 	vldr	s13, [pc, #136]	; 80020c4 <LRL_MPU6050_Init+0x290>
 800203c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002040:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002044:	ee17 3a90 	vmov	r3, s15
 8002048:	b21a      	sxth	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	809a      	strh	r2, [r3, #4]
    odom->imu.offset_gyro_y = (_tmp_cal_gy_y/500);
 800204e:	4b18      	ldr	r3, [pc, #96]	; (80020b0 <LRL_MPU6050_Init+0x27c>)
 8002050:	ed93 7a00 	vldr	s14, [r3]
 8002054:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80020c4 <LRL_MPU6050_Init+0x290>
 8002058:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800205c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002060:	ee17 3a90 	vmov	r3, s15
 8002064:	b21a      	sxth	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	80da      	strh	r2, [r3, #6]
    odom->imu.offset_gyro_z = (_tmp_cal_gy_z/500);
 800206a:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <LRL_MPU6050_Init+0x280>)
 800206c:	ed93 7a00 	vldr	s14, [r3]
 8002070:	eddf 6a14 	vldr	s13, [pc, #80]	; 80020c4 <LRL_MPU6050_Init+0x290>
 8002074:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002078:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800207c:	ee17 3a90 	vmov	r3, s15
 8002080:	b21a      	sxth	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	811a      	strh	r2, [r3, #8]

///* run this if you want to calibrate complementary filter
	odom->imu.offset_calibration_x = 0;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f04f 0200 	mov.w	r2, #0
 800208c:	611a      	str	r2, [r3, #16]
    odom->imu.offset_calibration_y = 0;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f04f 0200 	mov.w	r2, #0
 8002094:	615a      	str	r2, [r3, #20]
    odom->imu.offset_calibration_z = 0;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f04f 0200 	mov.w	r2, #0
 800209c:	619a      	str	r2, [r3, #24]

    for(int i = 0; i<500 ; i++)
 800209e:	2300      	movs	r3, #0
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	e04e      	b.n	8002142 <LRL_MPU6050_Init+0x30e>
 80020a4:	20000848 	.word	0x20000848
 80020a8:	2000083a 	.word	0x2000083a
 80020ac:	20000884 	.word	0x20000884
 80020b0:	20000888 	.word	0x20000888
 80020b4:	2000088c 	.word	0x2000088c
 80020b8:	20000890 	.word	0x20000890
 80020bc:	20000894 	.word	0x20000894
 80020c0:	20000898 	.word	0x20000898
 80020c4:	43fa0000 	.word	0x43fa0000
 80020c8:	3c23d70a 	.word	0x3c23d70a
    {
    	LRL_MPU6050_ReadAll(odom);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 f9cd 	bl	800246c <LRL_MPU6050_ReadAll>
    	LRL_MPU6050_ComplementaryFilter(odom,0.01);
 80020d2:	ed1f 0a03 	vldr	s0, [pc, #-12]	; 80020c8 <LRL_MPU6050_Init+0x294>
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 fa1a 	bl	8002510 <LRL_MPU6050_ComplementaryFilter>

    	_tmp_cal_cf_x += odom->angle.x;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 80020e2:	ee07 3a90 	vmov	s15, r3
 80020e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020ea:	4b35      	ldr	r3, [pc, #212]	; (80021c0 <LRL_MPU6050_Init+0x38c>)
 80020ec:	edd3 7a00 	vldr	s15, [r3]
 80020f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020f4:	4b32      	ldr	r3, [pc, #200]	; (80021c0 <LRL_MPU6050_Init+0x38c>)
 80020f6:	edc3 7a00 	vstr	s15, [r3]
    	_tmp_cal_cf_y += odom->angle.y;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 8002100:	ee07 3a90 	vmov	s15, r3
 8002104:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002108:	4b2e      	ldr	r3, [pc, #184]	; (80021c4 <LRL_MPU6050_Init+0x390>)
 800210a:	edd3 7a00 	vldr	s15, [r3]
 800210e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002112:	4b2c      	ldr	r3, [pc, #176]	; (80021c4 <LRL_MPU6050_Init+0x390>)
 8002114:	edc3 7a00 	vstr	s15, [r3]
    	_tmp_cal_cf_z += odom->angle.z;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
 800211e:	ee07 3a90 	vmov	s15, r3
 8002122:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002126:	4b28      	ldr	r3, [pc, #160]	; (80021c8 <LRL_MPU6050_Init+0x394>)
 8002128:	edd3 7a00 	vldr	s15, [r3]
 800212c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002130:	4b25      	ldr	r3, [pc, #148]	; (80021c8 <LRL_MPU6050_Init+0x394>)
 8002132:	edc3 7a00 	vstr	s15, [r3]

    	HAL_Delay(10);
 8002136:	200a      	movs	r0, #10
 8002138:	f002 f850 	bl	80041dc <HAL_Delay>
    for(int i = 0; i<500 ; i++)
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	3301      	adds	r3, #1
 8002140:	60bb      	str	r3, [r7, #8]
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002148:	dbc0      	blt.n	80020cc <LRL_MPU6050_Init+0x298>
    }

	odom->imu.offset_calibration_x = (_tmp_cal_cf_x/500);
 800214a:	4b1d      	ldr	r3, [pc, #116]	; (80021c0 <LRL_MPU6050_Init+0x38c>)
 800214c:	ed93 7a00 	vldr	s14, [r3]
 8002150:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80021cc <LRL_MPU6050_Init+0x398>
 8002154:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	edc3 7a04 	vstr	s15, [r3, #16]
    odom->imu.offset_calibration_y = (_tmp_cal_cf_y/500);
 800215e:	4b19      	ldr	r3, [pc, #100]	; (80021c4 <LRL_MPU6050_Init+0x390>)
 8002160:	ed93 7a00 	vldr	s14, [r3]
 8002164:	eddf 6a19 	vldr	s13, [pc, #100]	; 80021cc <LRL_MPU6050_Init+0x398>
 8002168:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	edc3 7a05 	vstr	s15, [r3, #20]
    odom->imu.offset_calibration_z = (_tmp_cal_cf_z/500);
 8002172:	4b15      	ldr	r3, [pc, #84]	; (80021c8 <LRL_MPU6050_Init+0x394>)
 8002174:	ed93 7a00 	vldr	s14, [r3]
 8002178:	eddf 6a14 	vldr	s13, [pc, #80]	; 80021cc <LRL_MPU6050_Init+0x398>
 800217c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	edc3 7a06 	vstr	s15, [r3, #24]

    prev_acc_x = 0;
 8002186:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <LRL_MPU6050_Init+0x39c>)
 8002188:	f04f 0200 	mov.w	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
    prev_acc_y = 0;
 800218e:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <LRL_MPU6050_Init+0x3a0>)
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
    prev_acc_z = 0;
 8002196:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <LRL_MPU6050_Init+0x3a4>)
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
    prev_gyr_x = 0;
 800219e:	4b0f      	ldr	r3, [pc, #60]	; (80021dc <LRL_MPU6050_Init+0x3a8>)
 80021a0:	f04f 0200 	mov.w	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
    prev_gyr_y = 0;
 80021a6:	4b0e      	ldr	r3, [pc, #56]	; (80021e0 <LRL_MPU6050_Init+0x3ac>)
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
    prev_gyr_z = 0;
 80021ae:	4b0d      	ldr	r3, [pc, #52]	; (80021e4 <LRL_MPU6050_Init+0x3b0>)
 80021b0:	f04f 0200 	mov.w	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
}
 80021b6:	bf00      	nop
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20000878 	.word	0x20000878
 80021c4:	2000087c 	.word	0x2000087c
 80021c8:	20000880 	.word	0x20000880
 80021cc:	43fa0000 	.word	0x43fa0000
 80021d0:	2000086c 	.word	0x2000086c
 80021d4:	20000870 	.word	0x20000870
 80021d8:	20000874 	.word	0x20000874
 80021dc:	20000860 	.word	0x20000860
 80021e0:	20000864 	.word	0x20000864
 80021e4:	20000868 	.word	0x20000868

080021e8 <LRL_MPU6050_ReadAccel>:

void LRL_MPU6050_ReadAccel(odom_cfgType * odom)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af04      	add	r7, sp, #16
 80021ee:	6078      	str	r0, [r7, #4]
	_LRL_MPU6050_EnableBypass(odom, 0);
 80021f0:	2100      	movs	r1, #0
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f94c 	bl	8002490 <_LRL_MPU6050_EnableBypass>
    // Read 6 BYTES of data starting from ACCEL_XOUT_H register
    HAL_I2C_Mem_Read(odom->imu.hi2c, MPU_ADDR, ACCEL_XOUT_H, 1, (uint8_t *)&_imu_buffer, 6, DELAY_TIMEOUT);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6818      	ldr	r0, [r3, #0]
 80021fc:	230a      	movs	r3, #10
 80021fe:	9302      	str	r3, [sp, #8]
 8002200:	2306      	movs	r3, #6
 8002202:	9301      	str	r3, [sp, #4]
 8002204:	4b3e      	ldr	r3, [pc, #248]	; (8002300 <LRL_MPU6050_ReadAccel+0x118>)
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	2301      	movs	r3, #1
 800220a:	223b      	movs	r2, #59	; 0x3b
 800220c:	21d0      	movs	r1, #208	; 0xd0
 800220e:	f003 fc29 	bl	8005a64 <HAL_I2C_Mem_Read>

    odom->accel.x = (int16_t)(_imu_buffer[0] << 8 | _imu_buffer[1]);
 8002212:	4b3b      	ldr	r3, [pc, #236]	; (8002300 <LRL_MPU6050_ReadAccel+0x118>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	021b      	lsls	r3, r3, #8
 8002218:	b21a      	sxth	r2, r3
 800221a:	4b39      	ldr	r3, [pc, #228]	; (8002300 <LRL_MPU6050_ReadAccel+0x118>)
 800221c:	785b      	ldrb	r3, [r3, #1]
 800221e:	b21b      	sxth	r3, r3
 8002220:	4313      	orrs	r3, r2
 8002222:	b21a      	sxth	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    odom->accel.y = (int16_t)(_imu_buffer[2] << 8 | _imu_buffer[3]);
 800222a:	4b35      	ldr	r3, [pc, #212]	; (8002300 <LRL_MPU6050_ReadAccel+0x118>)
 800222c:	789b      	ldrb	r3, [r3, #2]
 800222e:	021b      	lsls	r3, r3, #8
 8002230:	b21a      	sxth	r2, r3
 8002232:	4b33      	ldr	r3, [pc, #204]	; (8002300 <LRL_MPU6050_ReadAccel+0x118>)
 8002234:	78db      	ldrb	r3, [r3, #3]
 8002236:	b21b      	sxth	r3, r3
 8002238:	4313      	orrs	r3, r2
 800223a:	b21a      	sxth	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    odom->accel.z = (int16_t)(_imu_buffer[4] << 8 | _imu_buffer[5]);
 8002242:	4b2f      	ldr	r3, [pc, #188]	; (8002300 <LRL_MPU6050_ReadAccel+0x118>)
 8002244:	791b      	ldrb	r3, [r3, #4]
 8002246:	021b      	lsls	r3, r3, #8
 8002248:	b21a      	sxth	r2, r3
 800224a:	4b2d      	ldr	r3, [pc, #180]	; (8002300 <LRL_MPU6050_ReadAccel+0x118>)
 800224c:	795b      	ldrb	r3, [r3, #5]
 800224e:	b21b      	sxth	r3, r3
 8002250:	4313      	orrs	r3, r2
 8002252:	b21a      	sxth	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
     * we have to divide according to the Full scale value set in FS_SEL
     * I have configured FS_SEL = 0. So I am dividing by 16384.0
     * for more details check ACCEL_CONFIG Register
    ****/

    odom->accel.x /= (ACCEL_X_CORRECTOR / FLOAT_SCALING);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 8002260:	2b00      	cmp	r3, #0
 8002262:	da00      	bge.n	8002266 <LRL_MPU6050_ReadAccel+0x7e>
 8002264:	330f      	adds	r3, #15
 8002266:	111b      	asrs	r3, r3, #4
 8002268:	b21a      	sxth	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    odom->accel.y /= (ACCEL_Y_CORRECTOR / FLOAT_SCALING);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
 8002276:	2b00      	cmp	r3, #0
 8002278:	da00      	bge.n	800227c <LRL_MPU6050_ReadAccel+0x94>
 800227a:	330f      	adds	r3, #15
 800227c:	111b      	asrs	r3, r3, #4
 800227e:	b21a      	sxth	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    odom->accel.z /= (ACCEL_Z_CORRECTOR / FLOAT_SCALING);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	; 0x9e
 800228c:	4a1d      	ldr	r2, [pc, #116]	; (8002304 <LRL_MPU6050_ReadAccel+0x11c>)
 800228e:	fb82 1203 	smull	r1, r2, r2, r3
 8002292:	441a      	add	r2, r3
 8002294:	10d2      	asrs	r2, r2, #3
 8002296:	17db      	asrs	r3, r3, #31
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	b21a      	sxth	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e

    odom->accel.x_calibrated = odom->accel.x - odom->imu.offset_accel_x;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	b21a      	sxth	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    odom->accel.y_calibrated = odom->accel.y - odom->imu.offset_accel_y;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	b21a      	sxth	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
    odom->accel.z_calibrated = odom->accel.z - odom->imu.offset_accel_z;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	; 0x9e
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	b21a      	sxth	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	2000084c 	.word	0x2000084c
 8002304:	92492493 	.word	0x92492493

08002308 <LRL_MPU6050_ReadGyro>:

void LRL_MPU6050_ReadGyro(odom_cfgType *odom)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af04      	add	r7, sp, #16
 800230e:	6078      	str	r0, [r7, #4]
	_LRL_MPU6050_EnableBypass(odom, 0);
 8002310:	2100      	movs	r1, #0
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f8bc 	bl	8002490 <_LRL_MPU6050_EnableBypass>
	HAL_I2C_Mem_Read(odom->imu.hi2c, MPU_ADDR, GYRO_XOUT_H, 1, (uint8_t *)_imu_buffer, 6, DELAY_TIMEOUT);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6818      	ldr	r0, [r3, #0]
 800231c:	230a      	movs	r3, #10
 800231e:	9302      	str	r3, [sp, #8]
 8002320:	2306      	movs	r3, #6
 8002322:	9301      	str	r3, [sp, #4]
 8002324:	4b50      	ldr	r3, [pc, #320]	; (8002468 <LRL_MPU6050_ReadGyro+0x160>)
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	2301      	movs	r3, #1
 800232a:	2243      	movs	r2, #67	; 0x43
 800232c:	21d0      	movs	r1, #208	; 0xd0
 800232e:	f003 fb99 	bl	8005a64 <HAL_I2C_Mem_Read>

	odom->gyro.x = (int16_t)(_imu_buffer[0] << 8 | _imu_buffer[1]);
 8002332:	4b4d      	ldr	r3, [pc, #308]	; (8002468 <LRL_MPU6050_ReadGyro+0x160>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	021b      	lsls	r3, r3, #8
 8002338:	b21a      	sxth	r2, r3
 800233a:	4b4b      	ldr	r3, [pc, #300]	; (8002468 <LRL_MPU6050_ReadGyro+0x160>)
 800233c:	785b      	ldrb	r3, [r3, #1]
 800233e:	b21b      	sxth	r3, r3
 8002340:	4313      	orrs	r3, r2
 8002342:	b21a      	sxth	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	odom->gyro.y = (int16_t)(_imu_buffer[2] << 8 | _imu_buffer[3]);
 800234a:	4b47      	ldr	r3, [pc, #284]	; (8002468 <LRL_MPU6050_ReadGyro+0x160>)
 800234c:	789b      	ldrb	r3, [r3, #2]
 800234e:	021b      	lsls	r3, r3, #8
 8002350:	b21a      	sxth	r2, r3
 8002352:	4b45      	ldr	r3, [pc, #276]	; (8002468 <LRL_MPU6050_ReadGyro+0x160>)
 8002354:	78db      	ldrb	r3, [r3, #3]
 8002356:	b21b      	sxth	r3, r3
 8002358:	4313      	orrs	r3, r2
 800235a:	b21a      	sxth	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	odom->gyro.z = (int16_t)(_imu_buffer[4] << 8 | _imu_buffer[5]);
 8002362:	4b41      	ldr	r3, [pc, #260]	; (8002468 <LRL_MPU6050_ReadGyro+0x160>)
 8002364:	791b      	ldrb	r3, [r3, #4]
 8002366:	021b      	lsls	r3, r3, #8
 8002368:	b21a      	sxth	r2, r3
 800236a:	4b3f      	ldr	r3, [pc, #252]	; (8002468 <LRL_MPU6050_ReadGyro+0x160>)
 800236c:	795b      	ldrb	r3, [r3, #5]
 800236e:	b21b      	sxth	r3, r3
 8002370:	4313      	orrs	r3, r2
 8002372:	b21a      	sxth	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa

	odom->gyro.x /= (GYRO_CORRECTOR / FLOAT_SCALING);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f9b3 30a6 	ldrsh.w	r3, [r3, #166]	; 0xa6
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe f8cf 	bl	8000524 <__aeabi_i2d>
 8002386:	a336      	add	r3, pc, #216	; (adr r3, 8002460 <LRL_MPU6050_ReadGyro+0x158>)
 8002388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238c:	f7fe fa5e 	bl	800084c <__aeabi_ddiv>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	4610      	mov	r0, r2
 8002396:	4619      	mov	r1, r3
 8002398:	f7fe fbde 	bl	8000b58 <__aeabi_d2iz>
 800239c:	4603      	mov	r3, r0
 800239e:	b21a      	sxth	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	odom->gyro.y /= (GYRO_CORRECTOR / FLOAT_SCALING);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f9b3 30a8 	ldrsh.w	r3, [r3, #168]	; 0xa8
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fe f8b9 	bl	8000524 <__aeabi_i2d>
 80023b2:	a32b      	add	r3, pc, #172	; (adr r3, 8002460 <LRL_MPU6050_ReadGyro+0x158>)
 80023b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b8:	f7fe fa48 	bl	800084c <__aeabi_ddiv>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	4610      	mov	r0, r2
 80023c2:	4619      	mov	r1, r3
 80023c4:	f7fe fbc8 	bl	8000b58 <__aeabi_d2iz>
 80023c8:	4603      	mov	r3, r0
 80023ca:	b21a      	sxth	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	odom->gyro.z /= (GYRO_CORRECTOR / FLOAT_SCALING);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f9b3 30aa 	ldrsh.w	r3, [r3, #170]	; 0xaa
 80023d8:	4618      	mov	r0, r3
 80023da:	f7fe f8a3 	bl	8000524 <__aeabi_i2d>
 80023de:	a320      	add	r3, pc, #128	; (adr r3, 8002460 <LRL_MPU6050_ReadGyro+0x158>)
 80023e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e4:	f7fe fa32 	bl	800084c <__aeabi_ddiv>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	4610      	mov	r0, r2
 80023ee:	4619      	mov	r1, r3
 80023f0:	f7fe fbb2 	bl	8000b58 <__aeabi_d2iz>
 80023f4:	4603      	mov	r3, r0
 80023f6:	b21a      	sxth	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa

	odom->gyro.x_calibrated = odom->gyro.x - odom->imu.offset_gyro_x;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f9b3 30a6 	ldrsh.w	r3, [r3, #166]	; 0xa6
 8002404:	b29a      	uxth	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800240c:	b29b      	uxth	r3, r3
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	b29b      	uxth	r3, r3
 8002412:	b21a      	sxth	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	odom->gyro.y_calibrated = odom->gyro.y - odom->imu.offset_gyro_y;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f9b3 30a8 	ldrsh.w	r3, [r3, #168]	; 0xa8
 8002420:	b29a      	uxth	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002428:	b29b      	uxth	r3, r3
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	b29b      	uxth	r3, r3
 800242e:	b21a      	sxth	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	odom->gyro.z_calibrated = odom->gyro.z - odom->imu.offset_gyro_z;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f9b3 30aa 	ldrsh.w	r3, [r3, #170]	; 0xaa
 800243c:	b29a      	uxth	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002444:	b29b      	uxth	r3, r3
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	b29b      	uxth	r3, r3
 800244a:	b21a      	sxth	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
}
 8002452:	bf00      	nop
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	f3af 8000 	nop.w
 8002460:	a5e353f8 	.word	0xa5e353f8
 8002464:	3fc0c49b 	.word	0x3fc0c49b
 8002468:	2000084c 	.word	0x2000084c

0800246c <LRL_MPU6050_ReadAll>:

void LRL_MPU6050_ReadAll(odom_cfgType *odom)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
	_LRL_MPU6050_EnableBypass(odom, 0);
 8002474:	2100      	movs	r1, #0
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f80a 	bl	8002490 <_LRL_MPU6050_EnableBypass>
	LRL_MPU6050_ReadAccel(odom);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f7ff feb3 	bl	80021e8 <LRL_MPU6050_ReadAccel>
	LRL_MPU6050_ReadGyro(odom);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7ff ff40 	bl	8002308 <LRL_MPU6050_ReadGyro>
}
 8002488:	bf00      	nop
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <_LRL_MPU6050_EnableBypass>:

void _LRL_MPU6050_EnableBypass(odom_cfgType * odom, uint8_t enable)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af04      	add	r7, sp, #16
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	460b      	mov	r3, r1
 800249a:	70fb      	strb	r3, [r7, #3]
	_i2c_reg_data = 0x00;
 800249c:	4b1a      	ldr	r3, [pc, #104]	; (8002508 <_LRL_MPU6050_EnableBypass+0x78>)
 800249e:	2200      	movs	r2, #0
 80024a0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(odom->imu.hi2c, MPU_ADDR, USER_CTRL, 1, &_i2c_reg_data, 1, DELAY_TIMEOUT);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6818      	ldr	r0, [r3, #0]
 80024a6:	230a      	movs	r3, #10
 80024a8:	9302      	str	r3, [sp, #8]
 80024aa:	2301      	movs	r3, #1
 80024ac:	9301      	str	r3, [sp, #4]
 80024ae:	4b16      	ldr	r3, [pc, #88]	; (8002508 <_LRL_MPU6050_EnableBypass+0x78>)
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	2301      	movs	r3, #1
 80024b4:	226a      	movs	r2, #106	; 0x6a
 80024b6:	21d0      	movs	r1, #208	; 0xd0
 80024b8:	f003 f9da 	bl	8005870 <HAL_I2C_Mem_Write>
	_i2c_reg_data = 0x02 * enable;
 80024bc:	78fb      	ldrb	r3, [r7, #3]
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	4b11      	ldr	r3, [pc, #68]	; (8002508 <_LRL_MPU6050_EnableBypass+0x78>)
 80024c4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(odom->imu.hi2c, MPU_ADDR, INT_PIN_CFG, 1, &_i2c_reg_data, 1, DELAY_TIMEOUT);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6818      	ldr	r0, [r3, #0]
 80024ca:	230a      	movs	r3, #10
 80024cc:	9302      	str	r3, [sp, #8]
 80024ce:	2301      	movs	r3, #1
 80024d0:	9301      	str	r3, [sp, #4]
 80024d2:	4b0d      	ldr	r3, [pc, #52]	; (8002508 <_LRL_MPU6050_EnableBypass+0x78>)
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	2301      	movs	r3, #1
 80024d8:	2237      	movs	r2, #55	; 0x37
 80024da:	21d0      	movs	r1, #208	; 0xd0
 80024dc:	f003 f9c8 	bl	8005870 <HAL_I2C_Mem_Write>
	_i2c_reg_data = 0x00;
 80024e0:	4b09      	ldr	r3, [pc, #36]	; (8002508 <_LRL_MPU6050_EnableBypass+0x78>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(odom->imu.hi2c, MPU_ADDR, PWR_MGMT_1, 1, &_i2c_reg_data, 1, DELAY_TIMEOUT);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6818      	ldr	r0, [r3, #0]
 80024ea:	230a      	movs	r3, #10
 80024ec:	9302      	str	r3, [sp, #8]
 80024ee:	2301      	movs	r3, #1
 80024f0:	9301      	str	r3, [sp, #4]
 80024f2:	4b05      	ldr	r3, [pc, #20]	; (8002508 <_LRL_MPU6050_EnableBypass+0x78>)
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	2301      	movs	r3, #1
 80024f8:	226b      	movs	r2, #107	; 0x6b
 80024fa:	21d0      	movs	r1, #208	; 0xd0
 80024fc:	f003 f9b8 	bl	8005870 <HAL_I2C_Mem_Write>
}
 8002500:	bf00      	nop
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	2000083a 	.word	0x2000083a
 800250c:	00000000 	.word	0x00000000

08002510 <LRL_MPU6050_ComplementaryFilter>:

void LRL_MPU6050_ComplementaryFilter(odom_cfgType *odom, float dt)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08a      	sub	sp, #40	; 0x28
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	ed87 0a00 	vstr	s0, [r7]
	_LRL_MPU6050_EnableBypass(odom, 0);
 800251c:	2100      	movs	r1, #0
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff ffb6 	bl	8002490 <_LRL_MPU6050_EnableBypass>

    // Low-pass filter accelerometer data
    _tmp_accx = ALPHA * prev_acc_x + (1 - ALPHA) * odom->accel.x/FLOAT_SCALING;
 8002524:	4bde      	ldr	r3, [pc, #888]	; (80028a0 <LRL_MPU6050_ComplementaryFilter+0x390>)
 8002526:	edd3 7a00 	vldr	s15, [r3]
 800252a:	ed9f 7ade 	vldr	s14, [pc, #888]	; 80028a4 <LRL_MPU6050_ComplementaryFilter+0x394>
 800252e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 8002538:	ee07 3a90 	vmov	s15, r3
 800253c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002540:	eddf 6ad9 	vldr	s13, [pc, #868]	; 80028a8 <LRL_MPU6050_ComplementaryFilter+0x398>
 8002544:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002548:	ed9f 6ad8 	vldr	s12, [pc, #864]	; 80028ac <LRL_MPU6050_ComplementaryFilter+0x39c>
 800254c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002550:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002554:	4bd6      	ldr	r3, [pc, #856]	; (80028b0 <LRL_MPU6050_ComplementaryFilter+0x3a0>)
 8002556:	edc3 7a00 	vstr	s15, [r3]
    _tmp_accy = ALPHA * prev_acc_y + (1 - ALPHA) * odom->accel.y/FLOAT_SCALING;
 800255a:	4bd6      	ldr	r3, [pc, #856]	; (80028b4 <LRL_MPU6050_ComplementaryFilter+0x3a4>)
 800255c:	edd3 7a00 	vldr	s15, [r3]
 8002560:	ed9f 7ad0 	vldr	s14, [pc, #832]	; 80028a4 <LRL_MPU6050_ComplementaryFilter+0x394>
 8002564:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
 800256e:	ee07 3a90 	vmov	s15, r3
 8002572:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002576:	eddf 6acc 	vldr	s13, [pc, #816]	; 80028a8 <LRL_MPU6050_ComplementaryFilter+0x398>
 800257a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800257e:	ed9f 6acb 	vldr	s12, [pc, #812]	; 80028ac <LRL_MPU6050_ComplementaryFilter+0x39c>
 8002582:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002586:	ee77 7a27 	vadd.f32	s15, s14, s15
 800258a:	4bcb      	ldr	r3, [pc, #812]	; (80028b8 <LRL_MPU6050_ComplementaryFilter+0x3a8>)
 800258c:	edc3 7a00 	vstr	s15, [r3]
    _tmp_accz = ALPHA * prev_acc_z + (1 - ALPHA) * odom->accel.z/FLOAT_SCALING;
 8002590:	4bca      	ldr	r3, [pc, #808]	; (80028bc <LRL_MPU6050_ComplementaryFilter+0x3ac>)
 8002592:	edd3 7a00 	vldr	s15, [r3]
 8002596:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 80028a4 <LRL_MPU6050_ComplementaryFilter+0x394>
 800259a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	; 0x9e
 80025a4:	ee07 3a90 	vmov	s15, r3
 80025a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025ac:	eddf 6abe 	vldr	s13, [pc, #760]	; 80028a8 <LRL_MPU6050_ComplementaryFilter+0x398>
 80025b0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80025b4:	ed9f 6abd 	vldr	s12, [pc, #756]	; 80028ac <LRL_MPU6050_ComplementaryFilter+0x39c>
 80025b8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80025bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025c0:	4bbf      	ldr	r3, [pc, #764]	; (80028c0 <LRL_MPU6050_ComplementaryFilter+0x3b0>)
 80025c2:	edc3 7a00 	vstr	s15, [r3]

    // Normalize accelerometer data
    float acc_norm = sqrtf(_tmp_accx * _tmp_accx + _tmp_accy * _tmp_accy + _tmp_accz * _tmp_accz);
 80025c6:	4bba      	ldr	r3, [pc, #744]	; (80028b0 <LRL_MPU6050_ComplementaryFilter+0x3a0>)
 80025c8:	ed93 7a00 	vldr	s14, [r3]
 80025cc:	4bb8      	ldr	r3, [pc, #736]	; (80028b0 <LRL_MPU6050_ComplementaryFilter+0x3a0>)
 80025ce:	edd3 7a00 	vldr	s15, [r3]
 80025d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025d6:	4bb8      	ldr	r3, [pc, #736]	; (80028b8 <LRL_MPU6050_ComplementaryFilter+0x3a8>)
 80025d8:	edd3 6a00 	vldr	s13, [r3]
 80025dc:	4bb6      	ldr	r3, [pc, #728]	; (80028b8 <LRL_MPU6050_ComplementaryFilter+0x3a8>)
 80025de:	edd3 7a00 	vldr	s15, [r3]
 80025e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025ea:	4bb5      	ldr	r3, [pc, #724]	; (80028c0 <LRL_MPU6050_ComplementaryFilter+0x3b0>)
 80025ec:	edd3 6a00 	vldr	s13, [r3]
 80025f0:	4bb3      	ldr	r3, [pc, #716]	; (80028c0 <LRL_MPU6050_ComplementaryFilter+0x3b0>)
 80025f2:	edd3 7a00 	vldr	s15, [r3]
 80025f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002602:	f00b fef1 	bl	800e3e8 <sqrtf>
 8002606:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    _tmp_accx /= acc_norm;
 800260a:	4ba9      	ldr	r3, [pc, #676]	; (80028b0 <LRL_MPU6050_ComplementaryFilter+0x3a0>)
 800260c:	edd3 6a00 	vldr	s13, [r3]
 8002610:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002614:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002618:	4ba5      	ldr	r3, [pc, #660]	; (80028b0 <LRL_MPU6050_ComplementaryFilter+0x3a0>)
 800261a:	edc3 7a00 	vstr	s15, [r3]
    _tmp_accy /= acc_norm;
 800261e:	4ba6      	ldr	r3, [pc, #664]	; (80028b8 <LRL_MPU6050_ComplementaryFilter+0x3a8>)
 8002620:	edd3 6a00 	vldr	s13, [r3]
 8002624:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002628:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800262c:	4ba2      	ldr	r3, [pc, #648]	; (80028b8 <LRL_MPU6050_ComplementaryFilter+0x3a8>)
 800262e:	edc3 7a00 	vstr	s15, [r3]
    _tmp_accz /= acc_norm;
 8002632:	4ba3      	ldr	r3, [pc, #652]	; (80028c0 <LRL_MPU6050_ComplementaryFilter+0x3b0>)
 8002634:	edd3 6a00 	vldr	s13, [r3]
 8002638:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800263c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002640:	4b9f      	ldr	r3, [pc, #636]	; (80028c0 <LRL_MPU6050_ComplementaryFilter+0x3b0>)
 8002642:	edc3 7a00 	vstr	s15, [r3]

    // Update angle using accelerometer
    float acc_angle_x = atan2f(_tmp_accy, _tmp_accz) * (180.0f / M_PI);
 8002646:	4b9c      	ldr	r3, [pc, #624]	; (80028b8 <LRL_MPU6050_ComplementaryFilter+0x3a8>)
 8002648:	edd3 7a00 	vldr	s15, [r3]
 800264c:	4b9c      	ldr	r3, [pc, #624]	; (80028c0 <LRL_MPU6050_ComplementaryFilter+0x3b0>)
 800264e:	ed93 7a00 	vldr	s14, [r3]
 8002652:	eef0 0a47 	vmov.f32	s1, s14
 8002656:	eeb0 0a67 	vmov.f32	s0, s15
 800265a:	f00b fec3 	bl	800e3e4 <atan2f>
 800265e:	ee10 3a10 	vmov	r3, s0
 8002662:	4618      	mov	r0, r3
 8002664:	f7fd ff70 	bl	8000548 <__aeabi_f2d>
 8002668:	a38b      	add	r3, pc, #556	; (adr r3, 8002898 <LRL_MPU6050_ComplementaryFilter+0x388>)
 800266a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266e:	f7fd ffc3 	bl	80005f8 <__aeabi_dmul>
 8002672:	4602      	mov	r2, r0
 8002674:	460b      	mov	r3, r1
 8002676:	4610      	mov	r0, r2
 8002678:	4619      	mov	r1, r3
 800267a:	f7fe fab5 	bl	8000be8 <__aeabi_d2f>
 800267e:	4603      	mov	r3, r0
 8002680:	623b      	str	r3, [r7, #32]
    float acc_angle_y = atan2f(_tmp_accx, _tmp_accz) * (180.0f / M_PI);
 8002682:	4b8b      	ldr	r3, [pc, #556]	; (80028b0 <LRL_MPU6050_ComplementaryFilter+0x3a0>)
 8002684:	edd3 7a00 	vldr	s15, [r3]
 8002688:	4b8d      	ldr	r3, [pc, #564]	; (80028c0 <LRL_MPU6050_ComplementaryFilter+0x3b0>)
 800268a:	ed93 7a00 	vldr	s14, [r3]
 800268e:	eef0 0a47 	vmov.f32	s1, s14
 8002692:	eeb0 0a67 	vmov.f32	s0, s15
 8002696:	f00b fea5 	bl	800e3e4 <atan2f>
 800269a:	ee10 3a10 	vmov	r3, s0
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fd ff52 	bl	8000548 <__aeabi_f2d>
 80026a4:	a37c      	add	r3, pc, #496	; (adr r3, 8002898 <LRL_MPU6050_ComplementaryFilter+0x388>)
 80026a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026aa:	f7fd ffa5 	bl	80005f8 <__aeabi_dmul>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	4610      	mov	r0, r2
 80026b4:	4619      	mov	r1, r3
 80026b6:	f7fe fa97 	bl	8000be8 <__aeabi_d2f>
 80026ba:	4603      	mov	r3, r0
 80026bc:	61fb      	str	r3, [r7, #28]
    float acc_angle_z = atan2f(_tmp_accy, _tmp_accx) * (180.0f / M_PI);
 80026be:	4b7e      	ldr	r3, [pc, #504]	; (80028b8 <LRL_MPU6050_ComplementaryFilter+0x3a8>)
 80026c0:	edd3 7a00 	vldr	s15, [r3]
 80026c4:	4b7a      	ldr	r3, [pc, #488]	; (80028b0 <LRL_MPU6050_ComplementaryFilter+0x3a0>)
 80026c6:	ed93 7a00 	vldr	s14, [r3]
 80026ca:	eef0 0a47 	vmov.f32	s1, s14
 80026ce:	eeb0 0a67 	vmov.f32	s0, s15
 80026d2:	f00b fe87 	bl	800e3e4 <atan2f>
 80026d6:	ee10 3a10 	vmov	r3, s0
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fd ff34 	bl	8000548 <__aeabi_f2d>
 80026e0:	a36d      	add	r3, pc, #436	; (adr r3, 8002898 <LRL_MPU6050_ComplementaryFilter+0x388>)
 80026e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e6:	f7fd ff87 	bl	80005f8 <__aeabi_dmul>
 80026ea:	4602      	mov	r2, r0
 80026ec:	460b      	mov	r3, r1
 80026ee:	4610      	mov	r0, r2
 80026f0:	4619      	mov	r1, r3
 80026f2:	f7fe fa79 	bl	8000be8 <__aeabi_d2f>
 80026f6:	4603      	mov	r3, r0
 80026f8:	61bb      	str	r3, [r7, #24]

    // Low-pass filter gyroscope data
    float gyr_x_filtered = ALPHA * prev_gyr_x + (1 - ALPHA) * odom->gyro.x/FLOAT_SCALING;
 80026fa:	4b72      	ldr	r3, [pc, #456]	; (80028c4 <LRL_MPU6050_ComplementaryFilter+0x3b4>)
 80026fc:	edd3 7a00 	vldr	s15, [r3]
 8002700:	ed9f 7a68 	vldr	s14, [pc, #416]	; 80028a4 <LRL_MPU6050_ComplementaryFilter+0x394>
 8002704:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f9b3 30a6 	ldrsh.w	r3, [r3, #166]	; 0xa6
 800270e:	ee07 3a90 	vmov	s15, r3
 8002712:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002716:	eddf 6a64 	vldr	s13, [pc, #400]	; 80028a8 <LRL_MPU6050_ComplementaryFilter+0x398>
 800271a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800271e:	ed9f 6a63 	vldr	s12, [pc, #396]	; 80028ac <LRL_MPU6050_ComplementaryFilter+0x39c>
 8002722:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002726:	ee77 7a27 	vadd.f32	s15, s14, s15
 800272a:	edc7 7a05 	vstr	s15, [r7, #20]
    float gyr_y_filtered = ALPHA * prev_gyr_y + (1 - ALPHA) * odom->gyro.y/FLOAT_SCALING;
 800272e:	4b66      	ldr	r3, [pc, #408]	; (80028c8 <LRL_MPU6050_ComplementaryFilter+0x3b8>)
 8002730:	edd3 7a00 	vldr	s15, [r3]
 8002734:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80028a4 <LRL_MPU6050_ComplementaryFilter+0x394>
 8002738:	ee27 7a87 	vmul.f32	s14, s15, s14
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f9b3 30a8 	ldrsh.w	r3, [r3, #168]	; 0xa8
 8002742:	ee07 3a90 	vmov	s15, r3
 8002746:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800274a:	eddf 6a57 	vldr	s13, [pc, #348]	; 80028a8 <LRL_MPU6050_ComplementaryFilter+0x398>
 800274e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002752:	ed9f 6a56 	vldr	s12, [pc, #344]	; 80028ac <LRL_MPU6050_ComplementaryFilter+0x39c>
 8002756:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800275a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800275e:	edc7 7a04 	vstr	s15, [r7, #16]
    float gyr_z_filtered = ALPHA * prev_gyr_z + (1 - ALPHA) * odom->gyro.z/FLOAT_SCALING;
 8002762:	4b5a      	ldr	r3, [pc, #360]	; (80028cc <LRL_MPU6050_ComplementaryFilter+0x3bc>)
 8002764:	edd3 7a00 	vldr	s15, [r3]
 8002768:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80028a4 <LRL_MPU6050_ComplementaryFilter+0x394>
 800276c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f9b3 30aa 	ldrsh.w	r3, [r3, #170]	; 0xaa
 8002776:	ee07 3a90 	vmov	s15, r3
 800277a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800277e:	eddf 6a4a 	vldr	s13, [pc, #296]	; 80028a8 <LRL_MPU6050_ComplementaryFilter+0x398>
 8002782:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002786:	ed9f 6a49 	vldr	s12, [pc, #292]	; 80028ac <LRL_MPU6050_ComplementaryFilter+0x39c>
 800278a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800278e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002792:	edc7 7a03 	vstr	s15, [r7, #12]

    // Update angle using gyroscope
    odom->imu.roll_temp += gyr_x_filtered * dt;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	ed93 7a07 	vldr	s14, [r3, #28]
 800279c:	edd7 6a05 	vldr	s13, [r7, #20]
 80027a0:	edd7 7a00 	vldr	s15, [r7]
 80027a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	edc3 7a07 	vstr	s15, [r3, #28]
    odom->imu.pitch_temp -= gyr_y_filtered * dt;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	ed93 7a08 	vldr	s14, [r3, #32]
 80027b8:	edd7 6a04 	vldr	s13, [r7, #16]
 80027bc:	edd7 7a00 	vldr	s15, [r7]
 80027c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	edc3 7a08 	vstr	s15, [r3, #32]
    odom->imu.yaw_temp += gyr_z_filtered * dt;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80027d4:	edd7 6a03 	vldr	s13, [r7, #12]
 80027d8:	edd7 7a00 	vldr	s15, [r7]
 80027dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    // Complementary filter
    odom->imu.roll_temp = (ALPHA * odom->imu.roll_temp + (1 - ALPHA) * acc_angle_x) ;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	edd3 7a07 	vldr	s15, [r3, #28]
 80027f0:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80028a4 <LRL_MPU6050_ComplementaryFilter+0x394>
 80027f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027f8:	edd7 7a08 	vldr	s15, [r7, #32]
 80027fc:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80028a8 <LRL_MPU6050_ComplementaryFilter+0x398>
 8002800:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002804:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	edc3 7a07 	vstr	s15, [r3, #28]
    odom->imu.pitch_temp = ((ALPHA * odom->imu.pitch_temp) - (1 - ALPHA) * acc_angle_y);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	edd3 7a08 	vldr	s15, [r3, #32]
 8002814:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80028a4 <LRL_MPU6050_ComplementaryFilter+0x394>
 8002818:	ee27 7a87 	vmul.f32	s14, s15, s14
 800281c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002820:	eddf 6a21 	vldr	s13, [pc, #132]	; 80028a8 <LRL_MPU6050_ComplementaryFilter+0x398>
 8002824:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002828:	ee77 7a67 	vsub.f32	s15, s14, s15
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	edc3 7a08 	vstr	s15, [r3, #32]
    odom->imu.yaw_temp = (ALPHA * odom->imu.yaw_temp + (1 - ALPHA) * acc_angle_z);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002838:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80028a4 <LRL_MPU6050_ComplementaryFilter+0x394>
 800283c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002840:	edd7 7a06 	vldr	s15, [r7, #24]
 8002844:	eddf 6a18 	vldr	s13, [pc, #96]	; 80028a8 <LRL_MPU6050_ComplementaryFilter+0x398>
 8002848:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800284c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    odom->angle.x = odom->imu.roll_temp - odom->imu.offset_calibration_x;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	ed93 7a07 	vldr	s14, [r3, #28]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002862:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002866:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800286a:	ee17 3a90 	vmov	r3, s15
 800286e:	b21a      	sxth	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
    odom->angle.y = odom->imu.pitch_temp - odom->imu.offset_calibration_y;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	ed93 7a08 	vldr	s14, [r3, #32]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002882:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002886:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800288a:	ee17 3a90 	vmov	r3, s15
 800288e:	b21a      	sxth	r2, r3
 8002890:	e01e      	b.n	80028d0 <LRL_MPU6050_ComplementaryFilter+0x3c0>
 8002892:	bf00      	nop
 8002894:	f3af 8000 	nop.w
 8002898:	1a63c1f8 	.word	0x1a63c1f8
 800289c:	404ca5dc 	.word	0x404ca5dc
 80028a0:	2000086c 	.word	0x2000086c
 80028a4:	3f666666 	.word	0x3f666666
 80028a8:	3dccccd0 	.word	0x3dccccd0
 80028ac:	447a0000 	.word	0x447a0000
 80028b0:	20000854 	.word	0x20000854
 80028b4:	20000870 	.word	0x20000870
 80028b8:	20000858 	.word	0x20000858
 80028bc:	20000874 	.word	0x20000874
 80028c0:	2000085c 	.word	0x2000085c
 80028c4:	20000860 	.word	0x20000860
 80028c8:	20000864 	.word	0x20000864
 80028cc:	20000868 	.word	0x20000868
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
    odom->angle.z = odom->imu.yaw_temp - odom->imu.offset_calibration_z;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	edd3 7a06 	vldr	s15, [r3, #24]
 80028e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028ea:	ee17 3a90 	vmov	r3, s15
 80028ee:	b21a      	sxth	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98

    // Update previous values
    prev_acc_x = _tmp_accx;
 80028f6:	4b0c      	ldr	r3, [pc, #48]	; (8002928 <LRL_MPU6050_ComplementaryFilter+0x418>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a0c      	ldr	r2, [pc, #48]	; (800292c <LRL_MPU6050_ComplementaryFilter+0x41c>)
 80028fc:	6013      	str	r3, [r2, #0]
    prev_acc_y = _tmp_accy;
 80028fe:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <LRL_MPU6050_ComplementaryFilter+0x420>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a0c      	ldr	r2, [pc, #48]	; (8002934 <LRL_MPU6050_ComplementaryFilter+0x424>)
 8002904:	6013      	str	r3, [r2, #0]
    prev_acc_z = _tmp_accz;
 8002906:	4b0c      	ldr	r3, [pc, #48]	; (8002938 <LRL_MPU6050_ComplementaryFilter+0x428>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a0c      	ldr	r2, [pc, #48]	; (800293c <LRL_MPU6050_ComplementaryFilter+0x42c>)
 800290c:	6013      	str	r3, [r2, #0]

    prev_gyr_x = gyr_x_filtered;
 800290e:	4a0c      	ldr	r2, [pc, #48]	; (8002940 <LRL_MPU6050_ComplementaryFilter+0x430>)
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	6013      	str	r3, [r2, #0]
    prev_gyr_y = gyr_y_filtered;
 8002914:	4a0b      	ldr	r2, [pc, #44]	; (8002944 <LRL_MPU6050_ComplementaryFilter+0x434>)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	6013      	str	r3, [r2, #0]
    prev_gyr_z = gyr_z_filtered;
 800291a:	4a0b      	ldr	r2, [pc, #44]	; (8002948 <LRL_MPU6050_ComplementaryFilter+0x438>)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6013      	str	r3, [r2, #0]
}
 8002920:	bf00      	nop
 8002922:	3728      	adds	r7, #40	; 0x28
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	20000854 	.word	0x20000854
 800292c:	2000086c 	.word	0x2000086c
 8002930:	20000858 	.word	0x20000858
 8002934:	20000870 	.word	0x20000870
 8002938:	2000085c 	.word	0x2000085c
 800293c:	20000874 	.word	0x20000874
 8002940:	20000860 	.word	0x20000860
 8002944:	20000864 	.word	0x20000864
 8002948:	20000868 	.word	0x20000868

0800294c <LRL_Encoder_Init>:
// #########################################################
// ####################  MOTOR ENCODER  ####################
// #########################################################

void LRL_Encoder_Init(odom_cfgType * odom)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(odom->enc_right.htim, 0);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2200      	movs	r2, #0
 800295c:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(odom->enc_left.htim, 0);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2200      	movs	r2, #0
 8002966:	625a      	str	r2, [r3, #36]	; 0x24

	odom->enc_right.tick = 0;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	869a      	strh	r2, [r3, #52]	; 0x34
	odom->enc_left.tick = 0;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	odom->enc_right.tick_prev = 0;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	86da      	strh	r2, [r3, #54]	; 0x36
	odom->enc_left.tick_prev = 0;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <LRL_Encoder_ReadAngularSpeed>:

void LRL_Encoder_ReadAngularSpeed(odom_cfgType * odom)
{
 8002990:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002994:	b084      	sub	sp, #16
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]

	odom->enc_right.tick = __HAL_TIM_GET_COUNTER(odom->enc_right.htim);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	869a      	strh	r2, [r3, #52]	; 0x34
	odom->enc_left.tick = __HAL_TIM_GET_COUNTER(odom->enc_left.htim);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	int _dir_r,_dir_l;


	if(__HAL_TIM_IS_TIM_COUNTING_DOWN(odom->enc_right.htim) == 0)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0310 	and.w	r3, r3, #16
 80029c4:	2b10      	cmp	r3, #16
 80029c6:	d023      	beq.n	8002a10 <LRL_Encoder_ReadAngularSpeed+0x80>
	{
	  if(odom->enc_right.tick - odom->enc_right.tick_prev >= 0)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80029cc:	461a      	mov	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	db0a      	blt.n	80029ee <LRL_Encoder_ReadAngularSpeed+0x5e>
	  {
		  odom->vel.right = odom->enc_right.tick - odom->enc_right.tick_prev;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	b21a      	sxth	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
 80029ec:	e00d      	b.n	8002a0a <LRL_Encoder_ReadAngularSpeed+0x7a>
	  }
	  else
	  {
		  odom->vel.right = (odom->enc_right.MAX_ARR - odom->enc_right.tick_prev) + odom->enc_right.tick;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80029fe:	4413      	add	r3, r2
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	b21a      	sxth	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
	  }
	  _dir_r = 1;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	60fb      	str	r3, [r7, #12]
 8002a0e:	e023      	b.n	8002a58 <LRL_Encoder_ReadAngularSpeed+0xc8>
	}
	else
	{
	  if(odom->enc_right.tick_prev - odom->enc_right.tick >= 0)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a14:	461a      	mov	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	db0a      	blt.n	8002a36 <LRL_Encoder_ReadAngularSpeed+0xa6>
	  {
		  odom->vel.right = -(odom->enc_right.tick - odom->enc_right.tick_prev);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	b21a      	sxth	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
 8002a34:	e00d      	b.n	8002a52 <LRL_Encoder_ReadAngularSpeed+0xc2>
	  }
	  else
	  {
		  odom->vel.right = (odom->enc_right.MAX_ARR - odom->enc_right.tick) + odom->enc_right.tick_prev;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a46:	4413      	add	r3, r2
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	b21a      	sxth	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
	  }
	  _dir_r = -1;
 8002a52:	f04f 33ff 	mov.w	r3, #4294967295
 8002a56:	60fb      	str	r3, [r7, #12]
	}

	if(__HAL_TIM_IS_TIM_COUNTING_DOWN(odom->enc_left.htim) == 0)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0310 	and.w	r3, r3, #16
 8002a64:	2b10      	cmp	r3, #16
 8002a66:	d029      	beq.n	8002abc <LRL_Encoder_ReadAngularSpeed+0x12c>
	{
	  if(odom->enc_left.tick - odom->enc_left.tick_prev >= 0)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a6e:	461a      	mov	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	db0c      	blt.n	8002a96 <LRL_Encoder_ReadAngularSpeed+0x106>
	  {
		  odom->vel.left = odom->enc_left.tick - odom->enc_left.tick_prev;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	b21a      	sxth	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 8002a94:	e00f      	b.n	8002ab6 <LRL_Encoder_ReadAngularSpeed+0x126>
	  }
	  else
	  {
		  odom->vel.left = (odom->enc_left.MAX_ARR - odom->enc_left.tick_prev) + odom->enc_left.tick;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002aaa:	4413      	add	r3, r2
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	b21a      	sxth	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
	  }
	  _dir_l = 1;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	60bb      	str	r3, [r7, #8]
 8002aba:	e029      	b.n	8002b10 <LRL_Encoder_ReadAngularSpeed+0x180>
	}
	else
	{
	  if(odom->enc_left.tick_prev - odom->enc_left.tick >= 0)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	db0c      	blt.n	8002aea <LRL_Encoder_ReadAngularSpeed+0x15a>
	  {
		  odom->vel.left = -(odom->enc_left.tick - odom->enc_left.tick_prev);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	b21a      	sxth	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 8002ae8:	e00f      	b.n	8002b0a <LRL_Encoder_ReadAngularSpeed+0x17a>
	  }
	  else
	  {
		  odom->vel.left = (odom->enc_left.MAX_ARR - odom->enc_left.tick) + odom->enc_left.tick_prev;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002afe:	4413      	add	r3, r2
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	b21a      	sxth	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
	  }
	  _dir_l = -1;
 8002b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b0e:	60bb      	str	r3, [r7, #8]
	}

	odom->dist.right += _dir_r * odom->vel.right*(2*M_PI*odom->diff_robot.WHEEL_RADIUS) / odom->enc_right.MAX_ARR ;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	; 0xc8
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fd fd04 	bl	8000524 <__aeabi_i2d>
 8002b1c:	4604      	mov	r4, r0
 8002b1e:	460d      	mov	r5, r1
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	; 0xc4
 8002b26:	461a      	mov	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	fb02 f303 	mul.w	r3, r2, r3
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fd fcf8 	bl	8000524 <__aeabi_i2d>
 8002b34:	4680      	mov	r8, r0
 8002b36:	4689      	mov	r9, r1
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fd fd02 	bl	8000548 <__aeabi_f2d>
 8002b44:	a358      	add	r3, pc, #352	; (adr r3, 8002ca8 <LRL_Encoder_ReadAngularSpeed+0x318>)
 8002b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4a:	f7fd fd55 	bl	80005f8 <__aeabi_dmul>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	460b      	mov	r3, r1
 8002b52:	4640      	mov	r0, r8
 8002b54:	4649      	mov	r1, r9
 8002b56:	f7fd fd4f 	bl	80005f8 <__aeabi_dmul>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	4690      	mov	r8, r2
 8002b60:	4699      	mov	r9, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fd fcdc 	bl	8000524 <__aeabi_i2d>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	460b      	mov	r3, r1
 8002b70:	4640      	mov	r0, r8
 8002b72:	4649      	mov	r1, r9
 8002b74:	f7fd fe6a 	bl	800084c <__aeabi_ddiv>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	4620      	mov	r0, r4
 8002b7e:	4629      	mov	r1, r5
 8002b80:	f7fd fb84 	bl	800028c <__adddf3>
 8002b84:	4602      	mov	r2, r0
 8002b86:	460b      	mov	r3, r1
 8002b88:	4610      	mov	r0, r2
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	f7fd ffe4 	bl	8000b58 <__aeabi_d2iz>
 8002b90:	4603      	mov	r3, r0
 8002b92:	b21a      	sxth	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
	odom->dist.left  += _dir_l * odom->vel.left*(2*M_PI*odom->diff_robot.WHEEL_RADIUS) / odom->enc_left.MAX_ARR ;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7fd fcbf 	bl	8000524 <__aeabi_i2d>
 8002ba6:	4604      	mov	r4, r0
 8002ba8:	460d      	mov	r5, r1
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f9b3 30c6 	ldrsh.w	r3, [r3, #198]	; 0xc6
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	fb02 f303 	mul.w	r3, r2, r3
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7fd fcb3 	bl	8000524 <__aeabi_i2d>
 8002bbe:	4680      	mov	r8, r0
 8002bc0:	4689      	mov	r9, r1
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fd fcbd 	bl	8000548 <__aeabi_f2d>
 8002bce:	a336      	add	r3, pc, #216	; (adr r3, 8002ca8 <LRL_Encoder_ReadAngularSpeed+0x318>)
 8002bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd4:	f7fd fd10 	bl	80005f8 <__aeabi_dmul>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4640      	mov	r0, r8
 8002bde:	4649      	mov	r1, r9
 8002be0:	f7fd fd0a 	bl	80005f8 <__aeabi_dmul>
 8002be4:	4602      	mov	r2, r0
 8002be6:	460b      	mov	r3, r1
 8002be8:	4690      	mov	r8, r2
 8002bea:	4699      	mov	r9, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7fd fc97 	bl	8000524 <__aeabi_i2d>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	4640      	mov	r0, r8
 8002bfc:	4649      	mov	r1, r9
 8002bfe:	f7fd fe25 	bl	800084c <__aeabi_ddiv>
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4620      	mov	r0, r4
 8002c08:	4629      	mov	r1, r5
 8002c0a:	f7fd fb3f 	bl	800028c <__adddf3>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	460b      	mov	r3, r1
 8002c12:	4610      	mov	r0, r2
 8002c14:	4619      	mov	r1, r3
 8002c16:	f7fd ff9f 	bl	8000b58 <__aeabi_d2iz>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	b21a      	sxth	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca

	odom->vel.right = _dir_r * odom->vel.right * odom->enc_right.TICK2RPM;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	; 0xc4
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	fb02 f303 	mul.w	r3, r2, r3
 8002c32:	ee07 3a90 	vmov	s15, r3
 8002c36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c48:	ee17 3a90 	vmov	r3, s15
 8002c4c:	b21a      	sxth	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
	odom->vel.left = _dir_l * odom->vel.left * odom->enc_left.TICK2RPM;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f9b3 30c6 	ldrsh.w	r3, [r3, #198]	; 0xc6
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	fb02 f303 	mul.w	r3, r2, r3
 8002c62:	ee07 3a90 	vmov	s15, r3
 8002c66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c78:	ee17 3a90 	vmov	r3, s15
 8002c7c:	b21a      	sxth	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6

	odom->enc_right.tick_prev = odom->enc_right.tick;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	86da      	strh	r2, [r3, #54]	; 0x36
	odom->enc_left.tick_prev = odom->enc_left.tick;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
}
 8002c98:	bf00      	nop
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002ca2:	bf00      	nop
 8002ca4:	f3af 8000 	nop.w
 8002ca8:	54442d18 	.word	0x54442d18
 8002cac:	401921fb 	.word	0x401921fb

08002cb0 <LRL_UpdateCRC>:
#include "mcu_config.h"

uint8_t _ack_data[10] = {0x4C, 0x45, 0x4E, 0x4E, 0x41};

void LRL_UpdateCRC(uint16_t crc_accum, uint8_t *data_blk_ptr, uint16_t data_blk_size, unsigned short crc_final )
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b087      	sub	sp, #28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60b9      	str	r1, [r7, #8]
 8002cb8:	4611      	mov	r1, r2
 8002cba:	461a      	mov	r2, r3
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	81fb      	strh	r3, [r7, #14]
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	81bb      	strh	r3, [r7, #12]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	80fb      	strh	r3, [r7, #6]
    0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264,
    0x8261, 0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E,
    0x0234, 0x8231, 0x8213, 0x0216, 0x021C, 0x8219, 0x0208,
    0x820D, 0x8207, 0x0202 };

  for (j = 0; j < data_blk_size; j++)
 8002cc8:	2300      	movs	r3, #0
 8002cca:	82fb      	strh	r3, [r7, #22]
 8002ccc:	e019      	b.n	8002d02 <LRL_UpdateCRC+0x52>
  {
    i = ((uint16_t)(crc_accum >> 8) ^ *data_blk_ptr++) & 0xFF;
 8002cce:	89fb      	ldrh	r3, [r7, #14]
 8002cd0:	0a1b      	lsrs	r3, r3, #8
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	1c59      	adds	r1, r3, #1
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	4053      	eors	r3, r2
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	82bb      	strh	r3, [r7, #20]
    crc_accum = (crc_accum << 8) ^ crc_table[i];
 8002ce6:	89fb      	ldrh	r3, [r7, #14]
 8002ce8:	021b      	lsls	r3, r3, #8
 8002cea:	b21a      	sxth	r2, r3
 8002cec:	8abb      	ldrh	r3, [r7, #20]
 8002cee:	490b      	ldr	r1, [pc, #44]	; (8002d1c <LRL_UpdateCRC+0x6c>)
 8002cf0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002cf4:	b21b      	sxth	r3, r3
 8002cf6:	4053      	eors	r3, r2
 8002cf8:	b21b      	sxth	r3, r3
 8002cfa:	81fb      	strh	r3, [r7, #14]
  for (j = 0; j < data_blk_size; j++)
 8002cfc:	8afb      	ldrh	r3, [r7, #22]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	82fb      	strh	r3, [r7, #22]
 8002d02:	8afa      	ldrh	r2, [r7, #22]
 8002d04:	89bb      	ldrh	r3, [r7, #12]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d3e1      	bcc.n	8002cce <LRL_UpdateCRC+0x1e>
  }
  crc_final = crc_accum;
 8002d0a:	89fb      	ldrh	r3, [r7, #14]
 8002d0c:	80fb      	strh	r3, [r7, #6]
}
 8002d0e:	bf00      	nop
 8002d10:	371c      	adds	r7, #28
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	0800ec88 	.word	0x0800ec88

08002d20 <LRL_txPacket>:


void LRL_txPacket(packet_cfgType *packet,odom_cfgType *odom)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
	unsigned short _tmp_crc;

	packet->buffer[0] = 0xFF;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	22ff      	movs	r2, #255	; 0xff
 8002d2e:	721a      	strb	r2, [r3, #8]
	packet->buffer[1] = 0xFF;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	22ff      	movs	r2, #255	; 0xff
 8002d34:	725a      	strb	r2, [r3, #9]

	packet->buffer[2] = 0x01;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	729a      	strb	r2, [r3, #10]
	packet->buffer[3] = 0x20; //this is the size of the bytes
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2220      	movs	r2, #32
 8002d40:	72da      	strb	r2, [r3, #11]

	packet->buffer[4] = (uint8_t)(odom->vel.left >> 8);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	f9b3 30c6 	ldrsh.w	r3, [r3, #198]	; 0xc6
 8002d48:	121b      	asrs	r3, r3, #8
 8002d4a:	b21b      	sxth	r3, r3
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	731a      	strb	r2, [r3, #12]
	packet->buffer[5] = (uint8_t)(odom->vel.left & 0x00FF);
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	f9b3 30c6 	ldrsh.w	r3, [r3, #198]	; 0xc6
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	735a      	strb	r2, [r3, #13]

	packet->buffer[6] = (uint8_t)(odom->vel.right >> 8);
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	; 0xc4
 8002d64:	121b      	asrs	r3, r3, #8
 8002d66:	b21b      	sxth	r3, r3
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	739a      	strb	r2, [r3, #14]
	packet->buffer[7] = (uint8_t)(odom->vel.right & 0x00FF);
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	; 0xc4
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	73da      	strb	r2, [r3, #15]

	packet->buffer[8] = (uint8_t)(odom->dist.left >> 8);
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 8002d80:	121b      	asrs	r3, r3, #8
 8002d82:	b21b      	sxth	r3, r3
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	741a      	strb	r2, [r3, #16]
	packet->buffer[9] = (uint8_t)(odom->dist.left & 0x00FF);
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	745a      	strb	r2, [r3, #17]

	packet->buffer[10] = (uint8_t)(odom->dist.right >> 8);
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	; 0xc8
 8002d9c:	121b      	asrs	r3, r3, #8
 8002d9e:	b21b      	sxth	r3, r3
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	749a      	strb	r2, [r3, #18]
	packet->buffer[11] = (uint8_t)(odom->dist.right & 0x00FF);
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	; 0xc8
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	74da      	strb	r2, [r3, #19]

	packet->buffer[12] = (uint8_t)(odom->accel.x_calibrated >> 8);
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	; 0xa0
 8002db8:	121b      	asrs	r3, r3, #8
 8002dba:	b21b      	sxth	r3, r3
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	751a      	strb	r2, [r3, #20]
	packet->buffer[13] = (uint8_t)(odom->accel.x_calibrated & 0x00FF);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	; 0xa0
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	755a      	strb	r2, [r3, #21]

	packet->buffer[14] = (uint8_t)(odom->accel.y_calibrated >> 8);
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 8002dd4:	121b      	asrs	r3, r3, #8
 8002dd6:	b21b      	sxth	r3, r3
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	759a      	strb	r2, [r3, #22]
	packet->buffer[15] = (uint8_t)(odom->accel.y_calibrated & 0x00FF);
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	75da      	strb	r2, [r3, #23]

	packet->buffer[16] = (uint8_t)(odom->accel.z_calibrated >> 8);
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	; 0xa4
 8002df0:	121b      	asrs	r3, r3, #8
 8002df2:	b21b      	sxth	r3, r3
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	761a      	strb	r2, [r3, #24]
	packet->buffer[17] = (uint8_t)(odom->accel.z_calibrated & 0x00FF);
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	; 0xa4
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	765a      	strb	r2, [r3, #25]

	packet->buffer[18] = (uint8_t)(odom->gyro.x_calibrated >> 8);
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	; 0xac
 8002e0c:	121b      	asrs	r3, r3, #8
 8002e0e:	b21b      	sxth	r3, r3
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	769a      	strb	r2, [r3, #26]
	packet->buffer[19] = (uint8_t)(odom->gyro.x_calibrated & 0x00FF);
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	; 0xac
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	76da      	strb	r2, [r3, #27]

	packet->buffer[20] = (uint8_t)(odom->gyro.y_calibrated >> 8);
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	f9b3 30ae 	ldrsh.w	r3, [r3, #174]	; 0xae
 8002e28:	121b      	asrs	r3, r3, #8
 8002e2a:	b21b      	sxth	r3, r3
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	771a      	strb	r2, [r3, #28]
	packet->buffer[21] = (uint8_t)(odom->gyro.y_calibrated & 0x00FF);
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	f9b3 30ae 	ldrsh.w	r3, [r3, #174]	; 0xae
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	775a      	strb	r2, [r3, #29]

	packet->buffer[22] = (uint8_t)(odom->gyro.z_calibrated >> 8);
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	f9b3 30b0 	ldrsh.w	r3, [r3, #176]	; 0xb0
 8002e44:	121b      	asrs	r3, r3, #8
 8002e46:	b21b      	sxth	r3, r3
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	779a      	strb	r2, [r3, #30]
	packet->buffer[23] = (uint8_t)(odom->gyro.z_calibrated & 0x00FF);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	f9b3 30b0 	ldrsh.w	r3, [r3, #176]	; 0xb0
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	77da      	strb	r2, [r3, #31]

	packet->buffer[24] = (uint8_t)(odom->angle.x >> 8);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 8002e60:	121b      	asrs	r3, r3, #8
 8002e62:	b21b      	sxth	r3, r3
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f883 2020 	strb.w	r2, [r3, #32]
	packet->buffer[25] = (uint8_t)(odom->angle.x & 0x00FF);
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	packet->buffer[26] = (uint8_t)(odom->angle.y >> 8);
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 8002e80:	121b      	asrs	r3, r3, #8
 8002e82:	b21b      	sxth	r3, r3
 8002e84:	b2da      	uxtb	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	packet->buffer[27] = (uint8_t)(odom->angle.y & 0x00FF);
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	packet->buffer[28] = (uint8_t)(odom->mag.heading >> 8);
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 8002ea0:	121b      	asrs	r3, r3, #8
 8002ea2:	b21b      	sxth	r3, r3
 8002ea4:	b2da      	uxtb	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	packet->buffer[29] = (uint8_t)(odom->mag.heading & 0x00FF);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	LRL_UpdateCRC(0, packet->buffer, 30,_tmp_crc);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f103 0108 	add.w	r1, r3, #8
 8002ec0:	89fb      	ldrh	r3, [r7, #14]
 8002ec2:	221e      	movs	r2, #30
 8002ec4:	2000      	movs	r0, #0
 8002ec6:	f7ff fef3 	bl	8002cb0 <LRL_UpdateCRC>

	packet->buffer[30] = (uint8_t)(_tmp_crc >> 8);
 8002eca:	89fb      	ldrh	r3, [r7, #14]
 8002ecc:	0a1b      	lsrs	r3, r3, #8
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	packet->buffer[31] = (uint8_t)(_tmp_crc & 0x00FF);
 8002ed8:	89fb      	ldrh	r3, [r7, #14]
 8002eda:	b2da      	uxtb	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	HAL_UART_Transmit_IT(packet->huart, packet->buffer, 32);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6818      	ldr	r0, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	3308      	adds	r3, #8
 8002eea:	2220      	movs	r2, #32
 8002eec:	4619      	mov	r1, r3
 8002eee:	f005 fdf6 	bl	8008ade <HAL_UART_Transmit_IT>
//	HAL_UART_Transmit(&huart1, _buffer, 26,10);

}
 8002ef2:	bf00      	nop
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
	...

08002efc <LRL_handShake>:

	}
}

void LRL_handShake(packet_cfgType *packet)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
	int _out;
	while(_out != 1)
 8002f04:	e016      	b.n	8002f34 <LRL_handShake+0x38>
	{
		HAL_UART_Transmit(packet->huart,&_ack_data,5,10);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6818      	ldr	r0, [r3, #0]
 8002f0a:	230a      	movs	r3, #10
 8002f0c:	2205      	movs	r2, #5
 8002f0e:	4910      	ldr	r1, [pc, #64]	; (8002f50 <LRL_handShake+0x54>)
 8002f10:	f005 fcb1 	bl	8008876 <HAL_UART_Transmit>
		HAL_UART_Receive(packet->huart, &packet->ack, 1,10);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6818      	ldr	r0, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f103 0198 	add.w	r1, r3, #152	; 0x98
 8002f1e:	230a      	movs	r3, #10
 8002f20:	2201      	movs	r2, #1
 8002f22:	f005 fd3a 	bl	800899a <HAL_UART_Receive>
		if(packet->ack == 0x45)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002f2c:	2b45      	cmp	r3, #69	; 0x45
 8002f2e:	d101      	bne.n	8002f34 <LRL_handShake+0x38>
		{
			_out = 1;
 8002f30:	2301      	movs	r3, #1
 8002f32:	60fb      	str	r3, [r7, #12]
	while(_out != 1)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d1e5      	bne.n	8002f06 <LRL_handShake+0xa>
		}
//		HAL_Delay(500);
	}
	HAL_UART_Transmit(&huart1,"Surprise motherfuckers",sizeof("Surprise motherfuckers"),10);
 8002f3a:	230a      	movs	r3, #10
 8002f3c:	2217      	movs	r2, #23
 8002f3e:	4905      	ldr	r1, [pc, #20]	; (8002f54 <LRL_handShake+0x58>)
 8002f40:	4805      	ldr	r0, [pc, #20]	; (8002f58 <LRL_handShake+0x5c>)
 8002f42:	f005 fc98 	bl	8008876 <HAL_UART_Transmit>

}
 8002f46:	bf00      	nop
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	20000274 	.word	0x20000274
 8002f54:	0800ec30 	.word	0x0800ec30
 8002f58:	20000b4c 	.word	0x20000b4c

08002f5c <LRL_PID_Init>:
#include "pid.h"
#include "main.h"


void LRL_PID_Init(pid_cfgType *pid_cfg,uint8_t AntiWindup)
	{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	460b      	mov	r3, r1
 8002f66:	70fb      	strb	r3, [r7, #3]
	// Resetting the PID parameters
	pid_cfg->Anti_windup_EN = AntiWindup;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	78fa      	ldrb	r2, [r7, #3]
 8002f6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pid_cfg->Prev_Measurement = 0.0f;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	839a      	strh	r2, [r3, #28]
	pid_cfg->Integrator_Amount = 0;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f04f 0200 	mov.w	r2, #0
 8002f7c:	615a      	str	r2, [r3, #20]
	pid_cfg->Prev_Error = 0.0f;// initial error you can change it if by default you have an error
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	621a      	str	r2, [r3, #32]
	pid_cfg->Control_Signal = 0;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
	...

08002f9c <LRL_PID_Update>:

void LRL_PID_Update(pid_cfgType *pid_cfg, int16_t measurement, int16_t set_point)
	{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b087      	sub	sp, #28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	817b      	strh	r3, [r7, #10]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	813b      	strh	r3, [r7, #8]
	int8_t _dir;

	_dir = set_point / abs(set_point);
 8002fac:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002fb0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002fb4:	2a00      	cmp	r2, #0
 8002fb6:	bfb8      	it	lt
 8002fb8:	4252      	neglt	r2, r2
 8002fba:	b292      	uxth	r2, r2
 8002fbc:	fb93 f3f2 	sdiv	r3, r3, r2
 8002fc0:	75fb      	strb	r3, [r7, #23]

	measurement = abs(measurement);
 8002fc2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	bfb8      	it	lt
 8002fca:	425b      	neglt	r3, r3
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	817b      	strh	r3, [r7, #10]
	set_point = abs(set_point);
 8002fd0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	bfb8      	it	lt
 8002fd8:	425b      	neglt	r3, r3
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	813b      	strh	r3, [r7, #8]

	pid_cfg->Error = set_point - measurement;
 8002fde:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002fe2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	ee07 3a90 	vmov	s15, r3
 8002fec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	pid_cfg->Error = pid_cfg->Error * Speed2PWM_Rate;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002ffc:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8003144 <LRL_PID_Update+0x1a8>
 8003000:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003004:	eddf 6a50 	vldr	s13, [pc, #320]	; 8003148 <LRL_PID_Update+0x1ac>
 8003008:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c


	// Setting Values
//	float P = pid_cfg->Kp * pid_cfg->Error;
	pid_cfg->Integrator_Amount += (pid_cfg->Ts*(pid_cfg->Ki * (pid_cfg->Error + pid_cfg->Prev_Error)));
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	ed93 7a05 	vldr	s14, [r3, #20]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	edd3 6a03 	vldr	s13, [r3, #12]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	ed93 6a01 	vldr	s12, [r3, #4]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	edd3 5a0b 	vldr	s11, [r3, #44]	; 0x2c
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	edd3 7a08 	vldr	s15, [r3, #32]
 8003030:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8003034:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003038:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800303c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	edc3 7a05 	vstr	s15, [r3, #20]
//	float I = pid_cfg->Integrator_Amount;
	pid_cfg->Differentiator_Amount = 0;//pid_cfg->Kd * (measurement - pid_cfg->Prev_Measurement)/(pid_cfg->Ts);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	619a      	str	r2, [r3, #24]
                        + (2.0f * pid->tau - pid->T) * pid->differentiator)
                        / (2.0f * pid->tau + pid->T);
     */


	pid_cfg->Control_Signal = (pid_cfg->Kp * pid_cfg->Error) + pid_cfg->Integrator_Amount + pid_cfg->Differentiator_Amount;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	ed93 7a00 	vldr	s14, [r3]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800305a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	edd3 7a05 	vldr	s15, [r3, #20]
 8003064:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	edd3 7a06 	vldr	s15, [r3, #24]
 800306e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003072:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003076:	edc7 7a01 	vstr	s15, [r7, #4]
 800307a:	793b      	ldrb	r3, [r7, #4]
 800307c:	b25a      	sxtb	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if(pid_cfg->Anti_windup_EN == 1)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800308a:	2b01      	cmp	r3, #1
 800308c:	d124      	bne.n	80030d8 <LRL_PID_Update+0x13c>
	{

		if(pid_cfg->Control_Signal <= Upper_Saturation_Limit)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 8003094:	2b64      	cmp	r3, #100	; 0x64
 8003096:	dc04      	bgt.n	80030a2 <LRL_PID_Update+0x106>
			{
			//pid_cfg->Integrator_Amount += (pid_cfg->Ts*(pid_cfg->Ki * (pid_cfg->Error + pid_cfg->Prev_Error)));
			pid_cfg->Wind_Up_Amount = pid_cfg->Integrator_Amount;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	695a      	ldr	r2, [r3, #20]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	629a      	str	r2, [r3, #40]	; 0x28
 80030a0:	e01a      	b.n	80030d8 <LRL_PID_Update+0x13c>
			}
		else
			{
			pid_cfg->Control_Signal = (pid_cfg->Kp * pid_cfg->Error) + pid_cfg->Wind_Up_Amount + pid_cfg->Differentiator_Amount;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	ed93 7a00 	vldr	s14, [r3]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80030ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80030b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	edd3 7a06 	vldr	s15, [r3, #24]
 80030c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030ca:	edc7 7a01 	vstr	s15, [r7, #4]
 80030ce:	793b      	ldrb	r3, [r7, #4]
 80030d0:	b25a      	sxtb	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}


	//pid_cfg->Control_Signal = (pid_cfg->Kp * pid_cfg->Error) + pid_cfg->Integrator_Amount + pid_cfg->Differentiator_Amount;

	if(pid_cfg->Control_Signal > pid_cfg->Upper_Limit_Saturation)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f993 2024 	ldrsb.w	r2, [r3, #36]	; 0x24
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	dd06      	ble.n	80030f6 <LRL_PID_Update+0x15a>
	  {
		pid_cfg->Control_Signal = pid_cfg->Upper_Limit_Saturation;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f993 2011 	ldrsb.w	r2, [r3, #17]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80030f4:	e00d      	b.n	8003112 <LRL_PID_Update+0x176>
	  }
	else if(pid_cfg->Control_Signal < pid_cfg->Lower_Limit_Saturation)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f993 2024 	ldrsb.w	r2, [r3, #36]	; 0x24
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8003102:	429a      	cmp	r2, r3
 8003104:	da05      	bge.n	8003112 <LRL_PID_Update+0x176>
	  {
		pid_cfg->Control_Signal = pid_cfg->Lower_Limit_Saturation;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f993 2010 	ldrsb.w	r2, [r3, #16]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  }

	pid_cfg->Control_Signal = pid_cfg->Control_Signal * _dir;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 8003118:	b2da      	uxtb	r2, r3
 800311a:	7dfb      	ldrb	r3, [r7, #23]
 800311c:	fb12 f303 	smulbb	r3, r2, r3
 8003120:	b2db      	uxtb	r3, r3
 8003122:	b25a      	sxtb	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pid_cfg->Prev_Measurement = measurement;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	897a      	ldrh	r2, [r7, #10]
 800312e:	839a      	strh	r2, [r3, #28]
	pid_cfg->Prev_Error = pid_cfg->Error;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	621a      	str	r2, [r3, #32]


	}
 8003138:	bf00      	nop
 800313a:	371c      	adds	r7, #28
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	42960000 	.word	0x42960000
 8003148:	435a0000 	.word	0x435a0000

0800314c <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003150:	4b17      	ldr	r3, [pc, #92]	; (80031b0 <MX_SPI2_Init+0x64>)
 8003152:	4a18      	ldr	r2, [pc, #96]	; (80031b4 <MX_SPI2_Init+0x68>)
 8003154:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003156:	4b16      	ldr	r3, [pc, #88]	; (80031b0 <MX_SPI2_Init+0x64>)
 8003158:	f44f 7282 	mov.w	r2, #260	; 0x104
 800315c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800315e:	4b14      	ldr	r3, [pc, #80]	; (80031b0 <MX_SPI2_Init+0x64>)
 8003160:	2200      	movs	r2, #0
 8003162:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003164:	4b12      	ldr	r3, [pc, #72]	; (80031b0 <MX_SPI2_Init+0x64>)
 8003166:	2200      	movs	r2, #0
 8003168:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800316a:	4b11      	ldr	r3, [pc, #68]	; (80031b0 <MX_SPI2_Init+0x64>)
 800316c:	2200      	movs	r2, #0
 800316e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003170:	4b0f      	ldr	r3, [pc, #60]	; (80031b0 <MX_SPI2_Init+0x64>)
 8003172:	2200      	movs	r2, #0
 8003174:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003176:	4b0e      	ldr	r3, [pc, #56]	; (80031b0 <MX_SPI2_Init+0x64>)
 8003178:	f44f 7200 	mov.w	r2, #512	; 0x200
 800317c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800317e:	4b0c      	ldr	r3, [pc, #48]	; (80031b0 <MX_SPI2_Init+0x64>)
 8003180:	2200      	movs	r2, #0
 8003182:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003184:	4b0a      	ldr	r3, [pc, #40]	; (80031b0 <MX_SPI2_Init+0x64>)
 8003186:	2200      	movs	r2, #0
 8003188:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800318a:	4b09      	ldr	r3, [pc, #36]	; (80031b0 <MX_SPI2_Init+0x64>)
 800318c:	2200      	movs	r2, #0
 800318e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003190:	4b07      	ldr	r3, [pc, #28]	; (80031b0 <MX_SPI2_Init+0x64>)
 8003192:	2200      	movs	r2, #0
 8003194:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003196:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <MX_SPI2_Init+0x64>)
 8003198:	220a      	movs	r2, #10
 800319a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800319c:	4804      	ldr	r0, [pc, #16]	; (80031b0 <MX_SPI2_Init+0x64>)
 800319e:	f003 febd 	bl	8006f1c <HAL_SPI_Init>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80031a8:	f7fe fc4c 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80031ac:	bf00      	nop
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	200008a0 	.word	0x200008a0
 80031b4:	40003800 	.word	0x40003800

080031b8 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80031bc:	4b17      	ldr	r3, [pc, #92]	; (800321c <MX_SPI3_Init+0x64>)
 80031be:	4a18      	ldr	r2, [pc, #96]	; (8003220 <MX_SPI3_Init+0x68>)
 80031c0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80031c2:	4b16      	ldr	r3, [pc, #88]	; (800321c <MX_SPI3_Init+0x64>)
 80031c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80031c8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80031ca:	4b14      	ldr	r3, [pc, #80]	; (800321c <MX_SPI3_Init+0x64>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80031d0:	4b12      	ldr	r3, [pc, #72]	; (800321c <MX_SPI3_Init+0x64>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80031d6:	4b11      	ldr	r3, [pc, #68]	; (800321c <MX_SPI3_Init+0x64>)
 80031d8:	2200      	movs	r2, #0
 80031da:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80031dc:	4b0f      	ldr	r3, [pc, #60]	; (800321c <MX_SPI3_Init+0x64>)
 80031de:	2200      	movs	r2, #0
 80031e0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80031e2:	4b0e      	ldr	r3, [pc, #56]	; (800321c <MX_SPI3_Init+0x64>)
 80031e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031e8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031ea:	4b0c      	ldr	r3, [pc, #48]	; (800321c <MX_SPI3_Init+0x64>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80031f0:	4b0a      	ldr	r3, [pc, #40]	; (800321c <MX_SPI3_Init+0x64>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80031f6:	4b09      	ldr	r3, [pc, #36]	; (800321c <MX_SPI3_Init+0x64>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031fc:	4b07      	ldr	r3, [pc, #28]	; (800321c <MX_SPI3_Init+0x64>)
 80031fe:	2200      	movs	r2, #0
 8003200:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003202:	4b06      	ldr	r3, [pc, #24]	; (800321c <MX_SPI3_Init+0x64>)
 8003204:	220a      	movs	r2, #10
 8003206:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003208:	4804      	ldr	r0, [pc, #16]	; (800321c <MX_SPI3_Init+0x64>)
 800320a:	f003 fe87 	bl	8006f1c <HAL_SPI_Init>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003214:	f7fe fc16 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003218:	bf00      	nop
 800321a:	bd80      	pop	{r7, pc}
 800321c:	200008f8 	.word	0x200008f8
 8003220:	40003c00 	.word	0x40003c00

08003224 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b08c      	sub	sp, #48	; 0x30
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800322c:	f107 031c 	add.w	r3, r7, #28
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	605a      	str	r2, [r3, #4]
 8003236:	609a      	str	r2, [r3, #8]
 8003238:	60da      	str	r2, [r3, #12]
 800323a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a42      	ldr	r2, [pc, #264]	; (800334c <HAL_SPI_MspInit+0x128>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d14b      	bne.n	80032de <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003246:	2300      	movs	r3, #0
 8003248:	61bb      	str	r3, [r7, #24]
 800324a:	4b41      	ldr	r3, [pc, #260]	; (8003350 <HAL_SPI_MspInit+0x12c>)
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	4a40      	ldr	r2, [pc, #256]	; (8003350 <HAL_SPI_MspInit+0x12c>)
 8003250:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003254:	6413      	str	r3, [r2, #64]	; 0x40
 8003256:	4b3e      	ldr	r3, [pc, #248]	; (8003350 <HAL_SPI_MspInit+0x12c>)
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800325e:	61bb      	str	r3, [r7, #24]
 8003260:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003262:	2300      	movs	r3, #0
 8003264:	617b      	str	r3, [r7, #20]
 8003266:	4b3a      	ldr	r3, [pc, #232]	; (8003350 <HAL_SPI_MspInit+0x12c>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	4a39      	ldr	r2, [pc, #228]	; (8003350 <HAL_SPI_MspInit+0x12c>)
 800326c:	f043 0304 	orr.w	r3, r3, #4
 8003270:	6313      	str	r3, [r2, #48]	; 0x30
 8003272:	4b37      	ldr	r3, [pc, #220]	; (8003350 <HAL_SPI_MspInit+0x12c>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	f003 0304 	and.w	r3, r3, #4
 800327a:	617b      	str	r3, [r7, #20]
 800327c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800327e:	2300      	movs	r3, #0
 8003280:	613b      	str	r3, [r7, #16]
 8003282:	4b33      	ldr	r3, [pc, #204]	; (8003350 <HAL_SPI_MspInit+0x12c>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	4a32      	ldr	r2, [pc, #200]	; (8003350 <HAL_SPI_MspInit+0x12c>)
 8003288:	f043 0302 	orr.w	r3, r3, #2
 800328c:	6313      	str	r3, [r2, #48]	; 0x30
 800328e:	4b30      	ldr	r3, [pc, #192]	; (8003350 <HAL_SPI_MspInit+0x12c>)
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	613b      	str	r3, [r7, #16]
 8003298:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = JET_SPI_MISO_Pin|JET_SPI_MOSI_Pin;
 800329a:	230c      	movs	r3, #12
 800329c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800329e:	2302      	movs	r3, #2
 80032a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a2:	2300      	movs	r3, #0
 80032a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032a6:	2303      	movs	r3, #3
 80032a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80032aa:	2305      	movs	r3, #5
 80032ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032ae:	f107 031c 	add.w	r3, r7, #28
 80032b2:	4619      	mov	r1, r3
 80032b4:	4827      	ldr	r0, [pc, #156]	; (8003354 <HAL_SPI_MspInit+0x130>)
 80032b6:	f001 fee3 	bl	8005080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = JET_SPI_SCK_Pin;
 80032ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c0:	2302      	movs	r3, #2
 80032c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c4:	2300      	movs	r3, #0
 80032c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032c8:	2303      	movs	r3, #3
 80032ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80032cc:	2305      	movs	r3, #5
 80032ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(JET_SPI_SCK_GPIO_Port, &GPIO_InitStruct);
 80032d0:	f107 031c 	add.w	r3, r7, #28
 80032d4:	4619      	mov	r1, r3
 80032d6:	4820      	ldr	r0, [pc, #128]	; (8003358 <HAL_SPI_MspInit+0x134>)
 80032d8:	f001 fed2 	bl	8005080 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80032dc:	e031      	b.n	8003342 <HAL_SPI_MspInit+0x11e>
  else if(spiHandle->Instance==SPI3)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a1e      	ldr	r2, [pc, #120]	; (800335c <HAL_SPI_MspInit+0x138>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d12c      	bne.n	8003342 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80032e8:	2300      	movs	r3, #0
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	4b18      	ldr	r3, [pc, #96]	; (8003350 <HAL_SPI_MspInit+0x12c>)
 80032ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f0:	4a17      	ldr	r2, [pc, #92]	; (8003350 <HAL_SPI_MspInit+0x12c>)
 80032f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032f6:	6413      	str	r3, [r2, #64]	; 0x40
 80032f8:	4b15      	ldr	r3, [pc, #84]	; (8003350 <HAL_SPI_MspInit+0x12c>)
 80032fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003300:	60fb      	str	r3, [r7, #12]
 8003302:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003304:	2300      	movs	r3, #0
 8003306:	60bb      	str	r3, [r7, #8]
 8003308:	4b11      	ldr	r3, [pc, #68]	; (8003350 <HAL_SPI_MspInit+0x12c>)
 800330a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330c:	4a10      	ldr	r2, [pc, #64]	; (8003350 <HAL_SPI_MspInit+0x12c>)
 800330e:	f043 0304 	orr.w	r3, r3, #4
 8003312:	6313      	str	r3, [r2, #48]	; 0x30
 8003314:	4b0e      	ldr	r3, [pc, #56]	; (8003350 <HAL_SPI_MspInit+0x12c>)
 8003316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	60bb      	str	r3, [r7, #8]
 800331e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003320:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003324:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003326:	2302      	movs	r3, #2
 8003328:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332a:	2300      	movs	r3, #0
 800332c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800332e:	2303      	movs	r3, #3
 8003330:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003332:	2306      	movs	r3, #6
 8003334:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003336:	f107 031c 	add.w	r3, r7, #28
 800333a:	4619      	mov	r1, r3
 800333c:	4805      	ldr	r0, [pc, #20]	; (8003354 <HAL_SPI_MspInit+0x130>)
 800333e:	f001 fe9f 	bl	8005080 <HAL_GPIO_Init>
}
 8003342:	bf00      	nop
 8003344:	3730      	adds	r7, #48	; 0x30
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40003800 	.word	0x40003800
 8003350:	40023800 	.word	0x40023800
 8003354:	40020800 	.word	0x40020800
 8003358:	40020400 	.word	0x40020400
 800335c:	40003c00 	.word	0x40003c00

08003360 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003366:	2300      	movs	r3, #0
 8003368:	607b      	str	r3, [r7, #4]
 800336a:	4b10      	ldr	r3, [pc, #64]	; (80033ac <HAL_MspInit+0x4c>)
 800336c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336e:	4a0f      	ldr	r2, [pc, #60]	; (80033ac <HAL_MspInit+0x4c>)
 8003370:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003374:	6453      	str	r3, [r2, #68]	; 0x44
 8003376:	4b0d      	ldr	r3, [pc, #52]	; (80033ac <HAL_MspInit+0x4c>)
 8003378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800337e:	607b      	str	r3, [r7, #4]
 8003380:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003382:	2300      	movs	r3, #0
 8003384:	603b      	str	r3, [r7, #0]
 8003386:	4b09      	ldr	r3, [pc, #36]	; (80033ac <HAL_MspInit+0x4c>)
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	4a08      	ldr	r2, [pc, #32]	; (80033ac <HAL_MspInit+0x4c>)
 800338c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003390:	6413      	str	r3, [r2, #64]	; 0x40
 8003392:	4b06      	ldr	r3, [pc, #24]	; (80033ac <HAL_MspInit+0x4c>)
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339a:	603b      	str	r3, [r7, #0]
 800339c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	40023800 	.word	0x40023800

080033b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033b4:	e7fe      	b.n	80033b4 <NMI_Handler+0x4>

080033b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033b6:	b480      	push	{r7}
 80033b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033ba:	e7fe      	b.n	80033ba <HardFault_Handler+0x4>

080033bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033c0:	e7fe      	b.n	80033c0 <MemManage_Handler+0x4>

080033c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033c2:	b480      	push	{r7}
 80033c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033c6:	e7fe      	b.n	80033c6 <BusFault_Handler+0x4>

080033c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033cc:	e7fe      	b.n	80033cc <UsageFault_Handler+0x4>

080033ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033ce:	b480      	push	{r7}
 80033d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033d2:	bf00      	nop
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033e0:	bf00      	nop
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033ea:	b480      	push	{r7}
 80033ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033ee:	bf00      	nop
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033fc:	f000 fece 	bl	800419c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003400:	bf00      	nop
 8003402:	bd80      	pop	{r7, pc}

08003404 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003408:	4802      	ldr	r0, [pc, #8]	; (8003414 <TIM4_IRQHandler+0x10>)
 800340a:	f004 f974 	bl	80076f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800340e:	bf00      	nop
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	20000a2c 	.word	0x20000a2c

08003418 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800341c:	4802      	ldr	r0, [pc, #8]	; (8003428 <USART1_IRQHandler+0x10>)
 800341e:	f005 fbd3 	bl	8008bc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003422:	bf00      	nop
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	20000b4c 	.word	0x20000b4c

0800342c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003430:	4802      	ldr	r0, [pc, #8]	; (800343c <USART2_IRQHandler+0x10>)
 8003432:	f005 fbc9 	bl	8008bc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003436:	bf00      	nop
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	20000b90 	.word	0x20000b90

08003440 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003444:	4802      	ldr	r0, [pc, #8]	; (8003450 <TIM5_IRQHandler+0x10>)
 8003446:	f004 f956 	bl	80076f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800344a:	bf00      	nop
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	20000a74 	.word	0x20000a74

08003454 <_getpid>:
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
 8003458:	2301      	movs	r3, #1
 800345a:	4618      	mov	r0, r3
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <_kill>:
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
 800346e:	f006 fb13 	bl	8009a98 <__errno>
 8003472:	4603      	mov	r3, r0
 8003474:	2216      	movs	r2, #22
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	f04f 33ff 	mov.w	r3, #4294967295
 800347c:	4618      	mov	r0, r3
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <_exit>:
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	f04f 31ff 	mov.w	r1, #4294967295
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f7ff ffe7 	bl	8003464 <_kill>
 8003496:	e7fe      	b.n	8003496 <_exit+0x12>

08003498 <_read>:
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
 80034a4:	2300      	movs	r3, #0
 80034a6:	617b      	str	r3, [r7, #20]
 80034a8:	e00a      	b.n	80034c0 <_read+0x28>
 80034aa:	f3af 8000 	nop.w
 80034ae:	4601      	mov	r1, r0
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	1c5a      	adds	r2, r3, #1
 80034b4:	60ba      	str	r2, [r7, #8]
 80034b6:	b2ca      	uxtb	r2, r1
 80034b8:	701a      	strb	r2, [r3, #0]
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	3301      	adds	r3, #1
 80034be:	617b      	str	r3, [r7, #20]
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	dbf0      	blt.n	80034aa <_read+0x12>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4618      	mov	r0, r3
 80034cc:	3718      	adds	r7, #24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <_write>:
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b086      	sub	sp, #24
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	60f8      	str	r0, [r7, #12]
 80034da:	60b9      	str	r1, [r7, #8]
 80034dc:	607a      	str	r2, [r7, #4]
 80034de:	2300      	movs	r3, #0
 80034e0:	617b      	str	r3, [r7, #20]
 80034e2:	e009      	b.n	80034f8 <_write+0x26>
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	1c5a      	adds	r2, r3, #1
 80034e8:	60ba      	str	r2, [r7, #8]
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7fe f8e7 	bl	80016c0 <__io_putchar>
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	3301      	adds	r3, #1
 80034f6:	617b      	str	r3, [r7, #20]
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	dbf1      	blt.n	80034e4 <_write+0x12>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4618      	mov	r0, r3
 8003504:	3718      	adds	r7, #24
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <_close>:
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
 8003512:	f04f 33ff 	mov.w	r3, #4294967295
 8003516:	4618      	mov	r0, r3
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <_fstat>:
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
 800352a:	6039      	str	r1, [r7, #0]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003532:	605a      	str	r2, [r3, #4]
 8003534:	2300      	movs	r3, #0
 8003536:	4618      	mov	r0, r3
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <_isatty>:
 8003542:	b480      	push	{r7}
 8003544:	b083      	sub	sp, #12
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
 800354a:	2301      	movs	r3, #1
 800354c:	4618      	mov	r0, r3
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <_lseek>:
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
 8003564:	2300      	movs	r3, #0
 8003566:	4618      	mov	r0, r3
 8003568:	3714      	adds	r7, #20
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
	...

08003574 <_sbrk>:
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	4a14      	ldr	r2, [pc, #80]	; (80035d0 <_sbrk+0x5c>)
 800357e:	4b15      	ldr	r3, [pc, #84]	; (80035d4 <_sbrk+0x60>)
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	617b      	str	r3, [r7, #20]
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	613b      	str	r3, [r7, #16]
 8003588:	4b13      	ldr	r3, [pc, #76]	; (80035d8 <_sbrk+0x64>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d102      	bne.n	8003596 <_sbrk+0x22>
 8003590:	4b11      	ldr	r3, [pc, #68]	; (80035d8 <_sbrk+0x64>)
 8003592:	4a12      	ldr	r2, [pc, #72]	; (80035dc <_sbrk+0x68>)
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	4b10      	ldr	r3, [pc, #64]	; (80035d8 <_sbrk+0x64>)
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4413      	add	r3, r2
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d207      	bcs.n	80035b4 <_sbrk+0x40>
 80035a4:	f006 fa78 	bl	8009a98 <__errno>
 80035a8:	4603      	mov	r3, r0
 80035aa:	220c      	movs	r2, #12
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	f04f 33ff 	mov.w	r3, #4294967295
 80035b2:	e009      	b.n	80035c8 <_sbrk+0x54>
 80035b4:	4b08      	ldr	r3, [pc, #32]	; (80035d8 <_sbrk+0x64>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	60fb      	str	r3, [r7, #12]
 80035ba:	4b07      	ldr	r3, [pc, #28]	; (80035d8 <_sbrk+0x64>)
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4413      	add	r3, r2
 80035c2:	4a05      	ldr	r2, [pc, #20]	; (80035d8 <_sbrk+0x64>)
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	4618      	mov	r0, r3
 80035ca:	3718      	adds	r7, #24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	20020000 	.word	0x20020000
 80035d4:	00000400 	.word	0x00000400
 80035d8:	20000950 	.word	0x20000950
 80035dc:	20000be8 	.word	0x20000be8

080035e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035e4:	4b06      	ldr	r3, [pc, #24]	; (8003600 <SystemInit+0x20>)
 80035e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ea:	4a05      	ldr	r2, [pc, #20]	; (8003600 <SystemInit+0x20>)
 80035ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035f4:	bf00      	nop
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	e000ed00 	.word	0xe000ed00

08003604 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800360a:	f107 0308 	add.w	r3, r7, #8
 800360e:	2200      	movs	r2, #0
 8003610:	601a      	str	r2, [r3, #0]
 8003612:	605a      	str	r2, [r3, #4]
 8003614:	609a      	str	r2, [r3, #8]
 8003616:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003618:	463b      	mov	r3, r7
 800361a:	2200      	movs	r2, #0
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003620:	4b1e      	ldr	r3, [pc, #120]	; (800369c <MX_TIM1_Init+0x98>)
 8003622:	4a1f      	ldr	r2, [pc, #124]	; (80036a0 <MX_TIM1_Init+0x9c>)
 8003624:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 8003626:	4b1d      	ldr	r3, [pc, #116]	; (800369c <MX_TIM1_Init+0x98>)
 8003628:	22a7      	movs	r2, #167	; 0xa7
 800362a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800362c:	4b1b      	ldr	r3, [pc, #108]	; (800369c <MX_TIM1_Init+0x98>)
 800362e:	2200      	movs	r2, #0
 8003630:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003632:	4b1a      	ldr	r3, [pc, #104]	; (800369c <MX_TIM1_Init+0x98>)
 8003634:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003638:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800363a:	4b18      	ldr	r3, [pc, #96]	; (800369c <MX_TIM1_Init+0x98>)
 800363c:	2200      	movs	r2, #0
 800363e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003640:	4b16      	ldr	r3, [pc, #88]	; (800369c <MX_TIM1_Init+0x98>)
 8003642:	2200      	movs	r2, #0
 8003644:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003646:	4b15      	ldr	r3, [pc, #84]	; (800369c <MX_TIM1_Init+0x98>)
 8003648:	2200      	movs	r2, #0
 800364a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800364c:	4813      	ldr	r0, [pc, #76]	; (800369c <MX_TIM1_Init+0x98>)
 800364e:	f003 fcee 	bl	800702e <HAL_TIM_Base_Init>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8003658:	f7fe f9f4 	bl	8001a44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800365c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003660:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003662:	f107 0308 	add.w	r3, r7, #8
 8003666:	4619      	mov	r1, r3
 8003668:	480c      	ldr	r0, [pc, #48]	; (800369c <MX_TIM1_Init+0x98>)
 800366a:	f004 faab 	bl	8007bc4 <HAL_TIM_ConfigClockSource>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8003674:	f7fe f9e6 	bl	8001a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003678:	2300      	movs	r3, #0
 800367a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800367c:	2300      	movs	r3, #0
 800367e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003680:	463b      	mov	r3, r7
 8003682:	4619      	mov	r1, r3
 8003684:	4805      	ldr	r0, [pc, #20]	; (800369c <MX_TIM1_Init+0x98>)
 8003686:	f004 ffc7 	bl	8008618 <HAL_TIMEx_MasterConfigSynchronization>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003690:	f7fe f9d8 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003694:	bf00      	nop
 8003696:	3718      	adds	r7, #24
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	20000954 	.word	0x20000954
 80036a0:	40010000 	.word	0x40010000

080036a4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b08c      	sub	sp, #48	; 0x30
 80036a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80036aa:	f107 030c 	add.w	r3, r7, #12
 80036ae:	2224      	movs	r2, #36	; 0x24
 80036b0:	2100      	movs	r1, #0
 80036b2:	4618      	mov	r0, r3
 80036b4:	f006 fa1a 	bl	8009aec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036b8:	1d3b      	adds	r3, r7, #4
 80036ba:	2200      	movs	r2, #0
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80036c0:	4b21      	ldr	r3, [pc, #132]	; (8003748 <MX_TIM2_Init+0xa4>)
 80036c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80036c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80036c8:	4b1f      	ldr	r3, [pc, #124]	; (8003748 <MX_TIM2_Init+0xa4>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036ce:	4b1e      	ldr	r3, [pc, #120]	; (8003748 <MX_TIM2_Init+0xa4>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 48960;
 80036d4:	4b1c      	ldr	r3, [pc, #112]	; (8003748 <MX_TIM2_Init+0xa4>)
 80036d6:	f64b 7240 	movw	r2, #48960	; 0xbf40
 80036da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036dc:	4b1a      	ldr	r3, [pc, #104]	; (8003748 <MX_TIM2_Init+0xa4>)
 80036de:	2200      	movs	r2, #0
 80036e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80036e2:	4b19      	ldr	r3, [pc, #100]	; (8003748 <MX_TIM2_Init+0xa4>)
 80036e4:	2280      	movs	r2, #128	; 0x80
 80036e6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80036e8:	2303      	movs	r3, #3
 80036ea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80036ec:	2302      	movs	r3, #2
 80036ee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80036f0:	2301      	movs	r3, #1
 80036f2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80036f4:	2300      	movs	r3, #0
 80036f6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80036f8:	230a      	movs	r3, #10
 80036fa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80036fc:	2300      	movs	r3, #0
 80036fe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003700:	2301      	movs	r3, #1
 8003702:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003704:	2300      	movs	r3, #0
 8003706:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8003708:	230a      	movs	r3, #10
 800370a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800370c:	f107 030c 	add.w	r3, r7, #12
 8003710:	4619      	mov	r1, r3
 8003712:	480d      	ldr	r0, [pc, #52]	; (8003748 <MX_TIM2_Init+0xa4>)
 8003714:	f003 febb 	bl	800748e <HAL_TIM_Encoder_Init>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800371e:	f7fe f991 	bl	8001a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003722:	2300      	movs	r3, #0
 8003724:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003726:	2300      	movs	r3, #0
 8003728:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800372a:	1d3b      	adds	r3, r7, #4
 800372c:	4619      	mov	r1, r3
 800372e:	4806      	ldr	r0, [pc, #24]	; (8003748 <MX_TIM2_Init+0xa4>)
 8003730:	f004 ff72 	bl	8008618 <HAL_TIMEx_MasterConfigSynchronization>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800373a:	f7fe f983 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800373e:	bf00      	nop
 8003740:	3730      	adds	r7, #48	; 0x30
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	2000099c 	.word	0x2000099c

0800374c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b08c      	sub	sp, #48	; 0x30
 8003750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003752:	f107 030c 	add.w	r3, r7, #12
 8003756:	2224      	movs	r2, #36	; 0x24
 8003758:	2100      	movs	r1, #0
 800375a:	4618      	mov	r0, r3
 800375c:	f006 f9c6 	bl	8009aec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003760:	1d3b      	adds	r3, r7, #4
 8003762:	2200      	movs	r2, #0
 8003764:	601a      	str	r2, [r3, #0]
 8003766:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003768:	4b20      	ldr	r3, [pc, #128]	; (80037ec <MX_TIM3_Init+0xa0>)
 800376a:	4a21      	ldr	r2, [pc, #132]	; (80037f0 <MX_TIM3_Init+0xa4>)
 800376c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800376e:	4b1f      	ldr	r3, [pc, #124]	; (80037ec <MX_TIM3_Init+0xa0>)
 8003770:	2200      	movs	r2, #0
 8003772:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003774:	4b1d      	ldr	r3, [pc, #116]	; (80037ec <MX_TIM3_Init+0xa0>)
 8003776:	2200      	movs	r2, #0
 8003778:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 48960;
 800377a:	4b1c      	ldr	r3, [pc, #112]	; (80037ec <MX_TIM3_Init+0xa0>)
 800377c:	f64b 7240 	movw	r2, #48960	; 0xbf40
 8003780:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003782:	4b1a      	ldr	r3, [pc, #104]	; (80037ec <MX_TIM3_Init+0xa0>)
 8003784:	2200      	movs	r2, #0
 8003786:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003788:	4b18      	ldr	r3, [pc, #96]	; (80037ec <MX_TIM3_Init+0xa0>)
 800378a:	2280      	movs	r2, #128	; 0x80
 800378c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800378e:	2303      	movs	r3, #3
 8003790:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003792:	2300      	movs	r3, #0
 8003794:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003796:	2301      	movs	r3, #1
 8003798:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800379a:	2300      	movs	r3, #0
 800379c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800379e:	230a      	movs	r3, #10
 80037a0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80037a2:	2300      	movs	r3, #0
 80037a4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80037a6:	2301      	movs	r3, #1
 80037a8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80037aa:	2300      	movs	r3, #0
 80037ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80037ae:	230a      	movs	r3, #10
 80037b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80037b2:	f107 030c 	add.w	r3, r7, #12
 80037b6:	4619      	mov	r1, r3
 80037b8:	480c      	ldr	r0, [pc, #48]	; (80037ec <MX_TIM3_Init+0xa0>)
 80037ba:	f003 fe68 	bl	800748e <HAL_TIM_Encoder_Init>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80037c4:	f7fe f93e 	bl	8001a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037c8:	2300      	movs	r3, #0
 80037ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037cc:	2300      	movs	r3, #0
 80037ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80037d0:	1d3b      	adds	r3, r7, #4
 80037d2:	4619      	mov	r1, r3
 80037d4:	4805      	ldr	r0, [pc, #20]	; (80037ec <MX_TIM3_Init+0xa0>)
 80037d6:	f004 ff1f 	bl	8008618 <HAL_TIMEx_MasterConfigSynchronization>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80037e0:	f7fe f930 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80037e4:	bf00      	nop
 80037e6:	3730      	adds	r7, #48	; 0x30
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	200009e4 	.word	0x200009e4
 80037f0:	40000400 	.word	0x40000400

080037f4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b08a      	sub	sp, #40	; 0x28
 80037f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037fa:	f107 0318 	add.w	r3, r7, #24
 80037fe:	2200      	movs	r2, #0
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	605a      	str	r2, [r3, #4]
 8003804:	609a      	str	r2, [r3, #8]
 8003806:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003808:	f107 0310 	add.w	r3, r7, #16
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003812:	463b      	mov	r3, r7
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	605a      	str	r2, [r3, #4]
 800381a:	609a      	str	r2, [r3, #8]
 800381c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800381e:	4b31      	ldr	r3, [pc, #196]	; (80038e4 <MX_TIM4_Init+0xf0>)
 8003820:	4a31      	ldr	r2, [pc, #196]	; (80038e8 <MX_TIM4_Init+0xf4>)
 8003822:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003824:	4b2f      	ldr	r3, [pc, #188]	; (80038e4 <MX_TIM4_Init+0xf0>)
 8003826:	2200      	movs	r2, #0
 8003828:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800382a:	4b2e      	ldr	r3, [pc, #184]	; (80038e4 <MX_TIM4_Init+0xf0>)
 800382c:	2200      	movs	r2, #0
 800382e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003830:	4b2c      	ldr	r3, [pc, #176]	; (80038e4 <MX_TIM4_Init+0xf0>)
 8003832:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003836:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003838:	4b2a      	ldr	r3, [pc, #168]	; (80038e4 <MX_TIM4_Init+0xf0>)
 800383a:	2200      	movs	r2, #0
 800383c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800383e:	4b29      	ldr	r3, [pc, #164]	; (80038e4 <MX_TIM4_Init+0xf0>)
 8003840:	2200      	movs	r2, #0
 8003842:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003844:	4827      	ldr	r0, [pc, #156]	; (80038e4 <MX_TIM4_Init+0xf0>)
 8003846:	f003 fbf2 	bl	800702e <HAL_TIM_Base_Init>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d001      	beq.n	8003854 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8003850:	f7fe f8f8 	bl	8001a44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003858:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800385a:	f107 0318 	add.w	r3, r7, #24
 800385e:	4619      	mov	r1, r3
 8003860:	4820      	ldr	r0, [pc, #128]	; (80038e4 <MX_TIM4_Init+0xf0>)
 8003862:	f004 f9af 	bl	8007bc4 <HAL_TIM_ConfigClockSource>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800386c:	f7fe f8ea 	bl	8001a44 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8003870:	481c      	ldr	r0, [pc, #112]	; (80038e4 <MX_TIM4_Init+0xf0>)
 8003872:	f003 fdbd 	bl	80073f0 <HAL_TIM_IC_Init>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800387c:	f7fe f8e2 	bl	8001a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003880:	2300      	movs	r3, #0
 8003882:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003884:	2300      	movs	r3, #0
 8003886:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003888:	f107 0310 	add.w	r3, r7, #16
 800388c:	4619      	mov	r1, r3
 800388e:	4815      	ldr	r0, [pc, #84]	; (80038e4 <MX_TIM4_Init+0xf0>)
 8003890:	f004 fec2 	bl	8008618 <HAL_TIMEx_MasterConfigSynchronization>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 800389a:	f7fe f8d3 	bl	8001a44 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800389e:	2300      	movs	r3, #0
 80038a0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80038a2:	2301      	movs	r3, #1
 80038a4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80038a6:	2300      	movs	r3, #0
 80038a8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80038aa:	2300      	movs	r3, #0
 80038ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80038ae:	463b      	mov	r3, r7
 80038b0:	2208      	movs	r2, #8
 80038b2:	4619      	mov	r1, r3
 80038b4:	480b      	ldr	r0, [pc, #44]	; (80038e4 <MX_TIM4_Init+0xf0>)
 80038b6:	f004 f826 	bl	8007906 <HAL_TIM_IC_ConfigChannel>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 80038c0:	f7fe f8c0 	bl	8001a44 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80038c4:	463b      	mov	r3, r7
 80038c6:	220c      	movs	r2, #12
 80038c8:	4619      	mov	r1, r3
 80038ca:	4806      	ldr	r0, [pc, #24]	; (80038e4 <MX_TIM4_Init+0xf0>)
 80038cc:	f004 f81b 	bl	8007906 <HAL_TIM_IC_ConfigChannel>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <MX_TIM4_Init+0xe6>
  {
    Error_Handler();
 80038d6:	f7fe f8b5 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80038da:	bf00      	nop
 80038dc:	3728      	adds	r7, #40	; 0x28
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	20000a2c 	.word	0x20000a2c
 80038e8:	40000800 	.word	0x40000800

080038ec <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038f2:	f107 0308 	add.w	r3, r7, #8
 80038f6:	2200      	movs	r2, #0
 80038f8:	601a      	str	r2, [r3, #0]
 80038fa:	605a      	str	r2, [r3, #4]
 80038fc:	609a      	str	r2, [r3, #8]
 80038fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003900:	463b      	mov	r3, r7
 8003902:	2200      	movs	r2, #0
 8003904:	601a      	str	r2, [r3, #0]
 8003906:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003908:	4b1d      	ldr	r3, [pc, #116]	; (8003980 <MX_TIM5_Init+0x94>)
 800390a:	4a1e      	ldr	r2, [pc, #120]	; (8003984 <MX_TIM5_Init+0x98>)
 800390c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 10000;
 800390e:	4b1c      	ldr	r3, [pc, #112]	; (8003980 <MX_TIM5_Init+0x94>)
 8003910:	f242 7210 	movw	r2, #10000	; 0x2710
 8003914:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003916:	4b1a      	ldr	r3, [pc, #104]	; (8003980 <MX_TIM5_Init+0x94>)
 8003918:	2200      	movs	r2, #0
 800391a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 83;
 800391c:	4b18      	ldr	r3, [pc, #96]	; (8003980 <MX_TIM5_Init+0x94>)
 800391e:	2253      	movs	r2, #83	; 0x53
 8003920:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003922:	4b17      	ldr	r3, [pc, #92]	; (8003980 <MX_TIM5_Init+0x94>)
 8003924:	2200      	movs	r2, #0
 8003926:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003928:	4b15      	ldr	r3, [pc, #84]	; (8003980 <MX_TIM5_Init+0x94>)
 800392a:	2200      	movs	r2, #0
 800392c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800392e:	4814      	ldr	r0, [pc, #80]	; (8003980 <MX_TIM5_Init+0x94>)
 8003930:	f003 fb7d 	bl	800702e <HAL_TIM_Base_Init>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800393a:	f7fe f883 	bl	8001a44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800393e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003942:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003944:	f107 0308 	add.w	r3, r7, #8
 8003948:	4619      	mov	r1, r3
 800394a:	480d      	ldr	r0, [pc, #52]	; (8003980 <MX_TIM5_Init+0x94>)
 800394c:	f004 f93a 	bl	8007bc4 <HAL_TIM_ConfigClockSource>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8003956:	f7fe f875 	bl	8001a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800395a:	2300      	movs	r3, #0
 800395c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800395e:	2300      	movs	r3, #0
 8003960:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003962:	463b      	mov	r3, r7
 8003964:	4619      	mov	r1, r3
 8003966:	4806      	ldr	r0, [pc, #24]	; (8003980 <MX_TIM5_Init+0x94>)
 8003968:	f004 fe56 	bl	8008618 <HAL_TIMEx_MasterConfigSynchronization>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8003972:	f7fe f867 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003976:	bf00      	nop
 8003978:	3718      	adds	r7, #24
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	20000a74 	.word	0x20000a74
 8003984:	40000c00 	.word	0x40000c00

08003988 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b096      	sub	sp, #88	; 0x58
 800398c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800398e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003992:	2200      	movs	r2, #0
 8003994:	601a      	str	r2, [r3, #0]
 8003996:	605a      	str	r2, [r3, #4]
 8003998:	609a      	str	r2, [r3, #8]
 800399a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800399c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80039a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039aa:	2200      	movs	r2, #0
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	605a      	str	r2, [r3, #4]
 80039b0:	609a      	str	r2, [r3, #8]
 80039b2:	60da      	str	r2, [r3, #12]
 80039b4:	611a      	str	r2, [r3, #16]
 80039b6:	615a      	str	r2, [r3, #20]
 80039b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80039ba:	1d3b      	adds	r3, r7, #4
 80039bc:	2220      	movs	r2, #32
 80039be:	2100      	movs	r1, #0
 80039c0:	4618      	mov	r0, r3
 80039c2:	f006 f893 	bl	8009aec <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80039c6:	4b44      	ldr	r3, [pc, #272]	; (8003ad8 <MX_TIM8_Init+0x150>)
 80039c8:	4a44      	ldr	r2, [pc, #272]	; (8003adc <MX_TIM8_Init+0x154>)
 80039ca:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 8-1;
 80039cc:	4b42      	ldr	r3, [pc, #264]	; (8003ad8 <MX_TIM8_Init+0x150>)
 80039ce:	2207      	movs	r2, #7
 80039d0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039d2:	4b41      	ldr	r3, [pc, #260]	; (8003ad8 <MX_TIM8_Init+0x150>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000;
 80039d8:	4b3f      	ldr	r3, [pc, #252]	; (8003ad8 <MX_TIM8_Init+0x150>)
 80039da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80039de:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039e0:	4b3d      	ldr	r3, [pc, #244]	; (8003ad8 <MX_TIM8_Init+0x150>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80039e6:	4b3c      	ldr	r3, [pc, #240]	; (8003ad8 <MX_TIM8_Init+0x150>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80039ec:	4b3a      	ldr	r3, [pc, #232]	; (8003ad8 <MX_TIM8_Init+0x150>)
 80039ee:	2280      	movs	r2, #128	; 0x80
 80039f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80039f2:	4839      	ldr	r0, [pc, #228]	; (8003ad8 <MX_TIM8_Init+0x150>)
 80039f4:	f003 fb1b 	bl	800702e <HAL_TIM_Base_Init>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80039fe:	f7fe f821 	bl	8001a44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a06:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003a08:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	4832      	ldr	r0, [pc, #200]	; (8003ad8 <MX_TIM8_Init+0x150>)
 8003a10:	f004 f8d8 	bl	8007bc4 <HAL_TIM_ConfigClockSource>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8003a1a:	f7fe f813 	bl	8001a44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003a1e:	482e      	ldr	r0, [pc, #184]	; (8003ad8 <MX_TIM8_Init+0x150>)
 8003a20:	f003 fbc4 	bl	80071ac <HAL_TIM_PWM_Init>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8003a2a:	f7fe f80b 	bl	8001a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a32:	2300      	movs	r3, #0
 8003a34:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003a36:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	4826      	ldr	r0, [pc, #152]	; (8003ad8 <MX_TIM8_Init+0x150>)
 8003a3e:	f004 fdeb 	bl	8008618 <HAL_TIMEx_MasterConfigSynchronization>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8003a48:	f7fd fffc 	bl	8001a44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a4c:	2360      	movs	r3, #96	; 0x60
 8003a4e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003a50:	2300      	movs	r3, #0
 8003a52:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a54:	2300      	movs	r3, #0
 8003a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003a60:	2300      	movs	r3, #0
 8003a62:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003a64:	2300      	movs	r3, #0
 8003a66:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	4619      	mov	r1, r3
 8003a70:	4819      	ldr	r0, [pc, #100]	; (8003ad8 <MX_TIM8_Init+0x150>)
 8003a72:	f003 ffe5 	bl	8007a40 <HAL_TIM_PWM_ConfigChannel>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8003a7c:	f7fd ffe2 	bl	8001a44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a84:	2204      	movs	r2, #4
 8003a86:	4619      	mov	r1, r3
 8003a88:	4813      	ldr	r0, [pc, #76]	; (8003ad8 <MX_TIM8_Init+0x150>)
 8003a8a:	f003 ffd9 	bl	8007a40 <HAL_TIM_PWM_ConfigChannel>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d001      	beq.n	8003a98 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8003a94:	f7fd ffd6 	bl	8001a44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003aac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ab0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003ab6:	1d3b      	adds	r3, r7, #4
 8003ab8:	4619      	mov	r1, r3
 8003aba:	4807      	ldr	r0, [pc, #28]	; (8003ad8 <MX_TIM8_Init+0x150>)
 8003abc:	f004 fe28 	bl	8008710 <HAL_TIMEx_ConfigBreakDeadTime>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8003ac6:	f7fd ffbd 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003aca:	4803      	ldr	r0, [pc, #12]	; (8003ad8 <MX_TIM8_Init+0x150>)
 8003acc:	f000 f9ce 	bl	8003e6c <HAL_TIM_MspPostInit>

}
 8003ad0:	bf00      	nop
 8003ad2:	3758      	adds	r7, #88	; 0x58
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	20000abc 	.word	0x20000abc
 8003adc:	40010400 	.word	0x40010400

08003ae0 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8003ae6:	463b      	mov	r3, r7
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	605a      	str	r2, [r3, #4]
 8003aee:	609a      	str	r2, [r3, #8]
 8003af0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003af2:	4b1e      	ldr	r3, [pc, #120]	; (8003b6c <MX_TIM9_Init+0x8c>)
 8003af4:	4a1e      	ldr	r2, [pc, #120]	; (8003b70 <MX_TIM9_Init+0x90>)
 8003af6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8003af8:	4b1c      	ldr	r3, [pc, #112]	; (8003b6c <MX_TIM9_Init+0x8c>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003afe:	4b1b      	ldr	r3, [pc, #108]	; (8003b6c <MX_TIM9_Init+0x8c>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8003b04:	4b19      	ldr	r3, [pc, #100]	; (8003b6c <MX_TIM9_Init+0x8c>)
 8003b06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b0a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b0c:	4b17      	ldr	r3, [pc, #92]	; (8003b6c <MX_TIM9_Init+0x8c>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b12:	4b16      	ldr	r3, [pc, #88]	; (8003b6c <MX_TIM9_Init+0x8c>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 8003b18:	4814      	ldr	r0, [pc, #80]	; (8003b6c <MX_TIM9_Init+0x8c>)
 8003b1a:	f003 fc69 	bl	80073f0 <HAL_TIM_IC_Init>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8003b24:	f7fd ff8e 	bl	8001a44 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003b30:	2300      	movs	r3, #0
 8003b32:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003b34:	2300      	movs	r3, #0
 8003b36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003b38:	463b      	mov	r3, r7
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	480b      	ldr	r0, [pc, #44]	; (8003b6c <MX_TIM9_Init+0x8c>)
 8003b40:	f003 fee1 	bl	8007906 <HAL_TIM_IC_ConfigChannel>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <MX_TIM9_Init+0x6e>
  {
    Error_Handler();
 8003b4a:	f7fd ff7b 	bl	8001a44 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003b4e:	463b      	mov	r3, r7
 8003b50:	2204      	movs	r2, #4
 8003b52:	4619      	mov	r1, r3
 8003b54:	4805      	ldr	r0, [pc, #20]	; (8003b6c <MX_TIM9_Init+0x8c>)
 8003b56:	f003 fed6 	bl	8007906 <HAL_TIM_IC_ConfigChannel>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <MX_TIM9_Init+0x84>
  {
    Error_Handler();
 8003b60:	f7fd ff70 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8003b64:	bf00      	nop
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	20000b04 	.word	0x20000b04
 8003b70:	40014000 	.word	0x40014000

08003b74 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b08c      	sub	sp, #48	; 0x30
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b7c:	f107 031c 	add.w	r3, r7, #28
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	605a      	str	r2, [r3, #4]
 8003b86:	609a      	str	r2, [r3, #8]
 8003b88:	60da      	str	r2, [r3, #12]
 8003b8a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a3f      	ldr	r2, [pc, #252]	; (8003c90 <HAL_TIM_Base_MspInit+0x11c>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d10e      	bne.n	8003bb4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003b96:	2300      	movs	r3, #0
 8003b98:	61bb      	str	r3, [r7, #24]
 8003b9a:	4b3e      	ldr	r3, [pc, #248]	; (8003c94 <HAL_TIM_Base_MspInit+0x120>)
 8003b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9e:	4a3d      	ldr	r2, [pc, #244]	; (8003c94 <HAL_TIM_Base_MspInit+0x120>)
 8003ba0:	f043 0301 	orr.w	r3, r3, #1
 8003ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ba6:	4b3b      	ldr	r3, [pc, #236]	; (8003c94 <HAL_TIM_Base_MspInit+0x120>)
 8003ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	61bb      	str	r3, [r7, #24]
 8003bb0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003bb2:	e069      	b.n	8003c88 <HAL_TIM_Base_MspInit+0x114>
  else if(tim_baseHandle->Instance==TIM4)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a37      	ldr	r2, [pc, #220]	; (8003c98 <HAL_TIM_Base_MspInit+0x124>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d135      	bne.n	8003c2a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	617b      	str	r3, [r7, #20]
 8003bc2:	4b34      	ldr	r3, [pc, #208]	; (8003c94 <HAL_TIM_Base_MspInit+0x120>)
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	4a33      	ldr	r2, [pc, #204]	; (8003c94 <HAL_TIM_Base_MspInit+0x120>)
 8003bc8:	f043 0304 	orr.w	r3, r3, #4
 8003bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8003bce:	4b31      	ldr	r3, [pc, #196]	; (8003c94 <HAL_TIM_Base_MspInit+0x120>)
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	f003 0304 	and.w	r3, r3, #4
 8003bd6:	617b      	str	r3, [r7, #20]
 8003bd8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bda:	2300      	movs	r3, #0
 8003bdc:	613b      	str	r3, [r7, #16]
 8003bde:	4b2d      	ldr	r3, [pc, #180]	; (8003c94 <HAL_TIM_Base_MspInit+0x120>)
 8003be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be2:	4a2c      	ldr	r2, [pc, #176]	; (8003c94 <HAL_TIM_Base_MspInit+0x120>)
 8003be4:	f043 0302 	orr.w	r3, r3, #2
 8003be8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bea:	4b2a      	ldr	r3, [pc, #168]	; (8003c94 <HAL_TIM_Base_MspInit+0x120>)
 8003bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	613b      	str	r3, [r7, #16]
 8003bf4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ECHO_HC_1_Pin|ECHO_HC_2_Pin;
 8003bf6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c00:	2300      	movs	r3, #0
 8003c02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c04:	2300      	movs	r3, #0
 8003c06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003c08:	2302      	movs	r3, #2
 8003c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c0c:	f107 031c 	add.w	r3, r7, #28
 8003c10:	4619      	mov	r1, r3
 8003c12:	4822      	ldr	r0, [pc, #136]	; (8003c9c <HAL_TIM_Base_MspInit+0x128>)
 8003c14:	f001 fa34 	bl	8005080 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003c18:	2200      	movs	r2, #0
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	201e      	movs	r0, #30
 8003c1e:	f000 fe3e 	bl	800489e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003c22:	201e      	movs	r0, #30
 8003c24:	f000 fe57 	bl	80048d6 <HAL_NVIC_EnableIRQ>
}
 8003c28:	e02e      	b.n	8003c88 <HAL_TIM_Base_MspInit+0x114>
  else if(tim_baseHandle->Instance==TIM5)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a1c      	ldr	r2, [pc, #112]	; (8003ca0 <HAL_TIM_Base_MspInit+0x12c>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d116      	bne.n	8003c62 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003c34:	2300      	movs	r3, #0
 8003c36:	60fb      	str	r3, [r7, #12]
 8003c38:	4b16      	ldr	r3, [pc, #88]	; (8003c94 <HAL_TIM_Base_MspInit+0x120>)
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3c:	4a15      	ldr	r2, [pc, #84]	; (8003c94 <HAL_TIM_Base_MspInit+0x120>)
 8003c3e:	f043 0308 	orr.w	r3, r3, #8
 8003c42:	6413      	str	r3, [r2, #64]	; 0x40
 8003c44:	4b13      	ldr	r3, [pc, #76]	; (8003c94 <HAL_TIM_Base_MspInit+0x120>)
 8003c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c48:	f003 0308 	and.w	r3, r3, #8
 8003c4c:	60fb      	str	r3, [r7, #12]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003c50:	2200      	movs	r2, #0
 8003c52:	2100      	movs	r1, #0
 8003c54:	2032      	movs	r0, #50	; 0x32
 8003c56:	f000 fe22 	bl	800489e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003c5a:	2032      	movs	r0, #50	; 0x32
 8003c5c:	f000 fe3b 	bl	80048d6 <HAL_NVIC_EnableIRQ>
}
 8003c60:	e012      	b.n	8003c88 <HAL_TIM_Base_MspInit+0x114>
  else if(tim_baseHandle->Instance==TIM8)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a0f      	ldr	r2, [pc, #60]	; (8003ca4 <HAL_TIM_Base_MspInit+0x130>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d10d      	bne.n	8003c88 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	60bb      	str	r3, [r7, #8]
 8003c70:	4b08      	ldr	r3, [pc, #32]	; (8003c94 <HAL_TIM_Base_MspInit+0x120>)
 8003c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c74:	4a07      	ldr	r2, [pc, #28]	; (8003c94 <HAL_TIM_Base_MspInit+0x120>)
 8003c76:	f043 0302 	orr.w	r3, r3, #2
 8003c7a:	6453      	str	r3, [r2, #68]	; 0x44
 8003c7c:	4b05      	ldr	r3, [pc, #20]	; (8003c94 <HAL_TIM_Base_MspInit+0x120>)
 8003c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	60bb      	str	r3, [r7, #8]
 8003c86:	68bb      	ldr	r3, [r7, #8]
}
 8003c88:	bf00      	nop
 8003c8a:	3730      	adds	r7, #48	; 0x30
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40010000 	.word	0x40010000
 8003c94:	40023800 	.word	0x40023800
 8003c98:	40000800 	.word	0x40000800
 8003c9c:	40020400 	.word	0x40020400
 8003ca0:	40000c00 	.word	0x40000c00
 8003ca4:	40010400 	.word	0x40010400

08003ca8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b08c      	sub	sp, #48	; 0x30
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cb0:	f107 031c 	add.w	r3, r7, #28
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	605a      	str	r2, [r3, #4]
 8003cba:	609a      	str	r2, [r3, #8]
 8003cbc:	60da      	str	r2, [r3, #12]
 8003cbe:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc8:	d14b      	bne.n	8003d62 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003cca:	2300      	movs	r3, #0
 8003ccc:	61bb      	str	r3, [r7, #24]
 8003cce:	4b3f      	ldr	r3, [pc, #252]	; (8003dcc <HAL_TIM_Encoder_MspInit+0x124>)
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	4a3e      	ldr	r2, [pc, #248]	; (8003dcc <HAL_TIM_Encoder_MspInit+0x124>)
 8003cd4:	f043 0301 	orr.w	r3, r3, #1
 8003cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8003cda:	4b3c      	ldr	r3, [pc, #240]	; (8003dcc <HAL_TIM_Encoder_MspInit+0x124>)
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	61bb      	str	r3, [r7, #24]
 8003ce4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	617b      	str	r3, [r7, #20]
 8003cea:	4b38      	ldr	r3, [pc, #224]	; (8003dcc <HAL_TIM_Encoder_MspInit+0x124>)
 8003cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cee:	4a37      	ldr	r2, [pc, #220]	; (8003dcc <HAL_TIM_Encoder_MspInit+0x124>)
 8003cf0:	f043 0301 	orr.w	r3, r3, #1
 8003cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cf6:	4b35      	ldr	r3, [pc, #212]	; (8003dcc <HAL_TIM_Encoder_MspInit+0x124>)
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d02:	2300      	movs	r3, #0
 8003d04:	613b      	str	r3, [r7, #16]
 8003d06:	4b31      	ldr	r3, [pc, #196]	; (8003dcc <HAL_TIM_Encoder_MspInit+0x124>)
 8003d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0a:	4a30      	ldr	r2, [pc, #192]	; (8003dcc <HAL_TIM_Encoder_MspInit+0x124>)
 8003d0c:	f043 0302 	orr.w	r3, r3, #2
 8003d10:	6313      	str	r3, [r2, #48]	; 0x30
 8003d12:	4b2e      	ldr	r3, [pc, #184]	; (8003dcc <HAL_TIM_Encoder_MspInit+0x124>)
 8003d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	613b      	str	r3, [r7, #16]
 8003d1c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER2_A_Pin;
 8003d1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d24:	2302      	movs	r3, #2
 8003d26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003d30:	2301      	movs	r3, #1
 8003d32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENCODER2_A_GPIO_Port, &GPIO_InitStruct);
 8003d34:	f107 031c 	add.w	r3, r7, #28
 8003d38:	4619      	mov	r1, r3
 8003d3a:	4825      	ldr	r0, [pc, #148]	; (8003dd0 <HAL_TIM_Encoder_MspInit+0x128>)
 8003d3c:	f001 f9a0 	bl	8005080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENCODER2_B_Pin;
 8003d40:	2308      	movs	r3, #8
 8003d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d44:	2302      	movs	r3, #2
 8003d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003d50:	2301      	movs	r3, #1
 8003d52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENCODER2_B_GPIO_Port, &GPIO_InitStruct);
 8003d54:	f107 031c 	add.w	r3, r7, #28
 8003d58:	4619      	mov	r1, r3
 8003d5a:	481e      	ldr	r0, [pc, #120]	; (8003dd4 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003d5c:	f001 f990 	bl	8005080 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003d60:	e030      	b.n	8003dc4 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(tim_encoderHandle->Instance==TIM3)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a1c      	ldr	r2, [pc, #112]	; (8003dd8 <HAL_TIM_Encoder_MspInit+0x130>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d12b      	bne.n	8003dc4 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	60fb      	str	r3, [r7, #12]
 8003d70:	4b16      	ldr	r3, [pc, #88]	; (8003dcc <HAL_TIM_Encoder_MspInit+0x124>)
 8003d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d74:	4a15      	ldr	r2, [pc, #84]	; (8003dcc <HAL_TIM_Encoder_MspInit+0x124>)
 8003d76:	f043 0302 	orr.w	r3, r3, #2
 8003d7a:	6413      	str	r3, [r2, #64]	; 0x40
 8003d7c:	4b13      	ldr	r3, [pc, #76]	; (8003dcc <HAL_TIM_Encoder_MspInit+0x124>)
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	60fb      	str	r3, [r7, #12]
 8003d86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d88:	2300      	movs	r3, #0
 8003d8a:	60bb      	str	r3, [r7, #8]
 8003d8c:	4b0f      	ldr	r3, [pc, #60]	; (8003dcc <HAL_TIM_Encoder_MspInit+0x124>)
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d90:	4a0e      	ldr	r2, [pc, #56]	; (8003dcc <HAL_TIM_Encoder_MspInit+0x124>)
 8003d92:	f043 0302 	orr.w	r3, r3, #2
 8003d96:	6313      	str	r3, [r2, #48]	; 0x30
 8003d98:	4b0c      	ldr	r3, [pc, #48]	; (8003dcc <HAL_TIM_Encoder_MspInit+0x124>)
 8003d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	60bb      	str	r3, [r7, #8]
 8003da2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER1_A_Pin|ENCODER1_B_Pin;
 8003da4:	2330      	movs	r3, #48	; 0x30
 8003da6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003da8:	2302      	movs	r3, #2
 8003daa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dac:	2300      	movs	r3, #0
 8003dae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003db0:	2300      	movs	r3, #0
 8003db2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003db4:	2302      	movs	r3, #2
 8003db6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003db8:	f107 031c 	add.w	r3, r7, #28
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	4805      	ldr	r0, [pc, #20]	; (8003dd4 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003dc0:	f001 f95e 	bl	8005080 <HAL_GPIO_Init>
}
 8003dc4:	bf00      	nop
 8003dc6:	3730      	adds	r7, #48	; 0x30
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	40020000 	.word	0x40020000
 8003dd4:	40020400 	.word	0x40020400
 8003dd8:	40000400 	.word	0x40000400

08003ddc <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b08a      	sub	sp, #40	; 0x28
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003de4:	f107 0314 	add.w	r3, r7, #20
 8003de8:	2200      	movs	r2, #0
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	605a      	str	r2, [r3, #4]
 8003dee:	609a      	str	r2, [r3, #8]
 8003df0:	60da      	str	r2, [r3, #12]
 8003df2:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM9)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a19      	ldr	r2, [pc, #100]	; (8003e60 <HAL_TIM_IC_MspInit+0x84>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d12b      	bne.n	8003e56 <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003dfe:	2300      	movs	r3, #0
 8003e00:	613b      	str	r3, [r7, #16]
 8003e02:	4b18      	ldr	r3, [pc, #96]	; (8003e64 <HAL_TIM_IC_MspInit+0x88>)
 8003e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e06:	4a17      	ldr	r2, [pc, #92]	; (8003e64 <HAL_TIM_IC_MspInit+0x88>)
 8003e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e0e:	4b15      	ldr	r3, [pc, #84]	; (8003e64 <HAL_TIM_IC_MspInit+0x88>)
 8003e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e16:	613b      	str	r3, [r7, #16]
 8003e18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	60fb      	str	r3, [r7, #12]
 8003e1e:	4b11      	ldr	r3, [pc, #68]	; (8003e64 <HAL_TIM_IC_MspInit+0x88>)
 8003e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e22:	4a10      	ldr	r2, [pc, #64]	; (8003e64 <HAL_TIM_IC_MspInit+0x88>)
 8003e24:	f043 0310 	orr.w	r3, r3, #16
 8003e28:	6313      	str	r3, [r2, #48]	; 0x30
 8003e2a:	4b0e      	ldr	r3, [pc, #56]	; (8003e64 <HAL_TIM_IC_MspInit+0x88>)
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2e:	f003 0310 	and.w	r3, r3, #16
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	68fb      	ldr	r3, [r7, #12]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    PE6     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = ECHO_HC_3_Pin|ECHO_HC_4_Pin;
 8003e36:	2360      	movs	r3, #96	; 0x60
 8003e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e42:	2300      	movs	r3, #0
 8003e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8003e46:	2303      	movs	r3, #3
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e4a:	f107 0314 	add.w	r3, r7, #20
 8003e4e:	4619      	mov	r1, r3
 8003e50:	4805      	ldr	r0, [pc, #20]	; (8003e68 <HAL_TIM_IC_MspInit+0x8c>)
 8003e52:	f001 f915 	bl	8005080 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8003e56:	bf00      	nop
 8003e58:	3728      	adds	r7, #40	; 0x28
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	40014000 	.word	0x40014000
 8003e64:	40023800 	.word	0x40023800
 8003e68:	40021000 	.word	0x40021000

08003e6c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b088      	sub	sp, #32
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e74:	f107 030c 	add.w	r3, r7, #12
 8003e78:	2200      	movs	r2, #0
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	605a      	str	r2, [r3, #4]
 8003e7e:	609a      	str	r2, [r3, #8]
 8003e80:	60da      	str	r2, [r3, #12]
 8003e82:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a12      	ldr	r2, [pc, #72]	; (8003ed4 <HAL_TIM_MspPostInit+0x68>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d11d      	bne.n	8003eca <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60bb      	str	r3, [r7, #8]
 8003e92:	4b11      	ldr	r3, [pc, #68]	; (8003ed8 <HAL_TIM_MspPostInit+0x6c>)
 8003e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e96:	4a10      	ldr	r2, [pc, #64]	; (8003ed8 <HAL_TIM_MspPostInit+0x6c>)
 8003e98:	f043 0304 	orr.w	r3, r3, #4
 8003e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e9e:	4b0e      	ldr	r3, [pc, #56]	; (8003ed8 <HAL_TIM_MspPostInit+0x6c>)
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea2:	f003 0304 	and.w	r3, r3, #4
 8003ea6:	60bb      	str	r3, [r7, #8]
 8003ea8:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = MOTOR1_PWM_Pin|MOTOR2_PWM_Pin;
 8003eaa:	23c0      	movs	r3, #192	; 0xc0
 8003eac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eae:	2302      	movs	r3, #2
 8003eb0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ebe:	f107 030c 	add.w	r3, r7, #12
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	4805      	ldr	r0, [pc, #20]	; (8003edc <HAL_TIM_MspPostInit+0x70>)
 8003ec6:	f001 f8db 	bl	8005080 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003eca:	bf00      	nop
 8003ecc:	3720      	adds	r7, #32
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	40010400 	.word	0x40010400
 8003ed8:	40023800 	.word	0x40023800
 8003edc:	40020800 	.word	0x40020800

08003ee0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003ee4:	4b11      	ldr	r3, [pc, #68]	; (8003f2c <MX_USART1_UART_Init+0x4c>)
 8003ee6:	4a12      	ldr	r2, [pc, #72]	; (8003f30 <MX_USART1_UART_Init+0x50>)
 8003ee8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003eea:	4b10      	ldr	r3, [pc, #64]	; (8003f2c <MX_USART1_UART_Init+0x4c>)
 8003eec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ef0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003ef2:	4b0e      	ldr	r3, [pc, #56]	; (8003f2c <MX_USART1_UART_Init+0x4c>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ef8:	4b0c      	ldr	r3, [pc, #48]	; (8003f2c <MX_USART1_UART_Init+0x4c>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003efe:	4b0b      	ldr	r3, [pc, #44]	; (8003f2c <MX_USART1_UART_Init+0x4c>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003f04:	4b09      	ldr	r3, [pc, #36]	; (8003f2c <MX_USART1_UART_Init+0x4c>)
 8003f06:	220c      	movs	r2, #12
 8003f08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f0a:	4b08      	ldr	r3, [pc, #32]	; (8003f2c <MX_USART1_UART_Init+0x4c>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f10:	4b06      	ldr	r3, [pc, #24]	; (8003f2c <MX_USART1_UART_Init+0x4c>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003f16:	4805      	ldr	r0, [pc, #20]	; (8003f2c <MX_USART1_UART_Init+0x4c>)
 8003f18:	f004 fc60 	bl	80087dc <HAL_UART_Init>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003f22:	f7fd fd8f 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003f26:	bf00      	nop
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	20000b4c 	.word	0x20000b4c
 8003f30:	40011000 	.word	0x40011000

08003f34 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003f38:	4b11      	ldr	r3, [pc, #68]	; (8003f80 <MX_USART2_UART_Init+0x4c>)
 8003f3a:	4a12      	ldr	r2, [pc, #72]	; (8003f84 <MX_USART2_UART_Init+0x50>)
 8003f3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003f3e:	4b10      	ldr	r3, [pc, #64]	; (8003f80 <MX_USART2_UART_Init+0x4c>)
 8003f40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003f46:	4b0e      	ldr	r3, [pc, #56]	; (8003f80 <MX_USART2_UART_Init+0x4c>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003f4c:	4b0c      	ldr	r3, [pc, #48]	; (8003f80 <MX_USART2_UART_Init+0x4c>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003f52:	4b0b      	ldr	r3, [pc, #44]	; (8003f80 <MX_USART2_UART_Init+0x4c>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003f58:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <MX_USART2_UART_Init+0x4c>)
 8003f5a:	220c      	movs	r2, #12
 8003f5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f5e:	4b08      	ldr	r3, [pc, #32]	; (8003f80 <MX_USART2_UART_Init+0x4c>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f64:	4b06      	ldr	r3, [pc, #24]	; (8003f80 <MX_USART2_UART_Init+0x4c>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003f6a:	4805      	ldr	r0, [pc, #20]	; (8003f80 <MX_USART2_UART_Init+0x4c>)
 8003f6c:	f004 fc36 	bl	80087dc <HAL_UART_Init>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003f76:	f7fd fd65 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003f7a:	bf00      	nop
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	20000b90 	.word	0x20000b90
 8003f84:	40004400 	.word	0x40004400

08003f88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b08c      	sub	sp, #48	; 0x30
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f90:	f107 031c 	add.w	r3, r7, #28
 8003f94:	2200      	movs	r2, #0
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	605a      	str	r2, [r3, #4]
 8003f9a:	609a      	str	r2, [r3, #8]
 8003f9c:	60da      	str	r2, [r3, #12]
 8003f9e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a3a      	ldr	r2, [pc, #232]	; (8004090 <HAL_UART_MspInit+0x108>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d135      	bne.n	8004016 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003faa:	2300      	movs	r3, #0
 8003fac:	61bb      	str	r3, [r7, #24]
 8003fae:	4b39      	ldr	r3, [pc, #228]	; (8004094 <HAL_UART_MspInit+0x10c>)
 8003fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb2:	4a38      	ldr	r2, [pc, #224]	; (8004094 <HAL_UART_MspInit+0x10c>)
 8003fb4:	f043 0310 	orr.w	r3, r3, #16
 8003fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8003fba:	4b36      	ldr	r3, [pc, #216]	; (8004094 <HAL_UART_MspInit+0x10c>)
 8003fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fbe:	f003 0310 	and.w	r3, r3, #16
 8003fc2:	61bb      	str	r3, [r7, #24]
 8003fc4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	617b      	str	r3, [r7, #20]
 8003fca:	4b32      	ldr	r3, [pc, #200]	; (8004094 <HAL_UART_MspInit+0x10c>)
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fce:	4a31      	ldr	r2, [pc, #196]	; (8004094 <HAL_UART_MspInit+0x10c>)
 8003fd0:	f043 0301 	orr.w	r3, r3, #1
 8003fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8003fd6:	4b2f      	ldr	r3, [pc, #188]	; (8004094 <HAL_UART_MspInit+0x10c>)
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	617b      	str	r3, [r7, #20]
 8003fe0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USB2Serial_TX_Pin|USB2Serial_RX_Pin;
 8003fe2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe8:	2302      	movs	r3, #2
 8003fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fec:	2300      	movs	r3, #0
 8003fee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003ff4:	2307      	movs	r3, #7
 8003ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ff8:	f107 031c 	add.w	r3, r7, #28
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	4826      	ldr	r0, [pc, #152]	; (8004098 <HAL_UART_MspInit+0x110>)
 8004000:	f001 f83e 	bl	8005080 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8004004:	2200      	movs	r2, #0
 8004006:	2102      	movs	r1, #2
 8004008:	2025      	movs	r0, #37	; 0x25
 800400a:	f000 fc48 	bl	800489e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800400e:	2025      	movs	r0, #37	; 0x25
 8004010:	f000 fc61 	bl	80048d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004014:	e038      	b.n	8004088 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a20      	ldr	r2, [pc, #128]	; (800409c <HAL_UART_MspInit+0x114>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d133      	bne.n	8004088 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004020:	2300      	movs	r3, #0
 8004022:	613b      	str	r3, [r7, #16]
 8004024:	4b1b      	ldr	r3, [pc, #108]	; (8004094 <HAL_UART_MspInit+0x10c>)
 8004026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004028:	4a1a      	ldr	r2, [pc, #104]	; (8004094 <HAL_UART_MspInit+0x10c>)
 800402a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800402e:	6413      	str	r3, [r2, #64]	; 0x40
 8004030:	4b18      	ldr	r3, [pc, #96]	; (8004094 <HAL_UART_MspInit+0x10c>)
 8004032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004038:	613b      	str	r3, [r7, #16]
 800403a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800403c:	2300      	movs	r3, #0
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	4b14      	ldr	r3, [pc, #80]	; (8004094 <HAL_UART_MspInit+0x10c>)
 8004042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004044:	4a13      	ldr	r2, [pc, #76]	; (8004094 <HAL_UART_MspInit+0x10c>)
 8004046:	f043 0308 	orr.w	r3, r3, #8
 800404a:	6313      	str	r3, [r2, #48]	; 0x30
 800404c:	4b11      	ldr	r3, [pc, #68]	; (8004094 <HAL_UART_MspInit+0x10c>)
 800404e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004050:	f003 0308 	and.w	r3, r3, #8
 8004054:	60fb      	str	r3, [r7, #12]
 8004056:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004058:	2360      	movs	r3, #96	; 0x60
 800405a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800405c:	2302      	movs	r3, #2
 800405e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004060:	2300      	movs	r3, #0
 8004062:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004064:	2303      	movs	r3, #3
 8004066:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004068:	2307      	movs	r3, #7
 800406a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800406c:	f107 031c 	add.w	r3, r7, #28
 8004070:	4619      	mov	r1, r3
 8004072:	480b      	ldr	r0, [pc, #44]	; (80040a0 <HAL_UART_MspInit+0x118>)
 8004074:	f001 f804 	bl	8005080 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8004078:	2200      	movs	r2, #0
 800407a:	2101      	movs	r1, #1
 800407c:	2026      	movs	r0, #38	; 0x26
 800407e:	f000 fc0e 	bl	800489e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004082:	2026      	movs	r0, #38	; 0x26
 8004084:	f000 fc27 	bl	80048d6 <HAL_NVIC_EnableIRQ>
}
 8004088:	bf00      	nop
 800408a:	3730      	adds	r7, #48	; 0x30
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	40011000 	.word	0x40011000
 8004094:	40023800 	.word	0x40023800
 8004098:	40020000 	.word	0x40020000
 800409c:	40004400 	.word	0x40004400
 80040a0:	40020c00 	.word	0x40020c00

080040a4 <Reset_Handler>:
 80040a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80040dc <LoopFillZerobss+0x12>
 80040a8:	480d      	ldr	r0, [pc, #52]	; (80040e0 <LoopFillZerobss+0x16>)
 80040aa:	490e      	ldr	r1, [pc, #56]	; (80040e4 <LoopFillZerobss+0x1a>)
 80040ac:	4a0e      	ldr	r2, [pc, #56]	; (80040e8 <LoopFillZerobss+0x1e>)
 80040ae:	2300      	movs	r3, #0
 80040b0:	e002      	b.n	80040b8 <LoopCopyDataInit>

080040b2 <CopyDataInit>:
 80040b2:	58d4      	ldr	r4, [r2, r3]
 80040b4:	50c4      	str	r4, [r0, r3]
 80040b6:	3304      	adds	r3, #4

080040b8 <LoopCopyDataInit>:
 80040b8:	18c4      	adds	r4, r0, r3
 80040ba:	428c      	cmp	r4, r1
 80040bc:	d3f9      	bcc.n	80040b2 <CopyDataInit>
 80040be:	4a0b      	ldr	r2, [pc, #44]	; (80040ec <LoopFillZerobss+0x22>)
 80040c0:	4c0b      	ldr	r4, [pc, #44]	; (80040f0 <LoopFillZerobss+0x26>)
 80040c2:	2300      	movs	r3, #0
 80040c4:	e001      	b.n	80040ca <LoopFillZerobss>

080040c6 <FillZerobss>:
 80040c6:	6013      	str	r3, [r2, #0]
 80040c8:	3204      	adds	r2, #4

080040ca <LoopFillZerobss>:
 80040ca:	42a2      	cmp	r2, r4
 80040cc:	d3fb      	bcc.n	80040c6 <FillZerobss>
 80040ce:	f7ff fa87 	bl	80035e0 <SystemInit>
 80040d2:	f005 fce7 	bl	8009aa4 <__libc_init_array>
 80040d6:	f7fd fb05 	bl	80016e4 <main>
 80040da:	4770      	bx	lr
 80040dc:	20020000 	.word	0x20020000
 80040e0:	20000000 	.word	0x20000000
 80040e4:	20000460 	.word	0x20000460
 80040e8:	0800f400 	.word	0x0800f400
 80040ec:	20000460 	.word	0x20000460
 80040f0:	20000be8 	.word	0x20000be8

080040f4 <ADC_IRQHandler>:
 80040f4:	e7fe      	b.n	80040f4 <ADC_IRQHandler>
	...

080040f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80040fc:	4b0e      	ldr	r3, [pc, #56]	; (8004138 <HAL_Init+0x40>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a0d      	ldr	r2, [pc, #52]	; (8004138 <HAL_Init+0x40>)
 8004102:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004106:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004108:	4b0b      	ldr	r3, [pc, #44]	; (8004138 <HAL_Init+0x40>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a0a      	ldr	r2, [pc, #40]	; (8004138 <HAL_Init+0x40>)
 800410e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004112:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004114:	4b08      	ldr	r3, [pc, #32]	; (8004138 <HAL_Init+0x40>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a07      	ldr	r2, [pc, #28]	; (8004138 <HAL_Init+0x40>)
 800411a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800411e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004120:	2003      	movs	r0, #3
 8004122:	f000 fbb1 	bl	8004888 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004126:	200f      	movs	r0, #15
 8004128:	f000 f808 	bl	800413c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800412c:	f7ff f918 	bl	8003360 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	40023c00 	.word	0x40023c00

0800413c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004144:	4b12      	ldr	r3, [pc, #72]	; (8004190 <HAL_InitTick+0x54>)
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	4b12      	ldr	r3, [pc, #72]	; (8004194 <HAL_InitTick+0x58>)
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	4619      	mov	r1, r3
 800414e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004152:	fbb3 f3f1 	udiv	r3, r3, r1
 8004156:	fbb2 f3f3 	udiv	r3, r2, r3
 800415a:	4618      	mov	r0, r3
 800415c:	f000 fbc9 	bl	80048f2 <HAL_SYSTICK_Config>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d001      	beq.n	800416a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e00e      	b.n	8004188 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b0f      	cmp	r3, #15
 800416e:	d80a      	bhi.n	8004186 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004170:	2200      	movs	r2, #0
 8004172:	6879      	ldr	r1, [r7, #4]
 8004174:	f04f 30ff 	mov.w	r0, #4294967295
 8004178:	f000 fb91 	bl	800489e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800417c:	4a06      	ldr	r2, [pc, #24]	; (8004198 <HAL_InitTick+0x5c>)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004182:	2300      	movs	r3, #0
 8004184:	e000      	b.n	8004188 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
}
 8004188:	4618      	mov	r0, r3
 800418a:	3708      	adds	r7, #8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	20000280 	.word	0x20000280
 8004194:	20000288 	.word	0x20000288
 8004198:	20000284 	.word	0x20000284

0800419c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80041a0:	4b06      	ldr	r3, [pc, #24]	; (80041bc <HAL_IncTick+0x20>)
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	461a      	mov	r2, r3
 80041a6:	4b06      	ldr	r3, [pc, #24]	; (80041c0 <HAL_IncTick+0x24>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4413      	add	r3, r2
 80041ac:	4a04      	ldr	r2, [pc, #16]	; (80041c0 <HAL_IncTick+0x24>)
 80041ae:	6013      	str	r3, [r2, #0]
}
 80041b0:	bf00      	nop
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	20000288 	.word	0x20000288
 80041c0:	20000bd4 	.word	0x20000bd4

080041c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
  return uwTick;
 80041c8:	4b03      	ldr	r3, [pc, #12]	; (80041d8 <HAL_GetTick+0x14>)
 80041ca:	681b      	ldr	r3, [r3, #0]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	20000bd4 	.word	0x20000bd4

080041dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041e4:	f7ff ffee 	bl	80041c4 <HAL_GetTick>
 80041e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f4:	d005      	beq.n	8004202 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041f6:	4b0a      	ldr	r3, [pc, #40]	; (8004220 <HAL_Delay+0x44>)
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	461a      	mov	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	4413      	add	r3, r2
 8004200:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004202:	bf00      	nop
 8004204:	f7ff ffde 	bl	80041c4 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	429a      	cmp	r2, r3
 8004212:	d8f7      	bhi.n	8004204 <HAL_Delay+0x28>
  {
  }
}
 8004214:	bf00      	nop
 8004216:	bf00      	nop
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	20000288 	.word	0x20000288

08004224 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800422c:	2300      	movs	r3, #0
 800422e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e033      	b.n	80042a2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423e:	2b00      	cmp	r3, #0
 8004240:	d109      	bne.n	8004256 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f7fc ff2a 	bl	800109c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	f003 0310 	and.w	r3, r3, #16
 800425e:	2b00      	cmp	r3, #0
 8004260:	d118      	bne.n	8004294 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004266:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800426a:	f023 0302 	bic.w	r3, r3, #2
 800426e:	f043 0202 	orr.w	r2, r3, #2
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f93a 	bl	80044f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	f023 0303 	bic.w	r3, r3, #3
 800428a:	f043 0201 	orr.w	r2, r3, #1
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	641a      	str	r2, [r3, #64]	; 0x40
 8004292:	e001      	b.n	8004298 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80042a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
	...

080042ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80042b6:	2300      	movs	r3, #0
 80042b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d101      	bne.n	80042c8 <HAL_ADC_ConfigChannel+0x1c>
 80042c4:	2302      	movs	r3, #2
 80042c6:	e105      	b.n	80044d4 <HAL_ADC_ConfigChannel+0x228>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2b09      	cmp	r3, #9
 80042d6:	d925      	bls.n	8004324 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68d9      	ldr	r1, [r3, #12]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	461a      	mov	r2, r3
 80042e6:	4613      	mov	r3, r2
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	4413      	add	r3, r2
 80042ec:	3b1e      	subs	r3, #30
 80042ee:	2207      	movs	r2, #7
 80042f0:	fa02 f303 	lsl.w	r3, r2, r3
 80042f4:	43da      	mvns	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	400a      	ands	r2, r1
 80042fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68d9      	ldr	r1, [r3, #12]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	b29b      	uxth	r3, r3
 800430e:	4618      	mov	r0, r3
 8004310:	4603      	mov	r3, r0
 8004312:	005b      	lsls	r3, r3, #1
 8004314:	4403      	add	r3, r0
 8004316:	3b1e      	subs	r3, #30
 8004318:	409a      	lsls	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	430a      	orrs	r2, r1
 8004320:	60da      	str	r2, [r3, #12]
 8004322:	e022      	b.n	800436a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6919      	ldr	r1, [r3, #16]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	b29b      	uxth	r3, r3
 8004330:	461a      	mov	r2, r3
 8004332:	4613      	mov	r3, r2
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	4413      	add	r3, r2
 8004338:	2207      	movs	r2, #7
 800433a:	fa02 f303 	lsl.w	r3, r2, r3
 800433e:	43da      	mvns	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	400a      	ands	r2, r1
 8004346:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6919      	ldr	r1, [r3, #16]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	689a      	ldr	r2, [r3, #8]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	b29b      	uxth	r3, r3
 8004358:	4618      	mov	r0, r3
 800435a:	4603      	mov	r3, r0
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	4403      	add	r3, r0
 8004360:	409a      	lsls	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	430a      	orrs	r2, r1
 8004368:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	2b06      	cmp	r3, #6
 8004370:	d824      	bhi.n	80043bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	4613      	mov	r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	4413      	add	r3, r2
 8004382:	3b05      	subs	r3, #5
 8004384:	221f      	movs	r2, #31
 8004386:	fa02 f303 	lsl.w	r3, r2, r3
 800438a:	43da      	mvns	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	400a      	ands	r2, r1
 8004392:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	b29b      	uxth	r3, r3
 80043a0:	4618      	mov	r0, r3
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	4613      	mov	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	3b05      	subs	r3, #5
 80043ae:	fa00 f203 	lsl.w	r2, r0, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	430a      	orrs	r2, r1
 80043b8:	635a      	str	r2, [r3, #52]	; 0x34
 80043ba:	e04c      	b.n	8004456 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	2b0c      	cmp	r3, #12
 80043c2:	d824      	bhi.n	800440e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	4613      	mov	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	3b23      	subs	r3, #35	; 0x23
 80043d6:	221f      	movs	r2, #31
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	43da      	mvns	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	400a      	ands	r2, r1
 80043e4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	4618      	mov	r0, r3
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685a      	ldr	r2, [r3, #4]
 80043f8:	4613      	mov	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4413      	add	r3, r2
 80043fe:	3b23      	subs	r3, #35	; 0x23
 8004400:	fa00 f203 	lsl.w	r2, r0, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	430a      	orrs	r2, r1
 800440a:	631a      	str	r2, [r3, #48]	; 0x30
 800440c:	e023      	b.n	8004456 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	4613      	mov	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	3b41      	subs	r3, #65	; 0x41
 8004420:	221f      	movs	r2, #31
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	43da      	mvns	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	400a      	ands	r2, r1
 800442e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	b29b      	uxth	r3, r3
 800443c:	4618      	mov	r0, r3
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	4613      	mov	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4413      	add	r3, r2
 8004448:	3b41      	subs	r3, #65	; 0x41
 800444a:	fa00 f203 	lsl.w	r2, r0, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	430a      	orrs	r2, r1
 8004454:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004456:	4b22      	ldr	r3, [pc, #136]	; (80044e0 <HAL_ADC_ConfigChannel+0x234>)
 8004458:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a21      	ldr	r2, [pc, #132]	; (80044e4 <HAL_ADC_ConfigChannel+0x238>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d109      	bne.n	8004478 <HAL_ADC_ConfigChannel+0x1cc>
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2b12      	cmp	r3, #18
 800446a:	d105      	bne.n	8004478 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a19      	ldr	r2, [pc, #100]	; (80044e4 <HAL_ADC_ConfigChannel+0x238>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d123      	bne.n	80044ca <HAL_ADC_ConfigChannel+0x21e>
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2b10      	cmp	r3, #16
 8004488:	d003      	beq.n	8004492 <HAL_ADC_ConfigChannel+0x1e6>
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2b11      	cmp	r3, #17
 8004490:	d11b      	bne.n	80044ca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2b10      	cmp	r3, #16
 80044a4:	d111      	bne.n	80044ca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80044a6:	4b10      	ldr	r3, [pc, #64]	; (80044e8 <HAL_ADC_ConfigChannel+0x23c>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a10      	ldr	r2, [pc, #64]	; (80044ec <HAL_ADC_ConfigChannel+0x240>)
 80044ac:	fba2 2303 	umull	r2, r3, r2, r3
 80044b0:	0c9a      	lsrs	r2, r3, #18
 80044b2:	4613      	mov	r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	4413      	add	r3, r2
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80044bc:	e002      	b.n	80044c4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	3b01      	subs	r3, #1
 80044c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1f9      	bne.n	80044be <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr
 80044e0:	40012300 	.word	0x40012300
 80044e4:	40012000 	.word	0x40012000
 80044e8:	20000280 	.word	0x20000280
 80044ec:	431bde83 	.word	0x431bde83

080044f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80044f8:	4b79      	ldr	r3, [pc, #484]	; (80046e0 <ADC_Init+0x1f0>)
 80044fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	431a      	orrs	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004524:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6859      	ldr	r1, [r3, #4]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	021a      	lsls	r2, r3, #8
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	430a      	orrs	r2, r1
 8004538:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004548:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	6859      	ldr	r1, [r3, #4]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	689a      	ldr	r2, [r3, #8]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	430a      	orrs	r2, r1
 800455a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689a      	ldr	r2, [r3, #8]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800456a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6899      	ldr	r1, [r3, #8]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68da      	ldr	r2, [r3, #12]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	430a      	orrs	r2, r1
 800457c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004582:	4a58      	ldr	r2, [pc, #352]	; (80046e4 <ADC_Init+0x1f4>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d022      	beq.n	80045ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689a      	ldr	r2, [r3, #8]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004596:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6899      	ldr	r1, [r3, #8]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689a      	ldr	r2, [r3, #8]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80045b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6899      	ldr	r1, [r3, #8]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	430a      	orrs	r2, r1
 80045ca:	609a      	str	r2, [r3, #8]
 80045cc:	e00f      	b.n	80045ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80045dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80045ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 0202 	bic.w	r2, r2, #2
 80045fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	6899      	ldr	r1, [r3, #8]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	7e1b      	ldrb	r3, [r3, #24]
 8004608:	005a      	lsls	r2, r3, #1
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	430a      	orrs	r2, r1
 8004610:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d01b      	beq.n	8004654 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	685a      	ldr	r2, [r3, #4]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800462a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685a      	ldr	r2, [r3, #4]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800463a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6859      	ldr	r1, [r3, #4]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004646:	3b01      	subs	r3, #1
 8004648:	035a      	lsls	r2, r3, #13
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	430a      	orrs	r2, r1
 8004650:	605a      	str	r2, [r3, #4]
 8004652:	e007      	b.n	8004664 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004662:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004672:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	3b01      	subs	r3, #1
 8004680:	051a      	lsls	r2, r3, #20
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	689a      	ldr	r2, [r3, #8]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004698:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6899      	ldr	r1, [r3, #8]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80046a6:	025a      	lsls	r2, r3, #9
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689a      	ldr	r2, [r3, #8]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6899      	ldr	r1, [r3, #8]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	029a      	lsls	r2, r3, #10
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	609a      	str	r2, [r3, #8]
}
 80046d4:	bf00      	nop
 80046d6:	3714      	adds	r7, #20
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr
 80046e0:	40012300 	.word	0x40012300
 80046e4:	0f000001 	.word	0x0f000001

080046e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f003 0307 	and.w	r3, r3, #7
 80046f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046f8:	4b0c      	ldr	r3, [pc, #48]	; (800472c <__NVIC_SetPriorityGrouping+0x44>)
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004704:	4013      	ands	r3, r2
 8004706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004710:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800471a:	4a04      	ldr	r2, [pc, #16]	; (800472c <__NVIC_SetPriorityGrouping+0x44>)
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	60d3      	str	r3, [r2, #12]
}
 8004720:	bf00      	nop
 8004722:	3714      	adds	r7, #20
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr
 800472c:	e000ed00 	.word	0xe000ed00

08004730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004730:	b480      	push	{r7}
 8004732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004734:	4b04      	ldr	r3, [pc, #16]	; (8004748 <__NVIC_GetPriorityGrouping+0x18>)
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	0a1b      	lsrs	r3, r3, #8
 800473a:	f003 0307 	and.w	r3, r3, #7
}
 800473e:	4618      	mov	r0, r3
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr
 8004748:	e000ed00 	.word	0xe000ed00

0800474c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	4603      	mov	r3, r0
 8004754:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800475a:	2b00      	cmp	r3, #0
 800475c:	db0b      	blt.n	8004776 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800475e:	79fb      	ldrb	r3, [r7, #7]
 8004760:	f003 021f 	and.w	r2, r3, #31
 8004764:	4907      	ldr	r1, [pc, #28]	; (8004784 <__NVIC_EnableIRQ+0x38>)
 8004766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800476a:	095b      	lsrs	r3, r3, #5
 800476c:	2001      	movs	r0, #1
 800476e:	fa00 f202 	lsl.w	r2, r0, r2
 8004772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004776:	bf00      	nop
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	e000e100 	.word	0xe000e100

08004788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	4603      	mov	r3, r0
 8004790:	6039      	str	r1, [r7, #0]
 8004792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004798:	2b00      	cmp	r3, #0
 800479a:	db0a      	blt.n	80047b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	b2da      	uxtb	r2, r3
 80047a0:	490c      	ldr	r1, [pc, #48]	; (80047d4 <__NVIC_SetPriority+0x4c>)
 80047a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047a6:	0112      	lsls	r2, r2, #4
 80047a8:	b2d2      	uxtb	r2, r2
 80047aa:	440b      	add	r3, r1
 80047ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047b0:	e00a      	b.n	80047c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	b2da      	uxtb	r2, r3
 80047b6:	4908      	ldr	r1, [pc, #32]	; (80047d8 <__NVIC_SetPriority+0x50>)
 80047b8:	79fb      	ldrb	r3, [r7, #7]
 80047ba:	f003 030f 	and.w	r3, r3, #15
 80047be:	3b04      	subs	r3, #4
 80047c0:	0112      	lsls	r2, r2, #4
 80047c2:	b2d2      	uxtb	r2, r2
 80047c4:	440b      	add	r3, r1
 80047c6:	761a      	strb	r2, [r3, #24]
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	e000e100 	.word	0xe000e100
 80047d8:	e000ed00 	.word	0xe000ed00

080047dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047dc:	b480      	push	{r7}
 80047de:	b089      	sub	sp, #36	; 0x24
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f003 0307 	and.w	r3, r3, #7
 80047ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	f1c3 0307 	rsb	r3, r3, #7
 80047f6:	2b04      	cmp	r3, #4
 80047f8:	bf28      	it	cs
 80047fa:	2304      	movcs	r3, #4
 80047fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	3304      	adds	r3, #4
 8004802:	2b06      	cmp	r3, #6
 8004804:	d902      	bls.n	800480c <NVIC_EncodePriority+0x30>
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	3b03      	subs	r3, #3
 800480a:	e000      	b.n	800480e <NVIC_EncodePriority+0x32>
 800480c:	2300      	movs	r3, #0
 800480e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004810:	f04f 32ff 	mov.w	r2, #4294967295
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	fa02 f303 	lsl.w	r3, r2, r3
 800481a:	43da      	mvns	r2, r3
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	401a      	ands	r2, r3
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004824:	f04f 31ff 	mov.w	r1, #4294967295
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	fa01 f303 	lsl.w	r3, r1, r3
 800482e:	43d9      	mvns	r1, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004834:	4313      	orrs	r3, r2
         );
}
 8004836:	4618      	mov	r0, r3
 8004838:	3724      	adds	r7, #36	; 0x24
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
	...

08004844 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	3b01      	subs	r3, #1
 8004850:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004854:	d301      	bcc.n	800485a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004856:	2301      	movs	r3, #1
 8004858:	e00f      	b.n	800487a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800485a:	4a0a      	ldr	r2, [pc, #40]	; (8004884 <SysTick_Config+0x40>)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	3b01      	subs	r3, #1
 8004860:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004862:	210f      	movs	r1, #15
 8004864:	f04f 30ff 	mov.w	r0, #4294967295
 8004868:	f7ff ff8e 	bl	8004788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800486c:	4b05      	ldr	r3, [pc, #20]	; (8004884 <SysTick_Config+0x40>)
 800486e:	2200      	movs	r2, #0
 8004870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004872:	4b04      	ldr	r3, [pc, #16]	; (8004884 <SysTick_Config+0x40>)
 8004874:	2207      	movs	r2, #7
 8004876:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	e000e010 	.word	0xe000e010

08004888 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f7ff ff29 	bl	80046e8 <__NVIC_SetPriorityGrouping>
}
 8004896:	bf00      	nop
 8004898:	3708      	adds	r7, #8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800489e:	b580      	push	{r7, lr}
 80048a0:	b086      	sub	sp, #24
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	4603      	mov	r3, r0
 80048a6:	60b9      	str	r1, [r7, #8]
 80048a8:	607a      	str	r2, [r7, #4]
 80048aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048b0:	f7ff ff3e 	bl	8004730 <__NVIC_GetPriorityGrouping>
 80048b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	68b9      	ldr	r1, [r7, #8]
 80048ba:	6978      	ldr	r0, [r7, #20]
 80048bc:	f7ff ff8e 	bl	80047dc <NVIC_EncodePriority>
 80048c0:	4602      	mov	r2, r0
 80048c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048c6:	4611      	mov	r1, r2
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7ff ff5d 	bl	8004788 <__NVIC_SetPriority>
}
 80048ce:	bf00      	nop
 80048d0:	3718      	adds	r7, #24
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b082      	sub	sp, #8
 80048da:	af00      	add	r7, sp, #0
 80048dc:	4603      	mov	r3, r0
 80048de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7ff ff31 	bl	800474c <__NVIC_EnableIRQ>
}
 80048ea:	bf00      	nop
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b082      	sub	sp, #8
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7ff ffa2 	bl	8004844 <SysTick_Config>
 8004900:	4603      	mov	r3, r0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b084      	sub	sp, #16
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004916:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004918:	f7ff fc54 	bl	80041c4 <HAL_GetTick>
 800491c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b02      	cmp	r3, #2
 8004928:	d008      	beq.n	800493c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2280      	movs	r2, #128	; 0x80
 800492e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e052      	b.n	80049e2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f022 0216 	bic.w	r2, r2, #22
 800494a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	695a      	ldr	r2, [r3, #20]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800495a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004960:	2b00      	cmp	r3, #0
 8004962:	d103      	bne.n	800496c <HAL_DMA_Abort+0x62>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004968:	2b00      	cmp	r3, #0
 800496a:	d007      	beq.n	800497c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f022 0208 	bic.w	r2, r2, #8
 800497a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f022 0201 	bic.w	r2, r2, #1
 800498a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800498c:	e013      	b.n	80049b6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800498e:	f7ff fc19 	bl	80041c4 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	2b05      	cmp	r3, #5
 800499a:	d90c      	bls.n	80049b6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2220      	movs	r2, #32
 80049a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2203      	movs	r2, #3
 80049a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e015      	b.n	80049e2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1e4      	bne.n	800498e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049c8:	223f      	movs	r2, #63	; 0x3f
 80049ca:	409a      	lsls	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80049ea:	b480      	push	{r7}
 80049ec:	b083      	sub	sp, #12
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d004      	beq.n	8004a08 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2280      	movs	r2, #128	; 0x80
 8004a02:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e00c      	b.n	8004a22 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2205      	movs	r2, #5
 8004a0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f022 0201 	bic.w	r2, r2, #1
 8004a1e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
	...

08004a30 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e06c      	b.n	8004b1c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d106      	bne.n	8004a5a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2223      	movs	r2, #35	; 0x23
 8004a50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f7fc fbb3 	bl	80011c0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	60bb      	str	r3, [r7, #8]
 8004a5e:	4b31      	ldr	r3, [pc, #196]	; (8004b24 <HAL_ETH_Init+0xf4>)
 8004a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a62:	4a30      	ldr	r2, [pc, #192]	; (8004b24 <HAL_ETH_Init+0xf4>)
 8004a64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a68:	6453      	str	r3, [r2, #68]	; 0x44
 8004a6a:	4b2e      	ldr	r3, [pc, #184]	; (8004b24 <HAL_ETH_Init+0xf4>)
 8004a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a72:	60bb      	str	r3, [r7, #8]
 8004a74:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004a76:	4b2c      	ldr	r3, [pc, #176]	; (8004b28 <HAL_ETH_Init+0xf8>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	4a2b      	ldr	r2, [pc, #172]	; (8004b28 <HAL_ETH_Init+0xf8>)
 8004a7c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004a80:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004a82:	4b29      	ldr	r3, [pc, #164]	; (8004b28 <HAL_ETH_Init+0xf8>)
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	4927      	ldr	r1, [pc, #156]	; (8004b28 <HAL_ETH_Init+0xf8>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8004a90:	4b25      	ldr	r3, [pc, #148]	; (8004b28 <HAL_ETH_Init+0xf8>)
 8004a92:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	6812      	ldr	r2, [r2, #0]
 8004aa2:	f043 0301 	orr.w	r3, r3, #1
 8004aa6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004aaa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004aac:	f7ff fb8a 	bl	80041c4 <HAL_GetTick>
 8004ab0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004ab2:	e011      	b.n	8004ad8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004ab4:	f7ff fb86 	bl	80041c4 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004ac2:	d909      	bls.n	8004ad8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2204      	movs	r2, #4
 8004ac8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	22e0      	movs	r2, #224	; 0xe0
 8004ad0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e021      	b.n	8004b1c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1e4      	bne.n	8004ab4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f958 	bl	8004da0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 f9ff 	bl	8004ef4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 fa55 	bl	8004fa6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	461a      	mov	r2, r3
 8004b02:	2100      	movs	r1, #0
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 f9bd 	bl	8004e84 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2210      	movs	r2, #16
 8004b16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	40023800 	.word	0x40023800
 8004b28:	40013800 	.word	0x40013800

08004b2c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	4b51      	ldr	r3, [pc, #324]	; (8004c88 <ETH_SetMACConfig+0x15c>)
 8004b42:	4013      	ands	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	7c1b      	ldrb	r3, [r3, #16]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d102      	bne.n	8004b54 <ETH_SetMACConfig+0x28>
 8004b4e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004b52:	e000      	b.n	8004b56 <ETH_SetMACConfig+0x2a>
 8004b54:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	7c5b      	ldrb	r3, [r3, #17]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d102      	bne.n	8004b64 <ETH_SetMACConfig+0x38>
 8004b5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004b62:	e000      	b.n	8004b66 <ETH_SetMACConfig+0x3a>
 8004b64:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004b66:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004b6c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	7fdb      	ldrb	r3, [r3, #31]
 8004b72:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004b74:	431a      	orrs	r2, r3
                        macconf->Speed |
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004b7a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	7f92      	ldrb	r2, [r2, #30]
 8004b80:	2a00      	cmp	r2, #0
 8004b82:	d102      	bne.n	8004b8a <ETH_SetMACConfig+0x5e>
 8004b84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b88:	e000      	b.n	8004b8c <ETH_SetMACConfig+0x60>
 8004b8a:	2200      	movs	r2, #0
                        macconf->Speed |
 8004b8c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	7f1b      	ldrb	r3, [r3, #28]
 8004b92:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004b94:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004b9a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	791b      	ldrb	r3, [r3, #4]
 8004ba0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004ba2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004baa:	2a00      	cmp	r2, #0
 8004bac:	d102      	bne.n	8004bb4 <ETH_SetMACConfig+0x88>
 8004bae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bb2:	e000      	b.n	8004bb6 <ETH_SetMACConfig+0x8a>
 8004bb4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004bb6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	7bdb      	ldrb	r3, [r3, #15]
 8004bbc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004bbe:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004bc4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bcc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004be6:	2001      	movs	r0, #1
 8004be8:	f7ff faf8 	bl	80041dc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004c02:	4013      	ands	r3, r2
 8004c04:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c0a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004c0c:	683a      	ldr	r2, [r7, #0]
 8004c0e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004c12:	2a00      	cmp	r2, #0
 8004c14:	d101      	bne.n	8004c1a <ETH_SetMACConfig+0xee>
 8004c16:	2280      	movs	r2, #128	; 0x80
 8004c18:	e000      	b.n	8004c1c <ETH_SetMACConfig+0xf0>
 8004c1a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004c1c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004c22:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004c24:	683a      	ldr	r2, [r7, #0]
 8004c26:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8004c2a:	2a01      	cmp	r2, #1
 8004c2c:	d101      	bne.n	8004c32 <ETH_SetMACConfig+0x106>
 8004c2e:	2208      	movs	r2, #8
 8004c30:	e000      	b.n	8004c34 <ETH_SetMACConfig+0x108>
 8004c32:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004c34:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004c36:	683a      	ldr	r2, [r7, #0]
 8004c38:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8004c3c:	2a01      	cmp	r2, #1
 8004c3e:	d101      	bne.n	8004c44 <ETH_SetMACConfig+0x118>
 8004c40:	2204      	movs	r2, #4
 8004c42:	e000      	b.n	8004c46 <ETH_SetMACConfig+0x11a>
 8004c44:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004c46:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8004c4e:	2a01      	cmp	r2, #1
 8004c50:	d101      	bne.n	8004c56 <ETH_SetMACConfig+0x12a>
 8004c52:	2202      	movs	r2, #2
 8004c54:	e000      	b.n	8004c58 <ETH_SetMACConfig+0x12c>
 8004c56:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004c70:	2001      	movs	r0, #1
 8004c72:	f7ff fab3 	bl	80041dc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	619a      	str	r2, [r3, #24]
}
 8004c7e:	bf00      	nop
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	ff20810f 	.word	0xff20810f

08004c8c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	4b3d      	ldr	r3, [pc, #244]	; (8004d9c <ETH_SetDMAConfig+0x110>)
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	7b1b      	ldrb	r3, [r3, #12]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d102      	bne.n	8004cb8 <ETH_SetDMAConfig+0x2c>
 8004cb2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004cb6:	e000      	b.n	8004cba <ETH_SetDMAConfig+0x2e>
 8004cb8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	7b5b      	ldrb	r3, [r3, #13]
 8004cbe:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004cc0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	7f52      	ldrb	r2, [r2, #29]
 8004cc6:	2a00      	cmp	r2, #0
 8004cc8:	d102      	bne.n	8004cd0 <ETH_SetDMAConfig+0x44>
 8004cca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004cce:	e000      	b.n	8004cd2 <ETH_SetDMAConfig+0x46>
 8004cd0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004cd2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	7b9b      	ldrb	r3, [r3, #14]
 8004cd8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004cda:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004ce0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	7f1b      	ldrb	r3, [r3, #28]
 8004ce6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004ce8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	7f9b      	ldrb	r3, [r3, #30]
 8004cee:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004cf0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004cf6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004cfe:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004d00:	4313      	orrs	r3, r2
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d10:	461a      	mov	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004d22:	2001      	movs	r0, #1
 8004d24:	f7ff fa5a 	bl	80041dc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d30:	461a      	mov	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	791b      	ldrb	r3, [r3, #4]
 8004d3a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004d40:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004d46:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004d4c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004d54:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004d56:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004d5e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004d64:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	6812      	ldr	r2, [r2, #0]
 8004d6a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d6e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004d72:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004d80:	2001      	movs	r0, #1
 8004d82:	f7ff fa2b 	bl	80041dc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d8e:	461a      	mov	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6013      	str	r3, [r2, #0]
}
 8004d94:	bf00      	nop
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	f8de3f23 	.word	0xf8de3f23

08004da0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b0a6      	sub	sp, #152	; 0x98
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004da8:	2301      	movs	r3, #1
 8004daa:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8004dae:	2301      	movs	r3, #1
 8004db0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004db4:	2300      	movs	r3, #0
 8004db6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004db8:	2300      	movs	r3, #0
 8004dba:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004de0:	2300      	movs	r3, #0
 8004de2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004dea:	2300      	movs	r3, #0
 8004dec:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004df0:	2300      	movs	r3, #0
 8004df2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004df6:	2300      	movs	r3, #0
 8004df8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004e02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e06:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004e08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004e14:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004e18:	4619      	mov	r1, r3
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7ff fe86 	bl	8004b2c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004e20:	2301      	movs	r3, #1
 8004e22:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004e24:	2301      	movs	r3, #1
 8004e26:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004e32:	2300      	movs	r3, #0
 8004e34:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004e36:	2300      	movs	r3, #0
 8004e38:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004e42:	2300      	movs	r3, #0
 8004e44:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004e46:	2301      	movs	r3, #1
 8004e48:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004e50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004e54:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004e56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004e5a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004e5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e60:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004e62:	2301      	movs	r3, #1
 8004e64:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004e70:	f107 0308 	add.w	r3, r7, #8
 8004e74:	4619      	mov	r1, r3
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7ff ff08 	bl	8004c8c <ETH_SetDMAConfig>
}
 8004e7c:	bf00      	nop
 8004e7e:	3798      	adds	r7, #152	; 0x98
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b087      	sub	sp, #28
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	3305      	adds	r3, #5
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	021b      	lsls	r3, r3, #8
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	3204      	adds	r2, #4
 8004e9c:	7812      	ldrb	r2, [r2, #0]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004ea2:	68ba      	ldr	r2, [r7, #8]
 8004ea4:	4b11      	ldr	r3, [pc, #68]	; (8004eec <ETH_MACAddressConfig+0x68>)
 8004ea6:	4413      	add	r3, r2
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	3303      	adds	r3, #3
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	061a      	lsls	r2, r3, #24
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	3302      	adds	r3, #2
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	041b      	lsls	r3, r3, #16
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	021b      	lsls	r3, r3, #8
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	7812      	ldrb	r2, [r2, #0]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004ed2:	68ba      	ldr	r2, [r7, #8]
 8004ed4:	4b06      	ldr	r3, [pc, #24]	; (8004ef0 <ETH_MACAddressConfig+0x6c>)
 8004ed6:	4413      	add	r3, r2
 8004ed8:	461a      	mov	r2, r3
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	6013      	str	r3, [r2, #0]
}
 8004ede:	bf00      	nop
 8004ee0:	371c      	adds	r7, #28
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	40028040 	.word	0x40028040
 8004ef0:	40028044 	.word	0x40028044

08004ef4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004efc:	2300      	movs	r3, #0
 8004efe:	60fb      	str	r3, [r7, #12]
 8004f00:	e03e      	b.n	8004f80 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	68d9      	ldr	r1, [r3, #12]
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	4413      	add	r3, r2
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	440b      	add	r3, r1
 8004f12:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	2200      	movs	r2, #0
 8004f18:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	2200      	movs	r2, #0
 8004f24:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004f2c:	68b9      	ldr	r1, [r7, #8]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	3206      	adds	r2, #6
 8004f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d80c      	bhi.n	8004f64 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68d9      	ldr	r1, [r3, #12]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	1c5a      	adds	r2, r3, #1
 8004f52:	4613      	mov	r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	4413      	add	r3, r2
 8004f58:	00db      	lsls	r3, r3, #3
 8004f5a:	440b      	add	r3, r1
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	60da      	str	r2, [r3, #12]
 8004f62:	e004      	b.n	8004f6e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	461a      	mov	r2, r3
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2b03      	cmp	r3, #3
 8004f84:	d9bd      	bls.n	8004f02 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	68da      	ldr	r2, [r3, #12]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f98:	611a      	str	r2, [r3, #16]
}
 8004f9a:	bf00      	nop
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b085      	sub	sp, #20
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004fae:	2300      	movs	r3, #0
 8004fb0:	60fb      	str	r3, [r7, #12]
 8004fb2:	e046      	b.n	8005042 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6919      	ldr	r1, [r3, #16]
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	4413      	add	r3, r2
 8004fc0:	00db      	lsls	r3, r3, #3
 8004fc2:	440b      	add	r3, r1
 8004fc4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004ff0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8004ff8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005006:	68b9      	ldr	r1, [r7, #8]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	3212      	adds	r2, #18
 800500e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2b02      	cmp	r3, #2
 8005016:	d80c      	bhi.n	8005032 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6919      	ldr	r1, [r3, #16]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	1c5a      	adds	r2, r3, #1
 8005020:	4613      	mov	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4413      	add	r3, r2
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	440b      	add	r3, r1
 800502a:	461a      	mov	r2, r3
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	60da      	str	r2, [r3, #12]
 8005030:	e004      	b.n	800503c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	461a      	mov	r2, r3
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	3301      	adds	r3, #1
 8005040:	60fb      	str	r3, [r7, #12]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2b03      	cmp	r3, #3
 8005046:	d9b5      	bls.n	8004fb4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	691a      	ldr	r2, [r3, #16]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005072:	60da      	str	r2, [r3, #12]
}
 8005074:	bf00      	nop
 8005076:	3714      	adds	r7, #20
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005080:	b480      	push	{r7}
 8005082:	b089      	sub	sp, #36	; 0x24
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800508a:	2300      	movs	r3, #0
 800508c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800508e:	2300      	movs	r3, #0
 8005090:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005092:	2300      	movs	r3, #0
 8005094:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005096:	2300      	movs	r3, #0
 8005098:	61fb      	str	r3, [r7, #28]
 800509a:	e16b      	b.n	8005374 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800509c:	2201      	movs	r2, #1
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	fa02 f303 	lsl.w	r3, r2, r3
 80050a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	4013      	ands	r3, r2
 80050ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	f040 815a 	bne.w	800536e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f003 0303 	and.w	r3, r3, #3
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d005      	beq.n	80050d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d130      	bne.n	8005134 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	005b      	lsls	r3, r3, #1
 80050dc:	2203      	movs	r2, #3
 80050de:	fa02 f303 	lsl.w	r3, r2, r3
 80050e2:	43db      	mvns	r3, r3
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	4013      	ands	r3, r2
 80050e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	68da      	ldr	r2, [r3, #12]
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	005b      	lsls	r3, r3, #1
 80050f2:	fa02 f303 	lsl.w	r3, r2, r3
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005108:	2201      	movs	r2, #1
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	fa02 f303 	lsl.w	r3, r2, r3
 8005110:	43db      	mvns	r3, r3
 8005112:	69ba      	ldr	r2, [r7, #24]
 8005114:	4013      	ands	r3, r2
 8005116:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	091b      	lsrs	r3, r3, #4
 800511e:	f003 0201 	and.w	r2, r3, #1
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	fa02 f303 	lsl.w	r3, r2, r3
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	4313      	orrs	r3, r2
 800512c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f003 0303 	and.w	r3, r3, #3
 800513c:	2b03      	cmp	r3, #3
 800513e:	d017      	beq.n	8005170 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	005b      	lsls	r3, r3, #1
 800514a:	2203      	movs	r2, #3
 800514c:	fa02 f303 	lsl.w	r3, r2, r3
 8005150:	43db      	mvns	r3, r3
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	4013      	ands	r3, r2
 8005156:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	689a      	ldr	r2, [r3, #8]
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	005b      	lsls	r3, r3, #1
 8005160:	fa02 f303 	lsl.w	r3, r2, r3
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	4313      	orrs	r3, r2
 8005168:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	69ba      	ldr	r2, [r7, #24]
 800516e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f003 0303 	and.w	r3, r3, #3
 8005178:	2b02      	cmp	r3, #2
 800517a:	d123      	bne.n	80051c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	08da      	lsrs	r2, r3, #3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	3208      	adds	r2, #8
 8005184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005188:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	f003 0307 	and.w	r3, r3, #7
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	220f      	movs	r2, #15
 8005194:	fa02 f303 	lsl.w	r3, r2, r3
 8005198:	43db      	mvns	r3, r3
 800519a:	69ba      	ldr	r2, [r7, #24]
 800519c:	4013      	ands	r3, r2
 800519e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	691a      	ldr	r2, [r3, #16]
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	f003 0307 	and.w	r3, r3, #7
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	fa02 f303 	lsl.w	r3, r2, r3
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	08da      	lsrs	r2, r3, #3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	3208      	adds	r2, #8
 80051be:	69b9      	ldr	r1, [r7, #24]
 80051c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	2203      	movs	r2, #3
 80051d0:	fa02 f303 	lsl.w	r3, r2, r3
 80051d4:	43db      	mvns	r3, r3
 80051d6:	69ba      	ldr	r2, [r7, #24]
 80051d8:	4013      	ands	r3, r2
 80051da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f003 0203 	and.w	r2, r3, #3
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	005b      	lsls	r3, r3, #1
 80051e8:	fa02 f303 	lsl.w	r3, r2, r3
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005200:	2b00      	cmp	r3, #0
 8005202:	f000 80b4 	beq.w	800536e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005206:	2300      	movs	r3, #0
 8005208:	60fb      	str	r3, [r7, #12]
 800520a:	4b60      	ldr	r3, [pc, #384]	; (800538c <HAL_GPIO_Init+0x30c>)
 800520c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800520e:	4a5f      	ldr	r2, [pc, #380]	; (800538c <HAL_GPIO_Init+0x30c>)
 8005210:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005214:	6453      	str	r3, [r2, #68]	; 0x44
 8005216:	4b5d      	ldr	r3, [pc, #372]	; (800538c <HAL_GPIO_Init+0x30c>)
 8005218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800521a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800521e:	60fb      	str	r3, [r7, #12]
 8005220:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005222:	4a5b      	ldr	r2, [pc, #364]	; (8005390 <HAL_GPIO_Init+0x310>)
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	089b      	lsrs	r3, r3, #2
 8005228:	3302      	adds	r3, #2
 800522a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800522e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	f003 0303 	and.w	r3, r3, #3
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	220f      	movs	r2, #15
 800523a:	fa02 f303 	lsl.w	r3, r2, r3
 800523e:	43db      	mvns	r3, r3
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	4013      	ands	r3, r2
 8005244:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a52      	ldr	r2, [pc, #328]	; (8005394 <HAL_GPIO_Init+0x314>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d02b      	beq.n	80052a6 <HAL_GPIO_Init+0x226>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a51      	ldr	r2, [pc, #324]	; (8005398 <HAL_GPIO_Init+0x318>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d025      	beq.n	80052a2 <HAL_GPIO_Init+0x222>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a50      	ldr	r2, [pc, #320]	; (800539c <HAL_GPIO_Init+0x31c>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d01f      	beq.n	800529e <HAL_GPIO_Init+0x21e>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a4f      	ldr	r2, [pc, #316]	; (80053a0 <HAL_GPIO_Init+0x320>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d019      	beq.n	800529a <HAL_GPIO_Init+0x21a>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a4e      	ldr	r2, [pc, #312]	; (80053a4 <HAL_GPIO_Init+0x324>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d013      	beq.n	8005296 <HAL_GPIO_Init+0x216>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a4d      	ldr	r2, [pc, #308]	; (80053a8 <HAL_GPIO_Init+0x328>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d00d      	beq.n	8005292 <HAL_GPIO_Init+0x212>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a4c      	ldr	r2, [pc, #304]	; (80053ac <HAL_GPIO_Init+0x32c>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d007      	beq.n	800528e <HAL_GPIO_Init+0x20e>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a4b      	ldr	r2, [pc, #300]	; (80053b0 <HAL_GPIO_Init+0x330>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d101      	bne.n	800528a <HAL_GPIO_Init+0x20a>
 8005286:	2307      	movs	r3, #7
 8005288:	e00e      	b.n	80052a8 <HAL_GPIO_Init+0x228>
 800528a:	2308      	movs	r3, #8
 800528c:	e00c      	b.n	80052a8 <HAL_GPIO_Init+0x228>
 800528e:	2306      	movs	r3, #6
 8005290:	e00a      	b.n	80052a8 <HAL_GPIO_Init+0x228>
 8005292:	2305      	movs	r3, #5
 8005294:	e008      	b.n	80052a8 <HAL_GPIO_Init+0x228>
 8005296:	2304      	movs	r3, #4
 8005298:	e006      	b.n	80052a8 <HAL_GPIO_Init+0x228>
 800529a:	2303      	movs	r3, #3
 800529c:	e004      	b.n	80052a8 <HAL_GPIO_Init+0x228>
 800529e:	2302      	movs	r3, #2
 80052a0:	e002      	b.n	80052a8 <HAL_GPIO_Init+0x228>
 80052a2:	2301      	movs	r3, #1
 80052a4:	e000      	b.n	80052a8 <HAL_GPIO_Init+0x228>
 80052a6:	2300      	movs	r3, #0
 80052a8:	69fa      	ldr	r2, [r7, #28]
 80052aa:	f002 0203 	and.w	r2, r2, #3
 80052ae:	0092      	lsls	r2, r2, #2
 80052b0:	4093      	lsls	r3, r2
 80052b2:	69ba      	ldr	r2, [r7, #24]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052b8:	4935      	ldr	r1, [pc, #212]	; (8005390 <HAL_GPIO_Init+0x310>)
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	089b      	lsrs	r3, r3, #2
 80052be:	3302      	adds	r3, #2
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80052c6:	4b3b      	ldr	r3, [pc, #236]	; (80053b4 <HAL_GPIO_Init+0x334>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	43db      	mvns	r3, r3
 80052d0:	69ba      	ldr	r2, [r7, #24]
 80052d2:	4013      	ands	r3, r2
 80052d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d003      	beq.n	80052ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80052e2:	69ba      	ldr	r2, [r7, #24]
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80052ea:	4a32      	ldr	r2, [pc, #200]	; (80053b4 <HAL_GPIO_Init+0x334>)
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80052f0:	4b30      	ldr	r3, [pc, #192]	; (80053b4 <HAL_GPIO_Init+0x334>)
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	43db      	mvns	r3, r3
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	4013      	ands	r3, r2
 80052fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d003      	beq.n	8005314 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	4313      	orrs	r3, r2
 8005312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005314:	4a27      	ldr	r2, [pc, #156]	; (80053b4 <HAL_GPIO_Init+0x334>)
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800531a:	4b26      	ldr	r3, [pc, #152]	; (80053b4 <HAL_GPIO_Init+0x334>)
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	43db      	mvns	r3, r3
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	4013      	ands	r3, r2
 8005328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d003      	beq.n	800533e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005336:	69ba      	ldr	r2, [r7, #24]
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	4313      	orrs	r3, r2
 800533c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800533e:	4a1d      	ldr	r2, [pc, #116]	; (80053b4 <HAL_GPIO_Init+0x334>)
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005344:	4b1b      	ldr	r3, [pc, #108]	; (80053b4 <HAL_GPIO_Init+0x334>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	43db      	mvns	r3, r3
 800534e:	69ba      	ldr	r2, [r7, #24]
 8005350:	4013      	ands	r3, r2
 8005352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d003      	beq.n	8005368 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005360:	69ba      	ldr	r2, [r7, #24]
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	4313      	orrs	r3, r2
 8005366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005368:	4a12      	ldr	r2, [pc, #72]	; (80053b4 <HAL_GPIO_Init+0x334>)
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	3301      	adds	r3, #1
 8005372:	61fb      	str	r3, [r7, #28]
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	2b0f      	cmp	r3, #15
 8005378:	f67f ae90 	bls.w	800509c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800537c:	bf00      	nop
 800537e:	bf00      	nop
 8005380:	3724      	adds	r7, #36	; 0x24
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	40023800 	.word	0x40023800
 8005390:	40013800 	.word	0x40013800
 8005394:	40020000 	.word	0x40020000
 8005398:	40020400 	.word	0x40020400
 800539c:	40020800 	.word	0x40020800
 80053a0:	40020c00 	.word	0x40020c00
 80053a4:	40021000 	.word	0x40021000
 80053a8:	40021400 	.word	0x40021400
 80053ac:	40021800 	.word	0x40021800
 80053b0:	40021c00 	.word	0x40021c00
 80053b4:	40013c00 	.word	0x40013c00

080053b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	460b      	mov	r3, r1
 80053c2:	807b      	strh	r3, [r7, #2]
 80053c4:	4613      	mov	r3, r2
 80053c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80053c8:	787b      	ldrb	r3, [r7, #1]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d003      	beq.n	80053d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053ce:	887a      	ldrh	r2, [r7, #2]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80053d4:	e003      	b.n	80053de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80053d6:	887b      	ldrh	r3, [r7, #2]
 80053d8:	041a      	lsls	r2, r3, #16
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	619a      	str	r2, [r3, #24]
}
 80053de:	bf00      	nop
 80053e0:	370c      	adds	r7, #12
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
	...

080053ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d101      	bne.n	80053fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e12b      	b.n	8005656 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d106      	bne.n	8005418 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f7fc f8b4 	bl	8001580 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2224      	movs	r2, #36	; 0x24
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f022 0201 	bic.w	r2, r2, #1
 800542e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800543e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800544e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005450:	f001 fd3c 	bl	8006ecc <HAL_RCC_GetPCLK1Freq>
 8005454:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	4a81      	ldr	r2, [pc, #516]	; (8005660 <HAL_I2C_Init+0x274>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d807      	bhi.n	8005470 <HAL_I2C_Init+0x84>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	4a80      	ldr	r2, [pc, #512]	; (8005664 <HAL_I2C_Init+0x278>)
 8005464:	4293      	cmp	r3, r2
 8005466:	bf94      	ite	ls
 8005468:	2301      	movls	r3, #1
 800546a:	2300      	movhi	r3, #0
 800546c:	b2db      	uxtb	r3, r3
 800546e:	e006      	b.n	800547e <HAL_I2C_Init+0x92>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	4a7d      	ldr	r2, [pc, #500]	; (8005668 <HAL_I2C_Init+0x27c>)
 8005474:	4293      	cmp	r3, r2
 8005476:	bf94      	ite	ls
 8005478:	2301      	movls	r3, #1
 800547a:	2300      	movhi	r3, #0
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e0e7      	b.n	8005656 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	4a78      	ldr	r2, [pc, #480]	; (800566c <HAL_I2C_Init+0x280>)
 800548a:	fba2 2303 	umull	r2, r3, r2, r3
 800548e:	0c9b      	lsrs	r3, r3, #18
 8005490:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	430a      	orrs	r2, r1
 80054a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	6a1b      	ldr	r3, [r3, #32]
 80054ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	4a6a      	ldr	r2, [pc, #424]	; (8005660 <HAL_I2C_Init+0x274>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d802      	bhi.n	80054c0 <HAL_I2C_Init+0xd4>
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	3301      	adds	r3, #1
 80054be:	e009      	b.n	80054d4 <HAL_I2C_Init+0xe8>
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80054c6:	fb02 f303 	mul.w	r3, r2, r3
 80054ca:	4a69      	ldr	r2, [pc, #420]	; (8005670 <HAL_I2C_Init+0x284>)
 80054cc:	fba2 2303 	umull	r2, r3, r2, r3
 80054d0:	099b      	lsrs	r3, r3, #6
 80054d2:	3301      	adds	r3, #1
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	6812      	ldr	r2, [r2, #0]
 80054d8:	430b      	orrs	r3, r1
 80054da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80054e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	495c      	ldr	r1, [pc, #368]	; (8005660 <HAL_I2C_Init+0x274>)
 80054f0:	428b      	cmp	r3, r1
 80054f2:	d819      	bhi.n	8005528 <HAL_I2C_Init+0x13c>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	1e59      	subs	r1, r3, #1
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8005502:	1c59      	adds	r1, r3, #1
 8005504:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005508:	400b      	ands	r3, r1
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00a      	beq.n	8005524 <HAL_I2C_Init+0x138>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	1e59      	subs	r1, r3, #1
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	005b      	lsls	r3, r3, #1
 8005518:	fbb1 f3f3 	udiv	r3, r1, r3
 800551c:	3301      	adds	r3, #1
 800551e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005522:	e051      	b.n	80055c8 <HAL_I2C_Init+0x1dc>
 8005524:	2304      	movs	r3, #4
 8005526:	e04f      	b.n	80055c8 <HAL_I2C_Init+0x1dc>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d111      	bne.n	8005554 <HAL_I2C_Init+0x168>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	1e58      	subs	r0, r3, #1
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6859      	ldr	r1, [r3, #4]
 8005538:	460b      	mov	r3, r1
 800553a:	005b      	lsls	r3, r3, #1
 800553c:	440b      	add	r3, r1
 800553e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005542:	3301      	adds	r3, #1
 8005544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005548:	2b00      	cmp	r3, #0
 800554a:	bf0c      	ite	eq
 800554c:	2301      	moveq	r3, #1
 800554e:	2300      	movne	r3, #0
 8005550:	b2db      	uxtb	r3, r3
 8005552:	e012      	b.n	800557a <HAL_I2C_Init+0x18e>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	1e58      	subs	r0, r3, #1
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6859      	ldr	r1, [r3, #4]
 800555c:	460b      	mov	r3, r1
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	440b      	add	r3, r1
 8005562:	0099      	lsls	r1, r3, #2
 8005564:	440b      	add	r3, r1
 8005566:	fbb0 f3f3 	udiv	r3, r0, r3
 800556a:	3301      	adds	r3, #1
 800556c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005570:	2b00      	cmp	r3, #0
 8005572:	bf0c      	ite	eq
 8005574:	2301      	moveq	r3, #1
 8005576:	2300      	movne	r3, #0
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b00      	cmp	r3, #0
 800557c:	d001      	beq.n	8005582 <HAL_I2C_Init+0x196>
 800557e:	2301      	movs	r3, #1
 8005580:	e022      	b.n	80055c8 <HAL_I2C_Init+0x1dc>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10e      	bne.n	80055a8 <HAL_I2C_Init+0x1bc>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	1e58      	subs	r0, r3, #1
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6859      	ldr	r1, [r3, #4]
 8005592:	460b      	mov	r3, r1
 8005594:	005b      	lsls	r3, r3, #1
 8005596:	440b      	add	r3, r1
 8005598:	fbb0 f3f3 	udiv	r3, r0, r3
 800559c:	3301      	adds	r3, #1
 800559e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055a6:	e00f      	b.n	80055c8 <HAL_I2C_Init+0x1dc>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	1e58      	subs	r0, r3, #1
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6859      	ldr	r1, [r3, #4]
 80055b0:	460b      	mov	r3, r1
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	440b      	add	r3, r1
 80055b6:	0099      	lsls	r1, r3, #2
 80055b8:	440b      	add	r3, r1
 80055ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80055be:	3301      	adds	r3, #1
 80055c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055c8:	6879      	ldr	r1, [r7, #4]
 80055ca:	6809      	ldr	r1, [r1, #0]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	69da      	ldr	r2, [r3, #28]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	431a      	orrs	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80055f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	6911      	ldr	r1, [r2, #16]
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	68d2      	ldr	r2, [r2, #12]
 8005602:	4311      	orrs	r1, r2
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	6812      	ldr	r2, [r2, #0]
 8005608:	430b      	orrs	r3, r1
 800560a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	695a      	ldr	r2, [r3, #20]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	431a      	orrs	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	430a      	orrs	r2, r1
 8005626:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f042 0201 	orr.w	r2, r2, #1
 8005636:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2220      	movs	r2, #32
 8005642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	000186a0 	.word	0x000186a0
 8005664:	001e847f 	.word	0x001e847f
 8005668:	003d08ff 	.word	0x003d08ff
 800566c:	431bde83 	.word	0x431bde83
 8005670:	10624dd3 	.word	0x10624dd3

08005674 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b088      	sub	sp, #32
 8005678:	af02      	add	r7, sp, #8
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	607a      	str	r2, [r7, #4]
 800567e:	461a      	mov	r2, r3
 8005680:	460b      	mov	r3, r1
 8005682:	817b      	strh	r3, [r7, #10]
 8005684:	4613      	mov	r3, r2
 8005686:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005688:	f7fe fd9c 	bl	80041c4 <HAL_GetTick>
 800568c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b20      	cmp	r3, #32
 8005698:	f040 80e0 	bne.w	800585c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	9300      	str	r3, [sp, #0]
 80056a0:	2319      	movs	r3, #25
 80056a2:	2201      	movs	r2, #1
 80056a4:	4970      	ldr	r1, [pc, #448]	; (8005868 <HAL_I2C_Master_Transmit+0x1f4>)
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	f000 fe02 	bl	80062b0 <I2C_WaitOnFlagUntilTimeout>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d001      	beq.n	80056b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80056b2:	2302      	movs	r3, #2
 80056b4:	e0d3      	b.n	800585e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d101      	bne.n	80056c4 <HAL_I2C_Master_Transmit+0x50>
 80056c0:	2302      	movs	r3, #2
 80056c2:	e0cc      	b.n	800585e <HAL_I2C_Master_Transmit+0x1ea>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d007      	beq.n	80056ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f042 0201 	orr.w	r2, r2, #1
 80056e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2221      	movs	r2, #33	; 0x21
 80056fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2210      	movs	r2, #16
 8005706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	893a      	ldrh	r2, [r7, #8]
 800571a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005720:	b29a      	uxth	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	4a50      	ldr	r2, [pc, #320]	; (800586c <HAL_I2C_Master_Transmit+0x1f8>)
 800572a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800572c:	8979      	ldrh	r1, [r7, #10]
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	6a3a      	ldr	r2, [r7, #32]
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	f000 fbbc 	bl	8005eb0 <I2C_MasterRequestWrite>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d001      	beq.n	8005742 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e08d      	b.n	800585e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005742:	2300      	movs	r3, #0
 8005744:	613b      	str	r3, [r7, #16]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	695b      	ldr	r3, [r3, #20]
 800574c:	613b      	str	r3, [r7, #16]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	613b      	str	r3, [r7, #16]
 8005756:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005758:	e066      	b.n	8005828 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	6a39      	ldr	r1, [r7, #32]
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	f000 fe7c 	bl	800645c <I2C_WaitOnTXEFlagUntilTimeout>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00d      	beq.n	8005786 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576e:	2b04      	cmp	r3, #4
 8005770:	d107      	bne.n	8005782 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005780:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e06b      	b.n	800585e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578a:	781a      	ldrb	r2, [r3, #0]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005796:	1c5a      	adds	r2, r3, #1
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	3b01      	subs	r3, #1
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ae:	3b01      	subs	r3, #1
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	f003 0304 	and.w	r3, r3, #4
 80057c0:	2b04      	cmp	r3, #4
 80057c2:	d11b      	bne.n	80057fc <HAL_I2C_Master_Transmit+0x188>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d017      	beq.n	80057fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d0:	781a      	ldrb	r2, [r3, #0]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057dc:	1c5a      	adds	r2, r3, #1
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	3b01      	subs	r3, #1
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057f4:	3b01      	subs	r3, #1
 80057f6:	b29a      	uxth	r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	6a39      	ldr	r1, [r7, #32]
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f000 fe6c 	bl	80064de <I2C_WaitOnBTFFlagUntilTimeout>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00d      	beq.n	8005828 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005810:	2b04      	cmp	r3, #4
 8005812:	d107      	bne.n	8005824 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005822:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e01a      	b.n	800585e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800582c:	2b00      	cmp	r3, #0
 800582e:	d194      	bne.n	800575a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800583e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2220      	movs	r2, #32
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005858:	2300      	movs	r3, #0
 800585a:	e000      	b.n	800585e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800585c:	2302      	movs	r3, #2
  }
}
 800585e:	4618      	mov	r0, r3
 8005860:	3718      	adds	r7, #24
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	00100002 	.word	0x00100002
 800586c:	ffff0000 	.word	0xffff0000

08005870 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b088      	sub	sp, #32
 8005874:	af02      	add	r7, sp, #8
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	4608      	mov	r0, r1
 800587a:	4611      	mov	r1, r2
 800587c:	461a      	mov	r2, r3
 800587e:	4603      	mov	r3, r0
 8005880:	817b      	strh	r3, [r7, #10]
 8005882:	460b      	mov	r3, r1
 8005884:	813b      	strh	r3, [r7, #8]
 8005886:	4613      	mov	r3, r2
 8005888:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800588a:	f7fe fc9b 	bl	80041c4 <HAL_GetTick>
 800588e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2b20      	cmp	r3, #32
 800589a:	f040 80d9 	bne.w	8005a50 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	9300      	str	r3, [sp, #0]
 80058a2:	2319      	movs	r3, #25
 80058a4:	2201      	movs	r2, #1
 80058a6:	496d      	ldr	r1, [pc, #436]	; (8005a5c <HAL_I2C_Mem_Write+0x1ec>)
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f000 fd01 	bl	80062b0 <I2C_WaitOnFlagUntilTimeout>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d001      	beq.n	80058b8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80058b4:	2302      	movs	r3, #2
 80058b6:	e0cc      	b.n	8005a52 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d101      	bne.n	80058c6 <HAL_I2C_Mem_Write+0x56>
 80058c2:	2302      	movs	r3, #2
 80058c4:	e0c5      	b.n	8005a52 <HAL_I2C_Mem_Write+0x1e2>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d007      	beq.n	80058ec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f042 0201 	orr.w	r2, r2, #1
 80058ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2221      	movs	r2, #33	; 0x21
 8005900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2240      	movs	r2, #64	; 0x40
 8005908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6a3a      	ldr	r2, [r7, #32]
 8005916:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800591c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005922:	b29a      	uxth	r2, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	4a4d      	ldr	r2, [pc, #308]	; (8005a60 <HAL_I2C_Mem_Write+0x1f0>)
 800592c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800592e:	88f8      	ldrh	r0, [r7, #6]
 8005930:	893a      	ldrh	r2, [r7, #8]
 8005932:	8979      	ldrh	r1, [r7, #10]
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	9301      	str	r3, [sp, #4]
 8005938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593a:	9300      	str	r3, [sp, #0]
 800593c:	4603      	mov	r3, r0
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f000 fb38 	bl	8005fb4 <I2C_RequestMemoryWrite>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d052      	beq.n	80059f0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e081      	b.n	8005a52 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f000 fd82 	bl	800645c <I2C_WaitOnTXEFlagUntilTimeout>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00d      	beq.n	800597a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005962:	2b04      	cmp	r3, #4
 8005964:	d107      	bne.n	8005976 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005974:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e06b      	b.n	8005a52 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597e:	781a      	ldrb	r2, [r3, #0]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598a:	1c5a      	adds	r2, r3, #1
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005994:	3b01      	subs	r3, #1
 8005996:	b29a      	uxth	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	3b01      	subs	r3, #1
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	695b      	ldr	r3, [r3, #20]
 80059b0:	f003 0304 	and.w	r3, r3, #4
 80059b4:	2b04      	cmp	r3, #4
 80059b6:	d11b      	bne.n	80059f0 <HAL_I2C_Mem_Write+0x180>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d017      	beq.n	80059f0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c4:	781a      	ldrb	r2, [r3, #0]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d0:	1c5a      	adds	r2, r3, #1
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059da:	3b01      	subs	r3, #1
 80059dc:	b29a      	uxth	r2, r3
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	3b01      	subs	r3, #1
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1aa      	bne.n	800594e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f000 fd6e 	bl	80064de <I2C_WaitOnBTFFlagUntilTimeout>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00d      	beq.n	8005a24 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0c:	2b04      	cmp	r3, #4
 8005a0e:	d107      	bne.n	8005a20 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a1e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e016      	b.n	8005a52 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2220      	movs	r2, #32
 8005a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	e000      	b.n	8005a52 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005a50:	2302      	movs	r3, #2
  }
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3718      	adds	r7, #24
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	00100002 	.word	0x00100002
 8005a60:	ffff0000 	.word	0xffff0000

08005a64 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b08c      	sub	sp, #48	; 0x30
 8005a68:	af02      	add	r7, sp, #8
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	4608      	mov	r0, r1
 8005a6e:	4611      	mov	r1, r2
 8005a70:	461a      	mov	r2, r3
 8005a72:	4603      	mov	r3, r0
 8005a74:	817b      	strh	r3, [r7, #10]
 8005a76:	460b      	mov	r3, r1
 8005a78:	813b      	strh	r3, [r7, #8]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a7e:	f7fe fba1 	bl	80041c4 <HAL_GetTick>
 8005a82:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	2b20      	cmp	r3, #32
 8005a8e:	f040 8208 	bne.w	8005ea2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a94:	9300      	str	r3, [sp, #0]
 8005a96:	2319      	movs	r3, #25
 8005a98:	2201      	movs	r2, #1
 8005a9a:	497b      	ldr	r1, [pc, #492]	; (8005c88 <HAL_I2C_Mem_Read+0x224>)
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f000 fc07 	bl	80062b0 <I2C_WaitOnFlagUntilTimeout>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d001      	beq.n	8005aac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	e1fb      	b.n	8005ea4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d101      	bne.n	8005aba <HAL_I2C_Mem_Read+0x56>
 8005ab6:	2302      	movs	r3, #2
 8005ab8:	e1f4      	b.n	8005ea4 <HAL_I2C_Mem_Read+0x440>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d007      	beq.n	8005ae0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f042 0201 	orr.w	r2, r2, #1
 8005ade:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005aee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2222      	movs	r2, #34	; 0x22
 8005af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2240      	movs	r2, #64	; 0x40
 8005afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005b10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	4a5b      	ldr	r2, [pc, #364]	; (8005c8c <HAL_I2C_Mem_Read+0x228>)
 8005b20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b22:	88f8      	ldrh	r0, [r7, #6]
 8005b24:	893a      	ldrh	r2, [r7, #8]
 8005b26:	8979      	ldrh	r1, [r7, #10]
 8005b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2a:	9301      	str	r3, [sp, #4]
 8005b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2e:	9300      	str	r3, [sp, #0]
 8005b30:	4603      	mov	r3, r0
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f000 fad4 	bl	80060e0 <I2C_RequestMemoryRead>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d001      	beq.n	8005b42 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e1b0      	b.n	8005ea4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d113      	bne.n	8005b72 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	623b      	str	r3, [r7, #32]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	695b      	ldr	r3, [r3, #20]
 8005b54:	623b      	str	r3, [r7, #32]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	699b      	ldr	r3, [r3, #24]
 8005b5c:	623b      	str	r3, [r7, #32]
 8005b5e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b6e:	601a      	str	r2, [r3, #0]
 8005b70:	e184      	b.n	8005e7c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d11b      	bne.n	8005bb2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	61fb      	str	r3, [r7, #28]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	695b      	ldr	r3, [r3, #20]
 8005b94:	61fb      	str	r3, [r7, #28]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	61fb      	str	r3, [r7, #28]
 8005b9e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bae:	601a      	str	r2, [r3, #0]
 8005bb0:	e164      	b.n	8005e7c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d11b      	bne.n	8005bf2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bc8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bd8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bda:	2300      	movs	r3, #0
 8005bdc:	61bb      	str	r3, [r7, #24]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	695b      	ldr	r3, [r3, #20]
 8005be4:	61bb      	str	r3, [r7, #24]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	61bb      	str	r3, [r7, #24]
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	e144      	b.n	8005e7c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	617b      	str	r3, [r7, #20]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	695b      	ldr	r3, [r3, #20]
 8005bfc:	617b      	str	r3, [r7, #20]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	617b      	str	r3, [r7, #20]
 8005c06:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005c08:	e138      	b.n	8005e7c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c0e:	2b03      	cmp	r3, #3
 8005c10:	f200 80f1 	bhi.w	8005df6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d123      	bne.n	8005c64 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f000 fc9d 	bl	8006560 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d001      	beq.n	8005c30 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e139      	b.n	8005ea4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	691a      	ldr	r2, [r3, #16]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3a:	b2d2      	uxtb	r2, r2
 8005c3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c42:	1c5a      	adds	r2, r3, #1
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c4c:	3b01      	subs	r3, #1
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c62:	e10b      	b.n	8005e7c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d14e      	bne.n	8005d0a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6e:	9300      	str	r3, [sp, #0]
 8005c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c72:	2200      	movs	r2, #0
 8005c74:	4906      	ldr	r1, [pc, #24]	; (8005c90 <HAL_I2C_Mem_Read+0x22c>)
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f000 fb1a 	bl	80062b0 <I2C_WaitOnFlagUntilTimeout>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d008      	beq.n	8005c94 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e10e      	b.n	8005ea4 <HAL_I2C_Mem_Read+0x440>
 8005c86:	bf00      	nop
 8005c88:	00100002 	.word	0x00100002
 8005c8c:	ffff0000 	.word	0xffff0000
 8005c90:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ca2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	691a      	ldr	r2, [r3, #16]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cae:	b2d2      	uxtb	r2, r2
 8005cb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb6:	1c5a      	adds	r2, r3, #1
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	691a      	ldr	r2, [r3, #16]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce0:	b2d2      	uxtb	r2, r2
 8005ce2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce8:	1c5a      	adds	r2, r3, #1
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	3b01      	subs	r3, #1
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d08:	e0b8      	b.n	8005e7c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0c:	9300      	str	r3, [sp, #0]
 8005d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d10:	2200      	movs	r2, #0
 8005d12:	4966      	ldr	r1, [pc, #408]	; (8005eac <HAL_I2C_Mem_Read+0x448>)
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	f000 facb 	bl	80062b0 <I2C_WaitOnFlagUntilTimeout>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d001      	beq.n	8005d24 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e0bf      	b.n	8005ea4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	691a      	ldr	r2, [r3, #16]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3e:	b2d2      	uxtb	r2, r2
 8005d40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d46:	1c5a      	adds	r2, r3, #1
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d50:	3b01      	subs	r3, #1
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d68:	9300      	str	r3, [sp, #0]
 8005d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	494f      	ldr	r1, [pc, #316]	; (8005eac <HAL_I2C_Mem_Read+0x448>)
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f000 fa9d 	bl	80062b0 <I2C_WaitOnFlagUntilTimeout>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d001      	beq.n	8005d80 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e091      	b.n	8005ea4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	691a      	ldr	r2, [r3, #16]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9a:	b2d2      	uxtb	r2, r2
 8005d9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da2:	1c5a      	adds	r2, r3, #1
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dac:	3b01      	subs	r3, #1
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	691a      	ldr	r2, [r3, #16]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dcc:	b2d2      	uxtb	r2, r2
 8005dce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd4:	1c5a      	adds	r2, r3, #1
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dde:	3b01      	subs	r3, #1
 8005de0:	b29a      	uxth	r2, r3
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	3b01      	subs	r3, #1
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005df4:	e042      	b.n	8005e7c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005df8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	f000 fbb0 	bl	8006560 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d001      	beq.n	8005e0a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e04c      	b.n	8005ea4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	691a      	ldr	r2, [r3, #16]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e14:	b2d2      	uxtb	r2, r2
 8005e16:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1c:	1c5a      	adds	r2, r3, #1
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e26:	3b01      	subs	r3, #1
 8005e28:	b29a      	uxth	r2, r3
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	3b01      	subs	r3, #1
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	f003 0304 	and.w	r3, r3, #4
 8005e46:	2b04      	cmp	r3, #4
 8005e48:	d118      	bne.n	8005e7c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	691a      	ldr	r2, [r3, #16]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e54:	b2d2      	uxtb	r2, r2
 8005e56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5c:	1c5a      	adds	r2, r3, #1
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e66:	3b01      	subs	r3, #1
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	3b01      	subs	r3, #1
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	f47f aec2 	bne.w	8005c0a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2220      	movs	r2, #32
 8005e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	e000      	b.n	8005ea4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005ea2:	2302      	movs	r3, #2
  }
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3728      	adds	r7, #40	; 0x28
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	00010004 	.word	0x00010004

08005eb0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b088      	sub	sp, #32
 8005eb4:	af02      	add	r7, sp, #8
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	607a      	str	r2, [r7, #4]
 8005eba:	603b      	str	r3, [r7, #0]
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	2b08      	cmp	r3, #8
 8005eca:	d006      	beq.n	8005eda <I2C_MasterRequestWrite+0x2a>
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d003      	beq.n	8005eda <I2C_MasterRequestWrite+0x2a>
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ed8:	d108      	bne.n	8005eec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ee8:	601a      	str	r2, [r3, #0]
 8005eea:	e00b      	b.n	8005f04 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef0:	2b12      	cmp	r3, #18
 8005ef2:	d107      	bne.n	8005f04 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	9300      	str	r3, [sp, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	f000 f9cd 	bl	80062b0 <I2C_WaitOnFlagUntilTimeout>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00d      	beq.n	8005f38 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f2a:	d103      	bne.n	8005f34 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e035      	b.n	8005fa4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f40:	d108      	bne.n	8005f54 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f42:	897b      	ldrh	r3, [r7, #10]
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	461a      	mov	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f50:	611a      	str	r2, [r3, #16]
 8005f52:	e01b      	b.n	8005f8c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005f54:	897b      	ldrh	r3, [r7, #10]
 8005f56:	11db      	asrs	r3, r3, #7
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	f003 0306 	and.w	r3, r3, #6
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	f063 030f 	orn	r3, r3, #15
 8005f64:	b2da      	uxtb	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	490e      	ldr	r1, [pc, #56]	; (8005fac <I2C_MasterRequestWrite+0xfc>)
 8005f72:	68f8      	ldr	r0, [r7, #12]
 8005f74:	f000 f9f3 	bl	800635e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d001      	beq.n	8005f82 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e010      	b.n	8005fa4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005f82:	897b      	ldrh	r3, [r7, #10]
 8005f84:	b2da      	uxtb	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	4907      	ldr	r1, [pc, #28]	; (8005fb0 <I2C_MasterRequestWrite+0x100>)
 8005f92:	68f8      	ldr	r0, [r7, #12]
 8005f94:	f000 f9e3 	bl	800635e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d001      	beq.n	8005fa2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e000      	b.n	8005fa4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3718      	adds	r7, #24
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	00010008 	.word	0x00010008
 8005fb0:	00010002 	.word	0x00010002

08005fb4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b088      	sub	sp, #32
 8005fb8:	af02      	add	r7, sp, #8
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	4608      	mov	r0, r1
 8005fbe:	4611      	mov	r1, r2
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	817b      	strh	r3, [r7, #10]
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	813b      	strh	r3, [r7, #8]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fdc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe0:	9300      	str	r3, [sp, #0]
 8005fe2:	6a3b      	ldr	r3, [r7, #32]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f000 f960 	bl	80062b0 <I2C_WaitOnFlagUntilTimeout>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00d      	beq.n	8006012 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006000:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006004:	d103      	bne.n	800600e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800600c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e05f      	b.n	80060d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006012:	897b      	ldrh	r3, [r7, #10]
 8006014:	b2db      	uxtb	r3, r3
 8006016:	461a      	mov	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006020:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006024:	6a3a      	ldr	r2, [r7, #32]
 8006026:	492d      	ldr	r1, [pc, #180]	; (80060dc <I2C_RequestMemoryWrite+0x128>)
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f000 f998 	bl	800635e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d001      	beq.n	8006038 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e04c      	b.n	80060d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006038:	2300      	movs	r3, #0
 800603a:	617b      	str	r3, [r7, #20]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	617b      	str	r3, [r7, #20]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	699b      	ldr	r3, [r3, #24]
 800604a:	617b      	str	r3, [r7, #20]
 800604c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800604e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006050:	6a39      	ldr	r1, [r7, #32]
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f000 fa02 	bl	800645c <I2C_WaitOnTXEFlagUntilTimeout>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00d      	beq.n	800607a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006062:	2b04      	cmp	r3, #4
 8006064:	d107      	bne.n	8006076 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006074:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e02b      	b.n	80060d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800607a:	88fb      	ldrh	r3, [r7, #6]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d105      	bne.n	800608c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006080:	893b      	ldrh	r3, [r7, #8]
 8006082:	b2da      	uxtb	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	611a      	str	r2, [r3, #16]
 800608a:	e021      	b.n	80060d0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800608c:	893b      	ldrh	r3, [r7, #8]
 800608e:	0a1b      	lsrs	r3, r3, #8
 8006090:	b29b      	uxth	r3, r3
 8006092:	b2da      	uxtb	r2, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800609a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800609c:	6a39      	ldr	r1, [r7, #32]
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f000 f9dc 	bl	800645c <I2C_WaitOnTXEFlagUntilTimeout>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00d      	beq.n	80060c6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ae:	2b04      	cmp	r3, #4
 80060b0:	d107      	bne.n	80060c2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e005      	b.n	80060d2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80060c6:	893b      	ldrh	r3, [r7, #8]
 80060c8:	b2da      	uxtb	r2, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3718      	adds	r7, #24
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	00010002 	.word	0x00010002

080060e0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b088      	sub	sp, #32
 80060e4:	af02      	add	r7, sp, #8
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	4608      	mov	r0, r1
 80060ea:	4611      	mov	r1, r2
 80060ec:	461a      	mov	r2, r3
 80060ee:	4603      	mov	r3, r0
 80060f0:	817b      	strh	r3, [r7, #10]
 80060f2:	460b      	mov	r3, r1
 80060f4:	813b      	strh	r3, [r7, #8]
 80060f6:	4613      	mov	r3, r2
 80060f8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006108:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006118:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611c:	9300      	str	r3, [sp, #0]
 800611e:	6a3b      	ldr	r3, [r7, #32]
 8006120:	2200      	movs	r2, #0
 8006122:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	f000 f8c2 	bl	80062b0 <I2C_WaitOnFlagUntilTimeout>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00d      	beq.n	800614e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800613c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006140:	d103      	bne.n	800614a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006148:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e0aa      	b.n	80062a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800614e:	897b      	ldrh	r3, [r7, #10]
 8006150:	b2db      	uxtb	r3, r3
 8006152:	461a      	mov	r2, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800615c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800615e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006160:	6a3a      	ldr	r2, [r7, #32]
 8006162:	4952      	ldr	r1, [pc, #328]	; (80062ac <I2C_RequestMemoryRead+0x1cc>)
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	f000 f8fa 	bl	800635e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d001      	beq.n	8006174 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e097      	b.n	80062a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006174:	2300      	movs	r3, #0
 8006176:	617b      	str	r3, [r7, #20]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	617b      	str	r3, [r7, #20]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	617b      	str	r3, [r7, #20]
 8006188:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800618a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800618c:	6a39      	ldr	r1, [r7, #32]
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f000 f964 	bl	800645c <I2C_WaitOnTXEFlagUntilTimeout>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00d      	beq.n	80061b6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619e:	2b04      	cmp	r3, #4
 80061a0:	d107      	bne.n	80061b2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e076      	b.n	80062a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80061b6:	88fb      	ldrh	r3, [r7, #6]
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d105      	bne.n	80061c8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80061bc:	893b      	ldrh	r3, [r7, #8]
 80061be:	b2da      	uxtb	r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	611a      	str	r2, [r3, #16]
 80061c6:	e021      	b.n	800620c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80061c8:	893b      	ldrh	r3, [r7, #8]
 80061ca:	0a1b      	lsrs	r3, r3, #8
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	b2da      	uxtb	r2, r3
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061d8:	6a39      	ldr	r1, [r7, #32]
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f000 f93e 	bl	800645c <I2C_WaitOnTXEFlagUntilTimeout>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00d      	beq.n	8006202 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ea:	2b04      	cmp	r3, #4
 80061ec:	d107      	bne.n	80061fe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e050      	b.n	80062a4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006202:	893b      	ldrh	r3, [r7, #8]
 8006204:	b2da      	uxtb	r2, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800620c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800620e:	6a39      	ldr	r1, [r7, #32]
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f000 f923 	bl	800645c <I2C_WaitOnTXEFlagUntilTimeout>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00d      	beq.n	8006238 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006220:	2b04      	cmp	r3, #4
 8006222:	d107      	bne.n	8006234 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006232:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e035      	b.n	80062a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006246:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624a:	9300      	str	r3, [sp, #0]
 800624c:	6a3b      	ldr	r3, [r7, #32]
 800624e:	2200      	movs	r2, #0
 8006250:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f000 f82b 	bl	80062b0 <I2C_WaitOnFlagUntilTimeout>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00d      	beq.n	800627c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800626a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800626e:	d103      	bne.n	8006278 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006276:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006278:	2303      	movs	r3, #3
 800627a:	e013      	b.n	80062a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800627c:	897b      	ldrh	r3, [r7, #10]
 800627e:	b2db      	uxtb	r3, r3
 8006280:	f043 0301 	orr.w	r3, r3, #1
 8006284:	b2da      	uxtb	r2, r3
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800628c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628e:	6a3a      	ldr	r2, [r7, #32]
 8006290:	4906      	ldr	r1, [pc, #24]	; (80062ac <I2C_RequestMemoryRead+0x1cc>)
 8006292:	68f8      	ldr	r0, [r7, #12]
 8006294:	f000 f863 	bl	800635e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d001      	beq.n	80062a2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e000      	b.n	80062a4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3718      	adds	r7, #24
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	00010002 	.word	0x00010002

080062b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	603b      	str	r3, [r7, #0]
 80062bc:	4613      	mov	r3, r2
 80062be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062c0:	e025      	b.n	800630e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c8:	d021      	beq.n	800630e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062ca:	f7fd ff7b 	bl	80041c4 <HAL_GetTick>
 80062ce:	4602      	mov	r2, r0
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	683a      	ldr	r2, [r7, #0]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d302      	bcc.n	80062e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d116      	bne.n	800630e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2220      	movs	r2, #32
 80062ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fa:	f043 0220 	orr.w	r2, r3, #32
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e023      	b.n	8006356 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	0c1b      	lsrs	r3, r3, #16
 8006312:	b2db      	uxtb	r3, r3
 8006314:	2b01      	cmp	r3, #1
 8006316:	d10d      	bne.n	8006334 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	43da      	mvns	r2, r3
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	4013      	ands	r3, r2
 8006324:	b29b      	uxth	r3, r3
 8006326:	2b00      	cmp	r3, #0
 8006328:	bf0c      	ite	eq
 800632a:	2301      	moveq	r3, #1
 800632c:	2300      	movne	r3, #0
 800632e:	b2db      	uxtb	r3, r3
 8006330:	461a      	mov	r2, r3
 8006332:	e00c      	b.n	800634e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	43da      	mvns	r2, r3
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	4013      	ands	r3, r2
 8006340:	b29b      	uxth	r3, r3
 8006342:	2b00      	cmp	r3, #0
 8006344:	bf0c      	ite	eq
 8006346:	2301      	moveq	r3, #1
 8006348:	2300      	movne	r3, #0
 800634a:	b2db      	uxtb	r3, r3
 800634c:	461a      	mov	r2, r3
 800634e:	79fb      	ldrb	r3, [r7, #7]
 8006350:	429a      	cmp	r2, r3
 8006352:	d0b6      	beq.n	80062c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3710      	adds	r7, #16
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}

0800635e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800635e:	b580      	push	{r7, lr}
 8006360:	b084      	sub	sp, #16
 8006362:	af00      	add	r7, sp, #0
 8006364:	60f8      	str	r0, [r7, #12]
 8006366:	60b9      	str	r1, [r7, #8]
 8006368:	607a      	str	r2, [r7, #4]
 800636a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800636c:	e051      	b.n	8006412 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	695b      	ldr	r3, [r3, #20]
 8006374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800637c:	d123      	bne.n	80063c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800638c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006396:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2220      	movs	r2, #32
 80063a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b2:	f043 0204 	orr.w	r2, r3, #4
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e046      	b.n	8006454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063cc:	d021      	beq.n	8006412 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063ce:	f7fd fef9 	bl	80041c4 <HAL_GetTick>
 80063d2:	4602      	mov	r2, r0
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d302      	bcc.n	80063e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d116      	bne.n	8006412 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2220      	movs	r2, #32
 80063ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fe:	f043 0220 	orr.w	r2, r3, #32
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e020      	b.n	8006454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	0c1b      	lsrs	r3, r3, #16
 8006416:	b2db      	uxtb	r3, r3
 8006418:	2b01      	cmp	r3, #1
 800641a:	d10c      	bne.n	8006436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	43da      	mvns	r2, r3
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	4013      	ands	r3, r2
 8006428:	b29b      	uxth	r3, r3
 800642a:	2b00      	cmp	r3, #0
 800642c:	bf14      	ite	ne
 800642e:	2301      	movne	r3, #1
 8006430:	2300      	moveq	r3, #0
 8006432:	b2db      	uxtb	r3, r3
 8006434:	e00b      	b.n	800644e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	43da      	mvns	r2, r3
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	4013      	ands	r3, r2
 8006442:	b29b      	uxth	r3, r3
 8006444:	2b00      	cmp	r3, #0
 8006446:	bf14      	ite	ne
 8006448:	2301      	movne	r3, #1
 800644a:	2300      	moveq	r3, #0
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d18d      	bne.n	800636e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006468:	e02d      	b.n	80064c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f000 f8ce 	bl	800660c <I2C_IsAcknowledgeFailed>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d001      	beq.n	800647a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e02d      	b.n	80064d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006480:	d021      	beq.n	80064c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006482:	f7fd fe9f 	bl	80041c4 <HAL_GetTick>
 8006486:	4602      	mov	r2, r0
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	68ba      	ldr	r2, [r7, #8]
 800648e:	429a      	cmp	r2, r3
 8006490:	d302      	bcc.n	8006498 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d116      	bne.n	80064c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2220      	movs	r2, #32
 80064a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b2:	f043 0220 	orr.w	r2, r3, #32
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e007      	b.n	80064d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	695b      	ldr	r3, [r3, #20]
 80064cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064d0:	2b80      	cmp	r3, #128	; 0x80
 80064d2:	d1ca      	bne.n	800646a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064de:	b580      	push	{r7, lr}
 80064e0:	b084      	sub	sp, #16
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	60f8      	str	r0, [r7, #12]
 80064e6:	60b9      	str	r1, [r7, #8]
 80064e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80064ea:	e02d      	b.n	8006548 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f000 f88d 	bl	800660c <I2C_IsAcknowledgeFailed>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d001      	beq.n	80064fc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e02d      	b.n	8006558 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006502:	d021      	beq.n	8006548 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006504:	f7fd fe5e 	bl	80041c4 <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	68ba      	ldr	r2, [r7, #8]
 8006510:	429a      	cmp	r2, r3
 8006512:	d302      	bcc.n	800651a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d116      	bne.n	8006548 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2200      	movs	r2, #0
 800651e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2220      	movs	r2, #32
 8006524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006534:	f043 0220 	orr.w	r2, r3, #32
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e007      	b.n	8006558 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	695b      	ldr	r3, [r3, #20]
 800654e:	f003 0304 	and.w	r3, r3, #4
 8006552:	2b04      	cmp	r3, #4
 8006554:	d1ca      	bne.n	80064ec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800656c:	e042      	b.n	80065f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	f003 0310 	and.w	r3, r3, #16
 8006578:	2b10      	cmp	r3, #16
 800657a:	d119      	bne.n	80065b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f06f 0210 	mvn.w	r2, #16
 8006584:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2220      	movs	r2, #32
 8006590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e029      	b.n	8006604 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065b0:	f7fd fe08 	bl	80041c4 <HAL_GetTick>
 80065b4:	4602      	mov	r2, r0
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	68ba      	ldr	r2, [r7, #8]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d302      	bcc.n	80065c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d116      	bne.n	80065f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2220      	movs	r2, #32
 80065d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e0:	f043 0220 	orr.w	r2, r3, #32
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	e007      	b.n	8006604 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	695b      	ldr	r3, [r3, #20]
 80065fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065fe:	2b40      	cmp	r3, #64	; 0x40
 8006600:	d1b5      	bne.n	800656e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800661e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006622:	d11b      	bne.n	800665c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800662c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2220      	movs	r2, #32
 8006638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006648:	f043 0204 	orr.w	r2, r3, #4
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e000      	b.n	800665e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	370c      	adds	r7, #12
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
	...

0800666c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b086      	sub	sp, #24
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d101      	bne.n	800667e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e267      	b.n	8006b4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	2b00      	cmp	r3, #0
 8006688:	d075      	beq.n	8006776 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800668a:	4b88      	ldr	r3, [pc, #544]	; (80068ac <HAL_RCC_OscConfig+0x240>)
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f003 030c 	and.w	r3, r3, #12
 8006692:	2b04      	cmp	r3, #4
 8006694:	d00c      	beq.n	80066b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006696:	4b85      	ldr	r3, [pc, #532]	; (80068ac <HAL_RCC_OscConfig+0x240>)
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800669e:	2b08      	cmp	r3, #8
 80066a0:	d112      	bne.n	80066c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066a2:	4b82      	ldr	r3, [pc, #520]	; (80068ac <HAL_RCC_OscConfig+0x240>)
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066ae:	d10b      	bne.n	80066c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066b0:	4b7e      	ldr	r3, [pc, #504]	; (80068ac <HAL_RCC_OscConfig+0x240>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d05b      	beq.n	8006774 <HAL_RCC_OscConfig+0x108>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d157      	bne.n	8006774 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e242      	b.n	8006b4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066d0:	d106      	bne.n	80066e0 <HAL_RCC_OscConfig+0x74>
 80066d2:	4b76      	ldr	r3, [pc, #472]	; (80068ac <HAL_RCC_OscConfig+0x240>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a75      	ldr	r2, [pc, #468]	; (80068ac <HAL_RCC_OscConfig+0x240>)
 80066d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066dc:	6013      	str	r3, [r2, #0]
 80066de:	e01d      	b.n	800671c <HAL_RCC_OscConfig+0xb0>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066e8:	d10c      	bne.n	8006704 <HAL_RCC_OscConfig+0x98>
 80066ea:	4b70      	ldr	r3, [pc, #448]	; (80068ac <HAL_RCC_OscConfig+0x240>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a6f      	ldr	r2, [pc, #444]	; (80068ac <HAL_RCC_OscConfig+0x240>)
 80066f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066f4:	6013      	str	r3, [r2, #0]
 80066f6:	4b6d      	ldr	r3, [pc, #436]	; (80068ac <HAL_RCC_OscConfig+0x240>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a6c      	ldr	r2, [pc, #432]	; (80068ac <HAL_RCC_OscConfig+0x240>)
 80066fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006700:	6013      	str	r3, [r2, #0]
 8006702:	e00b      	b.n	800671c <HAL_RCC_OscConfig+0xb0>
 8006704:	4b69      	ldr	r3, [pc, #420]	; (80068ac <HAL_RCC_OscConfig+0x240>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a68      	ldr	r2, [pc, #416]	; (80068ac <HAL_RCC_OscConfig+0x240>)
 800670a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800670e:	6013      	str	r3, [r2, #0]
 8006710:	4b66      	ldr	r3, [pc, #408]	; (80068ac <HAL_RCC_OscConfig+0x240>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a65      	ldr	r2, [pc, #404]	; (80068ac <HAL_RCC_OscConfig+0x240>)
 8006716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800671a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d013      	beq.n	800674c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006724:	f7fd fd4e 	bl	80041c4 <HAL_GetTick>
 8006728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800672a:	e008      	b.n	800673e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800672c:	f7fd fd4a 	bl	80041c4 <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	2b64      	cmp	r3, #100	; 0x64
 8006738:	d901      	bls.n	800673e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e207      	b.n	8006b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800673e:	4b5b      	ldr	r3, [pc, #364]	; (80068ac <HAL_RCC_OscConfig+0x240>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d0f0      	beq.n	800672c <HAL_RCC_OscConfig+0xc0>
 800674a:	e014      	b.n	8006776 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800674c:	f7fd fd3a 	bl	80041c4 <HAL_GetTick>
 8006750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006752:	e008      	b.n	8006766 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006754:	f7fd fd36 	bl	80041c4 <HAL_GetTick>
 8006758:	4602      	mov	r2, r0
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	2b64      	cmp	r3, #100	; 0x64
 8006760:	d901      	bls.n	8006766 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e1f3      	b.n	8006b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006766:	4b51      	ldr	r3, [pc, #324]	; (80068ac <HAL_RCC_OscConfig+0x240>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1f0      	bne.n	8006754 <HAL_RCC_OscConfig+0xe8>
 8006772:	e000      	b.n	8006776 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 0302 	and.w	r3, r3, #2
 800677e:	2b00      	cmp	r3, #0
 8006780:	d063      	beq.n	800684a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006782:	4b4a      	ldr	r3, [pc, #296]	; (80068ac <HAL_RCC_OscConfig+0x240>)
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	f003 030c 	and.w	r3, r3, #12
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00b      	beq.n	80067a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800678e:	4b47      	ldr	r3, [pc, #284]	; (80068ac <HAL_RCC_OscConfig+0x240>)
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006796:	2b08      	cmp	r3, #8
 8006798:	d11c      	bne.n	80067d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800679a:	4b44      	ldr	r3, [pc, #272]	; (80068ac <HAL_RCC_OscConfig+0x240>)
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d116      	bne.n	80067d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067a6:	4b41      	ldr	r3, [pc, #260]	; (80068ac <HAL_RCC_OscConfig+0x240>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0302 	and.w	r3, r3, #2
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d005      	beq.n	80067be <HAL_RCC_OscConfig+0x152>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d001      	beq.n	80067be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e1c7      	b.n	8006b4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067be:	4b3b      	ldr	r3, [pc, #236]	; (80068ac <HAL_RCC_OscConfig+0x240>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	00db      	lsls	r3, r3, #3
 80067cc:	4937      	ldr	r1, [pc, #220]	; (80068ac <HAL_RCC_OscConfig+0x240>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067d2:	e03a      	b.n	800684a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d020      	beq.n	800681e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067dc:	4b34      	ldr	r3, [pc, #208]	; (80068b0 <HAL_RCC_OscConfig+0x244>)
 80067de:	2201      	movs	r2, #1
 80067e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067e2:	f7fd fcef 	bl	80041c4 <HAL_GetTick>
 80067e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067e8:	e008      	b.n	80067fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067ea:	f7fd fceb 	bl	80041c4 <HAL_GetTick>
 80067ee:	4602      	mov	r2, r0
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d901      	bls.n	80067fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e1a8      	b.n	8006b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067fc:	4b2b      	ldr	r3, [pc, #172]	; (80068ac <HAL_RCC_OscConfig+0x240>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 0302 	and.w	r3, r3, #2
 8006804:	2b00      	cmp	r3, #0
 8006806:	d0f0      	beq.n	80067ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006808:	4b28      	ldr	r3, [pc, #160]	; (80068ac <HAL_RCC_OscConfig+0x240>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	00db      	lsls	r3, r3, #3
 8006816:	4925      	ldr	r1, [pc, #148]	; (80068ac <HAL_RCC_OscConfig+0x240>)
 8006818:	4313      	orrs	r3, r2
 800681a:	600b      	str	r3, [r1, #0]
 800681c:	e015      	b.n	800684a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800681e:	4b24      	ldr	r3, [pc, #144]	; (80068b0 <HAL_RCC_OscConfig+0x244>)
 8006820:	2200      	movs	r2, #0
 8006822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006824:	f7fd fcce 	bl	80041c4 <HAL_GetTick>
 8006828:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800682a:	e008      	b.n	800683e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800682c:	f7fd fcca 	bl	80041c4 <HAL_GetTick>
 8006830:	4602      	mov	r2, r0
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	2b02      	cmp	r3, #2
 8006838:	d901      	bls.n	800683e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e187      	b.n	8006b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800683e:	4b1b      	ldr	r3, [pc, #108]	; (80068ac <HAL_RCC_OscConfig+0x240>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0302 	and.w	r3, r3, #2
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1f0      	bne.n	800682c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0308 	and.w	r3, r3, #8
 8006852:	2b00      	cmp	r3, #0
 8006854:	d036      	beq.n	80068c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d016      	beq.n	800688c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800685e:	4b15      	ldr	r3, [pc, #84]	; (80068b4 <HAL_RCC_OscConfig+0x248>)
 8006860:	2201      	movs	r2, #1
 8006862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006864:	f7fd fcae 	bl	80041c4 <HAL_GetTick>
 8006868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800686a:	e008      	b.n	800687e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800686c:	f7fd fcaa 	bl	80041c4 <HAL_GetTick>
 8006870:	4602      	mov	r2, r0
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	2b02      	cmp	r3, #2
 8006878:	d901      	bls.n	800687e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e167      	b.n	8006b4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800687e:	4b0b      	ldr	r3, [pc, #44]	; (80068ac <HAL_RCC_OscConfig+0x240>)
 8006880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	2b00      	cmp	r3, #0
 8006888:	d0f0      	beq.n	800686c <HAL_RCC_OscConfig+0x200>
 800688a:	e01b      	b.n	80068c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800688c:	4b09      	ldr	r3, [pc, #36]	; (80068b4 <HAL_RCC_OscConfig+0x248>)
 800688e:	2200      	movs	r2, #0
 8006890:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006892:	f7fd fc97 	bl	80041c4 <HAL_GetTick>
 8006896:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006898:	e00e      	b.n	80068b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800689a:	f7fd fc93 	bl	80041c4 <HAL_GetTick>
 800689e:	4602      	mov	r2, r0
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	1ad3      	subs	r3, r2, r3
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	d907      	bls.n	80068b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80068a8:	2303      	movs	r3, #3
 80068aa:	e150      	b.n	8006b4e <HAL_RCC_OscConfig+0x4e2>
 80068ac:	40023800 	.word	0x40023800
 80068b0:	42470000 	.word	0x42470000
 80068b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068b8:	4b88      	ldr	r3, [pc, #544]	; (8006adc <HAL_RCC_OscConfig+0x470>)
 80068ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068bc:	f003 0302 	and.w	r3, r3, #2
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d1ea      	bne.n	800689a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0304 	and.w	r3, r3, #4
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f000 8097 	beq.w	8006a00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068d2:	2300      	movs	r3, #0
 80068d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068d6:	4b81      	ldr	r3, [pc, #516]	; (8006adc <HAL_RCC_OscConfig+0x470>)
 80068d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d10f      	bne.n	8006902 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068e2:	2300      	movs	r3, #0
 80068e4:	60bb      	str	r3, [r7, #8]
 80068e6:	4b7d      	ldr	r3, [pc, #500]	; (8006adc <HAL_RCC_OscConfig+0x470>)
 80068e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ea:	4a7c      	ldr	r2, [pc, #496]	; (8006adc <HAL_RCC_OscConfig+0x470>)
 80068ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068f0:	6413      	str	r3, [r2, #64]	; 0x40
 80068f2:	4b7a      	ldr	r3, [pc, #488]	; (8006adc <HAL_RCC_OscConfig+0x470>)
 80068f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068fa:	60bb      	str	r3, [r7, #8]
 80068fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068fe:	2301      	movs	r3, #1
 8006900:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006902:	4b77      	ldr	r3, [pc, #476]	; (8006ae0 <HAL_RCC_OscConfig+0x474>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800690a:	2b00      	cmp	r3, #0
 800690c:	d118      	bne.n	8006940 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800690e:	4b74      	ldr	r3, [pc, #464]	; (8006ae0 <HAL_RCC_OscConfig+0x474>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a73      	ldr	r2, [pc, #460]	; (8006ae0 <HAL_RCC_OscConfig+0x474>)
 8006914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800691a:	f7fd fc53 	bl	80041c4 <HAL_GetTick>
 800691e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006920:	e008      	b.n	8006934 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006922:	f7fd fc4f 	bl	80041c4 <HAL_GetTick>
 8006926:	4602      	mov	r2, r0
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	2b02      	cmp	r3, #2
 800692e:	d901      	bls.n	8006934 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e10c      	b.n	8006b4e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006934:	4b6a      	ldr	r3, [pc, #424]	; (8006ae0 <HAL_RCC_OscConfig+0x474>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800693c:	2b00      	cmp	r3, #0
 800693e:	d0f0      	beq.n	8006922 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d106      	bne.n	8006956 <HAL_RCC_OscConfig+0x2ea>
 8006948:	4b64      	ldr	r3, [pc, #400]	; (8006adc <HAL_RCC_OscConfig+0x470>)
 800694a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800694c:	4a63      	ldr	r2, [pc, #396]	; (8006adc <HAL_RCC_OscConfig+0x470>)
 800694e:	f043 0301 	orr.w	r3, r3, #1
 8006952:	6713      	str	r3, [r2, #112]	; 0x70
 8006954:	e01c      	b.n	8006990 <HAL_RCC_OscConfig+0x324>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	2b05      	cmp	r3, #5
 800695c:	d10c      	bne.n	8006978 <HAL_RCC_OscConfig+0x30c>
 800695e:	4b5f      	ldr	r3, [pc, #380]	; (8006adc <HAL_RCC_OscConfig+0x470>)
 8006960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006962:	4a5e      	ldr	r2, [pc, #376]	; (8006adc <HAL_RCC_OscConfig+0x470>)
 8006964:	f043 0304 	orr.w	r3, r3, #4
 8006968:	6713      	str	r3, [r2, #112]	; 0x70
 800696a:	4b5c      	ldr	r3, [pc, #368]	; (8006adc <HAL_RCC_OscConfig+0x470>)
 800696c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800696e:	4a5b      	ldr	r2, [pc, #364]	; (8006adc <HAL_RCC_OscConfig+0x470>)
 8006970:	f043 0301 	orr.w	r3, r3, #1
 8006974:	6713      	str	r3, [r2, #112]	; 0x70
 8006976:	e00b      	b.n	8006990 <HAL_RCC_OscConfig+0x324>
 8006978:	4b58      	ldr	r3, [pc, #352]	; (8006adc <HAL_RCC_OscConfig+0x470>)
 800697a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800697c:	4a57      	ldr	r2, [pc, #348]	; (8006adc <HAL_RCC_OscConfig+0x470>)
 800697e:	f023 0301 	bic.w	r3, r3, #1
 8006982:	6713      	str	r3, [r2, #112]	; 0x70
 8006984:	4b55      	ldr	r3, [pc, #340]	; (8006adc <HAL_RCC_OscConfig+0x470>)
 8006986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006988:	4a54      	ldr	r2, [pc, #336]	; (8006adc <HAL_RCC_OscConfig+0x470>)
 800698a:	f023 0304 	bic.w	r3, r3, #4
 800698e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d015      	beq.n	80069c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006998:	f7fd fc14 	bl	80041c4 <HAL_GetTick>
 800699c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800699e:	e00a      	b.n	80069b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069a0:	f7fd fc10 	bl	80041c4 <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d901      	bls.n	80069b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e0cb      	b.n	8006b4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069b6:	4b49      	ldr	r3, [pc, #292]	; (8006adc <HAL_RCC_OscConfig+0x470>)
 80069b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ba:	f003 0302 	and.w	r3, r3, #2
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d0ee      	beq.n	80069a0 <HAL_RCC_OscConfig+0x334>
 80069c2:	e014      	b.n	80069ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069c4:	f7fd fbfe 	bl	80041c4 <HAL_GetTick>
 80069c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069ca:	e00a      	b.n	80069e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069cc:	f7fd fbfa 	bl	80041c4 <HAL_GetTick>
 80069d0:	4602      	mov	r2, r0
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80069da:	4293      	cmp	r3, r2
 80069dc:	d901      	bls.n	80069e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e0b5      	b.n	8006b4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069e2:	4b3e      	ldr	r3, [pc, #248]	; (8006adc <HAL_RCC_OscConfig+0x470>)
 80069e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069e6:	f003 0302 	and.w	r3, r3, #2
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1ee      	bne.n	80069cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069ee:	7dfb      	ldrb	r3, [r7, #23]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d105      	bne.n	8006a00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069f4:	4b39      	ldr	r3, [pc, #228]	; (8006adc <HAL_RCC_OscConfig+0x470>)
 80069f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f8:	4a38      	ldr	r2, [pc, #224]	; (8006adc <HAL_RCC_OscConfig+0x470>)
 80069fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	699b      	ldr	r3, [r3, #24]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f000 80a1 	beq.w	8006b4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a0a:	4b34      	ldr	r3, [pc, #208]	; (8006adc <HAL_RCC_OscConfig+0x470>)
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f003 030c 	and.w	r3, r3, #12
 8006a12:	2b08      	cmp	r3, #8
 8006a14:	d05c      	beq.n	8006ad0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d141      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a1e:	4b31      	ldr	r3, [pc, #196]	; (8006ae4 <HAL_RCC_OscConfig+0x478>)
 8006a20:	2200      	movs	r2, #0
 8006a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a24:	f7fd fbce 	bl	80041c4 <HAL_GetTick>
 8006a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a2a:	e008      	b.n	8006a3e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a2c:	f7fd fbca 	bl	80041c4 <HAL_GetTick>
 8006a30:	4602      	mov	r2, r0
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d901      	bls.n	8006a3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	e087      	b.n	8006b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a3e:	4b27      	ldr	r3, [pc, #156]	; (8006adc <HAL_RCC_OscConfig+0x470>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d1f0      	bne.n	8006a2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	69da      	ldr	r2, [r3, #28]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a1b      	ldr	r3, [r3, #32]
 8006a52:	431a      	orrs	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a58:	019b      	lsls	r3, r3, #6
 8006a5a:	431a      	orrs	r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a60:	085b      	lsrs	r3, r3, #1
 8006a62:	3b01      	subs	r3, #1
 8006a64:	041b      	lsls	r3, r3, #16
 8006a66:	431a      	orrs	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6c:	061b      	lsls	r3, r3, #24
 8006a6e:	491b      	ldr	r1, [pc, #108]	; (8006adc <HAL_RCC_OscConfig+0x470>)
 8006a70:	4313      	orrs	r3, r2
 8006a72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a74:	4b1b      	ldr	r3, [pc, #108]	; (8006ae4 <HAL_RCC_OscConfig+0x478>)
 8006a76:	2201      	movs	r2, #1
 8006a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a7a:	f7fd fba3 	bl	80041c4 <HAL_GetTick>
 8006a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a80:	e008      	b.n	8006a94 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a82:	f7fd fb9f 	bl	80041c4 <HAL_GetTick>
 8006a86:	4602      	mov	r2, r0
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	d901      	bls.n	8006a94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006a90:	2303      	movs	r3, #3
 8006a92:	e05c      	b.n	8006b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a94:	4b11      	ldr	r3, [pc, #68]	; (8006adc <HAL_RCC_OscConfig+0x470>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d0f0      	beq.n	8006a82 <HAL_RCC_OscConfig+0x416>
 8006aa0:	e054      	b.n	8006b4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006aa2:	4b10      	ldr	r3, [pc, #64]	; (8006ae4 <HAL_RCC_OscConfig+0x478>)
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aa8:	f7fd fb8c 	bl	80041c4 <HAL_GetTick>
 8006aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aae:	e008      	b.n	8006ac2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ab0:	f7fd fb88 	bl	80041c4 <HAL_GetTick>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d901      	bls.n	8006ac2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e045      	b.n	8006b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ac2:	4b06      	ldr	r3, [pc, #24]	; (8006adc <HAL_RCC_OscConfig+0x470>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1f0      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x444>
 8006ace:	e03d      	b.n	8006b4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d107      	bne.n	8006ae8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e038      	b.n	8006b4e <HAL_RCC_OscConfig+0x4e2>
 8006adc:	40023800 	.word	0x40023800
 8006ae0:	40007000 	.word	0x40007000
 8006ae4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ae8:	4b1b      	ldr	r3, [pc, #108]	; (8006b58 <HAL_RCC_OscConfig+0x4ec>)
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d028      	beq.n	8006b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d121      	bne.n	8006b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d11a      	bne.n	8006b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006b18:	4013      	ands	r3, r2
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d111      	bne.n	8006b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b2e:	085b      	lsrs	r3, r3, #1
 8006b30:	3b01      	subs	r3, #1
 8006b32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d107      	bne.n	8006b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d001      	beq.n	8006b4c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e000      	b.n	8006b4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3718      	adds	r7, #24
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	40023800 	.word	0x40023800

08006b5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d101      	bne.n	8006b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e0cc      	b.n	8006d0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b70:	4b68      	ldr	r3, [pc, #416]	; (8006d14 <HAL_RCC_ClockConfig+0x1b8>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 0307 	and.w	r3, r3, #7
 8006b78:	683a      	ldr	r2, [r7, #0]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d90c      	bls.n	8006b98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b7e:	4b65      	ldr	r3, [pc, #404]	; (8006d14 <HAL_RCC_ClockConfig+0x1b8>)
 8006b80:	683a      	ldr	r2, [r7, #0]
 8006b82:	b2d2      	uxtb	r2, r2
 8006b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b86:	4b63      	ldr	r3, [pc, #396]	; (8006d14 <HAL_RCC_ClockConfig+0x1b8>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 0307 	and.w	r3, r3, #7
 8006b8e:	683a      	ldr	r2, [r7, #0]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d001      	beq.n	8006b98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e0b8      	b.n	8006d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0302 	and.w	r3, r3, #2
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d020      	beq.n	8006be6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 0304 	and.w	r3, r3, #4
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d005      	beq.n	8006bbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006bb0:	4b59      	ldr	r3, [pc, #356]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	4a58      	ldr	r2, [pc, #352]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006bb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006bba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 0308 	and.w	r3, r3, #8
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d005      	beq.n	8006bd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006bc8:	4b53      	ldr	r3, [pc, #332]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	4a52      	ldr	r2, [pc, #328]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006bce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006bd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bd4:	4b50      	ldr	r3, [pc, #320]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	494d      	ldr	r1, [pc, #308]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006be2:	4313      	orrs	r3, r2
 8006be4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d044      	beq.n	8006c7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d107      	bne.n	8006c0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bfa:	4b47      	ldr	r3, [pc, #284]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d119      	bne.n	8006c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e07f      	b.n	8006d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d003      	beq.n	8006c1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c16:	2b03      	cmp	r3, #3
 8006c18:	d107      	bne.n	8006c2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c1a:	4b3f      	ldr	r3, [pc, #252]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d109      	bne.n	8006c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e06f      	b.n	8006d0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c2a:	4b3b      	ldr	r3, [pc, #236]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 0302 	and.w	r3, r3, #2
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d101      	bne.n	8006c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e067      	b.n	8006d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c3a:	4b37      	ldr	r3, [pc, #220]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	f023 0203 	bic.w	r2, r3, #3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	4934      	ldr	r1, [pc, #208]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c4c:	f7fd faba 	bl	80041c4 <HAL_GetTick>
 8006c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c52:	e00a      	b.n	8006c6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c54:	f7fd fab6 	bl	80041c4 <HAL_GetTick>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d901      	bls.n	8006c6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c66:	2303      	movs	r3, #3
 8006c68:	e04f      	b.n	8006d0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c6a:	4b2b      	ldr	r3, [pc, #172]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	f003 020c 	and.w	r2, r3, #12
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d1eb      	bne.n	8006c54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c7c:	4b25      	ldr	r3, [pc, #148]	; (8006d14 <HAL_RCC_ClockConfig+0x1b8>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 0307 	and.w	r3, r3, #7
 8006c84:	683a      	ldr	r2, [r7, #0]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d20c      	bcs.n	8006ca4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c8a:	4b22      	ldr	r3, [pc, #136]	; (8006d14 <HAL_RCC_ClockConfig+0x1b8>)
 8006c8c:	683a      	ldr	r2, [r7, #0]
 8006c8e:	b2d2      	uxtb	r2, r2
 8006c90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c92:	4b20      	ldr	r3, [pc, #128]	; (8006d14 <HAL_RCC_ClockConfig+0x1b8>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 0307 	and.w	r3, r3, #7
 8006c9a:	683a      	ldr	r2, [r7, #0]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d001      	beq.n	8006ca4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e032      	b.n	8006d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 0304 	and.w	r3, r3, #4
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d008      	beq.n	8006cc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cb0:	4b19      	ldr	r3, [pc, #100]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	4916      	ldr	r1, [pc, #88]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 0308 	and.w	r3, r3, #8
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d009      	beq.n	8006ce2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006cce:	4b12      	ldr	r3, [pc, #72]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	00db      	lsls	r3, r3, #3
 8006cdc:	490e      	ldr	r1, [pc, #56]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006ce2:	f000 f821 	bl	8006d28 <HAL_RCC_GetSysClockFreq>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	4b0b      	ldr	r3, [pc, #44]	; (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	091b      	lsrs	r3, r3, #4
 8006cee:	f003 030f 	and.w	r3, r3, #15
 8006cf2:	490a      	ldr	r1, [pc, #40]	; (8006d1c <HAL_RCC_ClockConfig+0x1c0>)
 8006cf4:	5ccb      	ldrb	r3, [r1, r3]
 8006cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8006cfa:	4a09      	ldr	r2, [pc, #36]	; (8006d20 <HAL_RCC_ClockConfig+0x1c4>)
 8006cfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006cfe:	4b09      	ldr	r3, [pc, #36]	; (8006d24 <HAL_RCC_ClockConfig+0x1c8>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7fd fa1a 	bl	800413c <HAL_InitTick>

  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3710      	adds	r7, #16
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	40023c00 	.word	0x40023c00
 8006d18:	40023800 	.word	0x40023800
 8006d1c:	0800ee88 	.word	0x0800ee88
 8006d20:	20000280 	.word	0x20000280
 8006d24:	20000284 	.word	0x20000284

08006d28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d2c:	b090      	sub	sp, #64	; 0x40
 8006d2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006d30:	2300      	movs	r3, #0
 8006d32:	637b      	str	r3, [r7, #52]	; 0x34
 8006d34:	2300      	movs	r3, #0
 8006d36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d38:	2300      	movs	r3, #0
 8006d3a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d40:	4b59      	ldr	r3, [pc, #356]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	f003 030c 	and.w	r3, r3, #12
 8006d48:	2b08      	cmp	r3, #8
 8006d4a:	d00d      	beq.n	8006d68 <HAL_RCC_GetSysClockFreq+0x40>
 8006d4c:	2b08      	cmp	r3, #8
 8006d4e:	f200 80a1 	bhi.w	8006e94 <HAL_RCC_GetSysClockFreq+0x16c>
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d002      	beq.n	8006d5c <HAL_RCC_GetSysClockFreq+0x34>
 8006d56:	2b04      	cmp	r3, #4
 8006d58:	d003      	beq.n	8006d62 <HAL_RCC_GetSysClockFreq+0x3a>
 8006d5a:	e09b      	b.n	8006e94 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d5c:	4b53      	ldr	r3, [pc, #332]	; (8006eac <HAL_RCC_GetSysClockFreq+0x184>)
 8006d5e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006d60:	e09b      	b.n	8006e9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d62:	4b53      	ldr	r3, [pc, #332]	; (8006eb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006d64:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006d66:	e098      	b.n	8006e9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d68:	4b4f      	ldr	r3, [pc, #316]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d70:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d72:	4b4d      	ldr	r3, [pc, #308]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d028      	beq.n	8006dd0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d7e:	4b4a      	ldr	r3, [pc, #296]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	099b      	lsrs	r3, r3, #6
 8006d84:	2200      	movs	r2, #0
 8006d86:	623b      	str	r3, [r7, #32]
 8006d88:	627a      	str	r2, [r7, #36]	; 0x24
 8006d8a:	6a3b      	ldr	r3, [r7, #32]
 8006d8c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006d90:	2100      	movs	r1, #0
 8006d92:	4b47      	ldr	r3, [pc, #284]	; (8006eb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006d94:	fb03 f201 	mul.w	r2, r3, r1
 8006d98:	2300      	movs	r3, #0
 8006d9a:	fb00 f303 	mul.w	r3, r0, r3
 8006d9e:	4413      	add	r3, r2
 8006da0:	4a43      	ldr	r2, [pc, #268]	; (8006eb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006da2:	fba0 1202 	umull	r1, r2, r0, r2
 8006da6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006da8:	460a      	mov	r2, r1
 8006daa:	62ba      	str	r2, [r7, #40]	; 0x28
 8006dac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dae:	4413      	add	r3, r2
 8006db0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006db4:	2200      	movs	r2, #0
 8006db6:	61bb      	str	r3, [r7, #24]
 8006db8:	61fa      	str	r2, [r7, #28]
 8006dba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006dbe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006dc2:	f7f9 ff61 	bl	8000c88 <__aeabi_uldivmod>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	460b      	mov	r3, r1
 8006dca:	4613      	mov	r3, r2
 8006dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dce:	e053      	b.n	8006e78 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dd0:	4b35      	ldr	r3, [pc, #212]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	099b      	lsrs	r3, r3, #6
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	613b      	str	r3, [r7, #16]
 8006dda:	617a      	str	r2, [r7, #20]
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006de2:	f04f 0b00 	mov.w	fp, #0
 8006de6:	4652      	mov	r2, sl
 8006de8:	465b      	mov	r3, fp
 8006dea:	f04f 0000 	mov.w	r0, #0
 8006dee:	f04f 0100 	mov.w	r1, #0
 8006df2:	0159      	lsls	r1, r3, #5
 8006df4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006df8:	0150      	lsls	r0, r2, #5
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	ebb2 080a 	subs.w	r8, r2, sl
 8006e02:	eb63 090b 	sbc.w	r9, r3, fp
 8006e06:	f04f 0200 	mov.w	r2, #0
 8006e0a:	f04f 0300 	mov.w	r3, #0
 8006e0e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006e12:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006e16:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006e1a:	ebb2 0408 	subs.w	r4, r2, r8
 8006e1e:	eb63 0509 	sbc.w	r5, r3, r9
 8006e22:	f04f 0200 	mov.w	r2, #0
 8006e26:	f04f 0300 	mov.w	r3, #0
 8006e2a:	00eb      	lsls	r3, r5, #3
 8006e2c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e30:	00e2      	lsls	r2, r4, #3
 8006e32:	4614      	mov	r4, r2
 8006e34:	461d      	mov	r5, r3
 8006e36:	eb14 030a 	adds.w	r3, r4, sl
 8006e3a:	603b      	str	r3, [r7, #0]
 8006e3c:	eb45 030b 	adc.w	r3, r5, fp
 8006e40:	607b      	str	r3, [r7, #4]
 8006e42:	f04f 0200 	mov.w	r2, #0
 8006e46:	f04f 0300 	mov.w	r3, #0
 8006e4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006e4e:	4629      	mov	r1, r5
 8006e50:	028b      	lsls	r3, r1, #10
 8006e52:	4621      	mov	r1, r4
 8006e54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e58:	4621      	mov	r1, r4
 8006e5a:	028a      	lsls	r2, r1, #10
 8006e5c:	4610      	mov	r0, r2
 8006e5e:	4619      	mov	r1, r3
 8006e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e62:	2200      	movs	r2, #0
 8006e64:	60bb      	str	r3, [r7, #8]
 8006e66:	60fa      	str	r2, [r7, #12]
 8006e68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e6c:	f7f9 ff0c 	bl	8000c88 <__aeabi_uldivmod>
 8006e70:	4602      	mov	r2, r0
 8006e72:	460b      	mov	r3, r1
 8006e74:	4613      	mov	r3, r2
 8006e76:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006e78:	4b0b      	ldr	r3, [pc, #44]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	0c1b      	lsrs	r3, r3, #16
 8006e7e:	f003 0303 	and.w	r3, r3, #3
 8006e82:	3301      	adds	r3, #1
 8006e84:	005b      	lsls	r3, r3, #1
 8006e86:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006e88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e90:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006e92:	e002      	b.n	8006e9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e94:	4b05      	ldr	r3, [pc, #20]	; (8006eac <HAL_RCC_GetSysClockFreq+0x184>)
 8006e96:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006e98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3740      	adds	r7, #64	; 0x40
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ea6:	bf00      	nop
 8006ea8:	40023800 	.word	0x40023800
 8006eac:	00f42400 	.word	0x00f42400
 8006eb0:	017d7840 	.word	0x017d7840

08006eb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006eb8:	4b03      	ldr	r3, [pc, #12]	; (8006ec8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006eba:	681b      	ldr	r3, [r3, #0]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
 8006ec6:	bf00      	nop
 8006ec8:	20000280 	.word	0x20000280

08006ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006ed0:	f7ff fff0 	bl	8006eb4 <HAL_RCC_GetHCLKFreq>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	4b05      	ldr	r3, [pc, #20]	; (8006eec <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	0a9b      	lsrs	r3, r3, #10
 8006edc:	f003 0307 	and.w	r3, r3, #7
 8006ee0:	4903      	ldr	r1, [pc, #12]	; (8006ef0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ee2:	5ccb      	ldrb	r3, [r1, r3]
 8006ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	40023800 	.word	0x40023800
 8006ef0:	0800ee98 	.word	0x0800ee98

08006ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006ef8:	f7ff ffdc 	bl	8006eb4 <HAL_RCC_GetHCLKFreq>
 8006efc:	4602      	mov	r2, r0
 8006efe:	4b05      	ldr	r3, [pc, #20]	; (8006f14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	0b5b      	lsrs	r3, r3, #13
 8006f04:	f003 0307 	and.w	r3, r3, #7
 8006f08:	4903      	ldr	r1, [pc, #12]	; (8006f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f0a:	5ccb      	ldrb	r3, [r1, r3]
 8006f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	40023800 	.word	0x40023800
 8006f18:	0800ee98 	.word	0x0800ee98

08006f1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d101      	bne.n	8006f2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e07b      	b.n	8007026 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d108      	bne.n	8006f48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f3e:	d009      	beq.n	8006f54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	61da      	str	r2, [r3, #28]
 8006f46:	e005      	b.n	8006f54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d106      	bne.n	8006f74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f7fc f958 	bl	8003224 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2202      	movs	r2, #2
 8006f78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006f9c:	431a      	orrs	r2, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fa6:	431a      	orrs	r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	f003 0302 	and.w	r3, r3, #2
 8006fb0:	431a      	orrs	r2, r3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	695b      	ldr	r3, [r3, #20]
 8006fb6:	f003 0301 	and.w	r3, r3, #1
 8006fba:	431a      	orrs	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	699b      	ldr	r3, [r3, #24]
 8006fc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fc4:	431a      	orrs	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	69db      	ldr	r3, [r3, #28]
 8006fca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fce:	431a      	orrs	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6a1b      	ldr	r3, [r3, #32]
 8006fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fd8:	ea42 0103 	orr.w	r1, r2, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	430a      	orrs	r2, r1
 8006fea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	699b      	ldr	r3, [r3, #24]
 8006ff0:	0c1b      	lsrs	r3, r3, #16
 8006ff2:	f003 0104 	and.w	r1, r3, #4
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffa:	f003 0210 	and.w	r2, r3, #16
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	430a      	orrs	r2, r1
 8007004:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	69da      	ldr	r2, [r3, #28]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007014:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3708      	adds	r7, #8
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}

0800702e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800702e:	b580      	push	{r7, lr}
 8007030:	b082      	sub	sp, #8
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d101      	bne.n	8007040 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e041      	b.n	80070c4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007046:	b2db      	uxtb	r3, r3
 8007048:	2b00      	cmp	r3, #0
 800704a:	d106      	bne.n	800705a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f7fc fd8d 	bl	8003b74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2202      	movs	r2, #2
 800705e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	3304      	adds	r3, #4
 800706a:	4619      	mov	r1, r3
 800706c:	4610      	mov	r0, r2
 800706e:	f000 fe99 	bl	8007da4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2201      	movs	r2, #1
 8007076:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2201      	movs	r2, #1
 800707e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2201      	movs	r2, #1
 8007086:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2201      	movs	r2, #1
 800708e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2201      	movs	r2, #1
 8007096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2201      	movs	r2, #1
 800709e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2201      	movs	r2, #1
 80070a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2201      	movs	r2, #1
 80070ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2201      	movs	r2, #1
 80070b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2201      	movs	r2, #1
 80070be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3708      	adds	r7, #8
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d001      	beq.n	80070e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	e04e      	b.n	8007182 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2202      	movs	r2, #2
 80070e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68da      	ldr	r2, [r3, #12]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f042 0201 	orr.w	r2, r2, #1
 80070fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a23      	ldr	r2, [pc, #140]	; (8007190 <HAL_TIM_Base_Start_IT+0xc4>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d022      	beq.n	800714c <HAL_TIM_Base_Start_IT+0x80>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800710e:	d01d      	beq.n	800714c <HAL_TIM_Base_Start_IT+0x80>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a1f      	ldr	r2, [pc, #124]	; (8007194 <HAL_TIM_Base_Start_IT+0xc8>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d018      	beq.n	800714c <HAL_TIM_Base_Start_IT+0x80>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a1e      	ldr	r2, [pc, #120]	; (8007198 <HAL_TIM_Base_Start_IT+0xcc>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d013      	beq.n	800714c <HAL_TIM_Base_Start_IT+0x80>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a1c      	ldr	r2, [pc, #112]	; (800719c <HAL_TIM_Base_Start_IT+0xd0>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d00e      	beq.n	800714c <HAL_TIM_Base_Start_IT+0x80>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a1b      	ldr	r2, [pc, #108]	; (80071a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d009      	beq.n	800714c <HAL_TIM_Base_Start_IT+0x80>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a19      	ldr	r2, [pc, #100]	; (80071a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d004      	beq.n	800714c <HAL_TIM_Base_Start_IT+0x80>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a18      	ldr	r2, [pc, #96]	; (80071a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d111      	bne.n	8007170 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	f003 0307 	and.w	r3, r3, #7
 8007156:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2b06      	cmp	r3, #6
 800715c:	d010      	beq.n	8007180 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f042 0201 	orr.w	r2, r2, #1
 800716c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800716e:	e007      	b.n	8007180 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f042 0201 	orr.w	r2, r2, #1
 800717e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3714      	adds	r7, #20
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	40010000 	.word	0x40010000
 8007194:	40000400 	.word	0x40000400
 8007198:	40000800 	.word	0x40000800
 800719c:	40000c00 	.word	0x40000c00
 80071a0:	40010400 	.word	0x40010400
 80071a4:	40014000 	.word	0x40014000
 80071a8:	40001800 	.word	0x40001800

080071ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d101      	bne.n	80071be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e041      	b.n	8007242 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d106      	bne.n	80071d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f839 	bl	800724a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2202      	movs	r2, #2
 80071dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	3304      	adds	r3, #4
 80071e8:	4619      	mov	r1, r3
 80071ea:	4610      	mov	r0, r2
 80071ec:	f000 fdda 	bl	8007da4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3708      	adds	r7, #8
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800724a:	b480      	push	{r7}
 800724c:	b083      	sub	sp, #12
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007252:	bf00      	nop
 8007254:	370c      	adds	r7, #12
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr
	...

08007260 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d109      	bne.n	8007284 <HAL_TIM_PWM_Start+0x24>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007276:	b2db      	uxtb	r3, r3
 8007278:	2b01      	cmp	r3, #1
 800727a:	bf14      	ite	ne
 800727c:	2301      	movne	r3, #1
 800727e:	2300      	moveq	r3, #0
 8007280:	b2db      	uxtb	r3, r3
 8007282:	e022      	b.n	80072ca <HAL_TIM_PWM_Start+0x6a>
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	2b04      	cmp	r3, #4
 8007288:	d109      	bne.n	800729e <HAL_TIM_PWM_Start+0x3e>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007290:	b2db      	uxtb	r3, r3
 8007292:	2b01      	cmp	r3, #1
 8007294:	bf14      	ite	ne
 8007296:	2301      	movne	r3, #1
 8007298:	2300      	moveq	r3, #0
 800729a:	b2db      	uxtb	r3, r3
 800729c:	e015      	b.n	80072ca <HAL_TIM_PWM_Start+0x6a>
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	2b08      	cmp	r3, #8
 80072a2:	d109      	bne.n	80072b8 <HAL_TIM_PWM_Start+0x58>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	bf14      	ite	ne
 80072b0:	2301      	movne	r3, #1
 80072b2:	2300      	moveq	r3, #0
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	e008      	b.n	80072ca <HAL_TIM_PWM_Start+0x6a>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	bf14      	ite	ne
 80072c4:	2301      	movne	r3, #1
 80072c6:	2300      	moveq	r3, #0
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d001      	beq.n	80072d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e07c      	b.n	80073cc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d104      	bne.n	80072e2 <HAL_TIM_PWM_Start+0x82>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2202      	movs	r2, #2
 80072dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072e0:	e013      	b.n	800730a <HAL_TIM_PWM_Start+0xaa>
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	2b04      	cmp	r3, #4
 80072e6:	d104      	bne.n	80072f2 <HAL_TIM_PWM_Start+0x92>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2202      	movs	r2, #2
 80072ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072f0:	e00b      	b.n	800730a <HAL_TIM_PWM_Start+0xaa>
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	2b08      	cmp	r3, #8
 80072f6:	d104      	bne.n	8007302 <HAL_TIM_PWM_Start+0xa2>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2202      	movs	r2, #2
 80072fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007300:	e003      	b.n	800730a <HAL_TIM_PWM_Start+0xaa>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2202      	movs	r2, #2
 8007306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2201      	movs	r2, #1
 8007310:	6839      	ldr	r1, [r7, #0]
 8007312:	4618      	mov	r0, r3
 8007314:	f001 f95a 	bl	80085cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a2d      	ldr	r2, [pc, #180]	; (80073d4 <HAL_TIM_PWM_Start+0x174>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d004      	beq.n	800732c <HAL_TIM_PWM_Start+0xcc>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a2c      	ldr	r2, [pc, #176]	; (80073d8 <HAL_TIM_PWM_Start+0x178>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d101      	bne.n	8007330 <HAL_TIM_PWM_Start+0xd0>
 800732c:	2301      	movs	r3, #1
 800732e:	e000      	b.n	8007332 <HAL_TIM_PWM_Start+0xd2>
 8007330:	2300      	movs	r3, #0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d007      	beq.n	8007346 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007344:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a22      	ldr	r2, [pc, #136]	; (80073d4 <HAL_TIM_PWM_Start+0x174>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d022      	beq.n	8007396 <HAL_TIM_PWM_Start+0x136>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007358:	d01d      	beq.n	8007396 <HAL_TIM_PWM_Start+0x136>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a1f      	ldr	r2, [pc, #124]	; (80073dc <HAL_TIM_PWM_Start+0x17c>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d018      	beq.n	8007396 <HAL_TIM_PWM_Start+0x136>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a1d      	ldr	r2, [pc, #116]	; (80073e0 <HAL_TIM_PWM_Start+0x180>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d013      	beq.n	8007396 <HAL_TIM_PWM_Start+0x136>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a1c      	ldr	r2, [pc, #112]	; (80073e4 <HAL_TIM_PWM_Start+0x184>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d00e      	beq.n	8007396 <HAL_TIM_PWM_Start+0x136>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a16      	ldr	r2, [pc, #88]	; (80073d8 <HAL_TIM_PWM_Start+0x178>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d009      	beq.n	8007396 <HAL_TIM_PWM_Start+0x136>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a18      	ldr	r2, [pc, #96]	; (80073e8 <HAL_TIM_PWM_Start+0x188>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d004      	beq.n	8007396 <HAL_TIM_PWM_Start+0x136>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a16      	ldr	r2, [pc, #88]	; (80073ec <HAL_TIM_PWM_Start+0x18c>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d111      	bne.n	80073ba <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	f003 0307 	and.w	r3, r3, #7
 80073a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2b06      	cmp	r3, #6
 80073a6:	d010      	beq.n	80073ca <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f042 0201 	orr.w	r2, r2, #1
 80073b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073b8:	e007      	b.n	80073ca <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f042 0201 	orr.w	r2, r2, #1
 80073c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3710      	adds	r7, #16
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	40010000 	.word	0x40010000
 80073d8:	40010400 	.word	0x40010400
 80073dc:	40000400 	.word	0x40000400
 80073e0:	40000800 	.word	0x40000800
 80073e4:	40000c00 	.word	0x40000c00
 80073e8:	40014000 	.word	0x40014000
 80073ec:	40001800 	.word	0x40001800

080073f0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d101      	bne.n	8007402 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	e041      	b.n	8007486 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007408:	b2db      	uxtb	r3, r3
 800740a:	2b00      	cmp	r3, #0
 800740c:	d106      	bne.n	800741c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f7fc fce0 	bl	8003ddc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2202      	movs	r2, #2
 8007420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	3304      	adds	r3, #4
 800742c:	4619      	mov	r1, r3
 800742e:	4610      	mov	r0, r2
 8007430:	f000 fcb8 	bl	8007da4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3708      	adds	r7, #8
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b086      	sub	sp, #24
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
 8007496:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d101      	bne.n	80074a2 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e097      	b.n	80075d2 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d106      	bne.n	80074bc <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f7fc fbf6 	bl	8003ca8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2202      	movs	r2, #2
 80074c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	6812      	ldr	r2, [r2, #0]
 80074ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074d2:	f023 0307 	bic.w	r3, r3, #7
 80074d6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	3304      	adds	r3, #4
 80074e0:	4619      	mov	r1, r3
 80074e2:	4610      	mov	r0, r2
 80074e4:	f000 fc5e 	bl	8007da4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	699b      	ldr	r3, [r3, #24]
 80074f6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	697a      	ldr	r2, [r7, #20]
 8007506:	4313      	orrs	r3, r2
 8007508:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007510:	f023 0303 	bic.w	r3, r3, #3
 8007514:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	689a      	ldr	r2, [r3, #8]
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	699b      	ldr	r3, [r3, #24]
 800751e:	021b      	lsls	r3, r3, #8
 8007520:	4313      	orrs	r3, r2
 8007522:	693a      	ldr	r2, [r7, #16]
 8007524:	4313      	orrs	r3, r2
 8007526:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800752e:	f023 030c 	bic.w	r3, r3, #12
 8007532:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800753a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800753e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	68da      	ldr	r2, [r3, #12]
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	69db      	ldr	r3, [r3, #28]
 8007548:	021b      	lsls	r3, r3, #8
 800754a:	4313      	orrs	r3, r2
 800754c:	693a      	ldr	r2, [r7, #16]
 800754e:	4313      	orrs	r3, r2
 8007550:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	691b      	ldr	r3, [r3, #16]
 8007556:	011a      	lsls	r2, r3, #4
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	6a1b      	ldr	r3, [r3, #32]
 800755c:	031b      	lsls	r3, r3, #12
 800755e:	4313      	orrs	r3, r2
 8007560:	693a      	ldr	r2, [r7, #16]
 8007562:	4313      	orrs	r3, r2
 8007564:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800756c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007574:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	685a      	ldr	r2, [r3, #4]
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	695b      	ldr	r3, [r3, #20]
 800757e:	011b      	lsls	r3, r3, #4
 8007580:	4313      	orrs	r3, r2
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	4313      	orrs	r3, r2
 8007586:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	697a      	ldr	r2, [r7, #20]
 800758e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	693a      	ldr	r2, [r7, #16]
 8007596:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	68fa      	ldr	r2, [r7, #12]
 800759e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3718      	adds	r7, #24
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b084      	sub	sp, #16
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
 80075e2:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075ea:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80075f2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80075fa:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007602:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d110      	bne.n	800762c <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800760a:	7bfb      	ldrb	r3, [r7, #15]
 800760c:	2b01      	cmp	r3, #1
 800760e:	d102      	bne.n	8007616 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007610:	7b7b      	ldrb	r3, [r7, #13]
 8007612:	2b01      	cmp	r3, #1
 8007614:	d001      	beq.n	800761a <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	e069      	b.n	80076ee <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2202      	movs	r2, #2
 800761e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2202      	movs	r2, #2
 8007626:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800762a:	e031      	b.n	8007690 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	2b04      	cmp	r3, #4
 8007630:	d110      	bne.n	8007654 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007632:	7bbb      	ldrb	r3, [r7, #14]
 8007634:	2b01      	cmp	r3, #1
 8007636:	d102      	bne.n	800763e <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007638:	7b3b      	ldrb	r3, [r7, #12]
 800763a:	2b01      	cmp	r3, #1
 800763c:	d001      	beq.n	8007642 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	e055      	b.n	80076ee <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2202      	movs	r2, #2
 8007646:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2202      	movs	r2, #2
 800764e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007652:	e01d      	b.n	8007690 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007654:	7bfb      	ldrb	r3, [r7, #15]
 8007656:	2b01      	cmp	r3, #1
 8007658:	d108      	bne.n	800766c <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800765a:	7bbb      	ldrb	r3, [r7, #14]
 800765c:	2b01      	cmp	r3, #1
 800765e:	d105      	bne.n	800766c <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007660:	7b7b      	ldrb	r3, [r7, #13]
 8007662:	2b01      	cmp	r3, #1
 8007664:	d102      	bne.n	800766c <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007666:	7b3b      	ldrb	r3, [r7, #12]
 8007668:	2b01      	cmp	r3, #1
 800766a:	d001      	beq.n	8007670 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	e03e      	b.n	80076ee <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2202      	movs	r2, #2
 8007674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2202      	movs	r2, #2
 800767c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2202      	movs	r2, #2
 8007684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2202      	movs	r2, #2
 800768c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d003      	beq.n	800769e <HAL_TIM_Encoder_Start+0xc4>
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	2b04      	cmp	r3, #4
 800769a:	d008      	beq.n	80076ae <HAL_TIM_Encoder_Start+0xd4>
 800769c:	e00f      	b.n	80076be <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	2201      	movs	r2, #1
 80076a4:	2100      	movs	r1, #0
 80076a6:	4618      	mov	r0, r3
 80076a8:	f000 ff90 	bl	80085cc <TIM_CCxChannelCmd>
      break;
 80076ac:	e016      	b.n	80076dc <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2201      	movs	r2, #1
 80076b4:	2104      	movs	r1, #4
 80076b6:	4618      	mov	r0, r3
 80076b8:	f000 ff88 	bl	80085cc <TIM_CCxChannelCmd>
      break;
 80076bc:	e00e      	b.n	80076dc <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2201      	movs	r2, #1
 80076c4:	2100      	movs	r1, #0
 80076c6:	4618      	mov	r0, r3
 80076c8:	f000 ff80 	bl	80085cc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2201      	movs	r2, #1
 80076d2:	2104      	movs	r1, #4
 80076d4:	4618      	mov	r0, r3
 80076d6:	f000 ff79 	bl	80085cc <TIM_CCxChannelCmd>
      break;
 80076da:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f042 0201 	orr.w	r2, r2, #1
 80076ea:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b082      	sub	sp, #8
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	f003 0302 	and.w	r3, r3, #2
 8007708:	2b02      	cmp	r3, #2
 800770a:	d122      	bne.n	8007752 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	f003 0302 	and.w	r3, r3, #2
 8007716:	2b02      	cmp	r3, #2
 8007718:	d11b      	bne.n	8007752 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f06f 0202 	mvn.w	r2, #2
 8007722:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	699b      	ldr	r3, [r3, #24]
 8007730:	f003 0303 	and.w	r3, r3, #3
 8007734:	2b00      	cmp	r3, #0
 8007736:	d003      	beq.n	8007740 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 fb14 	bl	8007d66 <HAL_TIM_IC_CaptureCallback>
 800773e:	e005      	b.n	800774c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 fb06 	bl	8007d52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 fb17 	bl	8007d7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	691b      	ldr	r3, [r3, #16]
 8007758:	f003 0304 	and.w	r3, r3, #4
 800775c:	2b04      	cmp	r3, #4
 800775e:	d122      	bne.n	80077a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	f003 0304 	and.w	r3, r3, #4
 800776a:	2b04      	cmp	r3, #4
 800776c:	d11b      	bne.n	80077a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f06f 0204 	mvn.w	r2, #4
 8007776:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2202      	movs	r2, #2
 800777c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	699b      	ldr	r3, [r3, #24]
 8007784:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007788:	2b00      	cmp	r3, #0
 800778a:	d003      	beq.n	8007794 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 faea 	bl	8007d66 <HAL_TIM_IC_CaptureCallback>
 8007792:	e005      	b.n	80077a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 fadc 	bl	8007d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 faed 	bl	8007d7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	691b      	ldr	r3, [r3, #16]
 80077ac:	f003 0308 	and.w	r3, r3, #8
 80077b0:	2b08      	cmp	r3, #8
 80077b2:	d122      	bne.n	80077fa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	f003 0308 	and.w	r3, r3, #8
 80077be:	2b08      	cmp	r3, #8
 80077c0:	d11b      	bne.n	80077fa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f06f 0208 	mvn.w	r2, #8
 80077ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2204      	movs	r2, #4
 80077d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	69db      	ldr	r3, [r3, #28]
 80077d8:	f003 0303 	and.w	r3, r3, #3
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d003      	beq.n	80077e8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 fac0 	bl	8007d66 <HAL_TIM_IC_CaptureCallback>
 80077e6:	e005      	b.n	80077f4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 fab2 	bl	8007d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 fac3 	bl	8007d7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	f003 0310 	and.w	r3, r3, #16
 8007804:	2b10      	cmp	r3, #16
 8007806:	d122      	bne.n	800784e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	f003 0310 	and.w	r3, r3, #16
 8007812:	2b10      	cmp	r3, #16
 8007814:	d11b      	bne.n	800784e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f06f 0210 	mvn.w	r2, #16
 800781e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2208      	movs	r2, #8
 8007824:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	69db      	ldr	r3, [r3, #28]
 800782c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007830:	2b00      	cmp	r3, #0
 8007832:	d003      	beq.n	800783c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 fa96 	bl	8007d66 <HAL_TIM_IC_CaptureCallback>
 800783a:	e005      	b.n	8007848 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fa88 	bl	8007d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 fa99 	bl	8007d7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	691b      	ldr	r3, [r3, #16]
 8007854:	f003 0301 	and.w	r3, r3, #1
 8007858:	2b01      	cmp	r3, #1
 800785a:	d10e      	bne.n	800787a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	f003 0301 	and.w	r3, r3, #1
 8007866:	2b01      	cmp	r3, #1
 8007868:	d107      	bne.n	800787a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f06f 0201 	mvn.w	r2, #1
 8007872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f7fa f8cf 	bl	8001a18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	691b      	ldr	r3, [r3, #16]
 8007880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007884:	2b80      	cmp	r3, #128	; 0x80
 8007886:	d10e      	bne.n	80078a6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007892:	2b80      	cmp	r3, #128	; 0x80
 8007894:	d107      	bne.n	80078a6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800789e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 ff91 	bl	80087c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	691b      	ldr	r3, [r3, #16]
 80078ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078b0:	2b40      	cmp	r3, #64	; 0x40
 80078b2:	d10e      	bne.n	80078d2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078be:	2b40      	cmp	r3, #64	; 0x40
 80078c0:	d107      	bne.n	80078d2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80078ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 fa5e 	bl	8007d8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	f003 0320 	and.w	r3, r3, #32
 80078dc:	2b20      	cmp	r3, #32
 80078de:	d10e      	bne.n	80078fe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	f003 0320 	and.w	r3, r3, #32
 80078ea:	2b20      	cmp	r3, #32
 80078ec:	d107      	bne.n	80078fe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f06f 0220 	mvn.w	r2, #32
 80078f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 ff5b 	bl	80087b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078fe:	bf00      	nop
 8007900:	3708      	adds	r7, #8
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}

08007906 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007906:	b580      	push	{r7, lr}
 8007908:	b086      	sub	sp, #24
 800790a:	af00      	add	r7, sp, #0
 800790c:	60f8      	str	r0, [r7, #12]
 800790e:	60b9      	str	r1, [r7, #8]
 8007910:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007912:	2300      	movs	r3, #0
 8007914:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800791c:	2b01      	cmp	r3, #1
 800791e:	d101      	bne.n	8007924 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007920:	2302      	movs	r3, #2
 8007922:	e088      	b.n	8007a36 <HAL_TIM_IC_ConfigChannel+0x130>
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d11b      	bne.n	800796a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6818      	ldr	r0, [r3, #0]
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	6819      	ldr	r1, [r3, #0]
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	685a      	ldr	r2, [r3, #4]
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	f000 fc7f 	bl	8008244 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	699a      	ldr	r2, [r3, #24]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f022 020c 	bic.w	r2, r2, #12
 8007954:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	6999      	ldr	r1, [r3, #24]
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	689a      	ldr	r2, [r3, #8]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	430a      	orrs	r2, r1
 8007966:	619a      	str	r2, [r3, #24]
 8007968:	e060      	b.n	8007a2c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2b04      	cmp	r3, #4
 800796e:	d11c      	bne.n	80079aa <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6818      	ldr	r0, [r3, #0]
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	6819      	ldr	r1, [r3, #0]
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	685a      	ldr	r2, [r3, #4]
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	f000 fd03 	bl	800838a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	699a      	ldr	r2, [r3, #24]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007992:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	6999      	ldr	r1, [r3, #24]
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	021a      	lsls	r2, r3, #8
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	430a      	orrs	r2, r1
 80079a6:	619a      	str	r2, [r3, #24]
 80079a8:	e040      	b.n	8007a2c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2b08      	cmp	r3, #8
 80079ae:	d11b      	bne.n	80079e8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6818      	ldr	r0, [r3, #0]
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	6819      	ldr	r1, [r3, #0]
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	685a      	ldr	r2, [r3, #4]
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	f000 fd50 	bl	8008464 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	69da      	ldr	r2, [r3, #28]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f022 020c 	bic.w	r2, r2, #12
 80079d2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	69d9      	ldr	r1, [r3, #28]
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	689a      	ldr	r2, [r3, #8]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	430a      	orrs	r2, r1
 80079e4:	61da      	str	r2, [r3, #28]
 80079e6:	e021      	b.n	8007a2c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2b0c      	cmp	r3, #12
 80079ec:	d11c      	bne.n	8007a28 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6818      	ldr	r0, [r3, #0]
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	6819      	ldr	r1, [r3, #0]
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	685a      	ldr	r2, [r3, #4]
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	f000 fd6d 	bl	80084dc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	69da      	ldr	r2, [r3, #28]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007a10:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	69d9      	ldr	r1, [r3, #28]
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	021a      	lsls	r2, r3, #8
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	430a      	orrs	r2, r1
 8007a24:	61da      	str	r2, [r3, #28]
 8007a26:	e001      	b.n	8007a2c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a34:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3718      	adds	r7, #24
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
	...

08007a40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b086      	sub	sp, #24
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d101      	bne.n	8007a5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007a5a:	2302      	movs	r3, #2
 8007a5c:	e0ae      	b.n	8007bbc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2201      	movs	r2, #1
 8007a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2b0c      	cmp	r3, #12
 8007a6a:	f200 809f 	bhi.w	8007bac <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007a6e:	a201      	add	r2, pc, #4	; (adr r2, 8007a74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a74:	08007aa9 	.word	0x08007aa9
 8007a78:	08007bad 	.word	0x08007bad
 8007a7c:	08007bad 	.word	0x08007bad
 8007a80:	08007bad 	.word	0x08007bad
 8007a84:	08007ae9 	.word	0x08007ae9
 8007a88:	08007bad 	.word	0x08007bad
 8007a8c:	08007bad 	.word	0x08007bad
 8007a90:	08007bad 	.word	0x08007bad
 8007a94:	08007b2b 	.word	0x08007b2b
 8007a98:	08007bad 	.word	0x08007bad
 8007a9c:	08007bad 	.word	0x08007bad
 8007aa0:	08007bad 	.word	0x08007bad
 8007aa4:	08007b6b 	.word	0x08007b6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68b9      	ldr	r1, [r7, #8]
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f000 fa18 	bl	8007ee4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	699a      	ldr	r2, [r3, #24]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f042 0208 	orr.w	r2, r2, #8
 8007ac2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	699a      	ldr	r2, [r3, #24]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f022 0204 	bic.w	r2, r2, #4
 8007ad2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	6999      	ldr	r1, [r3, #24]
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	691a      	ldr	r2, [r3, #16]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	430a      	orrs	r2, r1
 8007ae4:	619a      	str	r2, [r3, #24]
      break;
 8007ae6:	e064      	b.n	8007bb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	68b9      	ldr	r1, [r7, #8]
 8007aee:	4618      	mov	r0, r3
 8007af0:	f000 fa68 	bl	8007fc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	699a      	ldr	r2, [r3, #24]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	699a      	ldr	r2, [r3, #24]
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	6999      	ldr	r1, [r3, #24]
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	691b      	ldr	r3, [r3, #16]
 8007b1e:	021a      	lsls	r2, r3, #8
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	430a      	orrs	r2, r1
 8007b26:	619a      	str	r2, [r3, #24]
      break;
 8007b28:	e043      	b.n	8007bb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	68b9      	ldr	r1, [r7, #8]
 8007b30:	4618      	mov	r0, r3
 8007b32:	f000 fabd 	bl	80080b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	69da      	ldr	r2, [r3, #28]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f042 0208 	orr.w	r2, r2, #8
 8007b44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	69da      	ldr	r2, [r3, #28]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f022 0204 	bic.w	r2, r2, #4
 8007b54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	69d9      	ldr	r1, [r3, #28]
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	691a      	ldr	r2, [r3, #16]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	430a      	orrs	r2, r1
 8007b66:	61da      	str	r2, [r3, #28]
      break;
 8007b68:	e023      	b.n	8007bb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	68b9      	ldr	r1, [r7, #8]
 8007b70:	4618      	mov	r0, r3
 8007b72:	f000 fb11 	bl	8008198 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	69da      	ldr	r2, [r3, #28]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	69da      	ldr	r2, [r3, #28]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	69d9      	ldr	r1, [r3, #28]
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	021a      	lsls	r2, r3, #8
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	430a      	orrs	r2, r1
 8007ba8:	61da      	str	r2, [r3, #28]
      break;
 8007baa:	e002      	b.n	8007bb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	75fb      	strb	r3, [r7, #23]
      break;
 8007bb0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3718      	adds	r7, #24
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d101      	bne.n	8007be0 <HAL_TIM_ConfigClockSource+0x1c>
 8007bdc:	2302      	movs	r3, #2
 8007bde:	e0b4      	b.n	8007d4a <HAL_TIM_ConfigClockSource+0x186>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2202      	movs	r2, #2
 8007bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007bfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	68ba      	ldr	r2, [r7, #8]
 8007c0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c18:	d03e      	beq.n	8007c98 <HAL_TIM_ConfigClockSource+0xd4>
 8007c1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c1e:	f200 8087 	bhi.w	8007d30 <HAL_TIM_ConfigClockSource+0x16c>
 8007c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c26:	f000 8086 	beq.w	8007d36 <HAL_TIM_ConfigClockSource+0x172>
 8007c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c2e:	d87f      	bhi.n	8007d30 <HAL_TIM_ConfigClockSource+0x16c>
 8007c30:	2b70      	cmp	r3, #112	; 0x70
 8007c32:	d01a      	beq.n	8007c6a <HAL_TIM_ConfigClockSource+0xa6>
 8007c34:	2b70      	cmp	r3, #112	; 0x70
 8007c36:	d87b      	bhi.n	8007d30 <HAL_TIM_ConfigClockSource+0x16c>
 8007c38:	2b60      	cmp	r3, #96	; 0x60
 8007c3a:	d050      	beq.n	8007cde <HAL_TIM_ConfigClockSource+0x11a>
 8007c3c:	2b60      	cmp	r3, #96	; 0x60
 8007c3e:	d877      	bhi.n	8007d30 <HAL_TIM_ConfigClockSource+0x16c>
 8007c40:	2b50      	cmp	r3, #80	; 0x50
 8007c42:	d03c      	beq.n	8007cbe <HAL_TIM_ConfigClockSource+0xfa>
 8007c44:	2b50      	cmp	r3, #80	; 0x50
 8007c46:	d873      	bhi.n	8007d30 <HAL_TIM_ConfigClockSource+0x16c>
 8007c48:	2b40      	cmp	r3, #64	; 0x40
 8007c4a:	d058      	beq.n	8007cfe <HAL_TIM_ConfigClockSource+0x13a>
 8007c4c:	2b40      	cmp	r3, #64	; 0x40
 8007c4e:	d86f      	bhi.n	8007d30 <HAL_TIM_ConfigClockSource+0x16c>
 8007c50:	2b30      	cmp	r3, #48	; 0x30
 8007c52:	d064      	beq.n	8007d1e <HAL_TIM_ConfigClockSource+0x15a>
 8007c54:	2b30      	cmp	r3, #48	; 0x30
 8007c56:	d86b      	bhi.n	8007d30 <HAL_TIM_ConfigClockSource+0x16c>
 8007c58:	2b20      	cmp	r3, #32
 8007c5a:	d060      	beq.n	8007d1e <HAL_TIM_ConfigClockSource+0x15a>
 8007c5c:	2b20      	cmp	r3, #32
 8007c5e:	d867      	bhi.n	8007d30 <HAL_TIM_ConfigClockSource+0x16c>
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d05c      	beq.n	8007d1e <HAL_TIM_ConfigClockSource+0x15a>
 8007c64:	2b10      	cmp	r3, #16
 8007c66:	d05a      	beq.n	8007d1e <HAL_TIM_ConfigClockSource+0x15a>
 8007c68:	e062      	b.n	8007d30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6818      	ldr	r0, [r3, #0]
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	6899      	ldr	r1, [r3, #8]
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	685a      	ldr	r2, [r3, #4]
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	f000 fc87 	bl	800858c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007c8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	68ba      	ldr	r2, [r7, #8]
 8007c94:	609a      	str	r2, [r3, #8]
      break;
 8007c96:	e04f      	b.n	8007d38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6818      	ldr	r0, [r3, #0]
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	6899      	ldr	r1, [r3, #8]
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	685a      	ldr	r2, [r3, #4]
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	f000 fc70 	bl	800858c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	689a      	ldr	r2, [r3, #8]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007cba:	609a      	str	r2, [r3, #8]
      break;
 8007cbc:	e03c      	b.n	8007d38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6818      	ldr	r0, [r3, #0]
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	6859      	ldr	r1, [r3, #4]
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	461a      	mov	r2, r3
 8007ccc:	f000 fb2e 	bl	800832c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2150      	movs	r1, #80	; 0x50
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f000 fc3d 	bl	8008556 <TIM_ITRx_SetConfig>
      break;
 8007cdc:	e02c      	b.n	8007d38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6818      	ldr	r0, [r3, #0]
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	6859      	ldr	r1, [r3, #4]
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	461a      	mov	r2, r3
 8007cec:	f000 fb8a 	bl	8008404 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	2160      	movs	r1, #96	; 0x60
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f000 fc2d 	bl	8008556 <TIM_ITRx_SetConfig>
      break;
 8007cfc:	e01c      	b.n	8007d38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6818      	ldr	r0, [r3, #0]
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	6859      	ldr	r1, [r3, #4]
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	68db      	ldr	r3, [r3, #12]
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	f000 fb0e 	bl	800832c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	2140      	movs	r1, #64	; 0x40
 8007d16:	4618      	mov	r0, r3
 8007d18:	f000 fc1d 	bl	8008556 <TIM_ITRx_SetConfig>
      break;
 8007d1c:	e00c      	b.n	8007d38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4619      	mov	r1, r3
 8007d28:	4610      	mov	r0, r2
 8007d2a:	f000 fc14 	bl	8008556 <TIM_ITRx_SetConfig>
      break;
 8007d2e:	e003      	b.n	8007d38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	73fb      	strb	r3, [r7, #15]
      break;
 8007d34:	e000      	b.n	8007d38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007d36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3710      	adds	r7, #16
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d52:	b480      	push	{r7}
 8007d54:	b083      	sub	sp, #12
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d5a:	bf00      	nop
 8007d5c:	370c      	adds	r7, #12
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr

08007d66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d66:	b480      	push	{r7}
 8007d68:	b083      	sub	sp, #12
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d6e:	bf00      	nop
 8007d70:	370c      	adds	r7, #12
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr

08007d7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d7a:	b480      	push	{r7}
 8007d7c:	b083      	sub	sp, #12
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d82:	bf00      	nop
 8007d84:	370c      	adds	r7, #12
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr

08007d8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d8e:	b480      	push	{r7}
 8007d90:	b083      	sub	sp, #12
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d96:	bf00      	nop
 8007d98:	370c      	adds	r7, #12
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr
	...

08007da4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b085      	sub	sp, #20
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	4a40      	ldr	r2, [pc, #256]	; (8007eb8 <TIM_Base_SetConfig+0x114>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d013      	beq.n	8007de4 <TIM_Base_SetConfig+0x40>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dc2:	d00f      	beq.n	8007de4 <TIM_Base_SetConfig+0x40>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	4a3d      	ldr	r2, [pc, #244]	; (8007ebc <TIM_Base_SetConfig+0x118>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d00b      	beq.n	8007de4 <TIM_Base_SetConfig+0x40>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	4a3c      	ldr	r2, [pc, #240]	; (8007ec0 <TIM_Base_SetConfig+0x11c>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d007      	beq.n	8007de4 <TIM_Base_SetConfig+0x40>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	4a3b      	ldr	r2, [pc, #236]	; (8007ec4 <TIM_Base_SetConfig+0x120>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d003      	beq.n	8007de4 <TIM_Base_SetConfig+0x40>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	4a3a      	ldr	r2, [pc, #232]	; (8007ec8 <TIM_Base_SetConfig+0x124>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d108      	bne.n	8007df6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a2f      	ldr	r2, [pc, #188]	; (8007eb8 <TIM_Base_SetConfig+0x114>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d02b      	beq.n	8007e56 <TIM_Base_SetConfig+0xb2>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e04:	d027      	beq.n	8007e56 <TIM_Base_SetConfig+0xb2>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	4a2c      	ldr	r2, [pc, #176]	; (8007ebc <TIM_Base_SetConfig+0x118>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d023      	beq.n	8007e56 <TIM_Base_SetConfig+0xb2>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4a2b      	ldr	r2, [pc, #172]	; (8007ec0 <TIM_Base_SetConfig+0x11c>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d01f      	beq.n	8007e56 <TIM_Base_SetConfig+0xb2>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4a2a      	ldr	r2, [pc, #168]	; (8007ec4 <TIM_Base_SetConfig+0x120>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d01b      	beq.n	8007e56 <TIM_Base_SetConfig+0xb2>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4a29      	ldr	r2, [pc, #164]	; (8007ec8 <TIM_Base_SetConfig+0x124>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d017      	beq.n	8007e56 <TIM_Base_SetConfig+0xb2>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a28      	ldr	r2, [pc, #160]	; (8007ecc <TIM_Base_SetConfig+0x128>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d013      	beq.n	8007e56 <TIM_Base_SetConfig+0xb2>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4a27      	ldr	r2, [pc, #156]	; (8007ed0 <TIM_Base_SetConfig+0x12c>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d00f      	beq.n	8007e56 <TIM_Base_SetConfig+0xb2>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a26      	ldr	r2, [pc, #152]	; (8007ed4 <TIM_Base_SetConfig+0x130>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d00b      	beq.n	8007e56 <TIM_Base_SetConfig+0xb2>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a25      	ldr	r2, [pc, #148]	; (8007ed8 <TIM_Base_SetConfig+0x134>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d007      	beq.n	8007e56 <TIM_Base_SetConfig+0xb2>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4a24      	ldr	r2, [pc, #144]	; (8007edc <TIM_Base_SetConfig+0x138>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d003      	beq.n	8007e56 <TIM_Base_SetConfig+0xb2>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	4a23      	ldr	r2, [pc, #140]	; (8007ee0 <TIM_Base_SetConfig+0x13c>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d108      	bne.n	8007e68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	68db      	ldr	r3, [r3, #12]
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	695b      	ldr	r3, [r3, #20]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	68fa      	ldr	r2, [r7, #12]
 8007e7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	689a      	ldr	r2, [r3, #8]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	4a0a      	ldr	r2, [pc, #40]	; (8007eb8 <TIM_Base_SetConfig+0x114>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d003      	beq.n	8007e9c <TIM_Base_SetConfig+0xf8>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	4a0c      	ldr	r2, [pc, #48]	; (8007ec8 <TIM_Base_SetConfig+0x124>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d103      	bne.n	8007ea4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	691a      	ldr	r2, [r3, #16]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	615a      	str	r2, [r3, #20]
}
 8007eaa:	bf00      	nop
 8007eac:	3714      	adds	r7, #20
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr
 8007eb6:	bf00      	nop
 8007eb8:	40010000 	.word	0x40010000
 8007ebc:	40000400 	.word	0x40000400
 8007ec0:	40000800 	.word	0x40000800
 8007ec4:	40000c00 	.word	0x40000c00
 8007ec8:	40010400 	.word	0x40010400
 8007ecc:	40014000 	.word	0x40014000
 8007ed0:	40014400 	.word	0x40014400
 8007ed4:	40014800 	.word	0x40014800
 8007ed8:	40001800 	.word	0x40001800
 8007edc:	40001c00 	.word	0x40001c00
 8007ee0:	40002000 	.word	0x40002000

08007ee4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b087      	sub	sp, #28
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a1b      	ldr	r3, [r3, #32]
 8007ef2:	f023 0201 	bic.w	r2, r3, #1
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a1b      	ldr	r3, [r3, #32]
 8007efe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	699b      	ldr	r3, [r3, #24]
 8007f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f023 0303 	bic.w	r3, r3, #3
 8007f1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	4313      	orrs	r3, r2
 8007f24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	f023 0302 	bic.w	r3, r3, #2
 8007f2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	697a      	ldr	r2, [r7, #20]
 8007f34:	4313      	orrs	r3, r2
 8007f36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a20      	ldr	r2, [pc, #128]	; (8007fbc <TIM_OC1_SetConfig+0xd8>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d003      	beq.n	8007f48 <TIM_OC1_SetConfig+0x64>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4a1f      	ldr	r2, [pc, #124]	; (8007fc0 <TIM_OC1_SetConfig+0xdc>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d10c      	bne.n	8007f62 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	f023 0308 	bic.w	r3, r3, #8
 8007f4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	697a      	ldr	r2, [r7, #20]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	f023 0304 	bic.w	r3, r3, #4
 8007f60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4a15      	ldr	r2, [pc, #84]	; (8007fbc <TIM_OC1_SetConfig+0xd8>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d003      	beq.n	8007f72 <TIM_OC1_SetConfig+0x8e>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4a14      	ldr	r2, [pc, #80]	; (8007fc0 <TIM_OC1_SetConfig+0xdc>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d111      	bne.n	8007f96 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	695b      	ldr	r3, [r3, #20]
 8007f86:	693a      	ldr	r2, [r7, #16]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	693a      	ldr	r2, [r7, #16]
 8007f92:	4313      	orrs	r3, r2
 8007f94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	693a      	ldr	r2, [r7, #16]
 8007f9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	68fa      	ldr	r2, [r7, #12]
 8007fa0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	685a      	ldr	r2, [r3, #4]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	697a      	ldr	r2, [r7, #20]
 8007fae:	621a      	str	r2, [r3, #32]
}
 8007fb0:	bf00      	nop
 8007fb2:	371c      	adds	r7, #28
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr
 8007fbc:	40010000 	.word	0x40010000
 8007fc0:	40010400 	.word	0x40010400

08007fc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b087      	sub	sp, #28
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a1b      	ldr	r3, [r3, #32]
 8007fd2:	f023 0210 	bic.w	r2, r3, #16
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6a1b      	ldr	r3, [r3, #32]
 8007fde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	699b      	ldr	r3, [r3, #24]
 8007fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ffa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	021b      	lsls	r3, r3, #8
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	4313      	orrs	r3, r2
 8008006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	f023 0320 	bic.w	r3, r3, #32
 800800e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	011b      	lsls	r3, r3, #4
 8008016:	697a      	ldr	r2, [r7, #20]
 8008018:	4313      	orrs	r3, r2
 800801a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	4a22      	ldr	r2, [pc, #136]	; (80080a8 <TIM_OC2_SetConfig+0xe4>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d003      	beq.n	800802c <TIM_OC2_SetConfig+0x68>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	4a21      	ldr	r2, [pc, #132]	; (80080ac <TIM_OC2_SetConfig+0xe8>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d10d      	bne.n	8008048 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008032:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	011b      	lsls	r3, r3, #4
 800803a:	697a      	ldr	r2, [r7, #20]
 800803c:	4313      	orrs	r3, r2
 800803e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008046:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a17      	ldr	r2, [pc, #92]	; (80080a8 <TIM_OC2_SetConfig+0xe4>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d003      	beq.n	8008058 <TIM_OC2_SetConfig+0x94>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4a16      	ldr	r2, [pc, #88]	; (80080ac <TIM_OC2_SetConfig+0xe8>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d113      	bne.n	8008080 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800805e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008066:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	695b      	ldr	r3, [r3, #20]
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	693a      	ldr	r2, [r7, #16]
 8008070:	4313      	orrs	r3, r2
 8008072:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	699b      	ldr	r3, [r3, #24]
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	693a      	ldr	r2, [r7, #16]
 800807c:	4313      	orrs	r3, r2
 800807e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	693a      	ldr	r2, [r7, #16]
 8008084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	685a      	ldr	r2, [r3, #4]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	697a      	ldr	r2, [r7, #20]
 8008098:	621a      	str	r2, [r3, #32]
}
 800809a:	bf00      	nop
 800809c:	371c      	adds	r7, #28
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	40010000 	.word	0x40010000
 80080ac:	40010400 	.word	0x40010400

080080b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b087      	sub	sp, #28
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a1b      	ldr	r3, [r3, #32]
 80080be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a1b      	ldr	r3, [r3, #32]
 80080ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	69db      	ldr	r3, [r3, #28]
 80080d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f023 0303 	bic.w	r3, r3, #3
 80080e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	68fa      	ldr	r2, [r7, #12]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80080f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	021b      	lsls	r3, r3, #8
 8008100:	697a      	ldr	r2, [r7, #20]
 8008102:	4313      	orrs	r3, r2
 8008104:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4a21      	ldr	r2, [pc, #132]	; (8008190 <TIM_OC3_SetConfig+0xe0>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d003      	beq.n	8008116 <TIM_OC3_SetConfig+0x66>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	4a20      	ldr	r2, [pc, #128]	; (8008194 <TIM_OC3_SetConfig+0xe4>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d10d      	bne.n	8008132 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800811c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	021b      	lsls	r3, r3, #8
 8008124:	697a      	ldr	r2, [r7, #20]
 8008126:	4313      	orrs	r3, r2
 8008128:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008130:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a16      	ldr	r2, [pc, #88]	; (8008190 <TIM_OC3_SetConfig+0xe0>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d003      	beq.n	8008142 <TIM_OC3_SetConfig+0x92>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a15      	ldr	r2, [pc, #84]	; (8008194 <TIM_OC3_SetConfig+0xe4>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d113      	bne.n	800816a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008148:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008150:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	695b      	ldr	r3, [r3, #20]
 8008156:	011b      	lsls	r3, r3, #4
 8008158:	693a      	ldr	r2, [r7, #16]
 800815a:	4313      	orrs	r3, r2
 800815c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	699b      	ldr	r3, [r3, #24]
 8008162:	011b      	lsls	r3, r3, #4
 8008164:	693a      	ldr	r2, [r7, #16]
 8008166:	4313      	orrs	r3, r2
 8008168:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	693a      	ldr	r2, [r7, #16]
 800816e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	68fa      	ldr	r2, [r7, #12]
 8008174:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	685a      	ldr	r2, [r3, #4]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	697a      	ldr	r2, [r7, #20]
 8008182:	621a      	str	r2, [r3, #32]
}
 8008184:	bf00      	nop
 8008186:	371c      	adds	r7, #28
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr
 8008190:	40010000 	.word	0x40010000
 8008194:	40010400 	.word	0x40010400

08008198 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008198:	b480      	push	{r7}
 800819a:	b087      	sub	sp, #28
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6a1b      	ldr	r3, [r3, #32]
 80081a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a1b      	ldr	r3, [r3, #32]
 80081b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	69db      	ldr	r3, [r3, #28]
 80081be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	021b      	lsls	r3, r3, #8
 80081d6:	68fa      	ldr	r2, [r7, #12]
 80081d8:	4313      	orrs	r3, r2
 80081da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80081e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	031b      	lsls	r3, r3, #12
 80081ea:	693a      	ldr	r2, [r7, #16]
 80081ec:	4313      	orrs	r3, r2
 80081ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4a12      	ldr	r2, [pc, #72]	; (800823c <TIM_OC4_SetConfig+0xa4>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d003      	beq.n	8008200 <TIM_OC4_SetConfig+0x68>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4a11      	ldr	r2, [pc, #68]	; (8008240 <TIM_OC4_SetConfig+0xa8>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d109      	bne.n	8008214 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008206:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	695b      	ldr	r3, [r3, #20]
 800820c:	019b      	lsls	r3, r3, #6
 800820e:	697a      	ldr	r2, [r7, #20]
 8008210:	4313      	orrs	r3, r2
 8008212:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	697a      	ldr	r2, [r7, #20]
 8008218:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	68fa      	ldr	r2, [r7, #12]
 800821e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	685a      	ldr	r2, [r3, #4]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	693a      	ldr	r2, [r7, #16]
 800822c:	621a      	str	r2, [r3, #32]
}
 800822e:	bf00      	nop
 8008230:	371c      	adds	r7, #28
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr
 800823a:	bf00      	nop
 800823c:	40010000 	.word	0x40010000
 8008240:	40010400 	.word	0x40010400

08008244 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008244:	b480      	push	{r7}
 8008246:	b087      	sub	sp, #28
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	607a      	str	r2, [r7, #4]
 8008250:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	6a1b      	ldr	r3, [r3, #32]
 8008256:	f023 0201 	bic.w	r2, r3, #1
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	699b      	ldr	r3, [r3, #24]
 8008262:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6a1b      	ldr	r3, [r3, #32]
 8008268:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	4a28      	ldr	r2, [pc, #160]	; (8008310 <TIM_TI1_SetConfig+0xcc>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d01b      	beq.n	80082aa <TIM_TI1_SetConfig+0x66>
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008278:	d017      	beq.n	80082aa <TIM_TI1_SetConfig+0x66>
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	4a25      	ldr	r2, [pc, #148]	; (8008314 <TIM_TI1_SetConfig+0xd0>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d013      	beq.n	80082aa <TIM_TI1_SetConfig+0x66>
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	4a24      	ldr	r2, [pc, #144]	; (8008318 <TIM_TI1_SetConfig+0xd4>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d00f      	beq.n	80082aa <TIM_TI1_SetConfig+0x66>
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	4a23      	ldr	r2, [pc, #140]	; (800831c <TIM_TI1_SetConfig+0xd8>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d00b      	beq.n	80082aa <TIM_TI1_SetConfig+0x66>
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	4a22      	ldr	r2, [pc, #136]	; (8008320 <TIM_TI1_SetConfig+0xdc>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d007      	beq.n	80082aa <TIM_TI1_SetConfig+0x66>
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	4a21      	ldr	r2, [pc, #132]	; (8008324 <TIM_TI1_SetConfig+0xe0>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d003      	beq.n	80082aa <TIM_TI1_SetConfig+0x66>
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	4a20      	ldr	r2, [pc, #128]	; (8008328 <TIM_TI1_SetConfig+0xe4>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d101      	bne.n	80082ae <TIM_TI1_SetConfig+0x6a>
 80082aa:	2301      	movs	r3, #1
 80082ac:	e000      	b.n	80082b0 <TIM_TI1_SetConfig+0x6c>
 80082ae:	2300      	movs	r3, #0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d008      	beq.n	80082c6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	f023 0303 	bic.w	r3, r3, #3
 80082ba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80082bc:	697a      	ldr	r2, [r7, #20]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4313      	orrs	r3, r2
 80082c2:	617b      	str	r3, [r7, #20]
 80082c4:	e003      	b.n	80082ce <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	f043 0301 	orr.w	r3, r3, #1
 80082cc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80082d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	011b      	lsls	r3, r3, #4
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	697a      	ldr	r2, [r7, #20]
 80082de:	4313      	orrs	r3, r2
 80082e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	f023 030a 	bic.w	r3, r3, #10
 80082e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	f003 030a 	and.w	r3, r3, #10
 80082f0:	693a      	ldr	r2, [r7, #16]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	697a      	ldr	r2, [r7, #20]
 80082fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	693a      	ldr	r2, [r7, #16]
 8008300:	621a      	str	r2, [r3, #32]
}
 8008302:	bf00      	nop
 8008304:	371c      	adds	r7, #28
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop
 8008310:	40010000 	.word	0x40010000
 8008314:	40000400 	.word	0x40000400
 8008318:	40000800 	.word	0x40000800
 800831c:	40000c00 	.word	0x40000c00
 8008320:	40010400 	.word	0x40010400
 8008324:	40014000 	.word	0x40014000
 8008328:	40001800 	.word	0x40001800

0800832c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800832c:	b480      	push	{r7}
 800832e:	b087      	sub	sp, #28
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6a1b      	ldr	r3, [r3, #32]
 800833c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	6a1b      	ldr	r3, [r3, #32]
 8008342:	f023 0201 	bic.w	r2, r3, #1
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	699b      	ldr	r3, [r3, #24]
 800834e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008356:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	011b      	lsls	r3, r3, #4
 800835c:	693a      	ldr	r2, [r7, #16]
 800835e:	4313      	orrs	r3, r2
 8008360:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	f023 030a 	bic.w	r3, r3, #10
 8008368:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800836a:	697a      	ldr	r2, [r7, #20]
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	4313      	orrs	r3, r2
 8008370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	693a      	ldr	r2, [r7, #16]
 8008376:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	697a      	ldr	r2, [r7, #20]
 800837c:	621a      	str	r2, [r3, #32]
}
 800837e:	bf00      	nop
 8008380:	371c      	adds	r7, #28
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr

0800838a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800838a:	b480      	push	{r7}
 800838c:	b087      	sub	sp, #28
 800838e:	af00      	add	r7, sp, #0
 8008390:	60f8      	str	r0, [r7, #12]
 8008392:	60b9      	str	r1, [r7, #8]
 8008394:	607a      	str	r2, [r7, #4]
 8008396:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	6a1b      	ldr	r3, [r3, #32]
 800839c:	f023 0210 	bic.w	r2, r3, #16
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	699b      	ldr	r3, [r3, #24]
 80083a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	6a1b      	ldr	r3, [r3, #32]
 80083ae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	021b      	lsls	r3, r3, #8
 80083bc:	697a      	ldr	r2, [r7, #20]
 80083be:	4313      	orrs	r3, r2
 80083c0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80083c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	031b      	lsls	r3, r3, #12
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	697a      	ldr	r2, [r7, #20]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80083dc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	011b      	lsls	r3, r3, #4
 80083e2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80083e6:	693a      	ldr	r2, [r7, #16]
 80083e8:	4313      	orrs	r3, r2
 80083ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	697a      	ldr	r2, [r7, #20]
 80083f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	693a      	ldr	r2, [r7, #16]
 80083f6:	621a      	str	r2, [r3, #32]
}
 80083f8:	bf00      	nop
 80083fa:	371c      	adds	r7, #28
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008404:	b480      	push	{r7}
 8008406:	b087      	sub	sp, #28
 8008408:	af00      	add	r7, sp, #0
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	60b9      	str	r1, [r7, #8]
 800840e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6a1b      	ldr	r3, [r3, #32]
 8008414:	f023 0210 	bic.w	r2, r3, #16
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	699b      	ldr	r3, [r3, #24]
 8008420:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6a1b      	ldr	r3, [r3, #32]
 8008426:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800842e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	031b      	lsls	r3, r3, #12
 8008434:	697a      	ldr	r2, [r7, #20]
 8008436:	4313      	orrs	r3, r2
 8008438:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008440:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	011b      	lsls	r3, r3, #4
 8008446:	693a      	ldr	r2, [r7, #16]
 8008448:	4313      	orrs	r3, r2
 800844a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	697a      	ldr	r2, [r7, #20]
 8008450:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	693a      	ldr	r2, [r7, #16]
 8008456:	621a      	str	r2, [r3, #32]
}
 8008458:	bf00      	nop
 800845a:	371c      	adds	r7, #28
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr

08008464 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008464:	b480      	push	{r7}
 8008466:	b087      	sub	sp, #28
 8008468:	af00      	add	r7, sp, #0
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	60b9      	str	r1, [r7, #8]
 800846e:	607a      	str	r2, [r7, #4]
 8008470:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	6a1b      	ldr	r3, [r3, #32]
 8008476:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	69db      	ldr	r3, [r3, #28]
 8008482:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	6a1b      	ldr	r3, [r3, #32]
 8008488:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	f023 0303 	bic.w	r3, r3, #3
 8008490:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008492:	697a      	ldr	r2, [r7, #20]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4313      	orrs	r3, r2
 8008498:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	011b      	lsls	r3, r3, #4
 80084a6:	b2db      	uxtb	r3, r3
 80084a8:	697a      	ldr	r2, [r7, #20]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80084b4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	021b      	lsls	r3, r3, #8
 80084ba:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80084be:	693a      	ldr	r2, [r7, #16]
 80084c0:	4313      	orrs	r3, r2
 80084c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	697a      	ldr	r2, [r7, #20]
 80084c8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	693a      	ldr	r2, [r7, #16]
 80084ce:	621a      	str	r2, [r3, #32]
}
 80084d0:	bf00      	nop
 80084d2:	371c      	adds	r7, #28
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr

080084dc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80084dc:	b480      	push	{r7}
 80084de:	b087      	sub	sp, #28
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	60b9      	str	r1, [r7, #8]
 80084e6:	607a      	str	r2, [r7, #4]
 80084e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6a1b      	ldr	r3, [r3, #32]
 80084ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	69db      	ldr	r3, [r3, #28]
 80084fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	6a1b      	ldr	r3, [r3, #32]
 8008500:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008508:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	021b      	lsls	r3, r3, #8
 800850e:	697a      	ldr	r2, [r7, #20]
 8008510:	4313      	orrs	r3, r2
 8008512:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800851a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	031b      	lsls	r3, r3, #12
 8008520:	b29b      	uxth	r3, r3
 8008522:	697a      	ldr	r2, [r7, #20]
 8008524:	4313      	orrs	r3, r2
 8008526:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800852e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	031b      	lsls	r3, r3, #12
 8008534:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008538:	693a      	ldr	r2, [r7, #16]
 800853a:	4313      	orrs	r3, r2
 800853c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	697a      	ldr	r2, [r7, #20]
 8008542:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	693a      	ldr	r2, [r7, #16]
 8008548:	621a      	str	r2, [r3, #32]
}
 800854a:	bf00      	nop
 800854c:	371c      	adds	r7, #28
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr

08008556 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008556:	b480      	push	{r7}
 8008558:	b085      	sub	sp, #20
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
 800855e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800856c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800856e:	683a      	ldr	r2, [r7, #0]
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	4313      	orrs	r3, r2
 8008574:	f043 0307 	orr.w	r3, r3, #7
 8008578:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	609a      	str	r2, [r3, #8]
}
 8008580:	bf00      	nop
 8008582:	3714      	adds	r7, #20
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800858c:	b480      	push	{r7}
 800858e:	b087      	sub	sp, #28
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	607a      	str	r2, [r7, #4]
 8008598:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80085a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	021a      	lsls	r2, r3, #8
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	431a      	orrs	r2, r3
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	697a      	ldr	r2, [r7, #20]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	697a      	ldr	r2, [r7, #20]
 80085be:	609a      	str	r2, [r3, #8]
}
 80085c0:	bf00      	nop
 80085c2:	371c      	adds	r7, #28
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr

080085cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b087      	sub	sp, #28
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	f003 031f 	and.w	r3, r3, #31
 80085de:	2201      	movs	r2, #1
 80085e0:	fa02 f303 	lsl.w	r3, r2, r3
 80085e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	6a1a      	ldr	r2, [r3, #32]
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	43db      	mvns	r3, r3
 80085ee:	401a      	ands	r2, r3
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6a1a      	ldr	r2, [r3, #32]
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	f003 031f 	and.w	r3, r3, #31
 80085fe:	6879      	ldr	r1, [r7, #4]
 8008600:	fa01 f303 	lsl.w	r3, r1, r3
 8008604:	431a      	orrs	r2, r3
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	621a      	str	r2, [r3, #32]
}
 800860a:	bf00      	nop
 800860c:	371c      	adds	r7, #28
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr
	...

08008618 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008618:	b480      	push	{r7}
 800861a:	b085      	sub	sp, #20
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008628:	2b01      	cmp	r3, #1
 800862a:	d101      	bne.n	8008630 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800862c:	2302      	movs	r3, #2
 800862e:	e05a      	b.n	80086e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2202      	movs	r2, #2
 800863c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008656:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	4313      	orrs	r3, r2
 8008660:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a21      	ldr	r2, [pc, #132]	; (80086f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d022      	beq.n	80086ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800867c:	d01d      	beq.n	80086ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a1d      	ldr	r2, [pc, #116]	; (80086f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d018      	beq.n	80086ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a1b      	ldr	r2, [pc, #108]	; (80086fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d013      	beq.n	80086ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a1a      	ldr	r2, [pc, #104]	; (8008700 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d00e      	beq.n	80086ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a18      	ldr	r2, [pc, #96]	; (8008704 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d009      	beq.n	80086ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a17      	ldr	r2, [pc, #92]	; (8008708 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d004      	beq.n	80086ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a15      	ldr	r2, [pc, #84]	; (800870c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d10c      	bne.n	80086d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	68ba      	ldr	r2, [r7, #8]
 80086c8:	4313      	orrs	r3, r2
 80086ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	68ba      	ldr	r2, [r7, #8]
 80086d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2200      	movs	r2, #0
 80086e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086e4:	2300      	movs	r3, #0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3714      	adds	r7, #20
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr
 80086f2:	bf00      	nop
 80086f4:	40010000 	.word	0x40010000
 80086f8:	40000400 	.word	0x40000400
 80086fc:	40000800 	.word	0x40000800
 8008700:	40000c00 	.word	0x40000c00
 8008704:	40010400 	.word	0x40010400
 8008708:	40014000 	.word	0x40014000
 800870c:	40001800 	.word	0x40001800

08008710 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008710:	b480      	push	{r7}
 8008712:	b085      	sub	sp, #20
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800871a:	2300      	movs	r3, #0
 800871c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008724:	2b01      	cmp	r3, #1
 8008726:	d101      	bne.n	800872c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008728:	2302      	movs	r3, #2
 800872a:	e03d      	b.n	80087a8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	68db      	ldr	r3, [r3, #12]
 800873e:	4313      	orrs	r3, r2
 8008740:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	4313      	orrs	r3, r2
 800874e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	4313      	orrs	r3, r2
 800875c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4313      	orrs	r3, r2
 800876a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	691b      	ldr	r3, [r3, #16]
 8008776:	4313      	orrs	r3, r2
 8008778:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	695b      	ldr	r3, [r3, #20]
 8008784:	4313      	orrs	r3, r2
 8008786:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	69db      	ldr	r3, [r3, #28]
 8008792:	4313      	orrs	r3, r2
 8008794:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2200      	movs	r2, #0
 80087a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087a6:	2300      	movs	r3, #0
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3714      	adds	r7, #20
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087bc:	bf00      	nop
 80087be:	370c      	adds	r7, #12
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80087d0:	bf00      	nop
 80087d2:	370c      	adds	r7, #12
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d101      	bne.n	80087ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087ea:	2301      	movs	r3, #1
 80087ec:	e03f      	b.n	800886e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d106      	bne.n	8008808 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f7fb fbc0 	bl	8003f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2224      	movs	r2, #36	; 0x24
 800880c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	68da      	ldr	r2, [r3, #12]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800881e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 fec5 	bl	80095b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	691a      	ldr	r2, [r3, #16]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008834:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	695a      	ldr	r2, [r3, #20]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008844:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	68da      	ldr	r2, [r3, #12]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008854:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2220      	movs	r2, #32
 8008860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2220      	movs	r2, #32
 8008868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	3708      	adds	r7, #8
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}

08008876 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008876:	b580      	push	{r7, lr}
 8008878:	b08a      	sub	sp, #40	; 0x28
 800887a:	af02      	add	r7, sp, #8
 800887c:	60f8      	str	r0, [r7, #12]
 800887e:	60b9      	str	r1, [r7, #8]
 8008880:	603b      	str	r3, [r7, #0]
 8008882:	4613      	mov	r3, r2
 8008884:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008886:	2300      	movs	r3, #0
 8008888:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008890:	b2db      	uxtb	r3, r3
 8008892:	2b20      	cmp	r3, #32
 8008894:	d17c      	bne.n	8008990 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d002      	beq.n	80088a2 <HAL_UART_Transmit+0x2c>
 800889c:	88fb      	ldrh	r3, [r7, #6]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d101      	bne.n	80088a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80088a2:	2301      	movs	r3, #1
 80088a4:	e075      	b.n	8008992 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d101      	bne.n	80088b4 <HAL_UART_Transmit+0x3e>
 80088b0:	2302      	movs	r3, #2
 80088b2:	e06e      	b.n	8008992 <HAL_UART_Transmit+0x11c>
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2200      	movs	r2, #0
 80088c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2221      	movs	r2, #33	; 0x21
 80088c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80088ca:	f7fb fc7b 	bl	80041c4 <HAL_GetTick>
 80088ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	88fa      	ldrh	r2, [r7, #6]
 80088d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	88fa      	ldrh	r2, [r7, #6]
 80088da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088e4:	d108      	bne.n	80088f8 <HAL_UART_Transmit+0x82>
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	691b      	ldr	r3, [r3, #16]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d104      	bne.n	80088f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80088ee:	2300      	movs	r3, #0
 80088f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	61bb      	str	r3, [r7, #24]
 80088f6:	e003      	b.n	8008900 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80088fc:	2300      	movs	r3, #0
 80088fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2200      	movs	r2, #0
 8008904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008908:	e02a      	b.n	8008960 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	9300      	str	r3, [sp, #0]
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	2200      	movs	r2, #0
 8008912:	2180      	movs	r1, #128	; 0x80
 8008914:	68f8      	ldr	r0, [r7, #12]
 8008916:	f000 fc05 	bl	8009124 <UART_WaitOnFlagUntilTimeout>
 800891a:	4603      	mov	r3, r0
 800891c:	2b00      	cmp	r3, #0
 800891e:	d001      	beq.n	8008924 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008920:	2303      	movs	r3, #3
 8008922:	e036      	b.n	8008992 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d10b      	bne.n	8008942 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800892a:	69bb      	ldr	r3, [r7, #24]
 800892c:	881b      	ldrh	r3, [r3, #0]
 800892e:	461a      	mov	r2, r3
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008938:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800893a:	69bb      	ldr	r3, [r7, #24]
 800893c:	3302      	adds	r3, #2
 800893e:	61bb      	str	r3, [r7, #24]
 8008940:	e007      	b.n	8008952 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008942:	69fb      	ldr	r3, [r7, #28]
 8008944:	781a      	ldrb	r2, [r3, #0]
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800894c:	69fb      	ldr	r3, [r7, #28]
 800894e:	3301      	adds	r3, #1
 8008950:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008956:	b29b      	uxth	r3, r3
 8008958:	3b01      	subs	r3, #1
 800895a:	b29a      	uxth	r2, r3
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008964:	b29b      	uxth	r3, r3
 8008966:	2b00      	cmp	r3, #0
 8008968:	d1cf      	bne.n	800890a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	9300      	str	r3, [sp, #0]
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	2200      	movs	r2, #0
 8008972:	2140      	movs	r1, #64	; 0x40
 8008974:	68f8      	ldr	r0, [r7, #12]
 8008976:	f000 fbd5 	bl	8009124 <UART_WaitOnFlagUntilTimeout>
 800897a:	4603      	mov	r3, r0
 800897c:	2b00      	cmp	r3, #0
 800897e:	d001      	beq.n	8008984 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008980:	2303      	movs	r3, #3
 8008982:	e006      	b.n	8008992 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2220      	movs	r2, #32
 8008988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800898c:	2300      	movs	r3, #0
 800898e:	e000      	b.n	8008992 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008990:	2302      	movs	r3, #2
  }
}
 8008992:	4618      	mov	r0, r3
 8008994:	3720      	adds	r7, #32
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800899a:	b580      	push	{r7, lr}
 800899c:	b08a      	sub	sp, #40	; 0x28
 800899e:	af02      	add	r7, sp, #8
 80089a0:	60f8      	str	r0, [r7, #12]
 80089a2:	60b9      	str	r1, [r7, #8]
 80089a4:	603b      	str	r3, [r7, #0]
 80089a6:	4613      	mov	r3, r2
 80089a8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80089aa:	2300      	movs	r3, #0
 80089ac:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	2b20      	cmp	r3, #32
 80089b8:	f040 808c 	bne.w	8008ad4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d002      	beq.n	80089c8 <HAL_UART_Receive+0x2e>
 80089c2:	88fb      	ldrh	r3, [r7, #6]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d101      	bne.n	80089cc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80089c8:	2301      	movs	r3, #1
 80089ca:	e084      	b.n	8008ad6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d101      	bne.n	80089da <HAL_UART_Receive+0x40>
 80089d6:	2302      	movs	r3, #2
 80089d8:	e07d      	b.n	8008ad6 <HAL_UART_Receive+0x13c>
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2201      	movs	r2, #1
 80089de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2200      	movs	r2, #0
 80089e6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2222      	movs	r2, #34	; 0x22
 80089ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2200      	movs	r2, #0
 80089f4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80089f6:	f7fb fbe5 	bl	80041c4 <HAL_GetTick>
 80089fa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	88fa      	ldrh	r2, [r7, #6]
 8008a00:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	88fa      	ldrh	r2, [r7, #6]
 8008a06:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a10:	d108      	bne.n	8008a24 <HAL_UART_Receive+0x8a>
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	691b      	ldr	r3, [r3, #16]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d104      	bne.n	8008a24 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	61bb      	str	r3, [r7, #24]
 8008a22:	e003      	b.n	8008a2c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008a34:	e043      	b.n	8008abe <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	9300      	str	r3, [sp, #0]
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	2120      	movs	r1, #32
 8008a40:	68f8      	ldr	r0, [r7, #12]
 8008a42:	f000 fb6f 	bl	8009124 <UART_WaitOnFlagUntilTimeout>
 8008a46:	4603      	mov	r3, r0
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d001      	beq.n	8008a50 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8008a4c:	2303      	movs	r3, #3
 8008a4e:	e042      	b.n	8008ad6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d10c      	bne.n	8008a70 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a62:	b29a      	uxth	r2, r3
 8008a64:	69bb      	ldr	r3, [r7, #24]
 8008a66:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008a68:	69bb      	ldr	r3, [r7, #24]
 8008a6a:	3302      	adds	r3, #2
 8008a6c:	61bb      	str	r3, [r7, #24]
 8008a6e:	e01f      	b.n	8008ab0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a78:	d007      	beq.n	8008a8a <HAL_UART_Receive+0xf0>
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d10a      	bne.n	8008a98 <HAL_UART_Receive+0xfe>
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	691b      	ldr	r3, [r3, #16]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d106      	bne.n	8008a98 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	b2da      	uxtb	r2, r3
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	701a      	strb	r2, [r3, #0]
 8008a96:	e008      	b.n	8008aaa <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aa4:	b2da      	uxtb	r2, r3
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	3301      	adds	r3, #1
 8008aae:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	3b01      	subs	r3, #1
 8008ab8:	b29a      	uxth	r2, r3
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d1b6      	bne.n	8008a36 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2220      	movs	r2, #32
 8008acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	e000      	b.n	8008ad6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8008ad4:	2302      	movs	r3, #2
  }
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3720      	adds	r7, #32
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}

08008ade <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008ade:	b480      	push	{r7}
 8008ae0:	b085      	sub	sp, #20
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	60f8      	str	r0, [r7, #12]
 8008ae6:	60b9      	str	r1, [r7, #8]
 8008ae8:	4613      	mov	r3, r2
 8008aea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	2b20      	cmp	r3, #32
 8008af6:	d130      	bne.n	8008b5a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d002      	beq.n	8008b04 <HAL_UART_Transmit_IT+0x26>
 8008afe:	88fb      	ldrh	r3, [r7, #6]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d101      	bne.n	8008b08 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	e029      	b.n	8008b5c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d101      	bne.n	8008b16 <HAL_UART_Transmit_IT+0x38>
 8008b12:	2302      	movs	r3, #2
 8008b14:	e022      	b.n	8008b5c <HAL_UART_Transmit_IT+0x7e>
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2201      	movs	r2, #1
 8008b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	68ba      	ldr	r2, [r7, #8]
 8008b22:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	88fa      	ldrh	r2, [r7, #6]
 8008b28:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	88fa      	ldrh	r2, [r7, #6]
 8008b2e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2200      	movs	r2, #0
 8008b34:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2221      	movs	r2, #33	; 0x21
 8008b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2200      	movs	r2, #0
 8008b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	68da      	ldr	r2, [r3, #12]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008b54:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008b56:	2300      	movs	r3, #0
 8008b58:	e000      	b.n	8008b5c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008b5a:	2302      	movs	r3, #2
  }
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3714      	adds	r7, #20
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	60b9      	str	r1, [r7, #8]
 8008b72:	4613      	mov	r3, r2
 8008b74:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	2b20      	cmp	r3, #32
 8008b80:	d11d      	bne.n	8008bbe <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d002      	beq.n	8008b8e <HAL_UART_Receive_IT+0x26>
 8008b88:	88fb      	ldrh	r3, [r7, #6]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d101      	bne.n	8008b92 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e016      	b.n	8008bc0 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d101      	bne.n	8008ba0 <HAL_UART_Receive_IT+0x38>
 8008b9c:	2302      	movs	r3, #2
 8008b9e:	e00f      	b.n	8008bc0 <HAL_UART_Receive_IT+0x58>
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2200      	movs	r2, #0
 8008bac:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008bae:	88fb      	ldrh	r3, [r7, #6]
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	68b9      	ldr	r1, [r7, #8]
 8008bb4:	68f8      	ldr	r0, [r7, #12]
 8008bb6:	f000 fb23 	bl	8009200 <UART_Start_Receive_IT>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	e000      	b.n	8008bc0 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008bbe:	2302      	movs	r3, #2
  }
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3710      	adds	r7, #16
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b0ba      	sub	sp, #232	; 0xe8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	695b      	ldr	r3, [r3, #20]
 8008bea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bfe:	f003 030f 	and.w	r3, r3, #15
 8008c02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008c06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d10f      	bne.n	8008c2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c12:	f003 0320 	and.w	r3, r3, #32
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d009      	beq.n	8008c2e <HAL_UART_IRQHandler+0x66>
 8008c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c1e:	f003 0320 	and.w	r3, r3, #32
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d003      	beq.n	8008c2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 fc07 	bl	800943a <UART_Receive_IT>
      return;
 8008c2c:	e256      	b.n	80090dc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008c2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	f000 80de 	beq.w	8008df4 <HAL_UART_IRQHandler+0x22c>
 8008c38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c3c:	f003 0301 	and.w	r3, r3, #1
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d106      	bne.n	8008c52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c48:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	f000 80d1 	beq.w	8008df4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c56:	f003 0301 	and.w	r3, r3, #1
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00b      	beq.n	8008c76 <HAL_UART_IRQHandler+0xae>
 8008c5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d005      	beq.n	8008c76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c6e:	f043 0201 	orr.w	r2, r3, #1
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c7a:	f003 0304 	and.w	r3, r3, #4
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d00b      	beq.n	8008c9a <HAL_UART_IRQHandler+0xd2>
 8008c82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c86:	f003 0301 	and.w	r3, r3, #1
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d005      	beq.n	8008c9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c92:	f043 0202 	orr.w	r2, r3, #2
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c9e:	f003 0302 	and.w	r3, r3, #2
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d00b      	beq.n	8008cbe <HAL_UART_IRQHandler+0xf6>
 8008ca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008caa:	f003 0301 	and.w	r3, r3, #1
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d005      	beq.n	8008cbe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb6:	f043 0204 	orr.w	r2, r3, #4
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cc2:	f003 0308 	and.w	r3, r3, #8
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d011      	beq.n	8008cee <HAL_UART_IRQHandler+0x126>
 8008cca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cce:	f003 0320 	and.w	r3, r3, #32
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d105      	bne.n	8008ce2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008cd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008cda:	f003 0301 	and.w	r3, r3, #1
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d005      	beq.n	8008cee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce6:	f043 0208 	orr.w	r2, r3, #8
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	f000 81ed 	beq.w	80090d2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cfc:	f003 0320 	and.w	r3, r3, #32
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d008      	beq.n	8008d16 <HAL_UART_IRQHandler+0x14e>
 8008d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d08:	f003 0320 	and.w	r3, r3, #32
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d002      	beq.n	8008d16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 fb92 	bl	800943a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	695b      	ldr	r3, [r3, #20]
 8008d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d20:	2b40      	cmp	r3, #64	; 0x40
 8008d22:	bf0c      	ite	eq
 8008d24:	2301      	moveq	r3, #1
 8008d26:	2300      	movne	r3, #0
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d32:	f003 0308 	and.w	r3, r3, #8
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d103      	bne.n	8008d42 <HAL_UART_IRQHandler+0x17a>
 8008d3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d04f      	beq.n	8008de2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 fa9a 	bl	800927c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	695b      	ldr	r3, [r3, #20]
 8008d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d52:	2b40      	cmp	r3, #64	; 0x40
 8008d54:	d141      	bne.n	8008dda <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	3314      	adds	r3, #20
 8008d5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008d64:	e853 3f00 	ldrex	r3, [r3]
 8008d68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008d6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	3314      	adds	r3, #20
 8008d7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008d82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008d86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008d8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008d92:	e841 2300 	strex	r3, r2, [r1]
 8008d96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008d9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d1d9      	bne.n	8008d56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d013      	beq.n	8008dd2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dae:	4a7d      	ldr	r2, [pc, #500]	; (8008fa4 <HAL_UART_IRQHandler+0x3dc>)
 8008db0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7fb fe17 	bl	80049ea <HAL_DMA_Abort_IT>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d016      	beq.n	8008df0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008dcc:	4610      	mov	r0, r2
 8008dce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dd0:	e00e      	b.n	8008df0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 f990 	bl	80090f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dd8:	e00a      	b.n	8008df0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 f98c 	bl	80090f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008de0:	e006      	b.n	8008df0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 f988 	bl	80090f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008dee:	e170      	b.n	80090d2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008df0:	bf00      	nop
    return;
 8008df2:	e16e      	b.n	80090d2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	f040 814a 	bne.w	8009092 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e02:	f003 0310 	and.w	r3, r3, #16
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	f000 8143 	beq.w	8009092 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e10:	f003 0310 	and.w	r3, r3, #16
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	f000 813c 	beq.w	8009092 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	60bb      	str	r3, [r7, #8]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	60bb      	str	r3, [r7, #8]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	60bb      	str	r3, [r7, #8]
 8008e2e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	695b      	ldr	r3, [r3, #20]
 8008e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e3a:	2b40      	cmp	r3, #64	; 0x40
 8008e3c:	f040 80b4 	bne.w	8008fa8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008e4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	f000 8140 	beq.w	80090d6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008e5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	f080 8139 	bcs.w	80090d6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008e6a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e70:	69db      	ldr	r3, [r3, #28]
 8008e72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e76:	f000 8088 	beq.w	8008f8a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	330c      	adds	r3, #12
 8008e80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008e88:	e853 3f00 	ldrex	r3, [r3]
 8008e8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008e90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	330c      	adds	r3, #12
 8008ea2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008ea6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008eaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008eb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008eb6:	e841 2300 	strex	r3, r2, [r1]
 8008eba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008ebe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d1d9      	bne.n	8008e7a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	3314      	adds	r3, #20
 8008ecc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ed0:	e853 3f00 	ldrex	r3, [r3]
 8008ed4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008ed6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ed8:	f023 0301 	bic.w	r3, r3, #1
 8008edc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	3314      	adds	r3, #20
 8008ee6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008eea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008eee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008ef2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008ef6:	e841 2300 	strex	r3, r2, [r1]
 8008efa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008efc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d1e1      	bne.n	8008ec6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	3314      	adds	r3, #20
 8008f08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f0c:	e853 3f00 	ldrex	r3, [r3]
 8008f10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008f12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	3314      	adds	r3, #20
 8008f22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008f26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008f28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008f2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008f2e:	e841 2300 	strex	r3, r2, [r1]
 8008f32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008f34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d1e3      	bne.n	8008f02 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2220      	movs	r2, #32
 8008f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	330c      	adds	r3, #12
 8008f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f52:	e853 3f00 	ldrex	r3, [r3]
 8008f56:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f5a:	f023 0310 	bic.w	r3, r3, #16
 8008f5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	330c      	adds	r3, #12
 8008f68:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008f6c:	65ba      	str	r2, [r7, #88]	; 0x58
 8008f6e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008f72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f74:	e841 2300 	strex	r3, r2, [r1]
 8008f78:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008f7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d1e3      	bne.n	8008f48 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f84:	4618      	mov	r0, r3
 8008f86:	f7fb fcc0 	bl	800490a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	1ad3      	subs	r3, r2, r3
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	4619      	mov	r1, r3
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 f8b6 	bl	800910c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008fa0:	e099      	b.n	80090d6 <HAL_UART_IRQHandler+0x50e>
 8008fa2:	bf00      	nop
 8008fa4:	08009343 	.word	0x08009343
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008fb0:	b29b      	uxth	r3, r3
 8008fb2:	1ad3      	subs	r3, r2, r3
 8008fb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	f000 808b 	beq.w	80090da <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008fc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	f000 8086 	beq.w	80090da <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	330c      	adds	r3, #12
 8008fd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd8:	e853 3f00 	ldrex	r3, [r3]
 8008fdc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fe0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008fe4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	330c      	adds	r3, #12
 8008fee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008ff2:	647a      	str	r2, [r7, #68]	; 0x44
 8008ff4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008ff8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ffa:	e841 2300 	strex	r3, r2, [r1]
 8008ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009002:	2b00      	cmp	r3, #0
 8009004:	d1e3      	bne.n	8008fce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	3314      	adds	r3, #20
 800900c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800900e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009010:	e853 3f00 	ldrex	r3, [r3]
 8009014:	623b      	str	r3, [r7, #32]
   return(result);
 8009016:	6a3b      	ldr	r3, [r7, #32]
 8009018:	f023 0301 	bic.w	r3, r3, #1
 800901c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	3314      	adds	r3, #20
 8009026:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800902a:	633a      	str	r2, [r7, #48]	; 0x30
 800902c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800902e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009032:	e841 2300 	strex	r3, r2, [r1]
 8009036:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903a:	2b00      	cmp	r3, #0
 800903c:	d1e3      	bne.n	8009006 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2220      	movs	r2, #32
 8009042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2200      	movs	r2, #0
 800904a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	330c      	adds	r3, #12
 8009052:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	e853 3f00 	ldrex	r3, [r3]
 800905a:	60fb      	str	r3, [r7, #12]
   return(result);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f023 0310 	bic.w	r3, r3, #16
 8009062:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	330c      	adds	r3, #12
 800906c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009070:	61fa      	str	r2, [r7, #28]
 8009072:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009074:	69b9      	ldr	r1, [r7, #24]
 8009076:	69fa      	ldr	r2, [r7, #28]
 8009078:	e841 2300 	strex	r3, r2, [r1]
 800907c:	617b      	str	r3, [r7, #20]
   return(result);
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d1e3      	bne.n	800904c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009084:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009088:	4619      	mov	r1, r3
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 f83e 	bl	800910c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009090:	e023      	b.n	80090da <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800909a:	2b00      	cmp	r3, #0
 800909c:	d009      	beq.n	80090b2 <HAL_UART_IRQHandler+0x4ea>
 800909e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d003      	beq.n	80090b2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 f95d 	bl	800936a <UART_Transmit_IT>
    return;
 80090b0:	e014      	b.n	80090dc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80090b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d00e      	beq.n	80090dc <HAL_UART_IRQHandler+0x514>
 80090be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d008      	beq.n	80090dc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 f99d 	bl	800940a <UART_EndTransmit_IT>
    return;
 80090d0:	e004      	b.n	80090dc <HAL_UART_IRQHandler+0x514>
    return;
 80090d2:	bf00      	nop
 80090d4:	e002      	b.n	80090dc <HAL_UART_IRQHandler+0x514>
      return;
 80090d6:	bf00      	nop
 80090d8:	e000      	b.n	80090dc <HAL_UART_IRQHandler+0x514>
      return;
 80090da:	bf00      	nop
  }
}
 80090dc:	37e8      	adds	r7, #232	; 0xe8
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop

080090e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80090ec:	bf00      	nop
 80090ee:	370c      	adds	r7, #12
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009100:	bf00      	nop
 8009102:	370c      	adds	r7, #12
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	460b      	mov	r3, r1
 8009116:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009118:	bf00      	nop
 800911a:	370c      	adds	r7, #12
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr

08009124 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b090      	sub	sp, #64	; 0x40
 8009128:	af00      	add	r7, sp, #0
 800912a:	60f8      	str	r0, [r7, #12]
 800912c:	60b9      	str	r1, [r7, #8]
 800912e:	603b      	str	r3, [r7, #0]
 8009130:	4613      	mov	r3, r2
 8009132:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009134:	e050      	b.n	80091d8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800913c:	d04c      	beq.n	80091d8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800913e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009140:	2b00      	cmp	r3, #0
 8009142:	d007      	beq.n	8009154 <UART_WaitOnFlagUntilTimeout+0x30>
 8009144:	f7fb f83e 	bl	80041c4 <HAL_GetTick>
 8009148:	4602      	mov	r2, r0
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	1ad3      	subs	r3, r2, r3
 800914e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009150:	429a      	cmp	r2, r3
 8009152:	d241      	bcs.n	80091d8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	330c      	adds	r3, #12
 800915a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800915c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800915e:	e853 3f00 	ldrex	r3, [r3]
 8009162:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009166:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800916a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	330c      	adds	r3, #12
 8009172:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009174:	637a      	str	r2, [r7, #52]	; 0x34
 8009176:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009178:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800917a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800917c:	e841 2300 	strex	r3, r2, [r1]
 8009180:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009184:	2b00      	cmp	r3, #0
 8009186:	d1e5      	bne.n	8009154 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	3314      	adds	r3, #20
 800918e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	e853 3f00 	ldrex	r3, [r3]
 8009196:	613b      	str	r3, [r7, #16]
   return(result);
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	f023 0301 	bic.w	r3, r3, #1
 800919e:	63bb      	str	r3, [r7, #56]	; 0x38
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	3314      	adds	r3, #20
 80091a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091a8:	623a      	str	r2, [r7, #32]
 80091aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ac:	69f9      	ldr	r1, [r7, #28]
 80091ae:	6a3a      	ldr	r2, [r7, #32]
 80091b0:	e841 2300 	strex	r3, r2, [r1]
 80091b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80091b6:	69bb      	ldr	r3, [r7, #24]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d1e5      	bne.n	8009188 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2220      	movs	r2, #32
 80091c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2220      	movs	r2, #32
 80091c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	2200      	movs	r2, #0
 80091d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80091d4:	2303      	movs	r3, #3
 80091d6:	e00f      	b.n	80091f8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	4013      	ands	r3, r2
 80091e2:	68ba      	ldr	r2, [r7, #8]
 80091e4:	429a      	cmp	r2, r3
 80091e6:	bf0c      	ite	eq
 80091e8:	2301      	moveq	r3, #1
 80091ea:	2300      	movne	r3, #0
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	461a      	mov	r2, r3
 80091f0:	79fb      	ldrb	r3, [r7, #7]
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d09f      	beq.n	8009136 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80091f6:	2300      	movs	r3, #0
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3740      	adds	r7, #64	; 0x40
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009200:	b480      	push	{r7}
 8009202:	b085      	sub	sp, #20
 8009204:	af00      	add	r7, sp, #0
 8009206:	60f8      	str	r0, [r7, #12]
 8009208:	60b9      	str	r1, [r7, #8]
 800920a:	4613      	mov	r3, r2
 800920c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	68ba      	ldr	r2, [r7, #8]
 8009212:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	88fa      	ldrh	r2, [r7, #6]
 8009218:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	88fa      	ldrh	r2, [r7, #6]
 800921e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2200      	movs	r2, #0
 8009224:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2222      	movs	r2, #34	; 0x22
 800922a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2200      	movs	r2, #0
 8009232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	691b      	ldr	r3, [r3, #16]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d007      	beq.n	800924e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	68da      	ldr	r2, [r3, #12]
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800924c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	695a      	ldr	r2, [r3, #20]
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f042 0201 	orr.w	r2, r2, #1
 800925c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	68da      	ldr	r2, [r3, #12]
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f042 0220 	orr.w	r2, r2, #32
 800926c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800926e:	2300      	movs	r3, #0
}
 8009270:	4618      	mov	r0, r3
 8009272:	3714      	adds	r7, #20
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr

0800927c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800927c:	b480      	push	{r7}
 800927e:	b095      	sub	sp, #84	; 0x54
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	330c      	adds	r3, #12
 800928a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800928c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800928e:	e853 3f00 	ldrex	r3, [r3]
 8009292:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009296:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800929a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	330c      	adds	r3, #12
 80092a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80092a4:	643a      	str	r2, [r7, #64]	; 0x40
 80092a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80092aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80092ac:	e841 2300 	strex	r3, r2, [r1]
 80092b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80092b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d1e5      	bne.n	8009284 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	3314      	adds	r3, #20
 80092be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c0:	6a3b      	ldr	r3, [r7, #32]
 80092c2:	e853 3f00 	ldrex	r3, [r3]
 80092c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80092c8:	69fb      	ldr	r3, [r7, #28]
 80092ca:	f023 0301 	bic.w	r3, r3, #1
 80092ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	3314      	adds	r3, #20
 80092d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80092da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092e0:	e841 2300 	strex	r3, r2, [r1]
 80092e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80092e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d1e5      	bne.n	80092b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092f0:	2b01      	cmp	r3, #1
 80092f2:	d119      	bne.n	8009328 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	330c      	adds	r3, #12
 80092fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	e853 3f00 	ldrex	r3, [r3]
 8009302:	60bb      	str	r3, [r7, #8]
   return(result);
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	f023 0310 	bic.w	r3, r3, #16
 800930a:	647b      	str	r3, [r7, #68]	; 0x44
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	330c      	adds	r3, #12
 8009312:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009314:	61ba      	str	r2, [r7, #24]
 8009316:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009318:	6979      	ldr	r1, [r7, #20]
 800931a:	69ba      	ldr	r2, [r7, #24]
 800931c:	e841 2300 	strex	r3, r2, [r1]
 8009320:	613b      	str	r3, [r7, #16]
   return(result);
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d1e5      	bne.n	80092f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2220      	movs	r2, #32
 800932c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009336:	bf00      	nop
 8009338:	3754      	adds	r7, #84	; 0x54
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr

08009342 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b084      	sub	sp, #16
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800934e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2200      	movs	r2, #0
 8009354:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2200      	movs	r2, #0
 800935a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	f7ff fecb 	bl	80090f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009362:	bf00      	nop
 8009364:	3710      	adds	r7, #16
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}

0800936a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800936a:	b480      	push	{r7}
 800936c:	b085      	sub	sp, #20
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009378:	b2db      	uxtb	r3, r3
 800937a:	2b21      	cmp	r3, #33	; 0x21
 800937c:	d13e      	bne.n	80093fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009386:	d114      	bne.n	80093b2 <UART_Transmit_IT+0x48>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	691b      	ldr	r3, [r3, #16]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d110      	bne.n	80093b2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6a1b      	ldr	r3, [r3, #32]
 8009394:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	881b      	ldrh	r3, [r3, #0]
 800939a:	461a      	mov	r2, r3
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80093a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6a1b      	ldr	r3, [r3, #32]
 80093aa:	1c9a      	adds	r2, r3, #2
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	621a      	str	r2, [r3, #32]
 80093b0:	e008      	b.n	80093c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6a1b      	ldr	r3, [r3, #32]
 80093b6:	1c59      	adds	r1, r3, #1
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	6211      	str	r1, [r2, #32]
 80093bc:	781a      	ldrb	r2, [r3, #0]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80093c8:	b29b      	uxth	r3, r3
 80093ca:	3b01      	subs	r3, #1
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	4619      	mov	r1, r3
 80093d2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d10f      	bne.n	80093f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	68da      	ldr	r2, [r3, #12]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80093e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	68da      	ldr	r2, [r3, #12]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80093f8:	2300      	movs	r3, #0
 80093fa:	e000      	b.n	80093fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80093fc:	2302      	movs	r3, #2
  }
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3714      	adds	r7, #20
 8009402:	46bd      	mov	sp, r7
 8009404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009408:	4770      	bx	lr

0800940a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800940a:	b580      	push	{r7, lr}
 800940c:	b082      	sub	sp, #8
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	68da      	ldr	r2, [r3, #12]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009420:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2220      	movs	r2, #32
 8009426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f7ff fe5a 	bl	80090e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009430:	2300      	movs	r3, #0
}
 8009432:	4618      	mov	r0, r3
 8009434:	3708      	adds	r7, #8
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800943a:	b580      	push	{r7, lr}
 800943c:	b08c      	sub	sp, #48	; 0x30
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009448:	b2db      	uxtb	r3, r3
 800944a:	2b22      	cmp	r3, #34	; 0x22
 800944c:	f040 80ab 	bne.w	80095a6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	689b      	ldr	r3, [r3, #8]
 8009454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009458:	d117      	bne.n	800948a <UART_Receive_IT+0x50>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	691b      	ldr	r3, [r3, #16]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d113      	bne.n	800948a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009462:	2300      	movs	r3, #0
 8009464:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800946a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	b29b      	uxth	r3, r3
 8009474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009478:	b29a      	uxth	r2, r3
 800947a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800947c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009482:	1c9a      	adds	r2, r3, #2
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	629a      	str	r2, [r3, #40]	; 0x28
 8009488:	e026      	b.n	80094d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800948e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009490:	2300      	movs	r3, #0
 8009492:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	689b      	ldr	r3, [r3, #8]
 8009498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800949c:	d007      	beq.n	80094ae <UART_Receive_IT+0x74>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d10a      	bne.n	80094bc <UART_Receive_IT+0x82>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	691b      	ldr	r3, [r3, #16]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d106      	bne.n	80094bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	b2da      	uxtb	r2, r3
 80094b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094b8:	701a      	strb	r2, [r3, #0]
 80094ba:	e008      	b.n	80094ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	b2db      	uxtb	r3, r3
 80094c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094c8:	b2da      	uxtb	r2, r3
 80094ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094d2:	1c5a      	adds	r2, r3, #1
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80094dc:	b29b      	uxth	r3, r3
 80094de:	3b01      	subs	r3, #1
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	4619      	mov	r1, r3
 80094e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d15a      	bne.n	80095a2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	68da      	ldr	r2, [r3, #12]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f022 0220 	bic.w	r2, r2, #32
 80094fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	68da      	ldr	r2, [r3, #12]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800950a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	695a      	ldr	r2, [r3, #20]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f022 0201 	bic.w	r2, r2, #1
 800951a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2220      	movs	r2, #32
 8009520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009528:	2b01      	cmp	r3, #1
 800952a:	d135      	bne.n	8009598 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2200      	movs	r2, #0
 8009530:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	330c      	adds	r3, #12
 8009538:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	e853 3f00 	ldrex	r3, [r3]
 8009540:	613b      	str	r3, [r7, #16]
   return(result);
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	f023 0310 	bic.w	r3, r3, #16
 8009548:	627b      	str	r3, [r7, #36]	; 0x24
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	330c      	adds	r3, #12
 8009550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009552:	623a      	str	r2, [r7, #32]
 8009554:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009556:	69f9      	ldr	r1, [r7, #28]
 8009558:	6a3a      	ldr	r2, [r7, #32]
 800955a:	e841 2300 	strex	r3, r2, [r1]
 800955e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009560:	69bb      	ldr	r3, [r7, #24]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d1e5      	bne.n	8009532 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f003 0310 	and.w	r3, r3, #16
 8009570:	2b10      	cmp	r3, #16
 8009572:	d10a      	bne.n	800958a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009574:	2300      	movs	r3, #0
 8009576:	60fb      	str	r3, [r7, #12]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	60fb      	str	r3, [r7, #12]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	60fb      	str	r3, [r7, #12]
 8009588:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800958e:	4619      	mov	r1, r3
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f7ff fdbb 	bl	800910c <HAL_UARTEx_RxEventCallback>
 8009596:	e002      	b.n	800959e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f7f8 fa19 	bl	80019d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800959e:	2300      	movs	r3, #0
 80095a0:	e002      	b.n	80095a8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80095a2:	2300      	movs	r3, #0
 80095a4:	e000      	b.n	80095a8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80095a6:	2302      	movs	r3, #2
  }
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3730      	adds	r7, #48	; 0x30
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80095b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80095b4:	b0c0      	sub	sp, #256	; 0x100
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80095bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	691b      	ldr	r3, [r3, #16]
 80095c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80095c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095cc:	68d9      	ldr	r1, [r3, #12]
 80095ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	ea40 0301 	orr.w	r3, r0, r1
 80095d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80095da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095de:	689a      	ldr	r2, [r3, #8]
 80095e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095e4:	691b      	ldr	r3, [r3, #16]
 80095e6:	431a      	orrs	r2, r3
 80095e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095ec:	695b      	ldr	r3, [r3, #20]
 80095ee:	431a      	orrs	r2, r3
 80095f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095f4:	69db      	ldr	r3, [r3, #28]
 80095f6:	4313      	orrs	r3, r2
 80095f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80095fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009608:	f021 010c 	bic.w	r1, r1, #12
 800960c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009616:	430b      	orrs	r3, r1
 8009618:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800961a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	695b      	ldr	r3, [r3, #20]
 8009622:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800962a:	6999      	ldr	r1, [r3, #24]
 800962c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	ea40 0301 	orr.w	r3, r0, r1
 8009636:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800963c:	681a      	ldr	r2, [r3, #0]
 800963e:	4b8f      	ldr	r3, [pc, #572]	; (800987c <UART_SetConfig+0x2cc>)
 8009640:	429a      	cmp	r2, r3
 8009642:	d005      	beq.n	8009650 <UART_SetConfig+0xa0>
 8009644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	4b8d      	ldr	r3, [pc, #564]	; (8009880 <UART_SetConfig+0x2d0>)
 800964c:	429a      	cmp	r2, r3
 800964e:	d104      	bne.n	800965a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009650:	f7fd fc50 	bl	8006ef4 <HAL_RCC_GetPCLK2Freq>
 8009654:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009658:	e003      	b.n	8009662 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800965a:	f7fd fc37 	bl	8006ecc <HAL_RCC_GetPCLK1Freq>
 800965e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009666:	69db      	ldr	r3, [r3, #28]
 8009668:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800966c:	f040 810c 	bne.w	8009888 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009670:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009674:	2200      	movs	r2, #0
 8009676:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800967a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800967e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009682:	4622      	mov	r2, r4
 8009684:	462b      	mov	r3, r5
 8009686:	1891      	adds	r1, r2, r2
 8009688:	65b9      	str	r1, [r7, #88]	; 0x58
 800968a:	415b      	adcs	r3, r3
 800968c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800968e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009692:	4621      	mov	r1, r4
 8009694:	eb12 0801 	adds.w	r8, r2, r1
 8009698:	4629      	mov	r1, r5
 800969a:	eb43 0901 	adc.w	r9, r3, r1
 800969e:	f04f 0200 	mov.w	r2, #0
 80096a2:	f04f 0300 	mov.w	r3, #0
 80096a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80096aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80096ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80096b2:	4690      	mov	r8, r2
 80096b4:	4699      	mov	r9, r3
 80096b6:	4623      	mov	r3, r4
 80096b8:	eb18 0303 	adds.w	r3, r8, r3
 80096bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80096c0:	462b      	mov	r3, r5
 80096c2:	eb49 0303 	adc.w	r3, r9, r3
 80096c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80096ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	2200      	movs	r2, #0
 80096d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80096d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80096da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80096de:	460b      	mov	r3, r1
 80096e0:	18db      	adds	r3, r3, r3
 80096e2:	653b      	str	r3, [r7, #80]	; 0x50
 80096e4:	4613      	mov	r3, r2
 80096e6:	eb42 0303 	adc.w	r3, r2, r3
 80096ea:	657b      	str	r3, [r7, #84]	; 0x54
 80096ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80096f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80096f4:	f7f7 fac8 	bl	8000c88 <__aeabi_uldivmod>
 80096f8:	4602      	mov	r2, r0
 80096fa:	460b      	mov	r3, r1
 80096fc:	4b61      	ldr	r3, [pc, #388]	; (8009884 <UART_SetConfig+0x2d4>)
 80096fe:	fba3 2302 	umull	r2, r3, r3, r2
 8009702:	095b      	lsrs	r3, r3, #5
 8009704:	011c      	lsls	r4, r3, #4
 8009706:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800970a:	2200      	movs	r2, #0
 800970c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009710:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009714:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009718:	4642      	mov	r2, r8
 800971a:	464b      	mov	r3, r9
 800971c:	1891      	adds	r1, r2, r2
 800971e:	64b9      	str	r1, [r7, #72]	; 0x48
 8009720:	415b      	adcs	r3, r3
 8009722:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009724:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009728:	4641      	mov	r1, r8
 800972a:	eb12 0a01 	adds.w	sl, r2, r1
 800972e:	4649      	mov	r1, r9
 8009730:	eb43 0b01 	adc.w	fp, r3, r1
 8009734:	f04f 0200 	mov.w	r2, #0
 8009738:	f04f 0300 	mov.w	r3, #0
 800973c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009740:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009744:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009748:	4692      	mov	sl, r2
 800974a:	469b      	mov	fp, r3
 800974c:	4643      	mov	r3, r8
 800974e:	eb1a 0303 	adds.w	r3, sl, r3
 8009752:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009756:	464b      	mov	r3, r9
 8009758:	eb4b 0303 	adc.w	r3, fp, r3
 800975c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	2200      	movs	r2, #0
 8009768:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800976c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009770:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009774:	460b      	mov	r3, r1
 8009776:	18db      	adds	r3, r3, r3
 8009778:	643b      	str	r3, [r7, #64]	; 0x40
 800977a:	4613      	mov	r3, r2
 800977c:	eb42 0303 	adc.w	r3, r2, r3
 8009780:	647b      	str	r3, [r7, #68]	; 0x44
 8009782:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009786:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800978a:	f7f7 fa7d 	bl	8000c88 <__aeabi_uldivmod>
 800978e:	4602      	mov	r2, r0
 8009790:	460b      	mov	r3, r1
 8009792:	4611      	mov	r1, r2
 8009794:	4b3b      	ldr	r3, [pc, #236]	; (8009884 <UART_SetConfig+0x2d4>)
 8009796:	fba3 2301 	umull	r2, r3, r3, r1
 800979a:	095b      	lsrs	r3, r3, #5
 800979c:	2264      	movs	r2, #100	; 0x64
 800979e:	fb02 f303 	mul.w	r3, r2, r3
 80097a2:	1acb      	subs	r3, r1, r3
 80097a4:	00db      	lsls	r3, r3, #3
 80097a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80097aa:	4b36      	ldr	r3, [pc, #216]	; (8009884 <UART_SetConfig+0x2d4>)
 80097ac:	fba3 2302 	umull	r2, r3, r3, r2
 80097b0:	095b      	lsrs	r3, r3, #5
 80097b2:	005b      	lsls	r3, r3, #1
 80097b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80097b8:	441c      	add	r4, r3
 80097ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097be:	2200      	movs	r2, #0
 80097c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80097c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80097c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80097cc:	4642      	mov	r2, r8
 80097ce:	464b      	mov	r3, r9
 80097d0:	1891      	adds	r1, r2, r2
 80097d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80097d4:	415b      	adcs	r3, r3
 80097d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80097dc:	4641      	mov	r1, r8
 80097de:	1851      	adds	r1, r2, r1
 80097e0:	6339      	str	r1, [r7, #48]	; 0x30
 80097e2:	4649      	mov	r1, r9
 80097e4:	414b      	adcs	r3, r1
 80097e6:	637b      	str	r3, [r7, #52]	; 0x34
 80097e8:	f04f 0200 	mov.w	r2, #0
 80097ec:	f04f 0300 	mov.w	r3, #0
 80097f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80097f4:	4659      	mov	r1, fp
 80097f6:	00cb      	lsls	r3, r1, #3
 80097f8:	4651      	mov	r1, sl
 80097fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80097fe:	4651      	mov	r1, sl
 8009800:	00ca      	lsls	r2, r1, #3
 8009802:	4610      	mov	r0, r2
 8009804:	4619      	mov	r1, r3
 8009806:	4603      	mov	r3, r0
 8009808:	4642      	mov	r2, r8
 800980a:	189b      	adds	r3, r3, r2
 800980c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009810:	464b      	mov	r3, r9
 8009812:	460a      	mov	r2, r1
 8009814:	eb42 0303 	adc.w	r3, r2, r3
 8009818:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800981c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	2200      	movs	r2, #0
 8009824:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009828:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800982c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009830:	460b      	mov	r3, r1
 8009832:	18db      	adds	r3, r3, r3
 8009834:	62bb      	str	r3, [r7, #40]	; 0x28
 8009836:	4613      	mov	r3, r2
 8009838:	eb42 0303 	adc.w	r3, r2, r3
 800983c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800983e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009842:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009846:	f7f7 fa1f 	bl	8000c88 <__aeabi_uldivmod>
 800984a:	4602      	mov	r2, r0
 800984c:	460b      	mov	r3, r1
 800984e:	4b0d      	ldr	r3, [pc, #52]	; (8009884 <UART_SetConfig+0x2d4>)
 8009850:	fba3 1302 	umull	r1, r3, r3, r2
 8009854:	095b      	lsrs	r3, r3, #5
 8009856:	2164      	movs	r1, #100	; 0x64
 8009858:	fb01 f303 	mul.w	r3, r1, r3
 800985c:	1ad3      	subs	r3, r2, r3
 800985e:	00db      	lsls	r3, r3, #3
 8009860:	3332      	adds	r3, #50	; 0x32
 8009862:	4a08      	ldr	r2, [pc, #32]	; (8009884 <UART_SetConfig+0x2d4>)
 8009864:	fba2 2303 	umull	r2, r3, r2, r3
 8009868:	095b      	lsrs	r3, r3, #5
 800986a:	f003 0207 	and.w	r2, r3, #7
 800986e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4422      	add	r2, r4
 8009876:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009878:	e105      	b.n	8009a86 <UART_SetConfig+0x4d6>
 800987a:	bf00      	nop
 800987c:	40011000 	.word	0x40011000
 8009880:	40011400 	.word	0x40011400
 8009884:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009888:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800988c:	2200      	movs	r2, #0
 800988e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009892:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009896:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800989a:	4642      	mov	r2, r8
 800989c:	464b      	mov	r3, r9
 800989e:	1891      	adds	r1, r2, r2
 80098a0:	6239      	str	r1, [r7, #32]
 80098a2:	415b      	adcs	r3, r3
 80098a4:	627b      	str	r3, [r7, #36]	; 0x24
 80098a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80098aa:	4641      	mov	r1, r8
 80098ac:	1854      	adds	r4, r2, r1
 80098ae:	4649      	mov	r1, r9
 80098b0:	eb43 0501 	adc.w	r5, r3, r1
 80098b4:	f04f 0200 	mov.w	r2, #0
 80098b8:	f04f 0300 	mov.w	r3, #0
 80098bc:	00eb      	lsls	r3, r5, #3
 80098be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80098c2:	00e2      	lsls	r2, r4, #3
 80098c4:	4614      	mov	r4, r2
 80098c6:	461d      	mov	r5, r3
 80098c8:	4643      	mov	r3, r8
 80098ca:	18e3      	adds	r3, r4, r3
 80098cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80098d0:	464b      	mov	r3, r9
 80098d2:	eb45 0303 	adc.w	r3, r5, r3
 80098d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80098da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	2200      	movs	r2, #0
 80098e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80098e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80098ea:	f04f 0200 	mov.w	r2, #0
 80098ee:	f04f 0300 	mov.w	r3, #0
 80098f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80098f6:	4629      	mov	r1, r5
 80098f8:	008b      	lsls	r3, r1, #2
 80098fa:	4621      	mov	r1, r4
 80098fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009900:	4621      	mov	r1, r4
 8009902:	008a      	lsls	r2, r1, #2
 8009904:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009908:	f7f7 f9be 	bl	8000c88 <__aeabi_uldivmod>
 800990c:	4602      	mov	r2, r0
 800990e:	460b      	mov	r3, r1
 8009910:	4b60      	ldr	r3, [pc, #384]	; (8009a94 <UART_SetConfig+0x4e4>)
 8009912:	fba3 2302 	umull	r2, r3, r3, r2
 8009916:	095b      	lsrs	r3, r3, #5
 8009918:	011c      	lsls	r4, r3, #4
 800991a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800991e:	2200      	movs	r2, #0
 8009920:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009924:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009928:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800992c:	4642      	mov	r2, r8
 800992e:	464b      	mov	r3, r9
 8009930:	1891      	adds	r1, r2, r2
 8009932:	61b9      	str	r1, [r7, #24]
 8009934:	415b      	adcs	r3, r3
 8009936:	61fb      	str	r3, [r7, #28]
 8009938:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800993c:	4641      	mov	r1, r8
 800993e:	1851      	adds	r1, r2, r1
 8009940:	6139      	str	r1, [r7, #16]
 8009942:	4649      	mov	r1, r9
 8009944:	414b      	adcs	r3, r1
 8009946:	617b      	str	r3, [r7, #20]
 8009948:	f04f 0200 	mov.w	r2, #0
 800994c:	f04f 0300 	mov.w	r3, #0
 8009950:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009954:	4659      	mov	r1, fp
 8009956:	00cb      	lsls	r3, r1, #3
 8009958:	4651      	mov	r1, sl
 800995a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800995e:	4651      	mov	r1, sl
 8009960:	00ca      	lsls	r2, r1, #3
 8009962:	4610      	mov	r0, r2
 8009964:	4619      	mov	r1, r3
 8009966:	4603      	mov	r3, r0
 8009968:	4642      	mov	r2, r8
 800996a:	189b      	adds	r3, r3, r2
 800996c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009970:	464b      	mov	r3, r9
 8009972:	460a      	mov	r2, r1
 8009974:	eb42 0303 	adc.w	r3, r2, r3
 8009978:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800997c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	2200      	movs	r2, #0
 8009984:	67bb      	str	r3, [r7, #120]	; 0x78
 8009986:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009988:	f04f 0200 	mov.w	r2, #0
 800998c:	f04f 0300 	mov.w	r3, #0
 8009990:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009994:	4649      	mov	r1, r9
 8009996:	008b      	lsls	r3, r1, #2
 8009998:	4641      	mov	r1, r8
 800999a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800999e:	4641      	mov	r1, r8
 80099a0:	008a      	lsls	r2, r1, #2
 80099a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80099a6:	f7f7 f96f 	bl	8000c88 <__aeabi_uldivmod>
 80099aa:	4602      	mov	r2, r0
 80099ac:	460b      	mov	r3, r1
 80099ae:	4b39      	ldr	r3, [pc, #228]	; (8009a94 <UART_SetConfig+0x4e4>)
 80099b0:	fba3 1302 	umull	r1, r3, r3, r2
 80099b4:	095b      	lsrs	r3, r3, #5
 80099b6:	2164      	movs	r1, #100	; 0x64
 80099b8:	fb01 f303 	mul.w	r3, r1, r3
 80099bc:	1ad3      	subs	r3, r2, r3
 80099be:	011b      	lsls	r3, r3, #4
 80099c0:	3332      	adds	r3, #50	; 0x32
 80099c2:	4a34      	ldr	r2, [pc, #208]	; (8009a94 <UART_SetConfig+0x4e4>)
 80099c4:	fba2 2303 	umull	r2, r3, r2, r3
 80099c8:	095b      	lsrs	r3, r3, #5
 80099ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099ce:	441c      	add	r4, r3
 80099d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099d4:	2200      	movs	r2, #0
 80099d6:	673b      	str	r3, [r7, #112]	; 0x70
 80099d8:	677a      	str	r2, [r7, #116]	; 0x74
 80099da:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80099de:	4642      	mov	r2, r8
 80099e0:	464b      	mov	r3, r9
 80099e2:	1891      	adds	r1, r2, r2
 80099e4:	60b9      	str	r1, [r7, #8]
 80099e6:	415b      	adcs	r3, r3
 80099e8:	60fb      	str	r3, [r7, #12]
 80099ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80099ee:	4641      	mov	r1, r8
 80099f0:	1851      	adds	r1, r2, r1
 80099f2:	6039      	str	r1, [r7, #0]
 80099f4:	4649      	mov	r1, r9
 80099f6:	414b      	adcs	r3, r1
 80099f8:	607b      	str	r3, [r7, #4]
 80099fa:	f04f 0200 	mov.w	r2, #0
 80099fe:	f04f 0300 	mov.w	r3, #0
 8009a02:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009a06:	4659      	mov	r1, fp
 8009a08:	00cb      	lsls	r3, r1, #3
 8009a0a:	4651      	mov	r1, sl
 8009a0c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a10:	4651      	mov	r1, sl
 8009a12:	00ca      	lsls	r2, r1, #3
 8009a14:	4610      	mov	r0, r2
 8009a16:	4619      	mov	r1, r3
 8009a18:	4603      	mov	r3, r0
 8009a1a:	4642      	mov	r2, r8
 8009a1c:	189b      	adds	r3, r3, r2
 8009a1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a20:	464b      	mov	r3, r9
 8009a22:	460a      	mov	r2, r1
 8009a24:	eb42 0303 	adc.w	r3, r2, r3
 8009a28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	2200      	movs	r2, #0
 8009a32:	663b      	str	r3, [r7, #96]	; 0x60
 8009a34:	667a      	str	r2, [r7, #100]	; 0x64
 8009a36:	f04f 0200 	mov.w	r2, #0
 8009a3a:	f04f 0300 	mov.w	r3, #0
 8009a3e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009a42:	4649      	mov	r1, r9
 8009a44:	008b      	lsls	r3, r1, #2
 8009a46:	4641      	mov	r1, r8
 8009a48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a4c:	4641      	mov	r1, r8
 8009a4e:	008a      	lsls	r2, r1, #2
 8009a50:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009a54:	f7f7 f918 	bl	8000c88 <__aeabi_uldivmod>
 8009a58:	4602      	mov	r2, r0
 8009a5a:	460b      	mov	r3, r1
 8009a5c:	4b0d      	ldr	r3, [pc, #52]	; (8009a94 <UART_SetConfig+0x4e4>)
 8009a5e:	fba3 1302 	umull	r1, r3, r3, r2
 8009a62:	095b      	lsrs	r3, r3, #5
 8009a64:	2164      	movs	r1, #100	; 0x64
 8009a66:	fb01 f303 	mul.w	r3, r1, r3
 8009a6a:	1ad3      	subs	r3, r2, r3
 8009a6c:	011b      	lsls	r3, r3, #4
 8009a6e:	3332      	adds	r3, #50	; 0x32
 8009a70:	4a08      	ldr	r2, [pc, #32]	; (8009a94 <UART_SetConfig+0x4e4>)
 8009a72:	fba2 2303 	umull	r2, r3, r2, r3
 8009a76:	095b      	lsrs	r3, r3, #5
 8009a78:	f003 020f 	and.w	r2, r3, #15
 8009a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4422      	add	r2, r4
 8009a84:	609a      	str	r2, [r3, #8]
}
 8009a86:	bf00      	nop
 8009a88:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a92:	bf00      	nop
 8009a94:	51eb851f 	.word	0x51eb851f

08009a98 <__errno>:
 8009a98:	4b01      	ldr	r3, [pc, #4]	; (8009aa0 <__errno+0x8>)
 8009a9a:	6818      	ldr	r0, [r3, #0]
 8009a9c:	4770      	bx	lr
 8009a9e:	bf00      	nop
 8009aa0:	2000028c 	.word	0x2000028c

08009aa4 <__libc_init_array>:
 8009aa4:	b570      	push	{r4, r5, r6, lr}
 8009aa6:	4d0d      	ldr	r5, [pc, #52]	; (8009adc <__libc_init_array+0x38>)
 8009aa8:	4c0d      	ldr	r4, [pc, #52]	; (8009ae0 <__libc_init_array+0x3c>)
 8009aaa:	1b64      	subs	r4, r4, r5
 8009aac:	10a4      	asrs	r4, r4, #2
 8009aae:	2600      	movs	r6, #0
 8009ab0:	42a6      	cmp	r6, r4
 8009ab2:	d109      	bne.n	8009ac8 <__libc_init_array+0x24>
 8009ab4:	4d0b      	ldr	r5, [pc, #44]	; (8009ae4 <__libc_init_array+0x40>)
 8009ab6:	4c0c      	ldr	r4, [pc, #48]	; (8009ae8 <__libc_init_array+0x44>)
 8009ab8:	f005 f8ac 	bl	800ec14 <_init>
 8009abc:	1b64      	subs	r4, r4, r5
 8009abe:	10a4      	asrs	r4, r4, #2
 8009ac0:	2600      	movs	r6, #0
 8009ac2:	42a6      	cmp	r6, r4
 8009ac4:	d105      	bne.n	8009ad2 <__libc_init_array+0x2e>
 8009ac6:	bd70      	pop	{r4, r5, r6, pc}
 8009ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009acc:	4798      	blx	r3
 8009ace:	3601      	adds	r6, #1
 8009ad0:	e7ee      	b.n	8009ab0 <__libc_init_array+0xc>
 8009ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ad6:	4798      	blx	r3
 8009ad8:	3601      	adds	r6, #1
 8009ada:	e7f2      	b.n	8009ac2 <__libc_init_array+0x1e>
 8009adc:	0800f3f8 	.word	0x0800f3f8
 8009ae0:	0800f3f8 	.word	0x0800f3f8
 8009ae4:	0800f3f8 	.word	0x0800f3f8
 8009ae8:	0800f3fc 	.word	0x0800f3fc

08009aec <memset>:
 8009aec:	4402      	add	r2, r0
 8009aee:	4603      	mov	r3, r0
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d100      	bne.n	8009af6 <memset+0xa>
 8009af4:	4770      	bx	lr
 8009af6:	f803 1b01 	strb.w	r1, [r3], #1
 8009afa:	e7f9      	b.n	8009af0 <memset+0x4>

08009afc <__cvt>:
 8009afc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b00:	ec55 4b10 	vmov	r4, r5, d0
 8009b04:	2d00      	cmp	r5, #0
 8009b06:	460e      	mov	r6, r1
 8009b08:	4619      	mov	r1, r3
 8009b0a:	462b      	mov	r3, r5
 8009b0c:	bfbb      	ittet	lt
 8009b0e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009b12:	461d      	movlt	r5, r3
 8009b14:	2300      	movge	r3, #0
 8009b16:	232d      	movlt	r3, #45	; 0x2d
 8009b18:	700b      	strb	r3, [r1, #0]
 8009b1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b1c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009b20:	4691      	mov	r9, r2
 8009b22:	f023 0820 	bic.w	r8, r3, #32
 8009b26:	bfbc      	itt	lt
 8009b28:	4622      	movlt	r2, r4
 8009b2a:	4614      	movlt	r4, r2
 8009b2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009b30:	d005      	beq.n	8009b3e <__cvt+0x42>
 8009b32:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009b36:	d100      	bne.n	8009b3a <__cvt+0x3e>
 8009b38:	3601      	adds	r6, #1
 8009b3a:	2102      	movs	r1, #2
 8009b3c:	e000      	b.n	8009b40 <__cvt+0x44>
 8009b3e:	2103      	movs	r1, #3
 8009b40:	ab03      	add	r3, sp, #12
 8009b42:	9301      	str	r3, [sp, #4]
 8009b44:	ab02      	add	r3, sp, #8
 8009b46:	9300      	str	r3, [sp, #0]
 8009b48:	ec45 4b10 	vmov	d0, r4, r5
 8009b4c:	4653      	mov	r3, sl
 8009b4e:	4632      	mov	r2, r6
 8009b50:	f001 fdae 	bl	800b6b0 <_dtoa_r>
 8009b54:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009b58:	4607      	mov	r7, r0
 8009b5a:	d102      	bne.n	8009b62 <__cvt+0x66>
 8009b5c:	f019 0f01 	tst.w	r9, #1
 8009b60:	d022      	beq.n	8009ba8 <__cvt+0xac>
 8009b62:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009b66:	eb07 0906 	add.w	r9, r7, r6
 8009b6a:	d110      	bne.n	8009b8e <__cvt+0x92>
 8009b6c:	783b      	ldrb	r3, [r7, #0]
 8009b6e:	2b30      	cmp	r3, #48	; 0x30
 8009b70:	d10a      	bne.n	8009b88 <__cvt+0x8c>
 8009b72:	2200      	movs	r2, #0
 8009b74:	2300      	movs	r3, #0
 8009b76:	4620      	mov	r0, r4
 8009b78:	4629      	mov	r1, r5
 8009b7a:	f7f6 ffa5 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b7e:	b918      	cbnz	r0, 8009b88 <__cvt+0x8c>
 8009b80:	f1c6 0601 	rsb	r6, r6, #1
 8009b84:	f8ca 6000 	str.w	r6, [sl]
 8009b88:	f8da 3000 	ldr.w	r3, [sl]
 8009b8c:	4499      	add	r9, r3
 8009b8e:	2200      	movs	r2, #0
 8009b90:	2300      	movs	r3, #0
 8009b92:	4620      	mov	r0, r4
 8009b94:	4629      	mov	r1, r5
 8009b96:	f7f6 ff97 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b9a:	b108      	cbz	r0, 8009ba0 <__cvt+0xa4>
 8009b9c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009ba0:	2230      	movs	r2, #48	; 0x30
 8009ba2:	9b03      	ldr	r3, [sp, #12]
 8009ba4:	454b      	cmp	r3, r9
 8009ba6:	d307      	bcc.n	8009bb8 <__cvt+0xbc>
 8009ba8:	9b03      	ldr	r3, [sp, #12]
 8009baa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009bac:	1bdb      	subs	r3, r3, r7
 8009bae:	4638      	mov	r0, r7
 8009bb0:	6013      	str	r3, [r2, #0]
 8009bb2:	b004      	add	sp, #16
 8009bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bb8:	1c59      	adds	r1, r3, #1
 8009bba:	9103      	str	r1, [sp, #12]
 8009bbc:	701a      	strb	r2, [r3, #0]
 8009bbe:	e7f0      	b.n	8009ba2 <__cvt+0xa6>

08009bc0 <__exponent>:
 8009bc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	2900      	cmp	r1, #0
 8009bc6:	bfb8      	it	lt
 8009bc8:	4249      	neglt	r1, r1
 8009bca:	f803 2b02 	strb.w	r2, [r3], #2
 8009bce:	bfb4      	ite	lt
 8009bd0:	222d      	movlt	r2, #45	; 0x2d
 8009bd2:	222b      	movge	r2, #43	; 0x2b
 8009bd4:	2909      	cmp	r1, #9
 8009bd6:	7042      	strb	r2, [r0, #1]
 8009bd8:	dd2a      	ble.n	8009c30 <__exponent+0x70>
 8009bda:	f10d 0407 	add.w	r4, sp, #7
 8009bde:	46a4      	mov	ip, r4
 8009be0:	270a      	movs	r7, #10
 8009be2:	46a6      	mov	lr, r4
 8009be4:	460a      	mov	r2, r1
 8009be6:	fb91 f6f7 	sdiv	r6, r1, r7
 8009bea:	fb07 1516 	mls	r5, r7, r6, r1
 8009bee:	3530      	adds	r5, #48	; 0x30
 8009bf0:	2a63      	cmp	r2, #99	; 0x63
 8009bf2:	f104 34ff 	add.w	r4, r4, #4294967295
 8009bf6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009bfa:	4631      	mov	r1, r6
 8009bfc:	dcf1      	bgt.n	8009be2 <__exponent+0x22>
 8009bfe:	3130      	adds	r1, #48	; 0x30
 8009c00:	f1ae 0502 	sub.w	r5, lr, #2
 8009c04:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009c08:	1c44      	adds	r4, r0, #1
 8009c0a:	4629      	mov	r1, r5
 8009c0c:	4561      	cmp	r1, ip
 8009c0e:	d30a      	bcc.n	8009c26 <__exponent+0x66>
 8009c10:	f10d 0209 	add.w	r2, sp, #9
 8009c14:	eba2 020e 	sub.w	r2, r2, lr
 8009c18:	4565      	cmp	r5, ip
 8009c1a:	bf88      	it	hi
 8009c1c:	2200      	movhi	r2, #0
 8009c1e:	4413      	add	r3, r2
 8009c20:	1a18      	subs	r0, r3, r0
 8009c22:	b003      	add	sp, #12
 8009c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c2a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009c2e:	e7ed      	b.n	8009c0c <__exponent+0x4c>
 8009c30:	2330      	movs	r3, #48	; 0x30
 8009c32:	3130      	adds	r1, #48	; 0x30
 8009c34:	7083      	strb	r3, [r0, #2]
 8009c36:	70c1      	strb	r1, [r0, #3]
 8009c38:	1d03      	adds	r3, r0, #4
 8009c3a:	e7f1      	b.n	8009c20 <__exponent+0x60>

08009c3c <_printf_float>:
 8009c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c40:	ed2d 8b02 	vpush	{d8}
 8009c44:	b08d      	sub	sp, #52	; 0x34
 8009c46:	460c      	mov	r4, r1
 8009c48:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009c4c:	4616      	mov	r6, r2
 8009c4e:	461f      	mov	r7, r3
 8009c50:	4605      	mov	r5, r0
 8009c52:	f002 fe8b 	bl	800c96c <_localeconv_r>
 8009c56:	f8d0 a000 	ldr.w	sl, [r0]
 8009c5a:	4650      	mov	r0, sl
 8009c5c:	f7f6 fab8 	bl	80001d0 <strlen>
 8009c60:	2300      	movs	r3, #0
 8009c62:	930a      	str	r3, [sp, #40]	; 0x28
 8009c64:	6823      	ldr	r3, [r4, #0]
 8009c66:	9305      	str	r3, [sp, #20]
 8009c68:	f8d8 3000 	ldr.w	r3, [r8]
 8009c6c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009c70:	3307      	adds	r3, #7
 8009c72:	f023 0307 	bic.w	r3, r3, #7
 8009c76:	f103 0208 	add.w	r2, r3, #8
 8009c7a:	f8c8 2000 	str.w	r2, [r8]
 8009c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c82:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009c86:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009c8a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009c8e:	9307      	str	r3, [sp, #28]
 8009c90:	f8cd 8018 	str.w	r8, [sp, #24]
 8009c94:	ee08 0a10 	vmov	s16, r0
 8009c98:	4b9f      	ldr	r3, [pc, #636]	; (8009f18 <_printf_float+0x2dc>)
 8009c9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8009ca2:	f7f6 ff43 	bl	8000b2c <__aeabi_dcmpun>
 8009ca6:	bb88      	cbnz	r0, 8009d0c <_printf_float+0xd0>
 8009ca8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009cac:	4b9a      	ldr	r3, [pc, #616]	; (8009f18 <_printf_float+0x2dc>)
 8009cae:	f04f 32ff 	mov.w	r2, #4294967295
 8009cb2:	f7f6 ff1d 	bl	8000af0 <__aeabi_dcmple>
 8009cb6:	bb48      	cbnz	r0, 8009d0c <_printf_float+0xd0>
 8009cb8:	2200      	movs	r2, #0
 8009cba:	2300      	movs	r3, #0
 8009cbc:	4640      	mov	r0, r8
 8009cbe:	4649      	mov	r1, r9
 8009cc0:	f7f6 ff0c 	bl	8000adc <__aeabi_dcmplt>
 8009cc4:	b110      	cbz	r0, 8009ccc <_printf_float+0x90>
 8009cc6:	232d      	movs	r3, #45	; 0x2d
 8009cc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ccc:	4b93      	ldr	r3, [pc, #588]	; (8009f1c <_printf_float+0x2e0>)
 8009cce:	4894      	ldr	r0, [pc, #592]	; (8009f20 <_printf_float+0x2e4>)
 8009cd0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009cd4:	bf94      	ite	ls
 8009cd6:	4698      	movls	r8, r3
 8009cd8:	4680      	movhi	r8, r0
 8009cda:	2303      	movs	r3, #3
 8009cdc:	6123      	str	r3, [r4, #16]
 8009cde:	9b05      	ldr	r3, [sp, #20]
 8009ce0:	f023 0204 	bic.w	r2, r3, #4
 8009ce4:	6022      	str	r2, [r4, #0]
 8009ce6:	f04f 0900 	mov.w	r9, #0
 8009cea:	9700      	str	r7, [sp, #0]
 8009cec:	4633      	mov	r3, r6
 8009cee:	aa0b      	add	r2, sp, #44	; 0x2c
 8009cf0:	4621      	mov	r1, r4
 8009cf2:	4628      	mov	r0, r5
 8009cf4:	f000 f9d8 	bl	800a0a8 <_printf_common>
 8009cf8:	3001      	adds	r0, #1
 8009cfa:	f040 8090 	bne.w	8009e1e <_printf_float+0x1e2>
 8009cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8009d02:	b00d      	add	sp, #52	; 0x34
 8009d04:	ecbd 8b02 	vpop	{d8}
 8009d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d0c:	4642      	mov	r2, r8
 8009d0e:	464b      	mov	r3, r9
 8009d10:	4640      	mov	r0, r8
 8009d12:	4649      	mov	r1, r9
 8009d14:	f7f6 ff0a 	bl	8000b2c <__aeabi_dcmpun>
 8009d18:	b140      	cbz	r0, 8009d2c <_printf_float+0xf0>
 8009d1a:	464b      	mov	r3, r9
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	bfbc      	itt	lt
 8009d20:	232d      	movlt	r3, #45	; 0x2d
 8009d22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009d26:	487f      	ldr	r0, [pc, #508]	; (8009f24 <_printf_float+0x2e8>)
 8009d28:	4b7f      	ldr	r3, [pc, #508]	; (8009f28 <_printf_float+0x2ec>)
 8009d2a:	e7d1      	b.n	8009cd0 <_printf_float+0x94>
 8009d2c:	6863      	ldr	r3, [r4, #4]
 8009d2e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009d32:	9206      	str	r2, [sp, #24]
 8009d34:	1c5a      	adds	r2, r3, #1
 8009d36:	d13f      	bne.n	8009db8 <_printf_float+0x17c>
 8009d38:	2306      	movs	r3, #6
 8009d3a:	6063      	str	r3, [r4, #4]
 8009d3c:	9b05      	ldr	r3, [sp, #20]
 8009d3e:	6861      	ldr	r1, [r4, #4]
 8009d40:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009d44:	2300      	movs	r3, #0
 8009d46:	9303      	str	r3, [sp, #12]
 8009d48:	ab0a      	add	r3, sp, #40	; 0x28
 8009d4a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009d4e:	ab09      	add	r3, sp, #36	; 0x24
 8009d50:	ec49 8b10 	vmov	d0, r8, r9
 8009d54:	9300      	str	r3, [sp, #0]
 8009d56:	6022      	str	r2, [r4, #0]
 8009d58:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009d5c:	4628      	mov	r0, r5
 8009d5e:	f7ff fecd 	bl	8009afc <__cvt>
 8009d62:	9b06      	ldr	r3, [sp, #24]
 8009d64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d66:	2b47      	cmp	r3, #71	; 0x47
 8009d68:	4680      	mov	r8, r0
 8009d6a:	d108      	bne.n	8009d7e <_printf_float+0x142>
 8009d6c:	1cc8      	adds	r0, r1, #3
 8009d6e:	db02      	blt.n	8009d76 <_printf_float+0x13a>
 8009d70:	6863      	ldr	r3, [r4, #4]
 8009d72:	4299      	cmp	r1, r3
 8009d74:	dd41      	ble.n	8009dfa <_printf_float+0x1be>
 8009d76:	f1ab 0b02 	sub.w	fp, fp, #2
 8009d7a:	fa5f fb8b 	uxtb.w	fp, fp
 8009d7e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009d82:	d820      	bhi.n	8009dc6 <_printf_float+0x18a>
 8009d84:	3901      	subs	r1, #1
 8009d86:	465a      	mov	r2, fp
 8009d88:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009d8c:	9109      	str	r1, [sp, #36]	; 0x24
 8009d8e:	f7ff ff17 	bl	8009bc0 <__exponent>
 8009d92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d94:	1813      	adds	r3, r2, r0
 8009d96:	2a01      	cmp	r2, #1
 8009d98:	4681      	mov	r9, r0
 8009d9a:	6123      	str	r3, [r4, #16]
 8009d9c:	dc02      	bgt.n	8009da4 <_printf_float+0x168>
 8009d9e:	6822      	ldr	r2, [r4, #0]
 8009da0:	07d2      	lsls	r2, r2, #31
 8009da2:	d501      	bpl.n	8009da8 <_printf_float+0x16c>
 8009da4:	3301      	adds	r3, #1
 8009da6:	6123      	str	r3, [r4, #16]
 8009da8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d09c      	beq.n	8009cea <_printf_float+0xae>
 8009db0:	232d      	movs	r3, #45	; 0x2d
 8009db2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009db6:	e798      	b.n	8009cea <_printf_float+0xae>
 8009db8:	9a06      	ldr	r2, [sp, #24]
 8009dba:	2a47      	cmp	r2, #71	; 0x47
 8009dbc:	d1be      	bne.n	8009d3c <_printf_float+0x100>
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d1bc      	bne.n	8009d3c <_printf_float+0x100>
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	e7b9      	b.n	8009d3a <_printf_float+0xfe>
 8009dc6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009dca:	d118      	bne.n	8009dfe <_printf_float+0x1c2>
 8009dcc:	2900      	cmp	r1, #0
 8009dce:	6863      	ldr	r3, [r4, #4]
 8009dd0:	dd0b      	ble.n	8009dea <_printf_float+0x1ae>
 8009dd2:	6121      	str	r1, [r4, #16]
 8009dd4:	b913      	cbnz	r3, 8009ddc <_printf_float+0x1a0>
 8009dd6:	6822      	ldr	r2, [r4, #0]
 8009dd8:	07d0      	lsls	r0, r2, #31
 8009dda:	d502      	bpl.n	8009de2 <_printf_float+0x1a6>
 8009ddc:	3301      	adds	r3, #1
 8009dde:	440b      	add	r3, r1
 8009de0:	6123      	str	r3, [r4, #16]
 8009de2:	65a1      	str	r1, [r4, #88]	; 0x58
 8009de4:	f04f 0900 	mov.w	r9, #0
 8009de8:	e7de      	b.n	8009da8 <_printf_float+0x16c>
 8009dea:	b913      	cbnz	r3, 8009df2 <_printf_float+0x1b6>
 8009dec:	6822      	ldr	r2, [r4, #0]
 8009dee:	07d2      	lsls	r2, r2, #31
 8009df0:	d501      	bpl.n	8009df6 <_printf_float+0x1ba>
 8009df2:	3302      	adds	r3, #2
 8009df4:	e7f4      	b.n	8009de0 <_printf_float+0x1a4>
 8009df6:	2301      	movs	r3, #1
 8009df8:	e7f2      	b.n	8009de0 <_printf_float+0x1a4>
 8009dfa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009dfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e00:	4299      	cmp	r1, r3
 8009e02:	db05      	blt.n	8009e10 <_printf_float+0x1d4>
 8009e04:	6823      	ldr	r3, [r4, #0]
 8009e06:	6121      	str	r1, [r4, #16]
 8009e08:	07d8      	lsls	r0, r3, #31
 8009e0a:	d5ea      	bpl.n	8009de2 <_printf_float+0x1a6>
 8009e0c:	1c4b      	adds	r3, r1, #1
 8009e0e:	e7e7      	b.n	8009de0 <_printf_float+0x1a4>
 8009e10:	2900      	cmp	r1, #0
 8009e12:	bfd4      	ite	le
 8009e14:	f1c1 0202 	rsble	r2, r1, #2
 8009e18:	2201      	movgt	r2, #1
 8009e1a:	4413      	add	r3, r2
 8009e1c:	e7e0      	b.n	8009de0 <_printf_float+0x1a4>
 8009e1e:	6823      	ldr	r3, [r4, #0]
 8009e20:	055a      	lsls	r2, r3, #21
 8009e22:	d407      	bmi.n	8009e34 <_printf_float+0x1f8>
 8009e24:	6923      	ldr	r3, [r4, #16]
 8009e26:	4642      	mov	r2, r8
 8009e28:	4631      	mov	r1, r6
 8009e2a:	4628      	mov	r0, r5
 8009e2c:	47b8      	blx	r7
 8009e2e:	3001      	adds	r0, #1
 8009e30:	d12c      	bne.n	8009e8c <_printf_float+0x250>
 8009e32:	e764      	b.n	8009cfe <_printf_float+0xc2>
 8009e34:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009e38:	f240 80e0 	bls.w	8009ffc <_printf_float+0x3c0>
 8009e3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009e40:	2200      	movs	r2, #0
 8009e42:	2300      	movs	r3, #0
 8009e44:	f7f6 fe40 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e48:	2800      	cmp	r0, #0
 8009e4a:	d034      	beq.n	8009eb6 <_printf_float+0x27a>
 8009e4c:	4a37      	ldr	r2, [pc, #220]	; (8009f2c <_printf_float+0x2f0>)
 8009e4e:	2301      	movs	r3, #1
 8009e50:	4631      	mov	r1, r6
 8009e52:	4628      	mov	r0, r5
 8009e54:	47b8      	blx	r7
 8009e56:	3001      	adds	r0, #1
 8009e58:	f43f af51 	beq.w	8009cfe <_printf_float+0xc2>
 8009e5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e60:	429a      	cmp	r2, r3
 8009e62:	db02      	blt.n	8009e6a <_printf_float+0x22e>
 8009e64:	6823      	ldr	r3, [r4, #0]
 8009e66:	07d8      	lsls	r0, r3, #31
 8009e68:	d510      	bpl.n	8009e8c <_printf_float+0x250>
 8009e6a:	ee18 3a10 	vmov	r3, s16
 8009e6e:	4652      	mov	r2, sl
 8009e70:	4631      	mov	r1, r6
 8009e72:	4628      	mov	r0, r5
 8009e74:	47b8      	blx	r7
 8009e76:	3001      	adds	r0, #1
 8009e78:	f43f af41 	beq.w	8009cfe <_printf_float+0xc2>
 8009e7c:	f04f 0800 	mov.w	r8, #0
 8009e80:	f104 091a 	add.w	r9, r4, #26
 8009e84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e86:	3b01      	subs	r3, #1
 8009e88:	4543      	cmp	r3, r8
 8009e8a:	dc09      	bgt.n	8009ea0 <_printf_float+0x264>
 8009e8c:	6823      	ldr	r3, [r4, #0]
 8009e8e:	079b      	lsls	r3, r3, #30
 8009e90:	f100 8105 	bmi.w	800a09e <_printf_float+0x462>
 8009e94:	68e0      	ldr	r0, [r4, #12]
 8009e96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e98:	4298      	cmp	r0, r3
 8009e9a:	bfb8      	it	lt
 8009e9c:	4618      	movlt	r0, r3
 8009e9e:	e730      	b.n	8009d02 <_printf_float+0xc6>
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	464a      	mov	r2, r9
 8009ea4:	4631      	mov	r1, r6
 8009ea6:	4628      	mov	r0, r5
 8009ea8:	47b8      	blx	r7
 8009eaa:	3001      	adds	r0, #1
 8009eac:	f43f af27 	beq.w	8009cfe <_printf_float+0xc2>
 8009eb0:	f108 0801 	add.w	r8, r8, #1
 8009eb4:	e7e6      	b.n	8009e84 <_printf_float+0x248>
 8009eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	dc39      	bgt.n	8009f30 <_printf_float+0x2f4>
 8009ebc:	4a1b      	ldr	r2, [pc, #108]	; (8009f2c <_printf_float+0x2f0>)
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	4631      	mov	r1, r6
 8009ec2:	4628      	mov	r0, r5
 8009ec4:	47b8      	blx	r7
 8009ec6:	3001      	adds	r0, #1
 8009ec8:	f43f af19 	beq.w	8009cfe <_printf_float+0xc2>
 8009ecc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	d102      	bne.n	8009eda <_printf_float+0x29e>
 8009ed4:	6823      	ldr	r3, [r4, #0]
 8009ed6:	07d9      	lsls	r1, r3, #31
 8009ed8:	d5d8      	bpl.n	8009e8c <_printf_float+0x250>
 8009eda:	ee18 3a10 	vmov	r3, s16
 8009ede:	4652      	mov	r2, sl
 8009ee0:	4631      	mov	r1, r6
 8009ee2:	4628      	mov	r0, r5
 8009ee4:	47b8      	blx	r7
 8009ee6:	3001      	adds	r0, #1
 8009ee8:	f43f af09 	beq.w	8009cfe <_printf_float+0xc2>
 8009eec:	f04f 0900 	mov.w	r9, #0
 8009ef0:	f104 0a1a 	add.w	sl, r4, #26
 8009ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ef6:	425b      	negs	r3, r3
 8009ef8:	454b      	cmp	r3, r9
 8009efa:	dc01      	bgt.n	8009f00 <_printf_float+0x2c4>
 8009efc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009efe:	e792      	b.n	8009e26 <_printf_float+0x1ea>
 8009f00:	2301      	movs	r3, #1
 8009f02:	4652      	mov	r2, sl
 8009f04:	4631      	mov	r1, r6
 8009f06:	4628      	mov	r0, r5
 8009f08:	47b8      	blx	r7
 8009f0a:	3001      	adds	r0, #1
 8009f0c:	f43f aef7 	beq.w	8009cfe <_printf_float+0xc2>
 8009f10:	f109 0901 	add.w	r9, r9, #1
 8009f14:	e7ee      	b.n	8009ef4 <_printf_float+0x2b8>
 8009f16:	bf00      	nop
 8009f18:	7fefffff 	.word	0x7fefffff
 8009f1c:	0800eea4 	.word	0x0800eea4
 8009f20:	0800eea8 	.word	0x0800eea8
 8009f24:	0800eeb0 	.word	0x0800eeb0
 8009f28:	0800eeac 	.word	0x0800eeac
 8009f2c:	0800eeb4 	.word	0x0800eeb4
 8009f30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009f34:	429a      	cmp	r2, r3
 8009f36:	bfa8      	it	ge
 8009f38:	461a      	movge	r2, r3
 8009f3a:	2a00      	cmp	r2, #0
 8009f3c:	4691      	mov	r9, r2
 8009f3e:	dc37      	bgt.n	8009fb0 <_printf_float+0x374>
 8009f40:	f04f 0b00 	mov.w	fp, #0
 8009f44:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f48:	f104 021a 	add.w	r2, r4, #26
 8009f4c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009f4e:	9305      	str	r3, [sp, #20]
 8009f50:	eba3 0309 	sub.w	r3, r3, r9
 8009f54:	455b      	cmp	r3, fp
 8009f56:	dc33      	bgt.n	8009fc0 <_printf_float+0x384>
 8009f58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	db3b      	blt.n	8009fd8 <_printf_float+0x39c>
 8009f60:	6823      	ldr	r3, [r4, #0]
 8009f62:	07da      	lsls	r2, r3, #31
 8009f64:	d438      	bmi.n	8009fd8 <_printf_float+0x39c>
 8009f66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f68:	9a05      	ldr	r2, [sp, #20]
 8009f6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f6c:	1a9a      	subs	r2, r3, r2
 8009f6e:	eba3 0901 	sub.w	r9, r3, r1
 8009f72:	4591      	cmp	r9, r2
 8009f74:	bfa8      	it	ge
 8009f76:	4691      	movge	r9, r2
 8009f78:	f1b9 0f00 	cmp.w	r9, #0
 8009f7c:	dc35      	bgt.n	8009fea <_printf_float+0x3ae>
 8009f7e:	f04f 0800 	mov.w	r8, #0
 8009f82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f86:	f104 0a1a 	add.w	sl, r4, #26
 8009f8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f8e:	1a9b      	subs	r3, r3, r2
 8009f90:	eba3 0309 	sub.w	r3, r3, r9
 8009f94:	4543      	cmp	r3, r8
 8009f96:	f77f af79 	ble.w	8009e8c <_printf_float+0x250>
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	4652      	mov	r2, sl
 8009f9e:	4631      	mov	r1, r6
 8009fa0:	4628      	mov	r0, r5
 8009fa2:	47b8      	blx	r7
 8009fa4:	3001      	adds	r0, #1
 8009fa6:	f43f aeaa 	beq.w	8009cfe <_printf_float+0xc2>
 8009faa:	f108 0801 	add.w	r8, r8, #1
 8009fae:	e7ec      	b.n	8009f8a <_printf_float+0x34e>
 8009fb0:	4613      	mov	r3, r2
 8009fb2:	4631      	mov	r1, r6
 8009fb4:	4642      	mov	r2, r8
 8009fb6:	4628      	mov	r0, r5
 8009fb8:	47b8      	blx	r7
 8009fba:	3001      	adds	r0, #1
 8009fbc:	d1c0      	bne.n	8009f40 <_printf_float+0x304>
 8009fbe:	e69e      	b.n	8009cfe <_printf_float+0xc2>
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	4631      	mov	r1, r6
 8009fc4:	4628      	mov	r0, r5
 8009fc6:	9205      	str	r2, [sp, #20]
 8009fc8:	47b8      	blx	r7
 8009fca:	3001      	adds	r0, #1
 8009fcc:	f43f ae97 	beq.w	8009cfe <_printf_float+0xc2>
 8009fd0:	9a05      	ldr	r2, [sp, #20]
 8009fd2:	f10b 0b01 	add.w	fp, fp, #1
 8009fd6:	e7b9      	b.n	8009f4c <_printf_float+0x310>
 8009fd8:	ee18 3a10 	vmov	r3, s16
 8009fdc:	4652      	mov	r2, sl
 8009fde:	4631      	mov	r1, r6
 8009fe0:	4628      	mov	r0, r5
 8009fe2:	47b8      	blx	r7
 8009fe4:	3001      	adds	r0, #1
 8009fe6:	d1be      	bne.n	8009f66 <_printf_float+0x32a>
 8009fe8:	e689      	b.n	8009cfe <_printf_float+0xc2>
 8009fea:	9a05      	ldr	r2, [sp, #20]
 8009fec:	464b      	mov	r3, r9
 8009fee:	4442      	add	r2, r8
 8009ff0:	4631      	mov	r1, r6
 8009ff2:	4628      	mov	r0, r5
 8009ff4:	47b8      	blx	r7
 8009ff6:	3001      	adds	r0, #1
 8009ff8:	d1c1      	bne.n	8009f7e <_printf_float+0x342>
 8009ffa:	e680      	b.n	8009cfe <_printf_float+0xc2>
 8009ffc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ffe:	2a01      	cmp	r2, #1
 800a000:	dc01      	bgt.n	800a006 <_printf_float+0x3ca>
 800a002:	07db      	lsls	r3, r3, #31
 800a004:	d538      	bpl.n	800a078 <_printf_float+0x43c>
 800a006:	2301      	movs	r3, #1
 800a008:	4642      	mov	r2, r8
 800a00a:	4631      	mov	r1, r6
 800a00c:	4628      	mov	r0, r5
 800a00e:	47b8      	blx	r7
 800a010:	3001      	adds	r0, #1
 800a012:	f43f ae74 	beq.w	8009cfe <_printf_float+0xc2>
 800a016:	ee18 3a10 	vmov	r3, s16
 800a01a:	4652      	mov	r2, sl
 800a01c:	4631      	mov	r1, r6
 800a01e:	4628      	mov	r0, r5
 800a020:	47b8      	blx	r7
 800a022:	3001      	adds	r0, #1
 800a024:	f43f ae6b 	beq.w	8009cfe <_printf_float+0xc2>
 800a028:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a02c:	2200      	movs	r2, #0
 800a02e:	2300      	movs	r3, #0
 800a030:	f7f6 fd4a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a034:	b9d8      	cbnz	r0, 800a06e <_printf_float+0x432>
 800a036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a038:	f108 0201 	add.w	r2, r8, #1
 800a03c:	3b01      	subs	r3, #1
 800a03e:	4631      	mov	r1, r6
 800a040:	4628      	mov	r0, r5
 800a042:	47b8      	blx	r7
 800a044:	3001      	adds	r0, #1
 800a046:	d10e      	bne.n	800a066 <_printf_float+0x42a>
 800a048:	e659      	b.n	8009cfe <_printf_float+0xc2>
 800a04a:	2301      	movs	r3, #1
 800a04c:	4652      	mov	r2, sl
 800a04e:	4631      	mov	r1, r6
 800a050:	4628      	mov	r0, r5
 800a052:	47b8      	blx	r7
 800a054:	3001      	adds	r0, #1
 800a056:	f43f ae52 	beq.w	8009cfe <_printf_float+0xc2>
 800a05a:	f108 0801 	add.w	r8, r8, #1
 800a05e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a060:	3b01      	subs	r3, #1
 800a062:	4543      	cmp	r3, r8
 800a064:	dcf1      	bgt.n	800a04a <_printf_float+0x40e>
 800a066:	464b      	mov	r3, r9
 800a068:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a06c:	e6dc      	b.n	8009e28 <_printf_float+0x1ec>
 800a06e:	f04f 0800 	mov.w	r8, #0
 800a072:	f104 0a1a 	add.w	sl, r4, #26
 800a076:	e7f2      	b.n	800a05e <_printf_float+0x422>
 800a078:	2301      	movs	r3, #1
 800a07a:	4642      	mov	r2, r8
 800a07c:	e7df      	b.n	800a03e <_printf_float+0x402>
 800a07e:	2301      	movs	r3, #1
 800a080:	464a      	mov	r2, r9
 800a082:	4631      	mov	r1, r6
 800a084:	4628      	mov	r0, r5
 800a086:	47b8      	blx	r7
 800a088:	3001      	adds	r0, #1
 800a08a:	f43f ae38 	beq.w	8009cfe <_printf_float+0xc2>
 800a08e:	f108 0801 	add.w	r8, r8, #1
 800a092:	68e3      	ldr	r3, [r4, #12]
 800a094:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a096:	1a5b      	subs	r3, r3, r1
 800a098:	4543      	cmp	r3, r8
 800a09a:	dcf0      	bgt.n	800a07e <_printf_float+0x442>
 800a09c:	e6fa      	b.n	8009e94 <_printf_float+0x258>
 800a09e:	f04f 0800 	mov.w	r8, #0
 800a0a2:	f104 0919 	add.w	r9, r4, #25
 800a0a6:	e7f4      	b.n	800a092 <_printf_float+0x456>

0800a0a8 <_printf_common>:
 800a0a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0ac:	4616      	mov	r6, r2
 800a0ae:	4699      	mov	r9, r3
 800a0b0:	688a      	ldr	r2, [r1, #8]
 800a0b2:	690b      	ldr	r3, [r1, #16]
 800a0b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	bfb8      	it	lt
 800a0bc:	4613      	movlt	r3, r2
 800a0be:	6033      	str	r3, [r6, #0]
 800a0c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a0c4:	4607      	mov	r7, r0
 800a0c6:	460c      	mov	r4, r1
 800a0c8:	b10a      	cbz	r2, 800a0ce <_printf_common+0x26>
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	6033      	str	r3, [r6, #0]
 800a0ce:	6823      	ldr	r3, [r4, #0]
 800a0d0:	0699      	lsls	r1, r3, #26
 800a0d2:	bf42      	ittt	mi
 800a0d4:	6833      	ldrmi	r3, [r6, #0]
 800a0d6:	3302      	addmi	r3, #2
 800a0d8:	6033      	strmi	r3, [r6, #0]
 800a0da:	6825      	ldr	r5, [r4, #0]
 800a0dc:	f015 0506 	ands.w	r5, r5, #6
 800a0e0:	d106      	bne.n	800a0f0 <_printf_common+0x48>
 800a0e2:	f104 0a19 	add.w	sl, r4, #25
 800a0e6:	68e3      	ldr	r3, [r4, #12]
 800a0e8:	6832      	ldr	r2, [r6, #0]
 800a0ea:	1a9b      	subs	r3, r3, r2
 800a0ec:	42ab      	cmp	r3, r5
 800a0ee:	dc26      	bgt.n	800a13e <_printf_common+0x96>
 800a0f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a0f4:	1e13      	subs	r3, r2, #0
 800a0f6:	6822      	ldr	r2, [r4, #0]
 800a0f8:	bf18      	it	ne
 800a0fa:	2301      	movne	r3, #1
 800a0fc:	0692      	lsls	r2, r2, #26
 800a0fe:	d42b      	bmi.n	800a158 <_printf_common+0xb0>
 800a100:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a104:	4649      	mov	r1, r9
 800a106:	4638      	mov	r0, r7
 800a108:	47c0      	blx	r8
 800a10a:	3001      	adds	r0, #1
 800a10c:	d01e      	beq.n	800a14c <_printf_common+0xa4>
 800a10e:	6823      	ldr	r3, [r4, #0]
 800a110:	68e5      	ldr	r5, [r4, #12]
 800a112:	6832      	ldr	r2, [r6, #0]
 800a114:	f003 0306 	and.w	r3, r3, #6
 800a118:	2b04      	cmp	r3, #4
 800a11a:	bf08      	it	eq
 800a11c:	1aad      	subeq	r5, r5, r2
 800a11e:	68a3      	ldr	r3, [r4, #8]
 800a120:	6922      	ldr	r2, [r4, #16]
 800a122:	bf0c      	ite	eq
 800a124:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a128:	2500      	movne	r5, #0
 800a12a:	4293      	cmp	r3, r2
 800a12c:	bfc4      	itt	gt
 800a12e:	1a9b      	subgt	r3, r3, r2
 800a130:	18ed      	addgt	r5, r5, r3
 800a132:	2600      	movs	r6, #0
 800a134:	341a      	adds	r4, #26
 800a136:	42b5      	cmp	r5, r6
 800a138:	d11a      	bne.n	800a170 <_printf_common+0xc8>
 800a13a:	2000      	movs	r0, #0
 800a13c:	e008      	b.n	800a150 <_printf_common+0xa8>
 800a13e:	2301      	movs	r3, #1
 800a140:	4652      	mov	r2, sl
 800a142:	4649      	mov	r1, r9
 800a144:	4638      	mov	r0, r7
 800a146:	47c0      	blx	r8
 800a148:	3001      	adds	r0, #1
 800a14a:	d103      	bne.n	800a154 <_printf_common+0xac>
 800a14c:	f04f 30ff 	mov.w	r0, #4294967295
 800a150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a154:	3501      	adds	r5, #1
 800a156:	e7c6      	b.n	800a0e6 <_printf_common+0x3e>
 800a158:	18e1      	adds	r1, r4, r3
 800a15a:	1c5a      	adds	r2, r3, #1
 800a15c:	2030      	movs	r0, #48	; 0x30
 800a15e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a162:	4422      	add	r2, r4
 800a164:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a168:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a16c:	3302      	adds	r3, #2
 800a16e:	e7c7      	b.n	800a100 <_printf_common+0x58>
 800a170:	2301      	movs	r3, #1
 800a172:	4622      	mov	r2, r4
 800a174:	4649      	mov	r1, r9
 800a176:	4638      	mov	r0, r7
 800a178:	47c0      	blx	r8
 800a17a:	3001      	adds	r0, #1
 800a17c:	d0e6      	beq.n	800a14c <_printf_common+0xa4>
 800a17e:	3601      	adds	r6, #1
 800a180:	e7d9      	b.n	800a136 <_printf_common+0x8e>
	...

0800a184 <_printf_i>:
 800a184:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a188:	7e0f      	ldrb	r7, [r1, #24]
 800a18a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a18c:	2f78      	cmp	r7, #120	; 0x78
 800a18e:	4691      	mov	r9, r2
 800a190:	4680      	mov	r8, r0
 800a192:	460c      	mov	r4, r1
 800a194:	469a      	mov	sl, r3
 800a196:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a19a:	d807      	bhi.n	800a1ac <_printf_i+0x28>
 800a19c:	2f62      	cmp	r7, #98	; 0x62
 800a19e:	d80a      	bhi.n	800a1b6 <_printf_i+0x32>
 800a1a0:	2f00      	cmp	r7, #0
 800a1a2:	f000 80d8 	beq.w	800a356 <_printf_i+0x1d2>
 800a1a6:	2f58      	cmp	r7, #88	; 0x58
 800a1a8:	f000 80a3 	beq.w	800a2f2 <_printf_i+0x16e>
 800a1ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a1b4:	e03a      	b.n	800a22c <_printf_i+0xa8>
 800a1b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a1ba:	2b15      	cmp	r3, #21
 800a1bc:	d8f6      	bhi.n	800a1ac <_printf_i+0x28>
 800a1be:	a101      	add	r1, pc, #4	; (adr r1, 800a1c4 <_printf_i+0x40>)
 800a1c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a1c4:	0800a21d 	.word	0x0800a21d
 800a1c8:	0800a231 	.word	0x0800a231
 800a1cc:	0800a1ad 	.word	0x0800a1ad
 800a1d0:	0800a1ad 	.word	0x0800a1ad
 800a1d4:	0800a1ad 	.word	0x0800a1ad
 800a1d8:	0800a1ad 	.word	0x0800a1ad
 800a1dc:	0800a231 	.word	0x0800a231
 800a1e0:	0800a1ad 	.word	0x0800a1ad
 800a1e4:	0800a1ad 	.word	0x0800a1ad
 800a1e8:	0800a1ad 	.word	0x0800a1ad
 800a1ec:	0800a1ad 	.word	0x0800a1ad
 800a1f0:	0800a33d 	.word	0x0800a33d
 800a1f4:	0800a261 	.word	0x0800a261
 800a1f8:	0800a31f 	.word	0x0800a31f
 800a1fc:	0800a1ad 	.word	0x0800a1ad
 800a200:	0800a1ad 	.word	0x0800a1ad
 800a204:	0800a35f 	.word	0x0800a35f
 800a208:	0800a1ad 	.word	0x0800a1ad
 800a20c:	0800a261 	.word	0x0800a261
 800a210:	0800a1ad 	.word	0x0800a1ad
 800a214:	0800a1ad 	.word	0x0800a1ad
 800a218:	0800a327 	.word	0x0800a327
 800a21c:	682b      	ldr	r3, [r5, #0]
 800a21e:	1d1a      	adds	r2, r3, #4
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	602a      	str	r2, [r5, #0]
 800a224:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a228:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a22c:	2301      	movs	r3, #1
 800a22e:	e0a3      	b.n	800a378 <_printf_i+0x1f4>
 800a230:	6820      	ldr	r0, [r4, #0]
 800a232:	6829      	ldr	r1, [r5, #0]
 800a234:	0606      	lsls	r6, r0, #24
 800a236:	f101 0304 	add.w	r3, r1, #4
 800a23a:	d50a      	bpl.n	800a252 <_printf_i+0xce>
 800a23c:	680e      	ldr	r6, [r1, #0]
 800a23e:	602b      	str	r3, [r5, #0]
 800a240:	2e00      	cmp	r6, #0
 800a242:	da03      	bge.n	800a24c <_printf_i+0xc8>
 800a244:	232d      	movs	r3, #45	; 0x2d
 800a246:	4276      	negs	r6, r6
 800a248:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a24c:	485e      	ldr	r0, [pc, #376]	; (800a3c8 <_printf_i+0x244>)
 800a24e:	230a      	movs	r3, #10
 800a250:	e019      	b.n	800a286 <_printf_i+0x102>
 800a252:	680e      	ldr	r6, [r1, #0]
 800a254:	602b      	str	r3, [r5, #0]
 800a256:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a25a:	bf18      	it	ne
 800a25c:	b236      	sxthne	r6, r6
 800a25e:	e7ef      	b.n	800a240 <_printf_i+0xbc>
 800a260:	682b      	ldr	r3, [r5, #0]
 800a262:	6820      	ldr	r0, [r4, #0]
 800a264:	1d19      	adds	r1, r3, #4
 800a266:	6029      	str	r1, [r5, #0]
 800a268:	0601      	lsls	r1, r0, #24
 800a26a:	d501      	bpl.n	800a270 <_printf_i+0xec>
 800a26c:	681e      	ldr	r6, [r3, #0]
 800a26e:	e002      	b.n	800a276 <_printf_i+0xf2>
 800a270:	0646      	lsls	r6, r0, #25
 800a272:	d5fb      	bpl.n	800a26c <_printf_i+0xe8>
 800a274:	881e      	ldrh	r6, [r3, #0]
 800a276:	4854      	ldr	r0, [pc, #336]	; (800a3c8 <_printf_i+0x244>)
 800a278:	2f6f      	cmp	r7, #111	; 0x6f
 800a27a:	bf0c      	ite	eq
 800a27c:	2308      	moveq	r3, #8
 800a27e:	230a      	movne	r3, #10
 800a280:	2100      	movs	r1, #0
 800a282:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a286:	6865      	ldr	r5, [r4, #4]
 800a288:	60a5      	str	r5, [r4, #8]
 800a28a:	2d00      	cmp	r5, #0
 800a28c:	bfa2      	ittt	ge
 800a28e:	6821      	ldrge	r1, [r4, #0]
 800a290:	f021 0104 	bicge.w	r1, r1, #4
 800a294:	6021      	strge	r1, [r4, #0]
 800a296:	b90e      	cbnz	r6, 800a29c <_printf_i+0x118>
 800a298:	2d00      	cmp	r5, #0
 800a29a:	d04d      	beq.n	800a338 <_printf_i+0x1b4>
 800a29c:	4615      	mov	r5, r2
 800a29e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a2a2:	fb03 6711 	mls	r7, r3, r1, r6
 800a2a6:	5dc7      	ldrb	r7, [r0, r7]
 800a2a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a2ac:	4637      	mov	r7, r6
 800a2ae:	42bb      	cmp	r3, r7
 800a2b0:	460e      	mov	r6, r1
 800a2b2:	d9f4      	bls.n	800a29e <_printf_i+0x11a>
 800a2b4:	2b08      	cmp	r3, #8
 800a2b6:	d10b      	bne.n	800a2d0 <_printf_i+0x14c>
 800a2b8:	6823      	ldr	r3, [r4, #0]
 800a2ba:	07de      	lsls	r6, r3, #31
 800a2bc:	d508      	bpl.n	800a2d0 <_printf_i+0x14c>
 800a2be:	6923      	ldr	r3, [r4, #16]
 800a2c0:	6861      	ldr	r1, [r4, #4]
 800a2c2:	4299      	cmp	r1, r3
 800a2c4:	bfde      	ittt	le
 800a2c6:	2330      	movle	r3, #48	; 0x30
 800a2c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a2cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a2d0:	1b52      	subs	r2, r2, r5
 800a2d2:	6122      	str	r2, [r4, #16]
 800a2d4:	f8cd a000 	str.w	sl, [sp]
 800a2d8:	464b      	mov	r3, r9
 800a2da:	aa03      	add	r2, sp, #12
 800a2dc:	4621      	mov	r1, r4
 800a2de:	4640      	mov	r0, r8
 800a2e0:	f7ff fee2 	bl	800a0a8 <_printf_common>
 800a2e4:	3001      	adds	r0, #1
 800a2e6:	d14c      	bne.n	800a382 <_printf_i+0x1fe>
 800a2e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ec:	b004      	add	sp, #16
 800a2ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2f2:	4835      	ldr	r0, [pc, #212]	; (800a3c8 <_printf_i+0x244>)
 800a2f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a2f8:	6829      	ldr	r1, [r5, #0]
 800a2fa:	6823      	ldr	r3, [r4, #0]
 800a2fc:	f851 6b04 	ldr.w	r6, [r1], #4
 800a300:	6029      	str	r1, [r5, #0]
 800a302:	061d      	lsls	r5, r3, #24
 800a304:	d514      	bpl.n	800a330 <_printf_i+0x1ac>
 800a306:	07df      	lsls	r7, r3, #31
 800a308:	bf44      	itt	mi
 800a30a:	f043 0320 	orrmi.w	r3, r3, #32
 800a30e:	6023      	strmi	r3, [r4, #0]
 800a310:	b91e      	cbnz	r6, 800a31a <_printf_i+0x196>
 800a312:	6823      	ldr	r3, [r4, #0]
 800a314:	f023 0320 	bic.w	r3, r3, #32
 800a318:	6023      	str	r3, [r4, #0]
 800a31a:	2310      	movs	r3, #16
 800a31c:	e7b0      	b.n	800a280 <_printf_i+0xfc>
 800a31e:	6823      	ldr	r3, [r4, #0]
 800a320:	f043 0320 	orr.w	r3, r3, #32
 800a324:	6023      	str	r3, [r4, #0]
 800a326:	2378      	movs	r3, #120	; 0x78
 800a328:	4828      	ldr	r0, [pc, #160]	; (800a3cc <_printf_i+0x248>)
 800a32a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a32e:	e7e3      	b.n	800a2f8 <_printf_i+0x174>
 800a330:	0659      	lsls	r1, r3, #25
 800a332:	bf48      	it	mi
 800a334:	b2b6      	uxthmi	r6, r6
 800a336:	e7e6      	b.n	800a306 <_printf_i+0x182>
 800a338:	4615      	mov	r5, r2
 800a33a:	e7bb      	b.n	800a2b4 <_printf_i+0x130>
 800a33c:	682b      	ldr	r3, [r5, #0]
 800a33e:	6826      	ldr	r6, [r4, #0]
 800a340:	6961      	ldr	r1, [r4, #20]
 800a342:	1d18      	adds	r0, r3, #4
 800a344:	6028      	str	r0, [r5, #0]
 800a346:	0635      	lsls	r5, r6, #24
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	d501      	bpl.n	800a350 <_printf_i+0x1cc>
 800a34c:	6019      	str	r1, [r3, #0]
 800a34e:	e002      	b.n	800a356 <_printf_i+0x1d2>
 800a350:	0670      	lsls	r0, r6, #25
 800a352:	d5fb      	bpl.n	800a34c <_printf_i+0x1c8>
 800a354:	8019      	strh	r1, [r3, #0]
 800a356:	2300      	movs	r3, #0
 800a358:	6123      	str	r3, [r4, #16]
 800a35a:	4615      	mov	r5, r2
 800a35c:	e7ba      	b.n	800a2d4 <_printf_i+0x150>
 800a35e:	682b      	ldr	r3, [r5, #0]
 800a360:	1d1a      	adds	r2, r3, #4
 800a362:	602a      	str	r2, [r5, #0]
 800a364:	681d      	ldr	r5, [r3, #0]
 800a366:	6862      	ldr	r2, [r4, #4]
 800a368:	2100      	movs	r1, #0
 800a36a:	4628      	mov	r0, r5
 800a36c:	f7f5 ff38 	bl	80001e0 <memchr>
 800a370:	b108      	cbz	r0, 800a376 <_printf_i+0x1f2>
 800a372:	1b40      	subs	r0, r0, r5
 800a374:	6060      	str	r0, [r4, #4]
 800a376:	6863      	ldr	r3, [r4, #4]
 800a378:	6123      	str	r3, [r4, #16]
 800a37a:	2300      	movs	r3, #0
 800a37c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a380:	e7a8      	b.n	800a2d4 <_printf_i+0x150>
 800a382:	6923      	ldr	r3, [r4, #16]
 800a384:	462a      	mov	r2, r5
 800a386:	4649      	mov	r1, r9
 800a388:	4640      	mov	r0, r8
 800a38a:	47d0      	blx	sl
 800a38c:	3001      	adds	r0, #1
 800a38e:	d0ab      	beq.n	800a2e8 <_printf_i+0x164>
 800a390:	6823      	ldr	r3, [r4, #0]
 800a392:	079b      	lsls	r3, r3, #30
 800a394:	d413      	bmi.n	800a3be <_printf_i+0x23a>
 800a396:	68e0      	ldr	r0, [r4, #12]
 800a398:	9b03      	ldr	r3, [sp, #12]
 800a39a:	4298      	cmp	r0, r3
 800a39c:	bfb8      	it	lt
 800a39e:	4618      	movlt	r0, r3
 800a3a0:	e7a4      	b.n	800a2ec <_printf_i+0x168>
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	4632      	mov	r2, r6
 800a3a6:	4649      	mov	r1, r9
 800a3a8:	4640      	mov	r0, r8
 800a3aa:	47d0      	blx	sl
 800a3ac:	3001      	adds	r0, #1
 800a3ae:	d09b      	beq.n	800a2e8 <_printf_i+0x164>
 800a3b0:	3501      	adds	r5, #1
 800a3b2:	68e3      	ldr	r3, [r4, #12]
 800a3b4:	9903      	ldr	r1, [sp, #12]
 800a3b6:	1a5b      	subs	r3, r3, r1
 800a3b8:	42ab      	cmp	r3, r5
 800a3ba:	dcf2      	bgt.n	800a3a2 <_printf_i+0x21e>
 800a3bc:	e7eb      	b.n	800a396 <_printf_i+0x212>
 800a3be:	2500      	movs	r5, #0
 800a3c0:	f104 0619 	add.w	r6, r4, #25
 800a3c4:	e7f5      	b.n	800a3b2 <_printf_i+0x22e>
 800a3c6:	bf00      	nop
 800a3c8:	0800eeb6 	.word	0x0800eeb6
 800a3cc:	0800eec7 	.word	0x0800eec7

0800a3d0 <_scanf_float>:
 800a3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3d4:	b087      	sub	sp, #28
 800a3d6:	4617      	mov	r7, r2
 800a3d8:	9303      	str	r3, [sp, #12]
 800a3da:	688b      	ldr	r3, [r1, #8]
 800a3dc:	1e5a      	subs	r2, r3, #1
 800a3de:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a3e2:	bf83      	ittte	hi
 800a3e4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a3e8:	195b      	addhi	r3, r3, r5
 800a3ea:	9302      	strhi	r3, [sp, #8]
 800a3ec:	2300      	movls	r3, #0
 800a3ee:	bf86      	itte	hi
 800a3f0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a3f4:	608b      	strhi	r3, [r1, #8]
 800a3f6:	9302      	strls	r3, [sp, #8]
 800a3f8:	680b      	ldr	r3, [r1, #0]
 800a3fa:	468b      	mov	fp, r1
 800a3fc:	2500      	movs	r5, #0
 800a3fe:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a402:	f84b 3b1c 	str.w	r3, [fp], #28
 800a406:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a40a:	4680      	mov	r8, r0
 800a40c:	460c      	mov	r4, r1
 800a40e:	465e      	mov	r6, fp
 800a410:	46aa      	mov	sl, r5
 800a412:	46a9      	mov	r9, r5
 800a414:	9501      	str	r5, [sp, #4]
 800a416:	68a2      	ldr	r2, [r4, #8]
 800a418:	b152      	cbz	r2, 800a430 <_scanf_float+0x60>
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	781b      	ldrb	r3, [r3, #0]
 800a41e:	2b4e      	cmp	r3, #78	; 0x4e
 800a420:	d864      	bhi.n	800a4ec <_scanf_float+0x11c>
 800a422:	2b40      	cmp	r3, #64	; 0x40
 800a424:	d83c      	bhi.n	800a4a0 <_scanf_float+0xd0>
 800a426:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a42a:	b2c8      	uxtb	r0, r1
 800a42c:	280e      	cmp	r0, #14
 800a42e:	d93a      	bls.n	800a4a6 <_scanf_float+0xd6>
 800a430:	f1b9 0f00 	cmp.w	r9, #0
 800a434:	d003      	beq.n	800a43e <_scanf_float+0x6e>
 800a436:	6823      	ldr	r3, [r4, #0]
 800a438:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a43c:	6023      	str	r3, [r4, #0]
 800a43e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a442:	f1ba 0f01 	cmp.w	sl, #1
 800a446:	f200 8113 	bhi.w	800a670 <_scanf_float+0x2a0>
 800a44a:	455e      	cmp	r6, fp
 800a44c:	f200 8105 	bhi.w	800a65a <_scanf_float+0x28a>
 800a450:	2501      	movs	r5, #1
 800a452:	4628      	mov	r0, r5
 800a454:	b007      	add	sp, #28
 800a456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a45a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a45e:	2a0d      	cmp	r2, #13
 800a460:	d8e6      	bhi.n	800a430 <_scanf_float+0x60>
 800a462:	a101      	add	r1, pc, #4	; (adr r1, 800a468 <_scanf_float+0x98>)
 800a464:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a468:	0800a5a7 	.word	0x0800a5a7
 800a46c:	0800a431 	.word	0x0800a431
 800a470:	0800a431 	.word	0x0800a431
 800a474:	0800a431 	.word	0x0800a431
 800a478:	0800a607 	.word	0x0800a607
 800a47c:	0800a5df 	.word	0x0800a5df
 800a480:	0800a431 	.word	0x0800a431
 800a484:	0800a431 	.word	0x0800a431
 800a488:	0800a5b5 	.word	0x0800a5b5
 800a48c:	0800a431 	.word	0x0800a431
 800a490:	0800a431 	.word	0x0800a431
 800a494:	0800a431 	.word	0x0800a431
 800a498:	0800a431 	.word	0x0800a431
 800a49c:	0800a56d 	.word	0x0800a56d
 800a4a0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a4a4:	e7db      	b.n	800a45e <_scanf_float+0x8e>
 800a4a6:	290e      	cmp	r1, #14
 800a4a8:	d8c2      	bhi.n	800a430 <_scanf_float+0x60>
 800a4aa:	a001      	add	r0, pc, #4	; (adr r0, 800a4b0 <_scanf_float+0xe0>)
 800a4ac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a4b0:	0800a55f 	.word	0x0800a55f
 800a4b4:	0800a431 	.word	0x0800a431
 800a4b8:	0800a55f 	.word	0x0800a55f
 800a4bc:	0800a5f3 	.word	0x0800a5f3
 800a4c0:	0800a431 	.word	0x0800a431
 800a4c4:	0800a50d 	.word	0x0800a50d
 800a4c8:	0800a549 	.word	0x0800a549
 800a4cc:	0800a549 	.word	0x0800a549
 800a4d0:	0800a549 	.word	0x0800a549
 800a4d4:	0800a549 	.word	0x0800a549
 800a4d8:	0800a549 	.word	0x0800a549
 800a4dc:	0800a549 	.word	0x0800a549
 800a4e0:	0800a549 	.word	0x0800a549
 800a4e4:	0800a549 	.word	0x0800a549
 800a4e8:	0800a549 	.word	0x0800a549
 800a4ec:	2b6e      	cmp	r3, #110	; 0x6e
 800a4ee:	d809      	bhi.n	800a504 <_scanf_float+0x134>
 800a4f0:	2b60      	cmp	r3, #96	; 0x60
 800a4f2:	d8b2      	bhi.n	800a45a <_scanf_float+0x8a>
 800a4f4:	2b54      	cmp	r3, #84	; 0x54
 800a4f6:	d077      	beq.n	800a5e8 <_scanf_float+0x218>
 800a4f8:	2b59      	cmp	r3, #89	; 0x59
 800a4fa:	d199      	bne.n	800a430 <_scanf_float+0x60>
 800a4fc:	2d07      	cmp	r5, #7
 800a4fe:	d197      	bne.n	800a430 <_scanf_float+0x60>
 800a500:	2508      	movs	r5, #8
 800a502:	e029      	b.n	800a558 <_scanf_float+0x188>
 800a504:	2b74      	cmp	r3, #116	; 0x74
 800a506:	d06f      	beq.n	800a5e8 <_scanf_float+0x218>
 800a508:	2b79      	cmp	r3, #121	; 0x79
 800a50a:	e7f6      	b.n	800a4fa <_scanf_float+0x12a>
 800a50c:	6821      	ldr	r1, [r4, #0]
 800a50e:	05c8      	lsls	r0, r1, #23
 800a510:	d51a      	bpl.n	800a548 <_scanf_float+0x178>
 800a512:	9b02      	ldr	r3, [sp, #8]
 800a514:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a518:	6021      	str	r1, [r4, #0]
 800a51a:	f109 0901 	add.w	r9, r9, #1
 800a51e:	b11b      	cbz	r3, 800a528 <_scanf_float+0x158>
 800a520:	3b01      	subs	r3, #1
 800a522:	3201      	adds	r2, #1
 800a524:	9302      	str	r3, [sp, #8]
 800a526:	60a2      	str	r2, [r4, #8]
 800a528:	68a3      	ldr	r3, [r4, #8]
 800a52a:	3b01      	subs	r3, #1
 800a52c:	60a3      	str	r3, [r4, #8]
 800a52e:	6923      	ldr	r3, [r4, #16]
 800a530:	3301      	adds	r3, #1
 800a532:	6123      	str	r3, [r4, #16]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	3b01      	subs	r3, #1
 800a538:	2b00      	cmp	r3, #0
 800a53a:	607b      	str	r3, [r7, #4]
 800a53c:	f340 8084 	ble.w	800a648 <_scanf_float+0x278>
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	3301      	adds	r3, #1
 800a544:	603b      	str	r3, [r7, #0]
 800a546:	e766      	b.n	800a416 <_scanf_float+0x46>
 800a548:	eb1a 0f05 	cmn.w	sl, r5
 800a54c:	f47f af70 	bne.w	800a430 <_scanf_float+0x60>
 800a550:	6822      	ldr	r2, [r4, #0]
 800a552:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a556:	6022      	str	r2, [r4, #0]
 800a558:	f806 3b01 	strb.w	r3, [r6], #1
 800a55c:	e7e4      	b.n	800a528 <_scanf_float+0x158>
 800a55e:	6822      	ldr	r2, [r4, #0]
 800a560:	0610      	lsls	r0, r2, #24
 800a562:	f57f af65 	bpl.w	800a430 <_scanf_float+0x60>
 800a566:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a56a:	e7f4      	b.n	800a556 <_scanf_float+0x186>
 800a56c:	f1ba 0f00 	cmp.w	sl, #0
 800a570:	d10e      	bne.n	800a590 <_scanf_float+0x1c0>
 800a572:	f1b9 0f00 	cmp.w	r9, #0
 800a576:	d10e      	bne.n	800a596 <_scanf_float+0x1c6>
 800a578:	6822      	ldr	r2, [r4, #0]
 800a57a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a57e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a582:	d108      	bne.n	800a596 <_scanf_float+0x1c6>
 800a584:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a588:	6022      	str	r2, [r4, #0]
 800a58a:	f04f 0a01 	mov.w	sl, #1
 800a58e:	e7e3      	b.n	800a558 <_scanf_float+0x188>
 800a590:	f1ba 0f02 	cmp.w	sl, #2
 800a594:	d055      	beq.n	800a642 <_scanf_float+0x272>
 800a596:	2d01      	cmp	r5, #1
 800a598:	d002      	beq.n	800a5a0 <_scanf_float+0x1d0>
 800a59a:	2d04      	cmp	r5, #4
 800a59c:	f47f af48 	bne.w	800a430 <_scanf_float+0x60>
 800a5a0:	3501      	adds	r5, #1
 800a5a2:	b2ed      	uxtb	r5, r5
 800a5a4:	e7d8      	b.n	800a558 <_scanf_float+0x188>
 800a5a6:	f1ba 0f01 	cmp.w	sl, #1
 800a5aa:	f47f af41 	bne.w	800a430 <_scanf_float+0x60>
 800a5ae:	f04f 0a02 	mov.w	sl, #2
 800a5b2:	e7d1      	b.n	800a558 <_scanf_float+0x188>
 800a5b4:	b97d      	cbnz	r5, 800a5d6 <_scanf_float+0x206>
 800a5b6:	f1b9 0f00 	cmp.w	r9, #0
 800a5ba:	f47f af3c 	bne.w	800a436 <_scanf_float+0x66>
 800a5be:	6822      	ldr	r2, [r4, #0]
 800a5c0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a5c4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a5c8:	f47f af39 	bne.w	800a43e <_scanf_float+0x6e>
 800a5cc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a5d0:	6022      	str	r2, [r4, #0]
 800a5d2:	2501      	movs	r5, #1
 800a5d4:	e7c0      	b.n	800a558 <_scanf_float+0x188>
 800a5d6:	2d03      	cmp	r5, #3
 800a5d8:	d0e2      	beq.n	800a5a0 <_scanf_float+0x1d0>
 800a5da:	2d05      	cmp	r5, #5
 800a5dc:	e7de      	b.n	800a59c <_scanf_float+0x1cc>
 800a5de:	2d02      	cmp	r5, #2
 800a5e0:	f47f af26 	bne.w	800a430 <_scanf_float+0x60>
 800a5e4:	2503      	movs	r5, #3
 800a5e6:	e7b7      	b.n	800a558 <_scanf_float+0x188>
 800a5e8:	2d06      	cmp	r5, #6
 800a5ea:	f47f af21 	bne.w	800a430 <_scanf_float+0x60>
 800a5ee:	2507      	movs	r5, #7
 800a5f0:	e7b2      	b.n	800a558 <_scanf_float+0x188>
 800a5f2:	6822      	ldr	r2, [r4, #0]
 800a5f4:	0591      	lsls	r1, r2, #22
 800a5f6:	f57f af1b 	bpl.w	800a430 <_scanf_float+0x60>
 800a5fa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a5fe:	6022      	str	r2, [r4, #0]
 800a600:	f8cd 9004 	str.w	r9, [sp, #4]
 800a604:	e7a8      	b.n	800a558 <_scanf_float+0x188>
 800a606:	6822      	ldr	r2, [r4, #0]
 800a608:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a60c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a610:	d006      	beq.n	800a620 <_scanf_float+0x250>
 800a612:	0550      	lsls	r0, r2, #21
 800a614:	f57f af0c 	bpl.w	800a430 <_scanf_float+0x60>
 800a618:	f1b9 0f00 	cmp.w	r9, #0
 800a61c:	f43f af0f 	beq.w	800a43e <_scanf_float+0x6e>
 800a620:	0591      	lsls	r1, r2, #22
 800a622:	bf58      	it	pl
 800a624:	9901      	ldrpl	r1, [sp, #4]
 800a626:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a62a:	bf58      	it	pl
 800a62c:	eba9 0101 	subpl.w	r1, r9, r1
 800a630:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a634:	bf58      	it	pl
 800a636:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a63a:	6022      	str	r2, [r4, #0]
 800a63c:	f04f 0900 	mov.w	r9, #0
 800a640:	e78a      	b.n	800a558 <_scanf_float+0x188>
 800a642:	f04f 0a03 	mov.w	sl, #3
 800a646:	e787      	b.n	800a558 <_scanf_float+0x188>
 800a648:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a64c:	4639      	mov	r1, r7
 800a64e:	4640      	mov	r0, r8
 800a650:	4798      	blx	r3
 800a652:	2800      	cmp	r0, #0
 800a654:	f43f aedf 	beq.w	800a416 <_scanf_float+0x46>
 800a658:	e6ea      	b.n	800a430 <_scanf_float+0x60>
 800a65a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a65e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a662:	463a      	mov	r2, r7
 800a664:	4640      	mov	r0, r8
 800a666:	4798      	blx	r3
 800a668:	6923      	ldr	r3, [r4, #16]
 800a66a:	3b01      	subs	r3, #1
 800a66c:	6123      	str	r3, [r4, #16]
 800a66e:	e6ec      	b.n	800a44a <_scanf_float+0x7a>
 800a670:	1e6b      	subs	r3, r5, #1
 800a672:	2b06      	cmp	r3, #6
 800a674:	d825      	bhi.n	800a6c2 <_scanf_float+0x2f2>
 800a676:	2d02      	cmp	r5, #2
 800a678:	d836      	bhi.n	800a6e8 <_scanf_float+0x318>
 800a67a:	455e      	cmp	r6, fp
 800a67c:	f67f aee8 	bls.w	800a450 <_scanf_float+0x80>
 800a680:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a684:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a688:	463a      	mov	r2, r7
 800a68a:	4640      	mov	r0, r8
 800a68c:	4798      	blx	r3
 800a68e:	6923      	ldr	r3, [r4, #16]
 800a690:	3b01      	subs	r3, #1
 800a692:	6123      	str	r3, [r4, #16]
 800a694:	e7f1      	b.n	800a67a <_scanf_float+0x2aa>
 800a696:	9802      	ldr	r0, [sp, #8]
 800a698:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a69c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a6a0:	9002      	str	r0, [sp, #8]
 800a6a2:	463a      	mov	r2, r7
 800a6a4:	4640      	mov	r0, r8
 800a6a6:	4798      	blx	r3
 800a6a8:	6923      	ldr	r3, [r4, #16]
 800a6aa:	3b01      	subs	r3, #1
 800a6ac:	6123      	str	r3, [r4, #16]
 800a6ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a6b2:	fa5f fa8a 	uxtb.w	sl, sl
 800a6b6:	f1ba 0f02 	cmp.w	sl, #2
 800a6ba:	d1ec      	bne.n	800a696 <_scanf_float+0x2c6>
 800a6bc:	3d03      	subs	r5, #3
 800a6be:	b2ed      	uxtb	r5, r5
 800a6c0:	1b76      	subs	r6, r6, r5
 800a6c2:	6823      	ldr	r3, [r4, #0]
 800a6c4:	05da      	lsls	r2, r3, #23
 800a6c6:	d52f      	bpl.n	800a728 <_scanf_float+0x358>
 800a6c8:	055b      	lsls	r3, r3, #21
 800a6ca:	d510      	bpl.n	800a6ee <_scanf_float+0x31e>
 800a6cc:	455e      	cmp	r6, fp
 800a6ce:	f67f aebf 	bls.w	800a450 <_scanf_float+0x80>
 800a6d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a6d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a6da:	463a      	mov	r2, r7
 800a6dc:	4640      	mov	r0, r8
 800a6de:	4798      	blx	r3
 800a6e0:	6923      	ldr	r3, [r4, #16]
 800a6e2:	3b01      	subs	r3, #1
 800a6e4:	6123      	str	r3, [r4, #16]
 800a6e6:	e7f1      	b.n	800a6cc <_scanf_float+0x2fc>
 800a6e8:	46aa      	mov	sl, r5
 800a6ea:	9602      	str	r6, [sp, #8]
 800a6ec:	e7df      	b.n	800a6ae <_scanf_float+0x2de>
 800a6ee:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a6f2:	6923      	ldr	r3, [r4, #16]
 800a6f4:	2965      	cmp	r1, #101	; 0x65
 800a6f6:	f103 33ff 	add.w	r3, r3, #4294967295
 800a6fa:	f106 35ff 	add.w	r5, r6, #4294967295
 800a6fe:	6123      	str	r3, [r4, #16]
 800a700:	d00c      	beq.n	800a71c <_scanf_float+0x34c>
 800a702:	2945      	cmp	r1, #69	; 0x45
 800a704:	d00a      	beq.n	800a71c <_scanf_float+0x34c>
 800a706:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a70a:	463a      	mov	r2, r7
 800a70c:	4640      	mov	r0, r8
 800a70e:	4798      	blx	r3
 800a710:	6923      	ldr	r3, [r4, #16]
 800a712:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a716:	3b01      	subs	r3, #1
 800a718:	1eb5      	subs	r5, r6, #2
 800a71a:	6123      	str	r3, [r4, #16]
 800a71c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a720:	463a      	mov	r2, r7
 800a722:	4640      	mov	r0, r8
 800a724:	4798      	blx	r3
 800a726:	462e      	mov	r6, r5
 800a728:	6825      	ldr	r5, [r4, #0]
 800a72a:	f015 0510 	ands.w	r5, r5, #16
 800a72e:	d159      	bne.n	800a7e4 <_scanf_float+0x414>
 800a730:	7035      	strb	r5, [r6, #0]
 800a732:	6823      	ldr	r3, [r4, #0]
 800a734:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a738:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a73c:	d11b      	bne.n	800a776 <_scanf_float+0x3a6>
 800a73e:	9b01      	ldr	r3, [sp, #4]
 800a740:	454b      	cmp	r3, r9
 800a742:	eba3 0209 	sub.w	r2, r3, r9
 800a746:	d123      	bne.n	800a790 <_scanf_float+0x3c0>
 800a748:	2200      	movs	r2, #0
 800a74a:	4659      	mov	r1, fp
 800a74c:	4640      	mov	r0, r8
 800a74e:	f000 fe99 	bl	800b484 <_strtod_r>
 800a752:	6822      	ldr	r2, [r4, #0]
 800a754:	9b03      	ldr	r3, [sp, #12]
 800a756:	f012 0f02 	tst.w	r2, #2
 800a75a:	ec57 6b10 	vmov	r6, r7, d0
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	d021      	beq.n	800a7a6 <_scanf_float+0x3d6>
 800a762:	9903      	ldr	r1, [sp, #12]
 800a764:	1d1a      	adds	r2, r3, #4
 800a766:	600a      	str	r2, [r1, #0]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	e9c3 6700 	strd	r6, r7, [r3]
 800a76e:	68e3      	ldr	r3, [r4, #12]
 800a770:	3301      	adds	r3, #1
 800a772:	60e3      	str	r3, [r4, #12]
 800a774:	e66d      	b.n	800a452 <_scanf_float+0x82>
 800a776:	9b04      	ldr	r3, [sp, #16]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d0e5      	beq.n	800a748 <_scanf_float+0x378>
 800a77c:	9905      	ldr	r1, [sp, #20]
 800a77e:	230a      	movs	r3, #10
 800a780:	462a      	mov	r2, r5
 800a782:	3101      	adds	r1, #1
 800a784:	4640      	mov	r0, r8
 800a786:	f000 ff05 	bl	800b594 <_strtol_r>
 800a78a:	9b04      	ldr	r3, [sp, #16]
 800a78c:	9e05      	ldr	r6, [sp, #20]
 800a78e:	1ac2      	subs	r2, r0, r3
 800a790:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a794:	429e      	cmp	r6, r3
 800a796:	bf28      	it	cs
 800a798:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a79c:	4912      	ldr	r1, [pc, #72]	; (800a7e8 <_scanf_float+0x418>)
 800a79e:	4630      	mov	r0, r6
 800a7a0:	f000 f82c 	bl	800a7fc <siprintf>
 800a7a4:	e7d0      	b.n	800a748 <_scanf_float+0x378>
 800a7a6:	9903      	ldr	r1, [sp, #12]
 800a7a8:	f012 0f04 	tst.w	r2, #4
 800a7ac:	f103 0204 	add.w	r2, r3, #4
 800a7b0:	600a      	str	r2, [r1, #0]
 800a7b2:	d1d9      	bne.n	800a768 <_scanf_float+0x398>
 800a7b4:	f8d3 8000 	ldr.w	r8, [r3]
 800a7b8:	ee10 2a10 	vmov	r2, s0
 800a7bc:	ee10 0a10 	vmov	r0, s0
 800a7c0:	463b      	mov	r3, r7
 800a7c2:	4639      	mov	r1, r7
 800a7c4:	f7f6 f9b2 	bl	8000b2c <__aeabi_dcmpun>
 800a7c8:	b128      	cbz	r0, 800a7d6 <_scanf_float+0x406>
 800a7ca:	4808      	ldr	r0, [pc, #32]	; (800a7ec <_scanf_float+0x41c>)
 800a7cc:	f000 f810 	bl	800a7f0 <nanf>
 800a7d0:	ed88 0a00 	vstr	s0, [r8]
 800a7d4:	e7cb      	b.n	800a76e <_scanf_float+0x39e>
 800a7d6:	4630      	mov	r0, r6
 800a7d8:	4639      	mov	r1, r7
 800a7da:	f7f6 fa05 	bl	8000be8 <__aeabi_d2f>
 800a7de:	f8c8 0000 	str.w	r0, [r8]
 800a7e2:	e7c4      	b.n	800a76e <_scanf_float+0x39e>
 800a7e4:	2500      	movs	r5, #0
 800a7e6:	e634      	b.n	800a452 <_scanf_float+0x82>
 800a7e8:	0800eed8 	.word	0x0800eed8
 800a7ec:	0800f2e0 	.word	0x0800f2e0

0800a7f0 <nanf>:
 800a7f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a7f8 <nanf+0x8>
 800a7f4:	4770      	bx	lr
 800a7f6:	bf00      	nop
 800a7f8:	7fc00000 	.word	0x7fc00000

0800a7fc <siprintf>:
 800a7fc:	b40e      	push	{r1, r2, r3}
 800a7fe:	b500      	push	{lr}
 800a800:	b09c      	sub	sp, #112	; 0x70
 800a802:	ab1d      	add	r3, sp, #116	; 0x74
 800a804:	9002      	str	r0, [sp, #8]
 800a806:	9006      	str	r0, [sp, #24]
 800a808:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a80c:	4809      	ldr	r0, [pc, #36]	; (800a834 <siprintf+0x38>)
 800a80e:	9107      	str	r1, [sp, #28]
 800a810:	9104      	str	r1, [sp, #16]
 800a812:	4909      	ldr	r1, [pc, #36]	; (800a838 <siprintf+0x3c>)
 800a814:	f853 2b04 	ldr.w	r2, [r3], #4
 800a818:	9105      	str	r1, [sp, #20]
 800a81a:	6800      	ldr	r0, [r0, #0]
 800a81c:	9301      	str	r3, [sp, #4]
 800a81e:	a902      	add	r1, sp, #8
 800a820:	f002 fee4 	bl	800d5ec <_svfiprintf_r>
 800a824:	9b02      	ldr	r3, [sp, #8]
 800a826:	2200      	movs	r2, #0
 800a828:	701a      	strb	r2, [r3, #0]
 800a82a:	b01c      	add	sp, #112	; 0x70
 800a82c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a830:	b003      	add	sp, #12
 800a832:	4770      	bx	lr
 800a834:	2000028c 	.word	0x2000028c
 800a838:	ffff0208 	.word	0xffff0208

0800a83c <sulp>:
 800a83c:	b570      	push	{r4, r5, r6, lr}
 800a83e:	4604      	mov	r4, r0
 800a840:	460d      	mov	r5, r1
 800a842:	ec45 4b10 	vmov	d0, r4, r5
 800a846:	4616      	mov	r6, r2
 800a848:	f002 fc2e 	bl	800d0a8 <__ulp>
 800a84c:	ec51 0b10 	vmov	r0, r1, d0
 800a850:	b17e      	cbz	r6, 800a872 <sulp+0x36>
 800a852:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a856:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	dd09      	ble.n	800a872 <sulp+0x36>
 800a85e:	051b      	lsls	r3, r3, #20
 800a860:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a864:	2400      	movs	r4, #0
 800a866:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a86a:	4622      	mov	r2, r4
 800a86c:	462b      	mov	r3, r5
 800a86e:	f7f5 fec3 	bl	80005f8 <__aeabi_dmul>
 800a872:	bd70      	pop	{r4, r5, r6, pc}
 800a874:	0000      	movs	r0, r0
	...

0800a878 <_strtod_l>:
 800a878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a87c:	ed2d 8b02 	vpush	{d8}
 800a880:	b09d      	sub	sp, #116	; 0x74
 800a882:	461f      	mov	r7, r3
 800a884:	2300      	movs	r3, #0
 800a886:	9318      	str	r3, [sp, #96]	; 0x60
 800a888:	4ba2      	ldr	r3, [pc, #648]	; (800ab14 <_strtod_l+0x29c>)
 800a88a:	9213      	str	r2, [sp, #76]	; 0x4c
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	9305      	str	r3, [sp, #20]
 800a890:	4604      	mov	r4, r0
 800a892:	4618      	mov	r0, r3
 800a894:	4688      	mov	r8, r1
 800a896:	f7f5 fc9b 	bl	80001d0 <strlen>
 800a89a:	f04f 0a00 	mov.w	sl, #0
 800a89e:	4605      	mov	r5, r0
 800a8a0:	f04f 0b00 	mov.w	fp, #0
 800a8a4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a8a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a8aa:	781a      	ldrb	r2, [r3, #0]
 800a8ac:	2a2b      	cmp	r2, #43	; 0x2b
 800a8ae:	d04e      	beq.n	800a94e <_strtod_l+0xd6>
 800a8b0:	d83b      	bhi.n	800a92a <_strtod_l+0xb2>
 800a8b2:	2a0d      	cmp	r2, #13
 800a8b4:	d834      	bhi.n	800a920 <_strtod_l+0xa8>
 800a8b6:	2a08      	cmp	r2, #8
 800a8b8:	d834      	bhi.n	800a924 <_strtod_l+0xac>
 800a8ba:	2a00      	cmp	r2, #0
 800a8bc:	d03e      	beq.n	800a93c <_strtod_l+0xc4>
 800a8be:	2300      	movs	r3, #0
 800a8c0:	930a      	str	r3, [sp, #40]	; 0x28
 800a8c2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a8c4:	7833      	ldrb	r3, [r6, #0]
 800a8c6:	2b30      	cmp	r3, #48	; 0x30
 800a8c8:	f040 80b0 	bne.w	800aa2c <_strtod_l+0x1b4>
 800a8cc:	7873      	ldrb	r3, [r6, #1]
 800a8ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a8d2:	2b58      	cmp	r3, #88	; 0x58
 800a8d4:	d168      	bne.n	800a9a8 <_strtod_l+0x130>
 800a8d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8d8:	9301      	str	r3, [sp, #4]
 800a8da:	ab18      	add	r3, sp, #96	; 0x60
 800a8dc:	9702      	str	r7, [sp, #8]
 800a8de:	9300      	str	r3, [sp, #0]
 800a8e0:	4a8d      	ldr	r2, [pc, #564]	; (800ab18 <_strtod_l+0x2a0>)
 800a8e2:	ab19      	add	r3, sp, #100	; 0x64
 800a8e4:	a917      	add	r1, sp, #92	; 0x5c
 800a8e6:	4620      	mov	r0, r4
 800a8e8:	f001 fd38 	bl	800c35c <__gethex>
 800a8ec:	f010 0707 	ands.w	r7, r0, #7
 800a8f0:	4605      	mov	r5, r0
 800a8f2:	d005      	beq.n	800a900 <_strtod_l+0x88>
 800a8f4:	2f06      	cmp	r7, #6
 800a8f6:	d12c      	bne.n	800a952 <_strtod_l+0xda>
 800a8f8:	3601      	adds	r6, #1
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	9617      	str	r6, [sp, #92]	; 0x5c
 800a8fe:	930a      	str	r3, [sp, #40]	; 0x28
 800a900:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a902:	2b00      	cmp	r3, #0
 800a904:	f040 8590 	bne.w	800b428 <_strtod_l+0xbb0>
 800a908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a90a:	b1eb      	cbz	r3, 800a948 <_strtod_l+0xd0>
 800a90c:	4652      	mov	r2, sl
 800a90e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a912:	ec43 2b10 	vmov	d0, r2, r3
 800a916:	b01d      	add	sp, #116	; 0x74
 800a918:	ecbd 8b02 	vpop	{d8}
 800a91c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a920:	2a20      	cmp	r2, #32
 800a922:	d1cc      	bne.n	800a8be <_strtod_l+0x46>
 800a924:	3301      	adds	r3, #1
 800a926:	9317      	str	r3, [sp, #92]	; 0x5c
 800a928:	e7be      	b.n	800a8a8 <_strtod_l+0x30>
 800a92a:	2a2d      	cmp	r2, #45	; 0x2d
 800a92c:	d1c7      	bne.n	800a8be <_strtod_l+0x46>
 800a92e:	2201      	movs	r2, #1
 800a930:	920a      	str	r2, [sp, #40]	; 0x28
 800a932:	1c5a      	adds	r2, r3, #1
 800a934:	9217      	str	r2, [sp, #92]	; 0x5c
 800a936:	785b      	ldrb	r3, [r3, #1]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d1c2      	bne.n	800a8c2 <_strtod_l+0x4a>
 800a93c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a93e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a942:	2b00      	cmp	r3, #0
 800a944:	f040 856e 	bne.w	800b424 <_strtod_l+0xbac>
 800a948:	4652      	mov	r2, sl
 800a94a:	465b      	mov	r3, fp
 800a94c:	e7e1      	b.n	800a912 <_strtod_l+0x9a>
 800a94e:	2200      	movs	r2, #0
 800a950:	e7ee      	b.n	800a930 <_strtod_l+0xb8>
 800a952:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a954:	b13a      	cbz	r2, 800a966 <_strtod_l+0xee>
 800a956:	2135      	movs	r1, #53	; 0x35
 800a958:	a81a      	add	r0, sp, #104	; 0x68
 800a95a:	f002 fcb0 	bl	800d2be <__copybits>
 800a95e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a960:	4620      	mov	r0, r4
 800a962:	f002 f86f 	bl	800ca44 <_Bfree>
 800a966:	3f01      	subs	r7, #1
 800a968:	2f04      	cmp	r7, #4
 800a96a:	d806      	bhi.n	800a97a <_strtod_l+0x102>
 800a96c:	e8df f007 	tbb	[pc, r7]
 800a970:	1714030a 	.word	0x1714030a
 800a974:	0a          	.byte	0x0a
 800a975:	00          	.byte	0x00
 800a976:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800a97a:	0728      	lsls	r0, r5, #28
 800a97c:	d5c0      	bpl.n	800a900 <_strtod_l+0x88>
 800a97e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a982:	e7bd      	b.n	800a900 <_strtod_l+0x88>
 800a984:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800a988:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a98a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a98e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a992:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a996:	e7f0      	b.n	800a97a <_strtod_l+0x102>
 800a998:	f8df b180 	ldr.w	fp, [pc, #384]	; 800ab1c <_strtod_l+0x2a4>
 800a99c:	e7ed      	b.n	800a97a <_strtod_l+0x102>
 800a99e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a9a2:	f04f 3aff 	mov.w	sl, #4294967295
 800a9a6:	e7e8      	b.n	800a97a <_strtod_l+0x102>
 800a9a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a9aa:	1c5a      	adds	r2, r3, #1
 800a9ac:	9217      	str	r2, [sp, #92]	; 0x5c
 800a9ae:	785b      	ldrb	r3, [r3, #1]
 800a9b0:	2b30      	cmp	r3, #48	; 0x30
 800a9b2:	d0f9      	beq.n	800a9a8 <_strtod_l+0x130>
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d0a3      	beq.n	800a900 <_strtod_l+0x88>
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	f04f 0900 	mov.w	r9, #0
 800a9be:	9304      	str	r3, [sp, #16]
 800a9c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a9c2:	9308      	str	r3, [sp, #32]
 800a9c4:	f8cd 901c 	str.w	r9, [sp, #28]
 800a9c8:	464f      	mov	r7, r9
 800a9ca:	220a      	movs	r2, #10
 800a9cc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a9ce:	7806      	ldrb	r6, [r0, #0]
 800a9d0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a9d4:	b2d9      	uxtb	r1, r3
 800a9d6:	2909      	cmp	r1, #9
 800a9d8:	d92a      	bls.n	800aa30 <_strtod_l+0x1b8>
 800a9da:	9905      	ldr	r1, [sp, #20]
 800a9dc:	462a      	mov	r2, r5
 800a9de:	f002 ff1f 	bl	800d820 <strncmp>
 800a9e2:	b398      	cbz	r0, 800aa4c <_strtod_l+0x1d4>
 800a9e4:	2000      	movs	r0, #0
 800a9e6:	4632      	mov	r2, r6
 800a9e8:	463d      	mov	r5, r7
 800a9ea:	9005      	str	r0, [sp, #20]
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	2a65      	cmp	r2, #101	; 0x65
 800a9f0:	d001      	beq.n	800a9f6 <_strtod_l+0x17e>
 800a9f2:	2a45      	cmp	r2, #69	; 0x45
 800a9f4:	d118      	bne.n	800aa28 <_strtod_l+0x1b0>
 800a9f6:	b91d      	cbnz	r5, 800aa00 <_strtod_l+0x188>
 800a9f8:	9a04      	ldr	r2, [sp, #16]
 800a9fa:	4302      	orrs	r2, r0
 800a9fc:	d09e      	beq.n	800a93c <_strtod_l+0xc4>
 800a9fe:	2500      	movs	r5, #0
 800aa00:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800aa04:	f108 0201 	add.w	r2, r8, #1
 800aa08:	9217      	str	r2, [sp, #92]	; 0x5c
 800aa0a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800aa0e:	2a2b      	cmp	r2, #43	; 0x2b
 800aa10:	d075      	beq.n	800aafe <_strtod_l+0x286>
 800aa12:	2a2d      	cmp	r2, #45	; 0x2d
 800aa14:	d07b      	beq.n	800ab0e <_strtod_l+0x296>
 800aa16:	f04f 0c00 	mov.w	ip, #0
 800aa1a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800aa1e:	2909      	cmp	r1, #9
 800aa20:	f240 8082 	bls.w	800ab28 <_strtod_l+0x2b0>
 800aa24:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800aa28:	2600      	movs	r6, #0
 800aa2a:	e09d      	b.n	800ab68 <_strtod_l+0x2f0>
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	e7c4      	b.n	800a9ba <_strtod_l+0x142>
 800aa30:	2f08      	cmp	r7, #8
 800aa32:	bfd8      	it	le
 800aa34:	9907      	ldrle	r1, [sp, #28]
 800aa36:	f100 0001 	add.w	r0, r0, #1
 800aa3a:	bfda      	itte	le
 800aa3c:	fb02 3301 	mlale	r3, r2, r1, r3
 800aa40:	9307      	strle	r3, [sp, #28]
 800aa42:	fb02 3909 	mlagt	r9, r2, r9, r3
 800aa46:	3701      	adds	r7, #1
 800aa48:	9017      	str	r0, [sp, #92]	; 0x5c
 800aa4a:	e7bf      	b.n	800a9cc <_strtod_l+0x154>
 800aa4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aa4e:	195a      	adds	r2, r3, r5
 800aa50:	9217      	str	r2, [sp, #92]	; 0x5c
 800aa52:	5d5a      	ldrb	r2, [r3, r5]
 800aa54:	2f00      	cmp	r7, #0
 800aa56:	d037      	beq.n	800aac8 <_strtod_l+0x250>
 800aa58:	9005      	str	r0, [sp, #20]
 800aa5a:	463d      	mov	r5, r7
 800aa5c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800aa60:	2b09      	cmp	r3, #9
 800aa62:	d912      	bls.n	800aa8a <_strtod_l+0x212>
 800aa64:	2301      	movs	r3, #1
 800aa66:	e7c2      	b.n	800a9ee <_strtod_l+0x176>
 800aa68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aa6a:	1c5a      	adds	r2, r3, #1
 800aa6c:	9217      	str	r2, [sp, #92]	; 0x5c
 800aa6e:	785a      	ldrb	r2, [r3, #1]
 800aa70:	3001      	adds	r0, #1
 800aa72:	2a30      	cmp	r2, #48	; 0x30
 800aa74:	d0f8      	beq.n	800aa68 <_strtod_l+0x1f0>
 800aa76:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800aa7a:	2b08      	cmp	r3, #8
 800aa7c:	f200 84d9 	bhi.w	800b432 <_strtod_l+0xbba>
 800aa80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aa82:	9005      	str	r0, [sp, #20]
 800aa84:	2000      	movs	r0, #0
 800aa86:	9308      	str	r3, [sp, #32]
 800aa88:	4605      	mov	r5, r0
 800aa8a:	3a30      	subs	r2, #48	; 0x30
 800aa8c:	f100 0301 	add.w	r3, r0, #1
 800aa90:	d014      	beq.n	800aabc <_strtod_l+0x244>
 800aa92:	9905      	ldr	r1, [sp, #20]
 800aa94:	4419      	add	r1, r3
 800aa96:	9105      	str	r1, [sp, #20]
 800aa98:	462b      	mov	r3, r5
 800aa9a:	eb00 0e05 	add.w	lr, r0, r5
 800aa9e:	210a      	movs	r1, #10
 800aaa0:	4573      	cmp	r3, lr
 800aaa2:	d113      	bne.n	800aacc <_strtod_l+0x254>
 800aaa4:	182b      	adds	r3, r5, r0
 800aaa6:	2b08      	cmp	r3, #8
 800aaa8:	f105 0501 	add.w	r5, r5, #1
 800aaac:	4405      	add	r5, r0
 800aaae:	dc1c      	bgt.n	800aaea <_strtod_l+0x272>
 800aab0:	9907      	ldr	r1, [sp, #28]
 800aab2:	230a      	movs	r3, #10
 800aab4:	fb03 2301 	mla	r3, r3, r1, r2
 800aab8:	9307      	str	r3, [sp, #28]
 800aaba:	2300      	movs	r3, #0
 800aabc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aabe:	1c51      	adds	r1, r2, #1
 800aac0:	9117      	str	r1, [sp, #92]	; 0x5c
 800aac2:	7852      	ldrb	r2, [r2, #1]
 800aac4:	4618      	mov	r0, r3
 800aac6:	e7c9      	b.n	800aa5c <_strtod_l+0x1e4>
 800aac8:	4638      	mov	r0, r7
 800aaca:	e7d2      	b.n	800aa72 <_strtod_l+0x1fa>
 800aacc:	2b08      	cmp	r3, #8
 800aace:	dc04      	bgt.n	800aada <_strtod_l+0x262>
 800aad0:	9e07      	ldr	r6, [sp, #28]
 800aad2:	434e      	muls	r6, r1
 800aad4:	9607      	str	r6, [sp, #28]
 800aad6:	3301      	adds	r3, #1
 800aad8:	e7e2      	b.n	800aaa0 <_strtod_l+0x228>
 800aada:	f103 0c01 	add.w	ip, r3, #1
 800aade:	f1bc 0f10 	cmp.w	ip, #16
 800aae2:	bfd8      	it	le
 800aae4:	fb01 f909 	mulle.w	r9, r1, r9
 800aae8:	e7f5      	b.n	800aad6 <_strtod_l+0x25e>
 800aaea:	2d10      	cmp	r5, #16
 800aaec:	bfdc      	itt	le
 800aaee:	230a      	movle	r3, #10
 800aaf0:	fb03 2909 	mlale	r9, r3, r9, r2
 800aaf4:	e7e1      	b.n	800aaba <_strtod_l+0x242>
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	9305      	str	r3, [sp, #20]
 800aafa:	2301      	movs	r3, #1
 800aafc:	e77c      	b.n	800a9f8 <_strtod_l+0x180>
 800aafe:	f04f 0c00 	mov.w	ip, #0
 800ab02:	f108 0202 	add.w	r2, r8, #2
 800ab06:	9217      	str	r2, [sp, #92]	; 0x5c
 800ab08:	f898 2002 	ldrb.w	r2, [r8, #2]
 800ab0c:	e785      	b.n	800aa1a <_strtod_l+0x1a2>
 800ab0e:	f04f 0c01 	mov.w	ip, #1
 800ab12:	e7f6      	b.n	800ab02 <_strtod_l+0x28a>
 800ab14:	0800f128 	.word	0x0800f128
 800ab18:	0800eee0 	.word	0x0800eee0
 800ab1c:	7ff00000 	.word	0x7ff00000
 800ab20:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ab22:	1c51      	adds	r1, r2, #1
 800ab24:	9117      	str	r1, [sp, #92]	; 0x5c
 800ab26:	7852      	ldrb	r2, [r2, #1]
 800ab28:	2a30      	cmp	r2, #48	; 0x30
 800ab2a:	d0f9      	beq.n	800ab20 <_strtod_l+0x2a8>
 800ab2c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ab30:	2908      	cmp	r1, #8
 800ab32:	f63f af79 	bhi.w	800aa28 <_strtod_l+0x1b0>
 800ab36:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ab3a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ab3c:	9206      	str	r2, [sp, #24]
 800ab3e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ab40:	1c51      	adds	r1, r2, #1
 800ab42:	9117      	str	r1, [sp, #92]	; 0x5c
 800ab44:	7852      	ldrb	r2, [r2, #1]
 800ab46:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800ab4a:	2e09      	cmp	r6, #9
 800ab4c:	d937      	bls.n	800abbe <_strtod_l+0x346>
 800ab4e:	9e06      	ldr	r6, [sp, #24]
 800ab50:	1b89      	subs	r1, r1, r6
 800ab52:	2908      	cmp	r1, #8
 800ab54:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800ab58:	dc02      	bgt.n	800ab60 <_strtod_l+0x2e8>
 800ab5a:	4576      	cmp	r6, lr
 800ab5c:	bfa8      	it	ge
 800ab5e:	4676      	movge	r6, lr
 800ab60:	f1bc 0f00 	cmp.w	ip, #0
 800ab64:	d000      	beq.n	800ab68 <_strtod_l+0x2f0>
 800ab66:	4276      	negs	r6, r6
 800ab68:	2d00      	cmp	r5, #0
 800ab6a:	d14d      	bne.n	800ac08 <_strtod_l+0x390>
 800ab6c:	9904      	ldr	r1, [sp, #16]
 800ab6e:	4301      	orrs	r1, r0
 800ab70:	f47f aec6 	bne.w	800a900 <_strtod_l+0x88>
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	f47f aee1 	bne.w	800a93c <_strtod_l+0xc4>
 800ab7a:	2a69      	cmp	r2, #105	; 0x69
 800ab7c:	d027      	beq.n	800abce <_strtod_l+0x356>
 800ab7e:	dc24      	bgt.n	800abca <_strtod_l+0x352>
 800ab80:	2a49      	cmp	r2, #73	; 0x49
 800ab82:	d024      	beq.n	800abce <_strtod_l+0x356>
 800ab84:	2a4e      	cmp	r2, #78	; 0x4e
 800ab86:	f47f aed9 	bne.w	800a93c <_strtod_l+0xc4>
 800ab8a:	499f      	ldr	r1, [pc, #636]	; (800ae08 <_strtod_l+0x590>)
 800ab8c:	a817      	add	r0, sp, #92	; 0x5c
 800ab8e:	f001 fe3d 	bl	800c80c <__match>
 800ab92:	2800      	cmp	r0, #0
 800ab94:	f43f aed2 	beq.w	800a93c <_strtod_l+0xc4>
 800ab98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	2b28      	cmp	r3, #40	; 0x28
 800ab9e:	d12d      	bne.n	800abfc <_strtod_l+0x384>
 800aba0:	499a      	ldr	r1, [pc, #616]	; (800ae0c <_strtod_l+0x594>)
 800aba2:	aa1a      	add	r2, sp, #104	; 0x68
 800aba4:	a817      	add	r0, sp, #92	; 0x5c
 800aba6:	f001 fe45 	bl	800c834 <__hexnan>
 800abaa:	2805      	cmp	r0, #5
 800abac:	d126      	bne.n	800abfc <_strtod_l+0x384>
 800abae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800abb0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800abb4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800abb8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800abbc:	e6a0      	b.n	800a900 <_strtod_l+0x88>
 800abbe:	210a      	movs	r1, #10
 800abc0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800abc4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800abc8:	e7b9      	b.n	800ab3e <_strtod_l+0x2c6>
 800abca:	2a6e      	cmp	r2, #110	; 0x6e
 800abcc:	e7db      	b.n	800ab86 <_strtod_l+0x30e>
 800abce:	4990      	ldr	r1, [pc, #576]	; (800ae10 <_strtod_l+0x598>)
 800abd0:	a817      	add	r0, sp, #92	; 0x5c
 800abd2:	f001 fe1b 	bl	800c80c <__match>
 800abd6:	2800      	cmp	r0, #0
 800abd8:	f43f aeb0 	beq.w	800a93c <_strtod_l+0xc4>
 800abdc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800abde:	498d      	ldr	r1, [pc, #564]	; (800ae14 <_strtod_l+0x59c>)
 800abe0:	3b01      	subs	r3, #1
 800abe2:	a817      	add	r0, sp, #92	; 0x5c
 800abe4:	9317      	str	r3, [sp, #92]	; 0x5c
 800abe6:	f001 fe11 	bl	800c80c <__match>
 800abea:	b910      	cbnz	r0, 800abf2 <_strtod_l+0x37a>
 800abec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800abee:	3301      	adds	r3, #1
 800abf0:	9317      	str	r3, [sp, #92]	; 0x5c
 800abf2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800ae24 <_strtod_l+0x5ac>
 800abf6:	f04f 0a00 	mov.w	sl, #0
 800abfa:	e681      	b.n	800a900 <_strtod_l+0x88>
 800abfc:	4886      	ldr	r0, [pc, #536]	; (800ae18 <_strtod_l+0x5a0>)
 800abfe:	f002 fdf7 	bl	800d7f0 <nan>
 800ac02:	ec5b ab10 	vmov	sl, fp, d0
 800ac06:	e67b      	b.n	800a900 <_strtod_l+0x88>
 800ac08:	9b05      	ldr	r3, [sp, #20]
 800ac0a:	9807      	ldr	r0, [sp, #28]
 800ac0c:	1af3      	subs	r3, r6, r3
 800ac0e:	2f00      	cmp	r7, #0
 800ac10:	bf08      	it	eq
 800ac12:	462f      	moveq	r7, r5
 800ac14:	2d10      	cmp	r5, #16
 800ac16:	9306      	str	r3, [sp, #24]
 800ac18:	46a8      	mov	r8, r5
 800ac1a:	bfa8      	it	ge
 800ac1c:	f04f 0810 	movge.w	r8, #16
 800ac20:	f7f5 fc70 	bl	8000504 <__aeabi_ui2d>
 800ac24:	2d09      	cmp	r5, #9
 800ac26:	4682      	mov	sl, r0
 800ac28:	468b      	mov	fp, r1
 800ac2a:	dd13      	ble.n	800ac54 <_strtod_l+0x3dc>
 800ac2c:	4b7b      	ldr	r3, [pc, #492]	; (800ae1c <_strtod_l+0x5a4>)
 800ac2e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ac32:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ac36:	f7f5 fcdf 	bl	80005f8 <__aeabi_dmul>
 800ac3a:	4682      	mov	sl, r0
 800ac3c:	4648      	mov	r0, r9
 800ac3e:	468b      	mov	fp, r1
 800ac40:	f7f5 fc60 	bl	8000504 <__aeabi_ui2d>
 800ac44:	4602      	mov	r2, r0
 800ac46:	460b      	mov	r3, r1
 800ac48:	4650      	mov	r0, sl
 800ac4a:	4659      	mov	r1, fp
 800ac4c:	f7f5 fb1e 	bl	800028c <__adddf3>
 800ac50:	4682      	mov	sl, r0
 800ac52:	468b      	mov	fp, r1
 800ac54:	2d0f      	cmp	r5, #15
 800ac56:	dc38      	bgt.n	800acca <_strtod_l+0x452>
 800ac58:	9b06      	ldr	r3, [sp, #24]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	f43f ae50 	beq.w	800a900 <_strtod_l+0x88>
 800ac60:	dd24      	ble.n	800acac <_strtod_l+0x434>
 800ac62:	2b16      	cmp	r3, #22
 800ac64:	dc0b      	bgt.n	800ac7e <_strtod_l+0x406>
 800ac66:	496d      	ldr	r1, [pc, #436]	; (800ae1c <_strtod_l+0x5a4>)
 800ac68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ac6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac70:	4652      	mov	r2, sl
 800ac72:	465b      	mov	r3, fp
 800ac74:	f7f5 fcc0 	bl	80005f8 <__aeabi_dmul>
 800ac78:	4682      	mov	sl, r0
 800ac7a:	468b      	mov	fp, r1
 800ac7c:	e640      	b.n	800a900 <_strtod_l+0x88>
 800ac7e:	9a06      	ldr	r2, [sp, #24]
 800ac80:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800ac84:	4293      	cmp	r3, r2
 800ac86:	db20      	blt.n	800acca <_strtod_l+0x452>
 800ac88:	4c64      	ldr	r4, [pc, #400]	; (800ae1c <_strtod_l+0x5a4>)
 800ac8a:	f1c5 050f 	rsb	r5, r5, #15
 800ac8e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ac92:	4652      	mov	r2, sl
 800ac94:	465b      	mov	r3, fp
 800ac96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac9a:	f7f5 fcad 	bl	80005f8 <__aeabi_dmul>
 800ac9e:	9b06      	ldr	r3, [sp, #24]
 800aca0:	1b5d      	subs	r5, r3, r5
 800aca2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800aca6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800acaa:	e7e3      	b.n	800ac74 <_strtod_l+0x3fc>
 800acac:	9b06      	ldr	r3, [sp, #24]
 800acae:	3316      	adds	r3, #22
 800acb0:	db0b      	blt.n	800acca <_strtod_l+0x452>
 800acb2:	9b05      	ldr	r3, [sp, #20]
 800acb4:	1b9e      	subs	r6, r3, r6
 800acb6:	4b59      	ldr	r3, [pc, #356]	; (800ae1c <_strtod_l+0x5a4>)
 800acb8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800acbc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800acc0:	4650      	mov	r0, sl
 800acc2:	4659      	mov	r1, fp
 800acc4:	f7f5 fdc2 	bl	800084c <__aeabi_ddiv>
 800acc8:	e7d6      	b.n	800ac78 <_strtod_l+0x400>
 800acca:	9b06      	ldr	r3, [sp, #24]
 800accc:	eba5 0808 	sub.w	r8, r5, r8
 800acd0:	4498      	add	r8, r3
 800acd2:	f1b8 0f00 	cmp.w	r8, #0
 800acd6:	dd74      	ble.n	800adc2 <_strtod_l+0x54a>
 800acd8:	f018 030f 	ands.w	r3, r8, #15
 800acdc:	d00a      	beq.n	800acf4 <_strtod_l+0x47c>
 800acde:	494f      	ldr	r1, [pc, #316]	; (800ae1c <_strtod_l+0x5a4>)
 800ace0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ace4:	4652      	mov	r2, sl
 800ace6:	465b      	mov	r3, fp
 800ace8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acec:	f7f5 fc84 	bl	80005f8 <__aeabi_dmul>
 800acf0:	4682      	mov	sl, r0
 800acf2:	468b      	mov	fp, r1
 800acf4:	f038 080f 	bics.w	r8, r8, #15
 800acf8:	d04f      	beq.n	800ad9a <_strtod_l+0x522>
 800acfa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800acfe:	dd22      	ble.n	800ad46 <_strtod_l+0x4ce>
 800ad00:	2500      	movs	r5, #0
 800ad02:	462e      	mov	r6, r5
 800ad04:	9507      	str	r5, [sp, #28]
 800ad06:	9505      	str	r5, [sp, #20]
 800ad08:	2322      	movs	r3, #34	; 0x22
 800ad0a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800ae24 <_strtod_l+0x5ac>
 800ad0e:	6023      	str	r3, [r4, #0]
 800ad10:	f04f 0a00 	mov.w	sl, #0
 800ad14:	9b07      	ldr	r3, [sp, #28]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	f43f adf2 	beq.w	800a900 <_strtod_l+0x88>
 800ad1c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ad1e:	4620      	mov	r0, r4
 800ad20:	f001 fe90 	bl	800ca44 <_Bfree>
 800ad24:	9905      	ldr	r1, [sp, #20]
 800ad26:	4620      	mov	r0, r4
 800ad28:	f001 fe8c 	bl	800ca44 <_Bfree>
 800ad2c:	4631      	mov	r1, r6
 800ad2e:	4620      	mov	r0, r4
 800ad30:	f001 fe88 	bl	800ca44 <_Bfree>
 800ad34:	9907      	ldr	r1, [sp, #28]
 800ad36:	4620      	mov	r0, r4
 800ad38:	f001 fe84 	bl	800ca44 <_Bfree>
 800ad3c:	4629      	mov	r1, r5
 800ad3e:	4620      	mov	r0, r4
 800ad40:	f001 fe80 	bl	800ca44 <_Bfree>
 800ad44:	e5dc      	b.n	800a900 <_strtod_l+0x88>
 800ad46:	4b36      	ldr	r3, [pc, #216]	; (800ae20 <_strtod_l+0x5a8>)
 800ad48:	9304      	str	r3, [sp, #16]
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ad50:	4650      	mov	r0, sl
 800ad52:	4659      	mov	r1, fp
 800ad54:	4699      	mov	r9, r3
 800ad56:	f1b8 0f01 	cmp.w	r8, #1
 800ad5a:	dc21      	bgt.n	800ada0 <_strtod_l+0x528>
 800ad5c:	b10b      	cbz	r3, 800ad62 <_strtod_l+0x4ea>
 800ad5e:	4682      	mov	sl, r0
 800ad60:	468b      	mov	fp, r1
 800ad62:	4b2f      	ldr	r3, [pc, #188]	; (800ae20 <_strtod_l+0x5a8>)
 800ad64:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ad68:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800ad6c:	4652      	mov	r2, sl
 800ad6e:	465b      	mov	r3, fp
 800ad70:	e9d9 0100 	ldrd	r0, r1, [r9]
 800ad74:	f7f5 fc40 	bl	80005f8 <__aeabi_dmul>
 800ad78:	4b2a      	ldr	r3, [pc, #168]	; (800ae24 <_strtod_l+0x5ac>)
 800ad7a:	460a      	mov	r2, r1
 800ad7c:	400b      	ands	r3, r1
 800ad7e:	492a      	ldr	r1, [pc, #168]	; (800ae28 <_strtod_l+0x5b0>)
 800ad80:	428b      	cmp	r3, r1
 800ad82:	4682      	mov	sl, r0
 800ad84:	d8bc      	bhi.n	800ad00 <_strtod_l+0x488>
 800ad86:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ad8a:	428b      	cmp	r3, r1
 800ad8c:	bf86      	itte	hi
 800ad8e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800ae2c <_strtod_l+0x5b4>
 800ad92:	f04f 3aff 	movhi.w	sl, #4294967295
 800ad96:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	9304      	str	r3, [sp, #16]
 800ad9e:	e084      	b.n	800aeaa <_strtod_l+0x632>
 800ada0:	f018 0f01 	tst.w	r8, #1
 800ada4:	d005      	beq.n	800adb2 <_strtod_l+0x53a>
 800ada6:	9b04      	ldr	r3, [sp, #16]
 800ada8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adac:	f7f5 fc24 	bl	80005f8 <__aeabi_dmul>
 800adb0:	2301      	movs	r3, #1
 800adb2:	9a04      	ldr	r2, [sp, #16]
 800adb4:	3208      	adds	r2, #8
 800adb6:	f109 0901 	add.w	r9, r9, #1
 800adba:	ea4f 0868 	mov.w	r8, r8, asr #1
 800adbe:	9204      	str	r2, [sp, #16]
 800adc0:	e7c9      	b.n	800ad56 <_strtod_l+0x4de>
 800adc2:	d0ea      	beq.n	800ad9a <_strtod_l+0x522>
 800adc4:	f1c8 0800 	rsb	r8, r8, #0
 800adc8:	f018 020f 	ands.w	r2, r8, #15
 800adcc:	d00a      	beq.n	800ade4 <_strtod_l+0x56c>
 800adce:	4b13      	ldr	r3, [pc, #76]	; (800ae1c <_strtod_l+0x5a4>)
 800add0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800add4:	4650      	mov	r0, sl
 800add6:	4659      	mov	r1, fp
 800add8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800addc:	f7f5 fd36 	bl	800084c <__aeabi_ddiv>
 800ade0:	4682      	mov	sl, r0
 800ade2:	468b      	mov	fp, r1
 800ade4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ade8:	d0d7      	beq.n	800ad9a <_strtod_l+0x522>
 800adea:	f1b8 0f1f 	cmp.w	r8, #31
 800adee:	dd1f      	ble.n	800ae30 <_strtod_l+0x5b8>
 800adf0:	2500      	movs	r5, #0
 800adf2:	462e      	mov	r6, r5
 800adf4:	9507      	str	r5, [sp, #28]
 800adf6:	9505      	str	r5, [sp, #20]
 800adf8:	2322      	movs	r3, #34	; 0x22
 800adfa:	f04f 0a00 	mov.w	sl, #0
 800adfe:	f04f 0b00 	mov.w	fp, #0
 800ae02:	6023      	str	r3, [r4, #0]
 800ae04:	e786      	b.n	800ad14 <_strtod_l+0x49c>
 800ae06:	bf00      	nop
 800ae08:	0800eeb1 	.word	0x0800eeb1
 800ae0c:	0800eef4 	.word	0x0800eef4
 800ae10:	0800eea9 	.word	0x0800eea9
 800ae14:	0800f034 	.word	0x0800f034
 800ae18:	0800f2e0 	.word	0x0800f2e0
 800ae1c:	0800f1c0 	.word	0x0800f1c0
 800ae20:	0800f198 	.word	0x0800f198
 800ae24:	7ff00000 	.word	0x7ff00000
 800ae28:	7ca00000 	.word	0x7ca00000
 800ae2c:	7fefffff 	.word	0x7fefffff
 800ae30:	f018 0310 	ands.w	r3, r8, #16
 800ae34:	bf18      	it	ne
 800ae36:	236a      	movne	r3, #106	; 0x6a
 800ae38:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800b1e8 <_strtod_l+0x970>
 800ae3c:	9304      	str	r3, [sp, #16]
 800ae3e:	4650      	mov	r0, sl
 800ae40:	4659      	mov	r1, fp
 800ae42:	2300      	movs	r3, #0
 800ae44:	f018 0f01 	tst.w	r8, #1
 800ae48:	d004      	beq.n	800ae54 <_strtod_l+0x5dc>
 800ae4a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ae4e:	f7f5 fbd3 	bl	80005f8 <__aeabi_dmul>
 800ae52:	2301      	movs	r3, #1
 800ae54:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ae58:	f109 0908 	add.w	r9, r9, #8
 800ae5c:	d1f2      	bne.n	800ae44 <_strtod_l+0x5cc>
 800ae5e:	b10b      	cbz	r3, 800ae64 <_strtod_l+0x5ec>
 800ae60:	4682      	mov	sl, r0
 800ae62:	468b      	mov	fp, r1
 800ae64:	9b04      	ldr	r3, [sp, #16]
 800ae66:	b1c3      	cbz	r3, 800ae9a <_strtod_l+0x622>
 800ae68:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ae6c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	4659      	mov	r1, fp
 800ae74:	dd11      	ble.n	800ae9a <_strtod_l+0x622>
 800ae76:	2b1f      	cmp	r3, #31
 800ae78:	f340 8124 	ble.w	800b0c4 <_strtod_l+0x84c>
 800ae7c:	2b34      	cmp	r3, #52	; 0x34
 800ae7e:	bfde      	ittt	le
 800ae80:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ae84:	f04f 33ff 	movle.w	r3, #4294967295
 800ae88:	fa03 f202 	lslle.w	r2, r3, r2
 800ae8c:	f04f 0a00 	mov.w	sl, #0
 800ae90:	bfcc      	ite	gt
 800ae92:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ae96:	ea02 0b01 	andle.w	fp, r2, r1
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	4650      	mov	r0, sl
 800aea0:	4659      	mov	r1, fp
 800aea2:	f7f5 fe11 	bl	8000ac8 <__aeabi_dcmpeq>
 800aea6:	2800      	cmp	r0, #0
 800aea8:	d1a2      	bne.n	800adf0 <_strtod_l+0x578>
 800aeaa:	9b07      	ldr	r3, [sp, #28]
 800aeac:	9300      	str	r3, [sp, #0]
 800aeae:	9908      	ldr	r1, [sp, #32]
 800aeb0:	462b      	mov	r3, r5
 800aeb2:	463a      	mov	r2, r7
 800aeb4:	4620      	mov	r0, r4
 800aeb6:	f001 fe2d 	bl	800cb14 <__s2b>
 800aeba:	9007      	str	r0, [sp, #28]
 800aebc:	2800      	cmp	r0, #0
 800aebe:	f43f af1f 	beq.w	800ad00 <_strtod_l+0x488>
 800aec2:	9b05      	ldr	r3, [sp, #20]
 800aec4:	1b9e      	subs	r6, r3, r6
 800aec6:	9b06      	ldr	r3, [sp, #24]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	bfb4      	ite	lt
 800aecc:	4633      	movlt	r3, r6
 800aece:	2300      	movge	r3, #0
 800aed0:	930c      	str	r3, [sp, #48]	; 0x30
 800aed2:	9b06      	ldr	r3, [sp, #24]
 800aed4:	2500      	movs	r5, #0
 800aed6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800aeda:	9312      	str	r3, [sp, #72]	; 0x48
 800aedc:	462e      	mov	r6, r5
 800aede:	9b07      	ldr	r3, [sp, #28]
 800aee0:	4620      	mov	r0, r4
 800aee2:	6859      	ldr	r1, [r3, #4]
 800aee4:	f001 fd6e 	bl	800c9c4 <_Balloc>
 800aee8:	9005      	str	r0, [sp, #20]
 800aeea:	2800      	cmp	r0, #0
 800aeec:	f43f af0c 	beq.w	800ad08 <_strtod_l+0x490>
 800aef0:	9b07      	ldr	r3, [sp, #28]
 800aef2:	691a      	ldr	r2, [r3, #16]
 800aef4:	3202      	adds	r2, #2
 800aef6:	f103 010c 	add.w	r1, r3, #12
 800aefa:	0092      	lsls	r2, r2, #2
 800aefc:	300c      	adds	r0, #12
 800aefe:	f001 fd53 	bl	800c9a8 <memcpy>
 800af02:	ec4b ab10 	vmov	d0, sl, fp
 800af06:	aa1a      	add	r2, sp, #104	; 0x68
 800af08:	a919      	add	r1, sp, #100	; 0x64
 800af0a:	4620      	mov	r0, r4
 800af0c:	f002 f948 	bl	800d1a0 <__d2b>
 800af10:	ec4b ab18 	vmov	d8, sl, fp
 800af14:	9018      	str	r0, [sp, #96]	; 0x60
 800af16:	2800      	cmp	r0, #0
 800af18:	f43f aef6 	beq.w	800ad08 <_strtod_l+0x490>
 800af1c:	2101      	movs	r1, #1
 800af1e:	4620      	mov	r0, r4
 800af20:	f001 fe92 	bl	800cc48 <__i2b>
 800af24:	4606      	mov	r6, r0
 800af26:	2800      	cmp	r0, #0
 800af28:	f43f aeee 	beq.w	800ad08 <_strtod_l+0x490>
 800af2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800af2e:	9904      	ldr	r1, [sp, #16]
 800af30:	2b00      	cmp	r3, #0
 800af32:	bfab      	itete	ge
 800af34:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800af36:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800af38:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800af3a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800af3e:	bfac      	ite	ge
 800af40:	eb03 0902 	addge.w	r9, r3, r2
 800af44:	1ad7      	sublt	r7, r2, r3
 800af46:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800af48:	eba3 0801 	sub.w	r8, r3, r1
 800af4c:	4490      	add	r8, r2
 800af4e:	4ba1      	ldr	r3, [pc, #644]	; (800b1d4 <_strtod_l+0x95c>)
 800af50:	f108 38ff 	add.w	r8, r8, #4294967295
 800af54:	4598      	cmp	r8, r3
 800af56:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800af5a:	f280 80c7 	bge.w	800b0ec <_strtod_l+0x874>
 800af5e:	eba3 0308 	sub.w	r3, r3, r8
 800af62:	2b1f      	cmp	r3, #31
 800af64:	eba2 0203 	sub.w	r2, r2, r3
 800af68:	f04f 0101 	mov.w	r1, #1
 800af6c:	f300 80b1 	bgt.w	800b0d2 <_strtod_l+0x85a>
 800af70:	fa01 f303 	lsl.w	r3, r1, r3
 800af74:	930d      	str	r3, [sp, #52]	; 0x34
 800af76:	2300      	movs	r3, #0
 800af78:	9308      	str	r3, [sp, #32]
 800af7a:	eb09 0802 	add.w	r8, r9, r2
 800af7e:	9b04      	ldr	r3, [sp, #16]
 800af80:	45c1      	cmp	r9, r8
 800af82:	4417      	add	r7, r2
 800af84:	441f      	add	r7, r3
 800af86:	464b      	mov	r3, r9
 800af88:	bfa8      	it	ge
 800af8a:	4643      	movge	r3, r8
 800af8c:	42bb      	cmp	r3, r7
 800af8e:	bfa8      	it	ge
 800af90:	463b      	movge	r3, r7
 800af92:	2b00      	cmp	r3, #0
 800af94:	bfc2      	ittt	gt
 800af96:	eba8 0803 	subgt.w	r8, r8, r3
 800af9a:	1aff      	subgt	r7, r7, r3
 800af9c:	eba9 0903 	subgt.w	r9, r9, r3
 800afa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	dd17      	ble.n	800afd6 <_strtod_l+0x75e>
 800afa6:	4631      	mov	r1, r6
 800afa8:	461a      	mov	r2, r3
 800afaa:	4620      	mov	r0, r4
 800afac:	f001 ff0c 	bl	800cdc8 <__pow5mult>
 800afb0:	4606      	mov	r6, r0
 800afb2:	2800      	cmp	r0, #0
 800afb4:	f43f aea8 	beq.w	800ad08 <_strtod_l+0x490>
 800afb8:	4601      	mov	r1, r0
 800afba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800afbc:	4620      	mov	r0, r4
 800afbe:	f001 fe59 	bl	800cc74 <__multiply>
 800afc2:	900b      	str	r0, [sp, #44]	; 0x2c
 800afc4:	2800      	cmp	r0, #0
 800afc6:	f43f ae9f 	beq.w	800ad08 <_strtod_l+0x490>
 800afca:	9918      	ldr	r1, [sp, #96]	; 0x60
 800afcc:	4620      	mov	r0, r4
 800afce:	f001 fd39 	bl	800ca44 <_Bfree>
 800afd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afd4:	9318      	str	r3, [sp, #96]	; 0x60
 800afd6:	f1b8 0f00 	cmp.w	r8, #0
 800afda:	f300 808c 	bgt.w	800b0f6 <_strtod_l+0x87e>
 800afde:	9b06      	ldr	r3, [sp, #24]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	dd08      	ble.n	800aff6 <_strtod_l+0x77e>
 800afe4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800afe6:	9905      	ldr	r1, [sp, #20]
 800afe8:	4620      	mov	r0, r4
 800afea:	f001 feed 	bl	800cdc8 <__pow5mult>
 800afee:	9005      	str	r0, [sp, #20]
 800aff0:	2800      	cmp	r0, #0
 800aff2:	f43f ae89 	beq.w	800ad08 <_strtod_l+0x490>
 800aff6:	2f00      	cmp	r7, #0
 800aff8:	dd08      	ble.n	800b00c <_strtod_l+0x794>
 800affa:	9905      	ldr	r1, [sp, #20]
 800affc:	463a      	mov	r2, r7
 800affe:	4620      	mov	r0, r4
 800b000:	f001 ff3c 	bl	800ce7c <__lshift>
 800b004:	9005      	str	r0, [sp, #20]
 800b006:	2800      	cmp	r0, #0
 800b008:	f43f ae7e 	beq.w	800ad08 <_strtod_l+0x490>
 800b00c:	f1b9 0f00 	cmp.w	r9, #0
 800b010:	dd08      	ble.n	800b024 <_strtod_l+0x7ac>
 800b012:	4631      	mov	r1, r6
 800b014:	464a      	mov	r2, r9
 800b016:	4620      	mov	r0, r4
 800b018:	f001 ff30 	bl	800ce7c <__lshift>
 800b01c:	4606      	mov	r6, r0
 800b01e:	2800      	cmp	r0, #0
 800b020:	f43f ae72 	beq.w	800ad08 <_strtod_l+0x490>
 800b024:	9a05      	ldr	r2, [sp, #20]
 800b026:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b028:	4620      	mov	r0, r4
 800b02a:	f001 ffb3 	bl	800cf94 <__mdiff>
 800b02e:	4605      	mov	r5, r0
 800b030:	2800      	cmp	r0, #0
 800b032:	f43f ae69 	beq.w	800ad08 <_strtod_l+0x490>
 800b036:	68c3      	ldr	r3, [r0, #12]
 800b038:	930b      	str	r3, [sp, #44]	; 0x2c
 800b03a:	2300      	movs	r3, #0
 800b03c:	60c3      	str	r3, [r0, #12]
 800b03e:	4631      	mov	r1, r6
 800b040:	f001 ff8c 	bl	800cf5c <__mcmp>
 800b044:	2800      	cmp	r0, #0
 800b046:	da60      	bge.n	800b10a <_strtod_l+0x892>
 800b048:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b04a:	ea53 030a 	orrs.w	r3, r3, sl
 800b04e:	f040 8082 	bne.w	800b156 <_strtod_l+0x8de>
 800b052:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b056:	2b00      	cmp	r3, #0
 800b058:	d17d      	bne.n	800b156 <_strtod_l+0x8de>
 800b05a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b05e:	0d1b      	lsrs	r3, r3, #20
 800b060:	051b      	lsls	r3, r3, #20
 800b062:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b066:	d976      	bls.n	800b156 <_strtod_l+0x8de>
 800b068:	696b      	ldr	r3, [r5, #20]
 800b06a:	b913      	cbnz	r3, 800b072 <_strtod_l+0x7fa>
 800b06c:	692b      	ldr	r3, [r5, #16]
 800b06e:	2b01      	cmp	r3, #1
 800b070:	dd71      	ble.n	800b156 <_strtod_l+0x8de>
 800b072:	4629      	mov	r1, r5
 800b074:	2201      	movs	r2, #1
 800b076:	4620      	mov	r0, r4
 800b078:	f001 ff00 	bl	800ce7c <__lshift>
 800b07c:	4631      	mov	r1, r6
 800b07e:	4605      	mov	r5, r0
 800b080:	f001 ff6c 	bl	800cf5c <__mcmp>
 800b084:	2800      	cmp	r0, #0
 800b086:	dd66      	ble.n	800b156 <_strtod_l+0x8de>
 800b088:	9904      	ldr	r1, [sp, #16]
 800b08a:	4a53      	ldr	r2, [pc, #332]	; (800b1d8 <_strtod_l+0x960>)
 800b08c:	465b      	mov	r3, fp
 800b08e:	2900      	cmp	r1, #0
 800b090:	f000 8081 	beq.w	800b196 <_strtod_l+0x91e>
 800b094:	ea02 010b 	and.w	r1, r2, fp
 800b098:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b09c:	dc7b      	bgt.n	800b196 <_strtod_l+0x91e>
 800b09e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b0a2:	f77f aea9 	ble.w	800adf8 <_strtod_l+0x580>
 800b0a6:	4b4d      	ldr	r3, [pc, #308]	; (800b1dc <_strtod_l+0x964>)
 800b0a8:	4650      	mov	r0, sl
 800b0aa:	4659      	mov	r1, fp
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	f7f5 faa3 	bl	80005f8 <__aeabi_dmul>
 800b0b2:	460b      	mov	r3, r1
 800b0b4:	4303      	orrs	r3, r0
 800b0b6:	bf08      	it	eq
 800b0b8:	2322      	moveq	r3, #34	; 0x22
 800b0ba:	4682      	mov	sl, r0
 800b0bc:	468b      	mov	fp, r1
 800b0be:	bf08      	it	eq
 800b0c0:	6023      	streq	r3, [r4, #0]
 800b0c2:	e62b      	b.n	800ad1c <_strtod_l+0x4a4>
 800b0c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b0c8:	fa02 f303 	lsl.w	r3, r2, r3
 800b0cc:	ea03 0a0a 	and.w	sl, r3, sl
 800b0d0:	e6e3      	b.n	800ae9a <_strtod_l+0x622>
 800b0d2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b0d6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b0da:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b0de:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b0e2:	fa01 f308 	lsl.w	r3, r1, r8
 800b0e6:	9308      	str	r3, [sp, #32]
 800b0e8:	910d      	str	r1, [sp, #52]	; 0x34
 800b0ea:	e746      	b.n	800af7a <_strtod_l+0x702>
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	9308      	str	r3, [sp, #32]
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	930d      	str	r3, [sp, #52]	; 0x34
 800b0f4:	e741      	b.n	800af7a <_strtod_l+0x702>
 800b0f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b0f8:	4642      	mov	r2, r8
 800b0fa:	4620      	mov	r0, r4
 800b0fc:	f001 febe 	bl	800ce7c <__lshift>
 800b100:	9018      	str	r0, [sp, #96]	; 0x60
 800b102:	2800      	cmp	r0, #0
 800b104:	f47f af6b 	bne.w	800afde <_strtod_l+0x766>
 800b108:	e5fe      	b.n	800ad08 <_strtod_l+0x490>
 800b10a:	465f      	mov	r7, fp
 800b10c:	d16e      	bne.n	800b1ec <_strtod_l+0x974>
 800b10e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b110:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b114:	b342      	cbz	r2, 800b168 <_strtod_l+0x8f0>
 800b116:	4a32      	ldr	r2, [pc, #200]	; (800b1e0 <_strtod_l+0x968>)
 800b118:	4293      	cmp	r3, r2
 800b11a:	d128      	bne.n	800b16e <_strtod_l+0x8f6>
 800b11c:	9b04      	ldr	r3, [sp, #16]
 800b11e:	4651      	mov	r1, sl
 800b120:	b1eb      	cbz	r3, 800b15e <_strtod_l+0x8e6>
 800b122:	4b2d      	ldr	r3, [pc, #180]	; (800b1d8 <_strtod_l+0x960>)
 800b124:	403b      	ands	r3, r7
 800b126:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b12a:	f04f 32ff 	mov.w	r2, #4294967295
 800b12e:	d819      	bhi.n	800b164 <_strtod_l+0x8ec>
 800b130:	0d1b      	lsrs	r3, r3, #20
 800b132:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b136:	fa02 f303 	lsl.w	r3, r2, r3
 800b13a:	4299      	cmp	r1, r3
 800b13c:	d117      	bne.n	800b16e <_strtod_l+0x8f6>
 800b13e:	4b29      	ldr	r3, [pc, #164]	; (800b1e4 <_strtod_l+0x96c>)
 800b140:	429f      	cmp	r7, r3
 800b142:	d102      	bne.n	800b14a <_strtod_l+0x8d2>
 800b144:	3101      	adds	r1, #1
 800b146:	f43f addf 	beq.w	800ad08 <_strtod_l+0x490>
 800b14a:	4b23      	ldr	r3, [pc, #140]	; (800b1d8 <_strtod_l+0x960>)
 800b14c:	403b      	ands	r3, r7
 800b14e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b152:	f04f 0a00 	mov.w	sl, #0
 800b156:	9b04      	ldr	r3, [sp, #16]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d1a4      	bne.n	800b0a6 <_strtod_l+0x82e>
 800b15c:	e5de      	b.n	800ad1c <_strtod_l+0x4a4>
 800b15e:	f04f 33ff 	mov.w	r3, #4294967295
 800b162:	e7ea      	b.n	800b13a <_strtod_l+0x8c2>
 800b164:	4613      	mov	r3, r2
 800b166:	e7e8      	b.n	800b13a <_strtod_l+0x8c2>
 800b168:	ea53 030a 	orrs.w	r3, r3, sl
 800b16c:	d08c      	beq.n	800b088 <_strtod_l+0x810>
 800b16e:	9b08      	ldr	r3, [sp, #32]
 800b170:	b1db      	cbz	r3, 800b1aa <_strtod_l+0x932>
 800b172:	423b      	tst	r3, r7
 800b174:	d0ef      	beq.n	800b156 <_strtod_l+0x8de>
 800b176:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b178:	9a04      	ldr	r2, [sp, #16]
 800b17a:	4650      	mov	r0, sl
 800b17c:	4659      	mov	r1, fp
 800b17e:	b1c3      	cbz	r3, 800b1b2 <_strtod_l+0x93a>
 800b180:	f7ff fb5c 	bl	800a83c <sulp>
 800b184:	4602      	mov	r2, r0
 800b186:	460b      	mov	r3, r1
 800b188:	ec51 0b18 	vmov	r0, r1, d8
 800b18c:	f7f5 f87e 	bl	800028c <__adddf3>
 800b190:	4682      	mov	sl, r0
 800b192:	468b      	mov	fp, r1
 800b194:	e7df      	b.n	800b156 <_strtod_l+0x8de>
 800b196:	4013      	ands	r3, r2
 800b198:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b19c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b1a0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b1a4:	f04f 3aff 	mov.w	sl, #4294967295
 800b1a8:	e7d5      	b.n	800b156 <_strtod_l+0x8de>
 800b1aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1ac:	ea13 0f0a 	tst.w	r3, sl
 800b1b0:	e7e0      	b.n	800b174 <_strtod_l+0x8fc>
 800b1b2:	f7ff fb43 	bl	800a83c <sulp>
 800b1b6:	4602      	mov	r2, r0
 800b1b8:	460b      	mov	r3, r1
 800b1ba:	ec51 0b18 	vmov	r0, r1, d8
 800b1be:	f7f5 f863 	bl	8000288 <__aeabi_dsub>
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	4682      	mov	sl, r0
 800b1c8:	468b      	mov	fp, r1
 800b1ca:	f7f5 fc7d 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1ce:	2800      	cmp	r0, #0
 800b1d0:	d0c1      	beq.n	800b156 <_strtod_l+0x8de>
 800b1d2:	e611      	b.n	800adf8 <_strtod_l+0x580>
 800b1d4:	fffffc02 	.word	0xfffffc02
 800b1d8:	7ff00000 	.word	0x7ff00000
 800b1dc:	39500000 	.word	0x39500000
 800b1e0:	000fffff 	.word	0x000fffff
 800b1e4:	7fefffff 	.word	0x7fefffff
 800b1e8:	0800ef08 	.word	0x0800ef08
 800b1ec:	4631      	mov	r1, r6
 800b1ee:	4628      	mov	r0, r5
 800b1f0:	f002 f832 	bl	800d258 <__ratio>
 800b1f4:	ec59 8b10 	vmov	r8, r9, d0
 800b1f8:	ee10 0a10 	vmov	r0, s0
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b202:	4649      	mov	r1, r9
 800b204:	f7f5 fc74 	bl	8000af0 <__aeabi_dcmple>
 800b208:	2800      	cmp	r0, #0
 800b20a:	d07a      	beq.n	800b302 <_strtod_l+0xa8a>
 800b20c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d04a      	beq.n	800b2a8 <_strtod_l+0xa30>
 800b212:	4b95      	ldr	r3, [pc, #596]	; (800b468 <_strtod_l+0xbf0>)
 800b214:	2200      	movs	r2, #0
 800b216:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b21a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b468 <_strtod_l+0xbf0>
 800b21e:	f04f 0800 	mov.w	r8, #0
 800b222:	4b92      	ldr	r3, [pc, #584]	; (800b46c <_strtod_l+0xbf4>)
 800b224:	403b      	ands	r3, r7
 800b226:	930d      	str	r3, [sp, #52]	; 0x34
 800b228:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b22a:	4b91      	ldr	r3, [pc, #580]	; (800b470 <_strtod_l+0xbf8>)
 800b22c:	429a      	cmp	r2, r3
 800b22e:	f040 80b0 	bne.w	800b392 <_strtod_l+0xb1a>
 800b232:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b236:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b23a:	ec4b ab10 	vmov	d0, sl, fp
 800b23e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b242:	f001 ff31 	bl	800d0a8 <__ulp>
 800b246:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b24a:	ec53 2b10 	vmov	r2, r3, d0
 800b24e:	f7f5 f9d3 	bl	80005f8 <__aeabi_dmul>
 800b252:	4652      	mov	r2, sl
 800b254:	465b      	mov	r3, fp
 800b256:	f7f5 f819 	bl	800028c <__adddf3>
 800b25a:	460b      	mov	r3, r1
 800b25c:	4983      	ldr	r1, [pc, #524]	; (800b46c <_strtod_l+0xbf4>)
 800b25e:	4a85      	ldr	r2, [pc, #532]	; (800b474 <_strtod_l+0xbfc>)
 800b260:	4019      	ands	r1, r3
 800b262:	4291      	cmp	r1, r2
 800b264:	4682      	mov	sl, r0
 800b266:	d960      	bls.n	800b32a <_strtod_l+0xab2>
 800b268:	ee18 3a90 	vmov	r3, s17
 800b26c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b270:	4293      	cmp	r3, r2
 800b272:	d104      	bne.n	800b27e <_strtod_l+0xa06>
 800b274:	ee18 3a10 	vmov	r3, s16
 800b278:	3301      	adds	r3, #1
 800b27a:	f43f ad45 	beq.w	800ad08 <_strtod_l+0x490>
 800b27e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b480 <_strtod_l+0xc08>
 800b282:	f04f 3aff 	mov.w	sl, #4294967295
 800b286:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b288:	4620      	mov	r0, r4
 800b28a:	f001 fbdb 	bl	800ca44 <_Bfree>
 800b28e:	9905      	ldr	r1, [sp, #20]
 800b290:	4620      	mov	r0, r4
 800b292:	f001 fbd7 	bl	800ca44 <_Bfree>
 800b296:	4631      	mov	r1, r6
 800b298:	4620      	mov	r0, r4
 800b29a:	f001 fbd3 	bl	800ca44 <_Bfree>
 800b29e:	4629      	mov	r1, r5
 800b2a0:	4620      	mov	r0, r4
 800b2a2:	f001 fbcf 	bl	800ca44 <_Bfree>
 800b2a6:	e61a      	b.n	800aede <_strtod_l+0x666>
 800b2a8:	f1ba 0f00 	cmp.w	sl, #0
 800b2ac:	d11b      	bne.n	800b2e6 <_strtod_l+0xa6e>
 800b2ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b2b2:	b9f3      	cbnz	r3, 800b2f2 <_strtod_l+0xa7a>
 800b2b4:	4b6c      	ldr	r3, [pc, #432]	; (800b468 <_strtod_l+0xbf0>)
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	4640      	mov	r0, r8
 800b2ba:	4649      	mov	r1, r9
 800b2bc:	f7f5 fc0e 	bl	8000adc <__aeabi_dcmplt>
 800b2c0:	b9d0      	cbnz	r0, 800b2f8 <_strtod_l+0xa80>
 800b2c2:	4640      	mov	r0, r8
 800b2c4:	4649      	mov	r1, r9
 800b2c6:	4b6c      	ldr	r3, [pc, #432]	; (800b478 <_strtod_l+0xc00>)
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	f7f5 f995 	bl	80005f8 <__aeabi_dmul>
 800b2ce:	4680      	mov	r8, r0
 800b2d0:	4689      	mov	r9, r1
 800b2d2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b2d6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800b2da:	9315      	str	r3, [sp, #84]	; 0x54
 800b2dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b2e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b2e4:	e79d      	b.n	800b222 <_strtod_l+0x9aa>
 800b2e6:	f1ba 0f01 	cmp.w	sl, #1
 800b2ea:	d102      	bne.n	800b2f2 <_strtod_l+0xa7a>
 800b2ec:	2f00      	cmp	r7, #0
 800b2ee:	f43f ad83 	beq.w	800adf8 <_strtod_l+0x580>
 800b2f2:	4b62      	ldr	r3, [pc, #392]	; (800b47c <_strtod_l+0xc04>)
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	e78e      	b.n	800b216 <_strtod_l+0x99e>
 800b2f8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b478 <_strtod_l+0xc00>
 800b2fc:	f04f 0800 	mov.w	r8, #0
 800b300:	e7e7      	b.n	800b2d2 <_strtod_l+0xa5a>
 800b302:	4b5d      	ldr	r3, [pc, #372]	; (800b478 <_strtod_l+0xc00>)
 800b304:	4640      	mov	r0, r8
 800b306:	4649      	mov	r1, r9
 800b308:	2200      	movs	r2, #0
 800b30a:	f7f5 f975 	bl	80005f8 <__aeabi_dmul>
 800b30e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b310:	4680      	mov	r8, r0
 800b312:	4689      	mov	r9, r1
 800b314:	b933      	cbnz	r3, 800b324 <_strtod_l+0xaac>
 800b316:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b31a:	900e      	str	r0, [sp, #56]	; 0x38
 800b31c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b31e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b322:	e7dd      	b.n	800b2e0 <_strtod_l+0xa68>
 800b324:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b328:	e7f9      	b.n	800b31e <_strtod_l+0xaa6>
 800b32a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b32e:	9b04      	ldr	r3, [sp, #16]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d1a8      	bne.n	800b286 <_strtod_l+0xa0e>
 800b334:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b338:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b33a:	0d1b      	lsrs	r3, r3, #20
 800b33c:	051b      	lsls	r3, r3, #20
 800b33e:	429a      	cmp	r2, r3
 800b340:	d1a1      	bne.n	800b286 <_strtod_l+0xa0e>
 800b342:	4640      	mov	r0, r8
 800b344:	4649      	mov	r1, r9
 800b346:	f7f5 fcb7 	bl	8000cb8 <__aeabi_d2lz>
 800b34a:	f7f5 f927 	bl	800059c <__aeabi_l2d>
 800b34e:	4602      	mov	r2, r0
 800b350:	460b      	mov	r3, r1
 800b352:	4640      	mov	r0, r8
 800b354:	4649      	mov	r1, r9
 800b356:	f7f4 ff97 	bl	8000288 <__aeabi_dsub>
 800b35a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b35c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b360:	ea43 030a 	orr.w	r3, r3, sl
 800b364:	4313      	orrs	r3, r2
 800b366:	4680      	mov	r8, r0
 800b368:	4689      	mov	r9, r1
 800b36a:	d055      	beq.n	800b418 <_strtod_l+0xba0>
 800b36c:	a336      	add	r3, pc, #216	; (adr r3, 800b448 <_strtod_l+0xbd0>)
 800b36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b372:	f7f5 fbb3 	bl	8000adc <__aeabi_dcmplt>
 800b376:	2800      	cmp	r0, #0
 800b378:	f47f acd0 	bne.w	800ad1c <_strtod_l+0x4a4>
 800b37c:	a334      	add	r3, pc, #208	; (adr r3, 800b450 <_strtod_l+0xbd8>)
 800b37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b382:	4640      	mov	r0, r8
 800b384:	4649      	mov	r1, r9
 800b386:	f7f5 fbc7 	bl	8000b18 <__aeabi_dcmpgt>
 800b38a:	2800      	cmp	r0, #0
 800b38c:	f43f af7b 	beq.w	800b286 <_strtod_l+0xa0e>
 800b390:	e4c4      	b.n	800ad1c <_strtod_l+0x4a4>
 800b392:	9b04      	ldr	r3, [sp, #16]
 800b394:	b333      	cbz	r3, 800b3e4 <_strtod_l+0xb6c>
 800b396:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b398:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b39c:	d822      	bhi.n	800b3e4 <_strtod_l+0xb6c>
 800b39e:	a32e      	add	r3, pc, #184	; (adr r3, 800b458 <_strtod_l+0xbe0>)
 800b3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a4:	4640      	mov	r0, r8
 800b3a6:	4649      	mov	r1, r9
 800b3a8:	f7f5 fba2 	bl	8000af0 <__aeabi_dcmple>
 800b3ac:	b1a0      	cbz	r0, 800b3d8 <_strtod_l+0xb60>
 800b3ae:	4649      	mov	r1, r9
 800b3b0:	4640      	mov	r0, r8
 800b3b2:	f7f5 fbf9 	bl	8000ba8 <__aeabi_d2uiz>
 800b3b6:	2801      	cmp	r0, #1
 800b3b8:	bf38      	it	cc
 800b3ba:	2001      	movcc	r0, #1
 800b3bc:	f7f5 f8a2 	bl	8000504 <__aeabi_ui2d>
 800b3c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3c2:	4680      	mov	r8, r0
 800b3c4:	4689      	mov	r9, r1
 800b3c6:	bb23      	cbnz	r3, 800b412 <_strtod_l+0xb9a>
 800b3c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b3cc:	9010      	str	r0, [sp, #64]	; 0x40
 800b3ce:	9311      	str	r3, [sp, #68]	; 0x44
 800b3d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b3d4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b3d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b3dc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b3e0:	1a9b      	subs	r3, r3, r2
 800b3e2:	9309      	str	r3, [sp, #36]	; 0x24
 800b3e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b3e8:	eeb0 0a48 	vmov.f32	s0, s16
 800b3ec:	eef0 0a68 	vmov.f32	s1, s17
 800b3f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b3f4:	f001 fe58 	bl	800d0a8 <__ulp>
 800b3f8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b3fc:	ec53 2b10 	vmov	r2, r3, d0
 800b400:	f7f5 f8fa 	bl	80005f8 <__aeabi_dmul>
 800b404:	ec53 2b18 	vmov	r2, r3, d8
 800b408:	f7f4 ff40 	bl	800028c <__adddf3>
 800b40c:	4682      	mov	sl, r0
 800b40e:	468b      	mov	fp, r1
 800b410:	e78d      	b.n	800b32e <_strtod_l+0xab6>
 800b412:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800b416:	e7db      	b.n	800b3d0 <_strtod_l+0xb58>
 800b418:	a311      	add	r3, pc, #68	; (adr r3, 800b460 <_strtod_l+0xbe8>)
 800b41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b41e:	f7f5 fb5d 	bl	8000adc <__aeabi_dcmplt>
 800b422:	e7b2      	b.n	800b38a <_strtod_l+0xb12>
 800b424:	2300      	movs	r3, #0
 800b426:	930a      	str	r3, [sp, #40]	; 0x28
 800b428:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b42a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b42c:	6013      	str	r3, [r2, #0]
 800b42e:	f7ff ba6b 	b.w	800a908 <_strtod_l+0x90>
 800b432:	2a65      	cmp	r2, #101	; 0x65
 800b434:	f43f ab5f 	beq.w	800aaf6 <_strtod_l+0x27e>
 800b438:	2a45      	cmp	r2, #69	; 0x45
 800b43a:	f43f ab5c 	beq.w	800aaf6 <_strtod_l+0x27e>
 800b43e:	2301      	movs	r3, #1
 800b440:	f7ff bb94 	b.w	800ab6c <_strtod_l+0x2f4>
 800b444:	f3af 8000 	nop.w
 800b448:	94a03595 	.word	0x94a03595
 800b44c:	3fdfffff 	.word	0x3fdfffff
 800b450:	35afe535 	.word	0x35afe535
 800b454:	3fe00000 	.word	0x3fe00000
 800b458:	ffc00000 	.word	0xffc00000
 800b45c:	41dfffff 	.word	0x41dfffff
 800b460:	94a03595 	.word	0x94a03595
 800b464:	3fcfffff 	.word	0x3fcfffff
 800b468:	3ff00000 	.word	0x3ff00000
 800b46c:	7ff00000 	.word	0x7ff00000
 800b470:	7fe00000 	.word	0x7fe00000
 800b474:	7c9fffff 	.word	0x7c9fffff
 800b478:	3fe00000 	.word	0x3fe00000
 800b47c:	bff00000 	.word	0xbff00000
 800b480:	7fefffff 	.word	0x7fefffff

0800b484 <_strtod_r>:
 800b484:	4b01      	ldr	r3, [pc, #4]	; (800b48c <_strtod_r+0x8>)
 800b486:	f7ff b9f7 	b.w	800a878 <_strtod_l>
 800b48a:	bf00      	nop
 800b48c:	200002f4 	.word	0x200002f4

0800b490 <_strtol_l.constprop.0>:
 800b490:	2b01      	cmp	r3, #1
 800b492:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b496:	d001      	beq.n	800b49c <_strtol_l.constprop.0+0xc>
 800b498:	2b24      	cmp	r3, #36	; 0x24
 800b49a:	d906      	bls.n	800b4aa <_strtol_l.constprop.0+0x1a>
 800b49c:	f7fe fafc 	bl	8009a98 <__errno>
 800b4a0:	2316      	movs	r3, #22
 800b4a2:	6003      	str	r3, [r0, #0]
 800b4a4:	2000      	movs	r0, #0
 800b4a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4aa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b590 <_strtol_l.constprop.0+0x100>
 800b4ae:	460d      	mov	r5, r1
 800b4b0:	462e      	mov	r6, r5
 800b4b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b4b6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b4ba:	f017 0708 	ands.w	r7, r7, #8
 800b4be:	d1f7      	bne.n	800b4b0 <_strtol_l.constprop.0+0x20>
 800b4c0:	2c2d      	cmp	r4, #45	; 0x2d
 800b4c2:	d132      	bne.n	800b52a <_strtol_l.constprop.0+0x9a>
 800b4c4:	782c      	ldrb	r4, [r5, #0]
 800b4c6:	2701      	movs	r7, #1
 800b4c8:	1cb5      	adds	r5, r6, #2
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d05b      	beq.n	800b586 <_strtol_l.constprop.0+0xf6>
 800b4ce:	2b10      	cmp	r3, #16
 800b4d0:	d109      	bne.n	800b4e6 <_strtol_l.constprop.0+0x56>
 800b4d2:	2c30      	cmp	r4, #48	; 0x30
 800b4d4:	d107      	bne.n	800b4e6 <_strtol_l.constprop.0+0x56>
 800b4d6:	782c      	ldrb	r4, [r5, #0]
 800b4d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b4dc:	2c58      	cmp	r4, #88	; 0x58
 800b4de:	d14d      	bne.n	800b57c <_strtol_l.constprop.0+0xec>
 800b4e0:	786c      	ldrb	r4, [r5, #1]
 800b4e2:	2310      	movs	r3, #16
 800b4e4:	3502      	adds	r5, #2
 800b4e6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b4ea:	f108 38ff 	add.w	r8, r8, #4294967295
 800b4ee:	f04f 0c00 	mov.w	ip, #0
 800b4f2:	fbb8 f9f3 	udiv	r9, r8, r3
 800b4f6:	4666      	mov	r6, ip
 800b4f8:	fb03 8a19 	mls	sl, r3, r9, r8
 800b4fc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b500:	f1be 0f09 	cmp.w	lr, #9
 800b504:	d816      	bhi.n	800b534 <_strtol_l.constprop.0+0xa4>
 800b506:	4674      	mov	r4, lr
 800b508:	42a3      	cmp	r3, r4
 800b50a:	dd24      	ble.n	800b556 <_strtol_l.constprop.0+0xc6>
 800b50c:	f1bc 0f00 	cmp.w	ip, #0
 800b510:	db1e      	blt.n	800b550 <_strtol_l.constprop.0+0xc0>
 800b512:	45b1      	cmp	r9, r6
 800b514:	d31c      	bcc.n	800b550 <_strtol_l.constprop.0+0xc0>
 800b516:	d101      	bne.n	800b51c <_strtol_l.constprop.0+0x8c>
 800b518:	45a2      	cmp	sl, r4
 800b51a:	db19      	blt.n	800b550 <_strtol_l.constprop.0+0xc0>
 800b51c:	fb06 4603 	mla	r6, r6, r3, r4
 800b520:	f04f 0c01 	mov.w	ip, #1
 800b524:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b528:	e7e8      	b.n	800b4fc <_strtol_l.constprop.0+0x6c>
 800b52a:	2c2b      	cmp	r4, #43	; 0x2b
 800b52c:	bf04      	itt	eq
 800b52e:	782c      	ldrbeq	r4, [r5, #0]
 800b530:	1cb5      	addeq	r5, r6, #2
 800b532:	e7ca      	b.n	800b4ca <_strtol_l.constprop.0+0x3a>
 800b534:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b538:	f1be 0f19 	cmp.w	lr, #25
 800b53c:	d801      	bhi.n	800b542 <_strtol_l.constprop.0+0xb2>
 800b53e:	3c37      	subs	r4, #55	; 0x37
 800b540:	e7e2      	b.n	800b508 <_strtol_l.constprop.0+0x78>
 800b542:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b546:	f1be 0f19 	cmp.w	lr, #25
 800b54a:	d804      	bhi.n	800b556 <_strtol_l.constprop.0+0xc6>
 800b54c:	3c57      	subs	r4, #87	; 0x57
 800b54e:	e7db      	b.n	800b508 <_strtol_l.constprop.0+0x78>
 800b550:	f04f 3cff 	mov.w	ip, #4294967295
 800b554:	e7e6      	b.n	800b524 <_strtol_l.constprop.0+0x94>
 800b556:	f1bc 0f00 	cmp.w	ip, #0
 800b55a:	da05      	bge.n	800b568 <_strtol_l.constprop.0+0xd8>
 800b55c:	2322      	movs	r3, #34	; 0x22
 800b55e:	6003      	str	r3, [r0, #0]
 800b560:	4646      	mov	r6, r8
 800b562:	b942      	cbnz	r2, 800b576 <_strtol_l.constprop.0+0xe6>
 800b564:	4630      	mov	r0, r6
 800b566:	e79e      	b.n	800b4a6 <_strtol_l.constprop.0+0x16>
 800b568:	b107      	cbz	r7, 800b56c <_strtol_l.constprop.0+0xdc>
 800b56a:	4276      	negs	r6, r6
 800b56c:	2a00      	cmp	r2, #0
 800b56e:	d0f9      	beq.n	800b564 <_strtol_l.constprop.0+0xd4>
 800b570:	f1bc 0f00 	cmp.w	ip, #0
 800b574:	d000      	beq.n	800b578 <_strtol_l.constprop.0+0xe8>
 800b576:	1e69      	subs	r1, r5, #1
 800b578:	6011      	str	r1, [r2, #0]
 800b57a:	e7f3      	b.n	800b564 <_strtol_l.constprop.0+0xd4>
 800b57c:	2430      	movs	r4, #48	; 0x30
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d1b1      	bne.n	800b4e6 <_strtol_l.constprop.0+0x56>
 800b582:	2308      	movs	r3, #8
 800b584:	e7af      	b.n	800b4e6 <_strtol_l.constprop.0+0x56>
 800b586:	2c30      	cmp	r4, #48	; 0x30
 800b588:	d0a5      	beq.n	800b4d6 <_strtol_l.constprop.0+0x46>
 800b58a:	230a      	movs	r3, #10
 800b58c:	e7ab      	b.n	800b4e6 <_strtol_l.constprop.0+0x56>
 800b58e:	bf00      	nop
 800b590:	0800ef31 	.word	0x0800ef31

0800b594 <_strtol_r>:
 800b594:	f7ff bf7c 	b.w	800b490 <_strtol_l.constprop.0>

0800b598 <quorem>:
 800b598:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b59c:	6903      	ldr	r3, [r0, #16]
 800b59e:	690c      	ldr	r4, [r1, #16]
 800b5a0:	42a3      	cmp	r3, r4
 800b5a2:	4607      	mov	r7, r0
 800b5a4:	f2c0 8081 	blt.w	800b6aa <quorem+0x112>
 800b5a8:	3c01      	subs	r4, #1
 800b5aa:	f101 0814 	add.w	r8, r1, #20
 800b5ae:	f100 0514 	add.w	r5, r0, #20
 800b5b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b5b6:	9301      	str	r3, [sp, #4]
 800b5b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b5bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b5c0:	3301      	adds	r3, #1
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b5c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b5cc:	fbb2 f6f3 	udiv	r6, r2, r3
 800b5d0:	d331      	bcc.n	800b636 <quorem+0x9e>
 800b5d2:	f04f 0e00 	mov.w	lr, #0
 800b5d6:	4640      	mov	r0, r8
 800b5d8:	46ac      	mov	ip, r5
 800b5da:	46f2      	mov	sl, lr
 800b5dc:	f850 2b04 	ldr.w	r2, [r0], #4
 800b5e0:	b293      	uxth	r3, r2
 800b5e2:	fb06 e303 	mla	r3, r6, r3, lr
 800b5e6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b5ea:	b29b      	uxth	r3, r3
 800b5ec:	ebaa 0303 	sub.w	r3, sl, r3
 800b5f0:	f8dc a000 	ldr.w	sl, [ip]
 800b5f4:	0c12      	lsrs	r2, r2, #16
 800b5f6:	fa13 f38a 	uxtah	r3, r3, sl
 800b5fa:	fb06 e202 	mla	r2, r6, r2, lr
 800b5fe:	9300      	str	r3, [sp, #0]
 800b600:	9b00      	ldr	r3, [sp, #0]
 800b602:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b606:	b292      	uxth	r2, r2
 800b608:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b60c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b610:	f8bd 3000 	ldrh.w	r3, [sp]
 800b614:	4581      	cmp	r9, r0
 800b616:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b61a:	f84c 3b04 	str.w	r3, [ip], #4
 800b61e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b622:	d2db      	bcs.n	800b5dc <quorem+0x44>
 800b624:	f855 300b 	ldr.w	r3, [r5, fp]
 800b628:	b92b      	cbnz	r3, 800b636 <quorem+0x9e>
 800b62a:	9b01      	ldr	r3, [sp, #4]
 800b62c:	3b04      	subs	r3, #4
 800b62e:	429d      	cmp	r5, r3
 800b630:	461a      	mov	r2, r3
 800b632:	d32e      	bcc.n	800b692 <quorem+0xfa>
 800b634:	613c      	str	r4, [r7, #16]
 800b636:	4638      	mov	r0, r7
 800b638:	f001 fc90 	bl	800cf5c <__mcmp>
 800b63c:	2800      	cmp	r0, #0
 800b63e:	db24      	blt.n	800b68a <quorem+0xf2>
 800b640:	3601      	adds	r6, #1
 800b642:	4628      	mov	r0, r5
 800b644:	f04f 0c00 	mov.w	ip, #0
 800b648:	f858 2b04 	ldr.w	r2, [r8], #4
 800b64c:	f8d0 e000 	ldr.w	lr, [r0]
 800b650:	b293      	uxth	r3, r2
 800b652:	ebac 0303 	sub.w	r3, ip, r3
 800b656:	0c12      	lsrs	r2, r2, #16
 800b658:	fa13 f38e 	uxtah	r3, r3, lr
 800b65c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b660:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b664:	b29b      	uxth	r3, r3
 800b666:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b66a:	45c1      	cmp	r9, r8
 800b66c:	f840 3b04 	str.w	r3, [r0], #4
 800b670:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b674:	d2e8      	bcs.n	800b648 <quorem+0xb0>
 800b676:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b67a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b67e:	b922      	cbnz	r2, 800b68a <quorem+0xf2>
 800b680:	3b04      	subs	r3, #4
 800b682:	429d      	cmp	r5, r3
 800b684:	461a      	mov	r2, r3
 800b686:	d30a      	bcc.n	800b69e <quorem+0x106>
 800b688:	613c      	str	r4, [r7, #16]
 800b68a:	4630      	mov	r0, r6
 800b68c:	b003      	add	sp, #12
 800b68e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b692:	6812      	ldr	r2, [r2, #0]
 800b694:	3b04      	subs	r3, #4
 800b696:	2a00      	cmp	r2, #0
 800b698:	d1cc      	bne.n	800b634 <quorem+0x9c>
 800b69a:	3c01      	subs	r4, #1
 800b69c:	e7c7      	b.n	800b62e <quorem+0x96>
 800b69e:	6812      	ldr	r2, [r2, #0]
 800b6a0:	3b04      	subs	r3, #4
 800b6a2:	2a00      	cmp	r2, #0
 800b6a4:	d1f0      	bne.n	800b688 <quorem+0xf0>
 800b6a6:	3c01      	subs	r4, #1
 800b6a8:	e7eb      	b.n	800b682 <quorem+0xea>
 800b6aa:	2000      	movs	r0, #0
 800b6ac:	e7ee      	b.n	800b68c <quorem+0xf4>
	...

0800b6b0 <_dtoa_r>:
 800b6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6b4:	ed2d 8b04 	vpush	{d8-d9}
 800b6b8:	ec57 6b10 	vmov	r6, r7, d0
 800b6bc:	b093      	sub	sp, #76	; 0x4c
 800b6be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b6c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b6c4:	9106      	str	r1, [sp, #24]
 800b6c6:	ee10 aa10 	vmov	sl, s0
 800b6ca:	4604      	mov	r4, r0
 800b6cc:	9209      	str	r2, [sp, #36]	; 0x24
 800b6ce:	930c      	str	r3, [sp, #48]	; 0x30
 800b6d0:	46bb      	mov	fp, r7
 800b6d2:	b975      	cbnz	r5, 800b6f2 <_dtoa_r+0x42>
 800b6d4:	2010      	movs	r0, #16
 800b6d6:	f001 f94d 	bl	800c974 <malloc>
 800b6da:	4602      	mov	r2, r0
 800b6dc:	6260      	str	r0, [r4, #36]	; 0x24
 800b6de:	b920      	cbnz	r0, 800b6ea <_dtoa_r+0x3a>
 800b6e0:	4ba7      	ldr	r3, [pc, #668]	; (800b980 <_dtoa_r+0x2d0>)
 800b6e2:	21ea      	movs	r1, #234	; 0xea
 800b6e4:	48a7      	ldr	r0, [pc, #668]	; (800b984 <_dtoa_r+0x2d4>)
 800b6e6:	f002 f8bd 	bl	800d864 <__assert_func>
 800b6ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b6ee:	6005      	str	r5, [r0, #0]
 800b6f0:	60c5      	str	r5, [r0, #12]
 800b6f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6f4:	6819      	ldr	r1, [r3, #0]
 800b6f6:	b151      	cbz	r1, 800b70e <_dtoa_r+0x5e>
 800b6f8:	685a      	ldr	r2, [r3, #4]
 800b6fa:	604a      	str	r2, [r1, #4]
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	4093      	lsls	r3, r2
 800b700:	608b      	str	r3, [r1, #8]
 800b702:	4620      	mov	r0, r4
 800b704:	f001 f99e 	bl	800ca44 <_Bfree>
 800b708:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b70a:	2200      	movs	r2, #0
 800b70c:	601a      	str	r2, [r3, #0]
 800b70e:	1e3b      	subs	r3, r7, #0
 800b710:	bfaa      	itet	ge
 800b712:	2300      	movge	r3, #0
 800b714:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b718:	f8c8 3000 	strge.w	r3, [r8]
 800b71c:	4b9a      	ldr	r3, [pc, #616]	; (800b988 <_dtoa_r+0x2d8>)
 800b71e:	bfbc      	itt	lt
 800b720:	2201      	movlt	r2, #1
 800b722:	f8c8 2000 	strlt.w	r2, [r8]
 800b726:	ea33 030b 	bics.w	r3, r3, fp
 800b72a:	d11b      	bne.n	800b764 <_dtoa_r+0xb4>
 800b72c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b72e:	f242 730f 	movw	r3, #9999	; 0x270f
 800b732:	6013      	str	r3, [r2, #0]
 800b734:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b738:	4333      	orrs	r3, r6
 800b73a:	f000 8592 	beq.w	800c262 <_dtoa_r+0xbb2>
 800b73e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b740:	b963      	cbnz	r3, 800b75c <_dtoa_r+0xac>
 800b742:	4b92      	ldr	r3, [pc, #584]	; (800b98c <_dtoa_r+0x2dc>)
 800b744:	e022      	b.n	800b78c <_dtoa_r+0xdc>
 800b746:	4b92      	ldr	r3, [pc, #584]	; (800b990 <_dtoa_r+0x2e0>)
 800b748:	9301      	str	r3, [sp, #4]
 800b74a:	3308      	adds	r3, #8
 800b74c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b74e:	6013      	str	r3, [r2, #0]
 800b750:	9801      	ldr	r0, [sp, #4]
 800b752:	b013      	add	sp, #76	; 0x4c
 800b754:	ecbd 8b04 	vpop	{d8-d9}
 800b758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b75c:	4b8b      	ldr	r3, [pc, #556]	; (800b98c <_dtoa_r+0x2dc>)
 800b75e:	9301      	str	r3, [sp, #4]
 800b760:	3303      	adds	r3, #3
 800b762:	e7f3      	b.n	800b74c <_dtoa_r+0x9c>
 800b764:	2200      	movs	r2, #0
 800b766:	2300      	movs	r3, #0
 800b768:	4650      	mov	r0, sl
 800b76a:	4659      	mov	r1, fp
 800b76c:	f7f5 f9ac 	bl	8000ac8 <__aeabi_dcmpeq>
 800b770:	ec4b ab19 	vmov	d9, sl, fp
 800b774:	4680      	mov	r8, r0
 800b776:	b158      	cbz	r0, 800b790 <_dtoa_r+0xe0>
 800b778:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b77a:	2301      	movs	r3, #1
 800b77c:	6013      	str	r3, [r2, #0]
 800b77e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b780:	2b00      	cmp	r3, #0
 800b782:	f000 856b 	beq.w	800c25c <_dtoa_r+0xbac>
 800b786:	4883      	ldr	r0, [pc, #524]	; (800b994 <_dtoa_r+0x2e4>)
 800b788:	6018      	str	r0, [r3, #0]
 800b78a:	1e43      	subs	r3, r0, #1
 800b78c:	9301      	str	r3, [sp, #4]
 800b78e:	e7df      	b.n	800b750 <_dtoa_r+0xa0>
 800b790:	ec4b ab10 	vmov	d0, sl, fp
 800b794:	aa10      	add	r2, sp, #64	; 0x40
 800b796:	a911      	add	r1, sp, #68	; 0x44
 800b798:	4620      	mov	r0, r4
 800b79a:	f001 fd01 	bl	800d1a0 <__d2b>
 800b79e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b7a2:	ee08 0a10 	vmov	s16, r0
 800b7a6:	2d00      	cmp	r5, #0
 800b7a8:	f000 8084 	beq.w	800b8b4 <_dtoa_r+0x204>
 800b7ac:	ee19 3a90 	vmov	r3, s19
 800b7b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b7b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b7b8:	4656      	mov	r6, sl
 800b7ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b7be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b7c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b7c6:	4b74      	ldr	r3, [pc, #464]	; (800b998 <_dtoa_r+0x2e8>)
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	4630      	mov	r0, r6
 800b7cc:	4639      	mov	r1, r7
 800b7ce:	f7f4 fd5b 	bl	8000288 <__aeabi_dsub>
 800b7d2:	a365      	add	r3, pc, #404	; (adr r3, 800b968 <_dtoa_r+0x2b8>)
 800b7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d8:	f7f4 ff0e 	bl	80005f8 <__aeabi_dmul>
 800b7dc:	a364      	add	r3, pc, #400	; (adr r3, 800b970 <_dtoa_r+0x2c0>)
 800b7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e2:	f7f4 fd53 	bl	800028c <__adddf3>
 800b7e6:	4606      	mov	r6, r0
 800b7e8:	4628      	mov	r0, r5
 800b7ea:	460f      	mov	r7, r1
 800b7ec:	f7f4 fe9a 	bl	8000524 <__aeabi_i2d>
 800b7f0:	a361      	add	r3, pc, #388	; (adr r3, 800b978 <_dtoa_r+0x2c8>)
 800b7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f6:	f7f4 feff 	bl	80005f8 <__aeabi_dmul>
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	460b      	mov	r3, r1
 800b7fe:	4630      	mov	r0, r6
 800b800:	4639      	mov	r1, r7
 800b802:	f7f4 fd43 	bl	800028c <__adddf3>
 800b806:	4606      	mov	r6, r0
 800b808:	460f      	mov	r7, r1
 800b80a:	f7f5 f9a5 	bl	8000b58 <__aeabi_d2iz>
 800b80e:	2200      	movs	r2, #0
 800b810:	9000      	str	r0, [sp, #0]
 800b812:	2300      	movs	r3, #0
 800b814:	4630      	mov	r0, r6
 800b816:	4639      	mov	r1, r7
 800b818:	f7f5 f960 	bl	8000adc <__aeabi_dcmplt>
 800b81c:	b150      	cbz	r0, 800b834 <_dtoa_r+0x184>
 800b81e:	9800      	ldr	r0, [sp, #0]
 800b820:	f7f4 fe80 	bl	8000524 <__aeabi_i2d>
 800b824:	4632      	mov	r2, r6
 800b826:	463b      	mov	r3, r7
 800b828:	f7f5 f94e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b82c:	b910      	cbnz	r0, 800b834 <_dtoa_r+0x184>
 800b82e:	9b00      	ldr	r3, [sp, #0]
 800b830:	3b01      	subs	r3, #1
 800b832:	9300      	str	r3, [sp, #0]
 800b834:	9b00      	ldr	r3, [sp, #0]
 800b836:	2b16      	cmp	r3, #22
 800b838:	d85a      	bhi.n	800b8f0 <_dtoa_r+0x240>
 800b83a:	9a00      	ldr	r2, [sp, #0]
 800b83c:	4b57      	ldr	r3, [pc, #348]	; (800b99c <_dtoa_r+0x2ec>)
 800b83e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b846:	ec51 0b19 	vmov	r0, r1, d9
 800b84a:	f7f5 f947 	bl	8000adc <__aeabi_dcmplt>
 800b84e:	2800      	cmp	r0, #0
 800b850:	d050      	beq.n	800b8f4 <_dtoa_r+0x244>
 800b852:	9b00      	ldr	r3, [sp, #0]
 800b854:	3b01      	subs	r3, #1
 800b856:	9300      	str	r3, [sp, #0]
 800b858:	2300      	movs	r3, #0
 800b85a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b85c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b85e:	1b5d      	subs	r5, r3, r5
 800b860:	1e6b      	subs	r3, r5, #1
 800b862:	9305      	str	r3, [sp, #20]
 800b864:	bf45      	ittet	mi
 800b866:	f1c5 0301 	rsbmi	r3, r5, #1
 800b86a:	9304      	strmi	r3, [sp, #16]
 800b86c:	2300      	movpl	r3, #0
 800b86e:	2300      	movmi	r3, #0
 800b870:	bf4c      	ite	mi
 800b872:	9305      	strmi	r3, [sp, #20]
 800b874:	9304      	strpl	r3, [sp, #16]
 800b876:	9b00      	ldr	r3, [sp, #0]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	db3d      	blt.n	800b8f8 <_dtoa_r+0x248>
 800b87c:	9b05      	ldr	r3, [sp, #20]
 800b87e:	9a00      	ldr	r2, [sp, #0]
 800b880:	920a      	str	r2, [sp, #40]	; 0x28
 800b882:	4413      	add	r3, r2
 800b884:	9305      	str	r3, [sp, #20]
 800b886:	2300      	movs	r3, #0
 800b888:	9307      	str	r3, [sp, #28]
 800b88a:	9b06      	ldr	r3, [sp, #24]
 800b88c:	2b09      	cmp	r3, #9
 800b88e:	f200 8089 	bhi.w	800b9a4 <_dtoa_r+0x2f4>
 800b892:	2b05      	cmp	r3, #5
 800b894:	bfc4      	itt	gt
 800b896:	3b04      	subgt	r3, #4
 800b898:	9306      	strgt	r3, [sp, #24]
 800b89a:	9b06      	ldr	r3, [sp, #24]
 800b89c:	f1a3 0302 	sub.w	r3, r3, #2
 800b8a0:	bfcc      	ite	gt
 800b8a2:	2500      	movgt	r5, #0
 800b8a4:	2501      	movle	r5, #1
 800b8a6:	2b03      	cmp	r3, #3
 800b8a8:	f200 8087 	bhi.w	800b9ba <_dtoa_r+0x30a>
 800b8ac:	e8df f003 	tbb	[pc, r3]
 800b8b0:	59383a2d 	.word	0x59383a2d
 800b8b4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b8b8:	441d      	add	r5, r3
 800b8ba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b8be:	2b20      	cmp	r3, #32
 800b8c0:	bfc1      	itttt	gt
 800b8c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b8c6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b8ca:	fa0b f303 	lslgt.w	r3, fp, r3
 800b8ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b8d2:	bfda      	itte	le
 800b8d4:	f1c3 0320 	rsble	r3, r3, #32
 800b8d8:	fa06 f003 	lslle.w	r0, r6, r3
 800b8dc:	4318      	orrgt	r0, r3
 800b8de:	f7f4 fe11 	bl	8000504 <__aeabi_ui2d>
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	4606      	mov	r6, r0
 800b8e6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b8ea:	3d01      	subs	r5, #1
 800b8ec:	930e      	str	r3, [sp, #56]	; 0x38
 800b8ee:	e76a      	b.n	800b7c6 <_dtoa_r+0x116>
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	e7b2      	b.n	800b85a <_dtoa_r+0x1aa>
 800b8f4:	900b      	str	r0, [sp, #44]	; 0x2c
 800b8f6:	e7b1      	b.n	800b85c <_dtoa_r+0x1ac>
 800b8f8:	9b04      	ldr	r3, [sp, #16]
 800b8fa:	9a00      	ldr	r2, [sp, #0]
 800b8fc:	1a9b      	subs	r3, r3, r2
 800b8fe:	9304      	str	r3, [sp, #16]
 800b900:	4253      	negs	r3, r2
 800b902:	9307      	str	r3, [sp, #28]
 800b904:	2300      	movs	r3, #0
 800b906:	930a      	str	r3, [sp, #40]	; 0x28
 800b908:	e7bf      	b.n	800b88a <_dtoa_r+0x1da>
 800b90a:	2300      	movs	r3, #0
 800b90c:	9308      	str	r3, [sp, #32]
 800b90e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b910:	2b00      	cmp	r3, #0
 800b912:	dc55      	bgt.n	800b9c0 <_dtoa_r+0x310>
 800b914:	2301      	movs	r3, #1
 800b916:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b91a:	461a      	mov	r2, r3
 800b91c:	9209      	str	r2, [sp, #36]	; 0x24
 800b91e:	e00c      	b.n	800b93a <_dtoa_r+0x28a>
 800b920:	2301      	movs	r3, #1
 800b922:	e7f3      	b.n	800b90c <_dtoa_r+0x25c>
 800b924:	2300      	movs	r3, #0
 800b926:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b928:	9308      	str	r3, [sp, #32]
 800b92a:	9b00      	ldr	r3, [sp, #0]
 800b92c:	4413      	add	r3, r2
 800b92e:	9302      	str	r3, [sp, #8]
 800b930:	3301      	adds	r3, #1
 800b932:	2b01      	cmp	r3, #1
 800b934:	9303      	str	r3, [sp, #12]
 800b936:	bfb8      	it	lt
 800b938:	2301      	movlt	r3, #1
 800b93a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b93c:	2200      	movs	r2, #0
 800b93e:	6042      	str	r2, [r0, #4]
 800b940:	2204      	movs	r2, #4
 800b942:	f102 0614 	add.w	r6, r2, #20
 800b946:	429e      	cmp	r6, r3
 800b948:	6841      	ldr	r1, [r0, #4]
 800b94a:	d93d      	bls.n	800b9c8 <_dtoa_r+0x318>
 800b94c:	4620      	mov	r0, r4
 800b94e:	f001 f839 	bl	800c9c4 <_Balloc>
 800b952:	9001      	str	r0, [sp, #4]
 800b954:	2800      	cmp	r0, #0
 800b956:	d13b      	bne.n	800b9d0 <_dtoa_r+0x320>
 800b958:	4b11      	ldr	r3, [pc, #68]	; (800b9a0 <_dtoa_r+0x2f0>)
 800b95a:	4602      	mov	r2, r0
 800b95c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b960:	e6c0      	b.n	800b6e4 <_dtoa_r+0x34>
 800b962:	2301      	movs	r3, #1
 800b964:	e7df      	b.n	800b926 <_dtoa_r+0x276>
 800b966:	bf00      	nop
 800b968:	636f4361 	.word	0x636f4361
 800b96c:	3fd287a7 	.word	0x3fd287a7
 800b970:	8b60c8b3 	.word	0x8b60c8b3
 800b974:	3fc68a28 	.word	0x3fc68a28
 800b978:	509f79fb 	.word	0x509f79fb
 800b97c:	3fd34413 	.word	0x3fd34413
 800b980:	0800f03e 	.word	0x0800f03e
 800b984:	0800f055 	.word	0x0800f055
 800b988:	7ff00000 	.word	0x7ff00000
 800b98c:	0800f03a 	.word	0x0800f03a
 800b990:	0800f031 	.word	0x0800f031
 800b994:	0800eeb5 	.word	0x0800eeb5
 800b998:	3ff80000 	.word	0x3ff80000
 800b99c:	0800f1c0 	.word	0x0800f1c0
 800b9a0:	0800f0b0 	.word	0x0800f0b0
 800b9a4:	2501      	movs	r5, #1
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	9306      	str	r3, [sp, #24]
 800b9aa:	9508      	str	r5, [sp, #32]
 800b9ac:	f04f 33ff 	mov.w	r3, #4294967295
 800b9b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	2312      	movs	r3, #18
 800b9b8:	e7b0      	b.n	800b91c <_dtoa_r+0x26c>
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	9308      	str	r3, [sp, #32]
 800b9be:	e7f5      	b.n	800b9ac <_dtoa_r+0x2fc>
 800b9c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b9c6:	e7b8      	b.n	800b93a <_dtoa_r+0x28a>
 800b9c8:	3101      	adds	r1, #1
 800b9ca:	6041      	str	r1, [r0, #4]
 800b9cc:	0052      	lsls	r2, r2, #1
 800b9ce:	e7b8      	b.n	800b942 <_dtoa_r+0x292>
 800b9d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b9d2:	9a01      	ldr	r2, [sp, #4]
 800b9d4:	601a      	str	r2, [r3, #0]
 800b9d6:	9b03      	ldr	r3, [sp, #12]
 800b9d8:	2b0e      	cmp	r3, #14
 800b9da:	f200 809d 	bhi.w	800bb18 <_dtoa_r+0x468>
 800b9de:	2d00      	cmp	r5, #0
 800b9e0:	f000 809a 	beq.w	800bb18 <_dtoa_r+0x468>
 800b9e4:	9b00      	ldr	r3, [sp, #0]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	dd32      	ble.n	800ba50 <_dtoa_r+0x3a0>
 800b9ea:	4ab7      	ldr	r2, [pc, #732]	; (800bcc8 <_dtoa_r+0x618>)
 800b9ec:	f003 030f 	and.w	r3, r3, #15
 800b9f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b9f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b9f8:	9b00      	ldr	r3, [sp, #0]
 800b9fa:	05d8      	lsls	r0, r3, #23
 800b9fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ba00:	d516      	bpl.n	800ba30 <_dtoa_r+0x380>
 800ba02:	4bb2      	ldr	r3, [pc, #712]	; (800bccc <_dtoa_r+0x61c>)
 800ba04:	ec51 0b19 	vmov	r0, r1, d9
 800ba08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ba0c:	f7f4 ff1e 	bl	800084c <__aeabi_ddiv>
 800ba10:	f007 070f 	and.w	r7, r7, #15
 800ba14:	4682      	mov	sl, r0
 800ba16:	468b      	mov	fp, r1
 800ba18:	2503      	movs	r5, #3
 800ba1a:	4eac      	ldr	r6, [pc, #688]	; (800bccc <_dtoa_r+0x61c>)
 800ba1c:	b957      	cbnz	r7, 800ba34 <_dtoa_r+0x384>
 800ba1e:	4642      	mov	r2, r8
 800ba20:	464b      	mov	r3, r9
 800ba22:	4650      	mov	r0, sl
 800ba24:	4659      	mov	r1, fp
 800ba26:	f7f4 ff11 	bl	800084c <__aeabi_ddiv>
 800ba2a:	4682      	mov	sl, r0
 800ba2c:	468b      	mov	fp, r1
 800ba2e:	e028      	b.n	800ba82 <_dtoa_r+0x3d2>
 800ba30:	2502      	movs	r5, #2
 800ba32:	e7f2      	b.n	800ba1a <_dtoa_r+0x36a>
 800ba34:	07f9      	lsls	r1, r7, #31
 800ba36:	d508      	bpl.n	800ba4a <_dtoa_r+0x39a>
 800ba38:	4640      	mov	r0, r8
 800ba3a:	4649      	mov	r1, r9
 800ba3c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ba40:	f7f4 fdda 	bl	80005f8 <__aeabi_dmul>
 800ba44:	3501      	adds	r5, #1
 800ba46:	4680      	mov	r8, r0
 800ba48:	4689      	mov	r9, r1
 800ba4a:	107f      	asrs	r7, r7, #1
 800ba4c:	3608      	adds	r6, #8
 800ba4e:	e7e5      	b.n	800ba1c <_dtoa_r+0x36c>
 800ba50:	f000 809b 	beq.w	800bb8a <_dtoa_r+0x4da>
 800ba54:	9b00      	ldr	r3, [sp, #0]
 800ba56:	4f9d      	ldr	r7, [pc, #628]	; (800bccc <_dtoa_r+0x61c>)
 800ba58:	425e      	negs	r6, r3
 800ba5a:	4b9b      	ldr	r3, [pc, #620]	; (800bcc8 <_dtoa_r+0x618>)
 800ba5c:	f006 020f 	and.w	r2, r6, #15
 800ba60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba68:	ec51 0b19 	vmov	r0, r1, d9
 800ba6c:	f7f4 fdc4 	bl	80005f8 <__aeabi_dmul>
 800ba70:	1136      	asrs	r6, r6, #4
 800ba72:	4682      	mov	sl, r0
 800ba74:	468b      	mov	fp, r1
 800ba76:	2300      	movs	r3, #0
 800ba78:	2502      	movs	r5, #2
 800ba7a:	2e00      	cmp	r6, #0
 800ba7c:	d17a      	bne.n	800bb74 <_dtoa_r+0x4c4>
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d1d3      	bne.n	800ba2a <_dtoa_r+0x37a>
 800ba82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	f000 8082 	beq.w	800bb8e <_dtoa_r+0x4de>
 800ba8a:	4b91      	ldr	r3, [pc, #580]	; (800bcd0 <_dtoa_r+0x620>)
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	4650      	mov	r0, sl
 800ba90:	4659      	mov	r1, fp
 800ba92:	f7f5 f823 	bl	8000adc <__aeabi_dcmplt>
 800ba96:	2800      	cmp	r0, #0
 800ba98:	d079      	beq.n	800bb8e <_dtoa_r+0x4de>
 800ba9a:	9b03      	ldr	r3, [sp, #12]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d076      	beq.n	800bb8e <_dtoa_r+0x4de>
 800baa0:	9b02      	ldr	r3, [sp, #8]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	dd36      	ble.n	800bb14 <_dtoa_r+0x464>
 800baa6:	9b00      	ldr	r3, [sp, #0]
 800baa8:	4650      	mov	r0, sl
 800baaa:	4659      	mov	r1, fp
 800baac:	1e5f      	subs	r7, r3, #1
 800baae:	2200      	movs	r2, #0
 800bab0:	4b88      	ldr	r3, [pc, #544]	; (800bcd4 <_dtoa_r+0x624>)
 800bab2:	f7f4 fda1 	bl	80005f8 <__aeabi_dmul>
 800bab6:	9e02      	ldr	r6, [sp, #8]
 800bab8:	4682      	mov	sl, r0
 800baba:	468b      	mov	fp, r1
 800babc:	3501      	adds	r5, #1
 800babe:	4628      	mov	r0, r5
 800bac0:	f7f4 fd30 	bl	8000524 <__aeabi_i2d>
 800bac4:	4652      	mov	r2, sl
 800bac6:	465b      	mov	r3, fp
 800bac8:	f7f4 fd96 	bl	80005f8 <__aeabi_dmul>
 800bacc:	4b82      	ldr	r3, [pc, #520]	; (800bcd8 <_dtoa_r+0x628>)
 800bace:	2200      	movs	r2, #0
 800bad0:	f7f4 fbdc 	bl	800028c <__adddf3>
 800bad4:	46d0      	mov	r8, sl
 800bad6:	46d9      	mov	r9, fp
 800bad8:	4682      	mov	sl, r0
 800bada:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bade:	2e00      	cmp	r6, #0
 800bae0:	d158      	bne.n	800bb94 <_dtoa_r+0x4e4>
 800bae2:	4b7e      	ldr	r3, [pc, #504]	; (800bcdc <_dtoa_r+0x62c>)
 800bae4:	2200      	movs	r2, #0
 800bae6:	4640      	mov	r0, r8
 800bae8:	4649      	mov	r1, r9
 800baea:	f7f4 fbcd 	bl	8000288 <__aeabi_dsub>
 800baee:	4652      	mov	r2, sl
 800baf0:	465b      	mov	r3, fp
 800baf2:	4680      	mov	r8, r0
 800baf4:	4689      	mov	r9, r1
 800baf6:	f7f5 f80f 	bl	8000b18 <__aeabi_dcmpgt>
 800bafa:	2800      	cmp	r0, #0
 800bafc:	f040 8295 	bne.w	800c02a <_dtoa_r+0x97a>
 800bb00:	4652      	mov	r2, sl
 800bb02:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bb06:	4640      	mov	r0, r8
 800bb08:	4649      	mov	r1, r9
 800bb0a:	f7f4 ffe7 	bl	8000adc <__aeabi_dcmplt>
 800bb0e:	2800      	cmp	r0, #0
 800bb10:	f040 8289 	bne.w	800c026 <_dtoa_r+0x976>
 800bb14:	ec5b ab19 	vmov	sl, fp, d9
 800bb18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	f2c0 8148 	blt.w	800bdb0 <_dtoa_r+0x700>
 800bb20:	9a00      	ldr	r2, [sp, #0]
 800bb22:	2a0e      	cmp	r2, #14
 800bb24:	f300 8144 	bgt.w	800bdb0 <_dtoa_r+0x700>
 800bb28:	4b67      	ldr	r3, [pc, #412]	; (800bcc8 <_dtoa_r+0x618>)
 800bb2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bb32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	f280 80d5 	bge.w	800bce4 <_dtoa_r+0x634>
 800bb3a:	9b03      	ldr	r3, [sp, #12]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	f300 80d1 	bgt.w	800bce4 <_dtoa_r+0x634>
 800bb42:	f040 826f 	bne.w	800c024 <_dtoa_r+0x974>
 800bb46:	4b65      	ldr	r3, [pc, #404]	; (800bcdc <_dtoa_r+0x62c>)
 800bb48:	2200      	movs	r2, #0
 800bb4a:	4640      	mov	r0, r8
 800bb4c:	4649      	mov	r1, r9
 800bb4e:	f7f4 fd53 	bl	80005f8 <__aeabi_dmul>
 800bb52:	4652      	mov	r2, sl
 800bb54:	465b      	mov	r3, fp
 800bb56:	f7f4 ffd5 	bl	8000b04 <__aeabi_dcmpge>
 800bb5a:	9e03      	ldr	r6, [sp, #12]
 800bb5c:	4637      	mov	r7, r6
 800bb5e:	2800      	cmp	r0, #0
 800bb60:	f040 8245 	bne.w	800bfee <_dtoa_r+0x93e>
 800bb64:	9d01      	ldr	r5, [sp, #4]
 800bb66:	2331      	movs	r3, #49	; 0x31
 800bb68:	f805 3b01 	strb.w	r3, [r5], #1
 800bb6c:	9b00      	ldr	r3, [sp, #0]
 800bb6e:	3301      	adds	r3, #1
 800bb70:	9300      	str	r3, [sp, #0]
 800bb72:	e240      	b.n	800bff6 <_dtoa_r+0x946>
 800bb74:	07f2      	lsls	r2, r6, #31
 800bb76:	d505      	bpl.n	800bb84 <_dtoa_r+0x4d4>
 800bb78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb7c:	f7f4 fd3c 	bl	80005f8 <__aeabi_dmul>
 800bb80:	3501      	adds	r5, #1
 800bb82:	2301      	movs	r3, #1
 800bb84:	1076      	asrs	r6, r6, #1
 800bb86:	3708      	adds	r7, #8
 800bb88:	e777      	b.n	800ba7a <_dtoa_r+0x3ca>
 800bb8a:	2502      	movs	r5, #2
 800bb8c:	e779      	b.n	800ba82 <_dtoa_r+0x3d2>
 800bb8e:	9f00      	ldr	r7, [sp, #0]
 800bb90:	9e03      	ldr	r6, [sp, #12]
 800bb92:	e794      	b.n	800babe <_dtoa_r+0x40e>
 800bb94:	9901      	ldr	r1, [sp, #4]
 800bb96:	4b4c      	ldr	r3, [pc, #304]	; (800bcc8 <_dtoa_r+0x618>)
 800bb98:	4431      	add	r1, r6
 800bb9a:	910d      	str	r1, [sp, #52]	; 0x34
 800bb9c:	9908      	ldr	r1, [sp, #32]
 800bb9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bba2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bba6:	2900      	cmp	r1, #0
 800bba8:	d043      	beq.n	800bc32 <_dtoa_r+0x582>
 800bbaa:	494d      	ldr	r1, [pc, #308]	; (800bce0 <_dtoa_r+0x630>)
 800bbac:	2000      	movs	r0, #0
 800bbae:	f7f4 fe4d 	bl	800084c <__aeabi_ddiv>
 800bbb2:	4652      	mov	r2, sl
 800bbb4:	465b      	mov	r3, fp
 800bbb6:	f7f4 fb67 	bl	8000288 <__aeabi_dsub>
 800bbba:	9d01      	ldr	r5, [sp, #4]
 800bbbc:	4682      	mov	sl, r0
 800bbbe:	468b      	mov	fp, r1
 800bbc0:	4649      	mov	r1, r9
 800bbc2:	4640      	mov	r0, r8
 800bbc4:	f7f4 ffc8 	bl	8000b58 <__aeabi_d2iz>
 800bbc8:	4606      	mov	r6, r0
 800bbca:	f7f4 fcab 	bl	8000524 <__aeabi_i2d>
 800bbce:	4602      	mov	r2, r0
 800bbd0:	460b      	mov	r3, r1
 800bbd2:	4640      	mov	r0, r8
 800bbd4:	4649      	mov	r1, r9
 800bbd6:	f7f4 fb57 	bl	8000288 <__aeabi_dsub>
 800bbda:	3630      	adds	r6, #48	; 0x30
 800bbdc:	f805 6b01 	strb.w	r6, [r5], #1
 800bbe0:	4652      	mov	r2, sl
 800bbe2:	465b      	mov	r3, fp
 800bbe4:	4680      	mov	r8, r0
 800bbe6:	4689      	mov	r9, r1
 800bbe8:	f7f4 ff78 	bl	8000adc <__aeabi_dcmplt>
 800bbec:	2800      	cmp	r0, #0
 800bbee:	d163      	bne.n	800bcb8 <_dtoa_r+0x608>
 800bbf0:	4642      	mov	r2, r8
 800bbf2:	464b      	mov	r3, r9
 800bbf4:	4936      	ldr	r1, [pc, #216]	; (800bcd0 <_dtoa_r+0x620>)
 800bbf6:	2000      	movs	r0, #0
 800bbf8:	f7f4 fb46 	bl	8000288 <__aeabi_dsub>
 800bbfc:	4652      	mov	r2, sl
 800bbfe:	465b      	mov	r3, fp
 800bc00:	f7f4 ff6c 	bl	8000adc <__aeabi_dcmplt>
 800bc04:	2800      	cmp	r0, #0
 800bc06:	f040 80b5 	bne.w	800bd74 <_dtoa_r+0x6c4>
 800bc0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc0c:	429d      	cmp	r5, r3
 800bc0e:	d081      	beq.n	800bb14 <_dtoa_r+0x464>
 800bc10:	4b30      	ldr	r3, [pc, #192]	; (800bcd4 <_dtoa_r+0x624>)
 800bc12:	2200      	movs	r2, #0
 800bc14:	4650      	mov	r0, sl
 800bc16:	4659      	mov	r1, fp
 800bc18:	f7f4 fcee 	bl	80005f8 <__aeabi_dmul>
 800bc1c:	4b2d      	ldr	r3, [pc, #180]	; (800bcd4 <_dtoa_r+0x624>)
 800bc1e:	4682      	mov	sl, r0
 800bc20:	468b      	mov	fp, r1
 800bc22:	4640      	mov	r0, r8
 800bc24:	4649      	mov	r1, r9
 800bc26:	2200      	movs	r2, #0
 800bc28:	f7f4 fce6 	bl	80005f8 <__aeabi_dmul>
 800bc2c:	4680      	mov	r8, r0
 800bc2e:	4689      	mov	r9, r1
 800bc30:	e7c6      	b.n	800bbc0 <_dtoa_r+0x510>
 800bc32:	4650      	mov	r0, sl
 800bc34:	4659      	mov	r1, fp
 800bc36:	f7f4 fcdf 	bl	80005f8 <__aeabi_dmul>
 800bc3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc3c:	9d01      	ldr	r5, [sp, #4]
 800bc3e:	930f      	str	r3, [sp, #60]	; 0x3c
 800bc40:	4682      	mov	sl, r0
 800bc42:	468b      	mov	fp, r1
 800bc44:	4649      	mov	r1, r9
 800bc46:	4640      	mov	r0, r8
 800bc48:	f7f4 ff86 	bl	8000b58 <__aeabi_d2iz>
 800bc4c:	4606      	mov	r6, r0
 800bc4e:	f7f4 fc69 	bl	8000524 <__aeabi_i2d>
 800bc52:	3630      	adds	r6, #48	; 0x30
 800bc54:	4602      	mov	r2, r0
 800bc56:	460b      	mov	r3, r1
 800bc58:	4640      	mov	r0, r8
 800bc5a:	4649      	mov	r1, r9
 800bc5c:	f7f4 fb14 	bl	8000288 <__aeabi_dsub>
 800bc60:	f805 6b01 	strb.w	r6, [r5], #1
 800bc64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc66:	429d      	cmp	r5, r3
 800bc68:	4680      	mov	r8, r0
 800bc6a:	4689      	mov	r9, r1
 800bc6c:	f04f 0200 	mov.w	r2, #0
 800bc70:	d124      	bne.n	800bcbc <_dtoa_r+0x60c>
 800bc72:	4b1b      	ldr	r3, [pc, #108]	; (800bce0 <_dtoa_r+0x630>)
 800bc74:	4650      	mov	r0, sl
 800bc76:	4659      	mov	r1, fp
 800bc78:	f7f4 fb08 	bl	800028c <__adddf3>
 800bc7c:	4602      	mov	r2, r0
 800bc7e:	460b      	mov	r3, r1
 800bc80:	4640      	mov	r0, r8
 800bc82:	4649      	mov	r1, r9
 800bc84:	f7f4 ff48 	bl	8000b18 <__aeabi_dcmpgt>
 800bc88:	2800      	cmp	r0, #0
 800bc8a:	d173      	bne.n	800bd74 <_dtoa_r+0x6c4>
 800bc8c:	4652      	mov	r2, sl
 800bc8e:	465b      	mov	r3, fp
 800bc90:	4913      	ldr	r1, [pc, #76]	; (800bce0 <_dtoa_r+0x630>)
 800bc92:	2000      	movs	r0, #0
 800bc94:	f7f4 faf8 	bl	8000288 <__aeabi_dsub>
 800bc98:	4602      	mov	r2, r0
 800bc9a:	460b      	mov	r3, r1
 800bc9c:	4640      	mov	r0, r8
 800bc9e:	4649      	mov	r1, r9
 800bca0:	f7f4 ff1c 	bl	8000adc <__aeabi_dcmplt>
 800bca4:	2800      	cmp	r0, #0
 800bca6:	f43f af35 	beq.w	800bb14 <_dtoa_r+0x464>
 800bcaa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bcac:	1e6b      	subs	r3, r5, #1
 800bcae:	930f      	str	r3, [sp, #60]	; 0x3c
 800bcb0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bcb4:	2b30      	cmp	r3, #48	; 0x30
 800bcb6:	d0f8      	beq.n	800bcaa <_dtoa_r+0x5fa>
 800bcb8:	9700      	str	r7, [sp, #0]
 800bcba:	e049      	b.n	800bd50 <_dtoa_r+0x6a0>
 800bcbc:	4b05      	ldr	r3, [pc, #20]	; (800bcd4 <_dtoa_r+0x624>)
 800bcbe:	f7f4 fc9b 	bl	80005f8 <__aeabi_dmul>
 800bcc2:	4680      	mov	r8, r0
 800bcc4:	4689      	mov	r9, r1
 800bcc6:	e7bd      	b.n	800bc44 <_dtoa_r+0x594>
 800bcc8:	0800f1c0 	.word	0x0800f1c0
 800bccc:	0800f198 	.word	0x0800f198
 800bcd0:	3ff00000 	.word	0x3ff00000
 800bcd4:	40240000 	.word	0x40240000
 800bcd8:	401c0000 	.word	0x401c0000
 800bcdc:	40140000 	.word	0x40140000
 800bce0:	3fe00000 	.word	0x3fe00000
 800bce4:	9d01      	ldr	r5, [sp, #4]
 800bce6:	4656      	mov	r6, sl
 800bce8:	465f      	mov	r7, fp
 800bcea:	4642      	mov	r2, r8
 800bcec:	464b      	mov	r3, r9
 800bcee:	4630      	mov	r0, r6
 800bcf0:	4639      	mov	r1, r7
 800bcf2:	f7f4 fdab 	bl	800084c <__aeabi_ddiv>
 800bcf6:	f7f4 ff2f 	bl	8000b58 <__aeabi_d2iz>
 800bcfa:	4682      	mov	sl, r0
 800bcfc:	f7f4 fc12 	bl	8000524 <__aeabi_i2d>
 800bd00:	4642      	mov	r2, r8
 800bd02:	464b      	mov	r3, r9
 800bd04:	f7f4 fc78 	bl	80005f8 <__aeabi_dmul>
 800bd08:	4602      	mov	r2, r0
 800bd0a:	460b      	mov	r3, r1
 800bd0c:	4630      	mov	r0, r6
 800bd0e:	4639      	mov	r1, r7
 800bd10:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bd14:	f7f4 fab8 	bl	8000288 <__aeabi_dsub>
 800bd18:	f805 6b01 	strb.w	r6, [r5], #1
 800bd1c:	9e01      	ldr	r6, [sp, #4]
 800bd1e:	9f03      	ldr	r7, [sp, #12]
 800bd20:	1bae      	subs	r6, r5, r6
 800bd22:	42b7      	cmp	r7, r6
 800bd24:	4602      	mov	r2, r0
 800bd26:	460b      	mov	r3, r1
 800bd28:	d135      	bne.n	800bd96 <_dtoa_r+0x6e6>
 800bd2a:	f7f4 faaf 	bl	800028c <__adddf3>
 800bd2e:	4642      	mov	r2, r8
 800bd30:	464b      	mov	r3, r9
 800bd32:	4606      	mov	r6, r0
 800bd34:	460f      	mov	r7, r1
 800bd36:	f7f4 feef 	bl	8000b18 <__aeabi_dcmpgt>
 800bd3a:	b9d0      	cbnz	r0, 800bd72 <_dtoa_r+0x6c2>
 800bd3c:	4642      	mov	r2, r8
 800bd3e:	464b      	mov	r3, r9
 800bd40:	4630      	mov	r0, r6
 800bd42:	4639      	mov	r1, r7
 800bd44:	f7f4 fec0 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd48:	b110      	cbz	r0, 800bd50 <_dtoa_r+0x6a0>
 800bd4a:	f01a 0f01 	tst.w	sl, #1
 800bd4e:	d110      	bne.n	800bd72 <_dtoa_r+0x6c2>
 800bd50:	4620      	mov	r0, r4
 800bd52:	ee18 1a10 	vmov	r1, s16
 800bd56:	f000 fe75 	bl	800ca44 <_Bfree>
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	9800      	ldr	r0, [sp, #0]
 800bd5e:	702b      	strb	r3, [r5, #0]
 800bd60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd62:	3001      	adds	r0, #1
 800bd64:	6018      	str	r0, [r3, #0]
 800bd66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	f43f acf1 	beq.w	800b750 <_dtoa_r+0xa0>
 800bd6e:	601d      	str	r5, [r3, #0]
 800bd70:	e4ee      	b.n	800b750 <_dtoa_r+0xa0>
 800bd72:	9f00      	ldr	r7, [sp, #0]
 800bd74:	462b      	mov	r3, r5
 800bd76:	461d      	mov	r5, r3
 800bd78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bd7c:	2a39      	cmp	r2, #57	; 0x39
 800bd7e:	d106      	bne.n	800bd8e <_dtoa_r+0x6de>
 800bd80:	9a01      	ldr	r2, [sp, #4]
 800bd82:	429a      	cmp	r2, r3
 800bd84:	d1f7      	bne.n	800bd76 <_dtoa_r+0x6c6>
 800bd86:	9901      	ldr	r1, [sp, #4]
 800bd88:	2230      	movs	r2, #48	; 0x30
 800bd8a:	3701      	adds	r7, #1
 800bd8c:	700a      	strb	r2, [r1, #0]
 800bd8e:	781a      	ldrb	r2, [r3, #0]
 800bd90:	3201      	adds	r2, #1
 800bd92:	701a      	strb	r2, [r3, #0]
 800bd94:	e790      	b.n	800bcb8 <_dtoa_r+0x608>
 800bd96:	4ba6      	ldr	r3, [pc, #664]	; (800c030 <_dtoa_r+0x980>)
 800bd98:	2200      	movs	r2, #0
 800bd9a:	f7f4 fc2d 	bl	80005f8 <__aeabi_dmul>
 800bd9e:	2200      	movs	r2, #0
 800bda0:	2300      	movs	r3, #0
 800bda2:	4606      	mov	r6, r0
 800bda4:	460f      	mov	r7, r1
 800bda6:	f7f4 fe8f 	bl	8000ac8 <__aeabi_dcmpeq>
 800bdaa:	2800      	cmp	r0, #0
 800bdac:	d09d      	beq.n	800bcea <_dtoa_r+0x63a>
 800bdae:	e7cf      	b.n	800bd50 <_dtoa_r+0x6a0>
 800bdb0:	9a08      	ldr	r2, [sp, #32]
 800bdb2:	2a00      	cmp	r2, #0
 800bdb4:	f000 80d7 	beq.w	800bf66 <_dtoa_r+0x8b6>
 800bdb8:	9a06      	ldr	r2, [sp, #24]
 800bdba:	2a01      	cmp	r2, #1
 800bdbc:	f300 80ba 	bgt.w	800bf34 <_dtoa_r+0x884>
 800bdc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bdc2:	2a00      	cmp	r2, #0
 800bdc4:	f000 80b2 	beq.w	800bf2c <_dtoa_r+0x87c>
 800bdc8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bdcc:	9e07      	ldr	r6, [sp, #28]
 800bdce:	9d04      	ldr	r5, [sp, #16]
 800bdd0:	9a04      	ldr	r2, [sp, #16]
 800bdd2:	441a      	add	r2, r3
 800bdd4:	9204      	str	r2, [sp, #16]
 800bdd6:	9a05      	ldr	r2, [sp, #20]
 800bdd8:	2101      	movs	r1, #1
 800bdda:	441a      	add	r2, r3
 800bddc:	4620      	mov	r0, r4
 800bdde:	9205      	str	r2, [sp, #20]
 800bde0:	f000 ff32 	bl	800cc48 <__i2b>
 800bde4:	4607      	mov	r7, r0
 800bde6:	2d00      	cmp	r5, #0
 800bde8:	dd0c      	ble.n	800be04 <_dtoa_r+0x754>
 800bdea:	9b05      	ldr	r3, [sp, #20]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	dd09      	ble.n	800be04 <_dtoa_r+0x754>
 800bdf0:	42ab      	cmp	r3, r5
 800bdf2:	9a04      	ldr	r2, [sp, #16]
 800bdf4:	bfa8      	it	ge
 800bdf6:	462b      	movge	r3, r5
 800bdf8:	1ad2      	subs	r2, r2, r3
 800bdfa:	9204      	str	r2, [sp, #16]
 800bdfc:	9a05      	ldr	r2, [sp, #20]
 800bdfe:	1aed      	subs	r5, r5, r3
 800be00:	1ad3      	subs	r3, r2, r3
 800be02:	9305      	str	r3, [sp, #20]
 800be04:	9b07      	ldr	r3, [sp, #28]
 800be06:	b31b      	cbz	r3, 800be50 <_dtoa_r+0x7a0>
 800be08:	9b08      	ldr	r3, [sp, #32]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	f000 80af 	beq.w	800bf6e <_dtoa_r+0x8be>
 800be10:	2e00      	cmp	r6, #0
 800be12:	dd13      	ble.n	800be3c <_dtoa_r+0x78c>
 800be14:	4639      	mov	r1, r7
 800be16:	4632      	mov	r2, r6
 800be18:	4620      	mov	r0, r4
 800be1a:	f000 ffd5 	bl	800cdc8 <__pow5mult>
 800be1e:	ee18 2a10 	vmov	r2, s16
 800be22:	4601      	mov	r1, r0
 800be24:	4607      	mov	r7, r0
 800be26:	4620      	mov	r0, r4
 800be28:	f000 ff24 	bl	800cc74 <__multiply>
 800be2c:	ee18 1a10 	vmov	r1, s16
 800be30:	4680      	mov	r8, r0
 800be32:	4620      	mov	r0, r4
 800be34:	f000 fe06 	bl	800ca44 <_Bfree>
 800be38:	ee08 8a10 	vmov	s16, r8
 800be3c:	9b07      	ldr	r3, [sp, #28]
 800be3e:	1b9a      	subs	r2, r3, r6
 800be40:	d006      	beq.n	800be50 <_dtoa_r+0x7a0>
 800be42:	ee18 1a10 	vmov	r1, s16
 800be46:	4620      	mov	r0, r4
 800be48:	f000 ffbe 	bl	800cdc8 <__pow5mult>
 800be4c:	ee08 0a10 	vmov	s16, r0
 800be50:	2101      	movs	r1, #1
 800be52:	4620      	mov	r0, r4
 800be54:	f000 fef8 	bl	800cc48 <__i2b>
 800be58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	4606      	mov	r6, r0
 800be5e:	f340 8088 	ble.w	800bf72 <_dtoa_r+0x8c2>
 800be62:	461a      	mov	r2, r3
 800be64:	4601      	mov	r1, r0
 800be66:	4620      	mov	r0, r4
 800be68:	f000 ffae 	bl	800cdc8 <__pow5mult>
 800be6c:	9b06      	ldr	r3, [sp, #24]
 800be6e:	2b01      	cmp	r3, #1
 800be70:	4606      	mov	r6, r0
 800be72:	f340 8081 	ble.w	800bf78 <_dtoa_r+0x8c8>
 800be76:	f04f 0800 	mov.w	r8, #0
 800be7a:	6933      	ldr	r3, [r6, #16]
 800be7c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800be80:	6918      	ldr	r0, [r3, #16]
 800be82:	f000 fe91 	bl	800cba8 <__hi0bits>
 800be86:	f1c0 0020 	rsb	r0, r0, #32
 800be8a:	9b05      	ldr	r3, [sp, #20]
 800be8c:	4418      	add	r0, r3
 800be8e:	f010 001f 	ands.w	r0, r0, #31
 800be92:	f000 8092 	beq.w	800bfba <_dtoa_r+0x90a>
 800be96:	f1c0 0320 	rsb	r3, r0, #32
 800be9a:	2b04      	cmp	r3, #4
 800be9c:	f340 808a 	ble.w	800bfb4 <_dtoa_r+0x904>
 800bea0:	f1c0 001c 	rsb	r0, r0, #28
 800bea4:	9b04      	ldr	r3, [sp, #16]
 800bea6:	4403      	add	r3, r0
 800bea8:	9304      	str	r3, [sp, #16]
 800beaa:	9b05      	ldr	r3, [sp, #20]
 800beac:	4403      	add	r3, r0
 800beae:	4405      	add	r5, r0
 800beb0:	9305      	str	r3, [sp, #20]
 800beb2:	9b04      	ldr	r3, [sp, #16]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	dd07      	ble.n	800bec8 <_dtoa_r+0x818>
 800beb8:	ee18 1a10 	vmov	r1, s16
 800bebc:	461a      	mov	r2, r3
 800bebe:	4620      	mov	r0, r4
 800bec0:	f000 ffdc 	bl	800ce7c <__lshift>
 800bec4:	ee08 0a10 	vmov	s16, r0
 800bec8:	9b05      	ldr	r3, [sp, #20]
 800beca:	2b00      	cmp	r3, #0
 800becc:	dd05      	ble.n	800beda <_dtoa_r+0x82a>
 800bece:	4631      	mov	r1, r6
 800bed0:	461a      	mov	r2, r3
 800bed2:	4620      	mov	r0, r4
 800bed4:	f000 ffd2 	bl	800ce7c <__lshift>
 800bed8:	4606      	mov	r6, r0
 800beda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d06e      	beq.n	800bfbe <_dtoa_r+0x90e>
 800bee0:	ee18 0a10 	vmov	r0, s16
 800bee4:	4631      	mov	r1, r6
 800bee6:	f001 f839 	bl	800cf5c <__mcmp>
 800beea:	2800      	cmp	r0, #0
 800beec:	da67      	bge.n	800bfbe <_dtoa_r+0x90e>
 800beee:	9b00      	ldr	r3, [sp, #0]
 800bef0:	3b01      	subs	r3, #1
 800bef2:	ee18 1a10 	vmov	r1, s16
 800bef6:	9300      	str	r3, [sp, #0]
 800bef8:	220a      	movs	r2, #10
 800befa:	2300      	movs	r3, #0
 800befc:	4620      	mov	r0, r4
 800befe:	f000 fdc3 	bl	800ca88 <__multadd>
 800bf02:	9b08      	ldr	r3, [sp, #32]
 800bf04:	ee08 0a10 	vmov	s16, r0
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	f000 81b1 	beq.w	800c270 <_dtoa_r+0xbc0>
 800bf0e:	2300      	movs	r3, #0
 800bf10:	4639      	mov	r1, r7
 800bf12:	220a      	movs	r2, #10
 800bf14:	4620      	mov	r0, r4
 800bf16:	f000 fdb7 	bl	800ca88 <__multadd>
 800bf1a:	9b02      	ldr	r3, [sp, #8]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	4607      	mov	r7, r0
 800bf20:	f300 808e 	bgt.w	800c040 <_dtoa_r+0x990>
 800bf24:	9b06      	ldr	r3, [sp, #24]
 800bf26:	2b02      	cmp	r3, #2
 800bf28:	dc51      	bgt.n	800bfce <_dtoa_r+0x91e>
 800bf2a:	e089      	b.n	800c040 <_dtoa_r+0x990>
 800bf2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bf2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bf32:	e74b      	b.n	800bdcc <_dtoa_r+0x71c>
 800bf34:	9b03      	ldr	r3, [sp, #12]
 800bf36:	1e5e      	subs	r6, r3, #1
 800bf38:	9b07      	ldr	r3, [sp, #28]
 800bf3a:	42b3      	cmp	r3, r6
 800bf3c:	bfbf      	itttt	lt
 800bf3e:	9b07      	ldrlt	r3, [sp, #28]
 800bf40:	9607      	strlt	r6, [sp, #28]
 800bf42:	1af2      	sublt	r2, r6, r3
 800bf44:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bf46:	bfb6      	itet	lt
 800bf48:	189b      	addlt	r3, r3, r2
 800bf4a:	1b9e      	subge	r6, r3, r6
 800bf4c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800bf4e:	9b03      	ldr	r3, [sp, #12]
 800bf50:	bfb8      	it	lt
 800bf52:	2600      	movlt	r6, #0
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	bfb7      	itett	lt
 800bf58:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800bf5c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800bf60:	1a9d      	sublt	r5, r3, r2
 800bf62:	2300      	movlt	r3, #0
 800bf64:	e734      	b.n	800bdd0 <_dtoa_r+0x720>
 800bf66:	9e07      	ldr	r6, [sp, #28]
 800bf68:	9d04      	ldr	r5, [sp, #16]
 800bf6a:	9f08      	ldr	r7, [sp, #32]
 800bf6c:	e73b      	b.n	800bde6 <_dtoa_r+0x736>
 800bf6e:	9a07      	ldr	r2, [sp, #28]
 800bf70:	e767      	b.n	800be42 <_dtoa_r+0x792>
 800bf72:	9b06      	ldr	r3, [sp, #24]
 800bf74:	2b01      	cmp	r3, #1
 800bf76:	dc18      	bgt.n	800bfaa <_dtoa_r+0x8fa>
 800bf78:	f1ba 0f00 	cmp.w	sl, #0
 800bf7c:	d115      	bne.n	800bfaa <_dtoa_r+0x8fa>
 800bf7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bf82:	b993      	cbnz	r3, 800bfaa <_dtoa_r+0x8fa>
 800bf84:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bf88:	0d1b      	lsrs	r3, r3, #20
 800bf8a:	051b      	lsls	r3, r3, #20
 800bf8c:	b183      	cbz	r3, 800bfb0 <_dtoa_r+0x900>
 800bf8e:	9b04      	ldr	r3, [sp, #16]
 800bf90:	3301      	adds	r3, #1
 800bf92:	9304      	str	r3, [sp, #16]
 800bf94:	9b05      	ldr	r3, [sp, #20]
 800bf96:	3301      	adds	r3, #1
 800bf98:	9305      	str	r3, [sp, #20]
 800bf9a:	f04f 0801 	mov.w	r8, #1
 800bf9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	f47f af6a 	bne.w	800be7a <_dtoa_r+0x7ca>
 800bfa6:	2001      	movs	r0, #1
 800bfa8:	e76f      	b.n	800be8a <_dtoa_r+0x7da>
 800bfaa:	f04f 0800 	mov.w	r8, #0
 800bfae:	e7f6      	b.n	800bf9e <_dtoa_r+0x8ee>
 800bfb0:	4698      	mov	r8, r3
 800bfb2:	e7f4      	b.n	800bf9e <_dtoa_r+0x8ee>
 800bfb4:	f43f af7d 	beq.w	800beb2 <_dtoa_r+0x802>
 800bfb8:	4618      	mov	r0, r3
 800bfba:	301c      	adds	r0, #28
 800bfbc:	e772      	b.n	800bea4 <_dtoa_r+0x7f4>
 800bfbe:	9b03      	ldr	r3, [sp, #12]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	dc37      	bgt.n	800c034 <_dtoa_r+0x984>
 800bfc4:	9b06      	ldr	r3, [sp, #24]
 800bfc6:	2b02      	cmp	r3, #2
 800bfc8:	dd34      	ble.n	800c034 <_dtoa_r+0x984>
 800bfca:	9b03      	ldr	r3, [sp, #12]
 800bfcc:	9302      	str	r3, [sp, #8]
 800bfce:	9b02      	ldr	r3, [sp, #8]
 800bfd0:	b96b      	cbnz	r3, 800bfee <_dtoa_r+0x93e>
 800bfd2:	4631      	mov	r1, r6
 800bfd4:	2205      	movs	r2, #5
 800bfd6:	4620      	mov	r0, r4
 800bfd8:	f000 fd56 	bl	800ca88 <__multadd>
 800bfdc:	4601      	mov	r1, r0
 800bfde:	4606      	mov	r6, r0
 800bfe0:	ee18 0a10 	vmov	r0, s16
 800bfe4:	f000 ffba 	bl	800cf5c <__mcmp>
 800bfe8:	2800      	cmp	r0, #0
 800bfea:	f73f adbb 	bgt.w	800bb64 <_dtoa_r+0x4b4>
 800bfee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bff0:	9d01      	ldr	r5, [sp, #4]
 800bff2:	43db      	mvns	r3, r3
 800bff4:	9300      	str	r3, [sp, #0]
 800bff6:	f04f 0800 	mov.w	r8, #0
 800bffa:	4631      	mov	r1, r6
 800bffc:	4620      	mov	r0, r4
 800bffe:	f000 fd21 	bl	800ca44 <_Bfree>
 800c002:	2f00      	cmp	r7, #0
 800c004:	f43f aea4 	beq.w	800bd50 <_dtoa_r+0x6a0>
 800c008:	f1b8 0f00 	cmp.w	r8, #0
 800c00c:	d005      	beq.n	800c01a <_dtoa_r+0x96a>
 800c00e:	45b8      	cmp	r8, r7
 800c010:	d003      	beq.n	800c01a <_dtoa_r+0x96a>
 800c012:	4641      	mov	r1, r8
 800c014:	4620      	mov	r0, r4
 800c016:	f000 fd15 	bl	800ca44 <_Bfree>
 800c01a:	4639      	mov	r1, r7
 800c01c:	4620      	mov	r0, r4
 800c01e:	f000 fd11 	bl	800ca44 <_Bfree>
 800c022:	e695      	b.n	800bd50 <_dtoa_r+0x6a0>
 800c024:	2600      	movs	r6, #0
 800c026:	4637      	mov	r7, r6
 800c028:	e7e1      	b.n	800bfee <_dtoa_r+0x93e>
 800c02a:	9700      	str	r7, [sp, #0]
 800c02c:	4637      	mov	r7, r6
 800c02e:	e599      	b.n	800bb64 <_dtoa_r+0x4b4>
 800c030:	40240000 	.word	0x40240000
 800c034:	9b08      	ldr	r3, [sp, #32]
 800c036:	2b00      	cmp	r3, #0
 800c038:	f000 80ca 	beq.w	800c1d0 <_dtoa_r+0xb20>
 800c03c:	9b03      	ldr	r3, [sp, #12]
 800c03e:	9302      	str	r3, [sp, #8]
 800c040:	2d00      	cmp	r5, #0
 800c042:	dd05      	ble.n	800c050 <_dtoa_r+0x9a0>
 800c044:	4639      	mov	r1, r7
 800c046:	462a      	mov	r2, r5
 800c048:	4620      	mov	r0, r4
 800c04a:	f000 ff17 	bl	800ce7c <__lshift>
 800c04e:	4607      	mov	r7, r0
 800c050:	f1b8 0f00 	cmp.w	r8, #0
 800c054:	d05b      	beq.n	800c10e <_dtoa_r+0xa5e>
 800c056:	6879      	ldr	r1, [r7, #4]
 800c058:	4620      	mov	r0, r4
 800c05a:	f000 fcb3 	bl	800c9c4 <_Balloc>
 800c05e:	4605      	mov	r5, r0
 800c060:	b928      	cbnz	r0, 800c06e <_dtoa_r+0x9be>
 800c062:	4b87      	ldr	r3, [pc, #540]	; (800c280 <_dtoa_r+0xbd0>)
 800c064:	4602      	mov	r2, r0
 800c066:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c06a:	f7ff bb3b 	b.w	800b6e4 <_dtoa_r+0x34>
 800c06e:	693a      	ldr	r2, [r7, #16]
 800c070:	3202      	adds	r2, #2
 800c072:	0092      	lsls	r2, r2, #2
 800c074:	f107 010c 	add.w	r1, r7, #12
 800c078:	300c      	adds	r0, #12
 800c07a:	f000 fc95 	bl	800c9a8 <memcpy>
 800c07e:	2201      	movs	r2, #1
 800c080:	4629      	mov	r1, r5
 800c082:	4620      	mov	r0, r4
 800c084:	f000 fefa 	bl	800ce7c <__lshift>
 800c088:	9b01      	ldr	r3, [sp, #4]
 800c08a:	f103 0901 	add.w	r9, r3, #1
 800c08e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c092:	4413      	add	r3, r2
 800c094:	9305      	str	r3, [sp, #20]
 800c096:	f00a 0301 	and.w	r3, sl, #1
 800c09a:	46b8      	mov	r8, r7
 800c09c:	9304      	str	r3, [sp, #16]
 800c09e:	4607      	mov	r7, r0
 800c0a0:	4631      	mov	r1, r6
 800c0a2:	ee18 0a10 	vmov	r0, s16
 800c0a6:	f7ff fa77 	bl	800b598 <quorem>
 800c0aa:	4641      	mov	r1, r8
 800c0ac:	9002      	str	r0, [sp, #8]
 800c0ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c0b2:	ee18 0a10 	vmov	r0, s16
 800c0b6:	f000 ff51 	bl	800cf5c <__mcmp>
 800c0ba:	463a      	mov	r2, r7
 800c0bc:	9003      	str	r0, [sp, #12]
 800c0be:	4631      	mov	r1, r6
 800c0c0:	4620      	mov	r0, r4
 800c0c2:	f000 ff67 	bl	800cf94 <__mdiff>
 800c0c6:	68c2      	ldr	r2, [r0, #12]
 800c0c8:	f109 3bff 	add.w	fp, r9, #4294967295
 800c0cc:	4605      	mov	r5, r0
 800c0ce:	bb02      	cbnz	r2, 800c112 <_dtoa_r+0xa62>
 800c0d0:	4601      	mov	r1, r0
 800c0d2:	ee18 0a10 	vmov	r0, s16
 800c0d6:	f000 ff41 	bl	800cf5c <__mcmp>
 800c0da:	4602      	mov	r2, r0
 800c0dc:	4629      	mov	r1, r5
 800c0de:	4620      	mov	r0, r4
 800c0e0:	9207      	str	r2, [sp, #28]
 800c0e2:	f000 fcaf 	bl	800ca44 <_Bfree>
 800c0e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c0ea:	ea43 0102 	orr.w	r1, r3, r2
 800c0ee:	9b04      	ldr	r3, [sp, #16]
 800c0f0:	430b      	orrs	r3, r1
 800c0f2:	464d      	mov	r5, r9
 800c0f4:	d10f      	bne.n	800c116 <_dtoa_r+0xa66>
 800c0f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c0fa:	d02a      	beq.n	800c152 <_dtoa_r+0xaa2>
 800c0fc:	9b03      	ldr	r3, [sp, #12]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	dd02      	ble.n	800c108 <_dtoa_r+0xa58>
 800c102:	9b02      	ldr	r3, [sp, #8]
 800c104:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c108:	f88b a000 	strb.w	sl, [fp]
 800c10c:	e775      	b.n	800bffa <_dtoa_r+0x94a>
 800c10e:	4638      	mov	r0, r7
 800c110:	e7ba      	b.n	800c088 <_dtoa_r+0x9d8>
 800c112:	2201      	movs	r2, #1
 800c114:	e7e2      	b.n	800c0dc <_dtoa_r+0xa2c>
 800c116:	9b03      	ldr	r3, [sp, #12]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	db04      	blt.n	800c126 <_dtoa_r+0xa76>
 800c11c:	9906      	ldr	r1, [sp, #24]
 800c11e:	430b      	orrs	r3, r1
 800c120:	9904      	ldr	r1, [sp, #16]
 800c122:	430b      	orrs	r3, r1
 800c124:	d122      	bne.n	800c16c <_dtoa_r+0xabc>
 800c126:	2a00      	cmp	r2, #0
 800c128:	ddee      	ble.n	800c108 <_dtoa_r+0xa58>
 800c12a:	ee18 1a10 	vmov	r1, s16
 800c12e:	2201      	movs	r2, #1
 800c130:	4620      	mov	r0, r4
 800c132:	f000 fea3 	bl	800ce7c <__lshift>
 800c136:	4631      	mov	r1, r6
 800c138:	ee08 0a10 	vmov	s16, r0
 800c13c:	f000 ff0e 	bl	800cf5c <__mcmp>
 800c140:	2800      	cmp	r0, #0
 800c142:	dc03      	bgt.n	800c14c <_dtoa_r+0xa9c>
 800c144:	d1e0      	bne.n	800c108 <_dtoa_r+0xa58>
 800c146:	f01a 0f01 	tst.w	sl, #1
 800c14a:	d0dd      	beq.n	800c108 <_dtoa_r+0xa58>
 800c14c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c150:	d1d7      	bne.n	800c102 <_dtoa_r+0xa52>
 800c152:	2339      	movs	r3, #57	; 0x39
 800c154:	f88b 3000 	strb.w	r3, [fp]
 800c158:	462b      	mov	r3, r5
 800c15a:	461d      	mov	r5, r3
 800c15c:	3b01      	subs	r3, #1
 800c15e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c162:	2a39      	cmp	r2, #57	; 0x39
 800c164:	d071      	beq.n	800c24a <_dtoa_r+0xb9a>
 800c166:	3201      	adds	r2, #1
 800c168:	701a      	strb	r2, [r3, #0]
 800c16a:	e746      	b.n	800bffa <_dtoa_r+0x94a>
 800c16c:	2a00      	cmp	r2, #0
 800c16e:	dd07      	ble.n	800c180 <_dtoa_r+0xad0>
 800c170:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c174:	d0ed      	beq.n	800c152 <_dtoa_r+0xaa2>
 800c176:	f10a 0301 	add.w	r3, sl, #1
 800c17a:	f88b 3000 	strb.w	r3, [fp]
 800c17e:	e73c      	b.n	800bffa <_dtoa_r+0x94a>
 800c180:	9b05      	ldr	r3, [sp, #20]
 800c182:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c186:	4599      	cmp	r9, r3
 800c188:	d047      	beq.n	800c21a <_dtoa_r+0xb6a>
 800c18a:	ee18 1a10 	vmov	r1, s16
 800c18e:	2300      	movs	r3, #0
 800c190:	220a      	movs	r2, #10
 800c192:	4620      	mov	r0, r4
 800c194:	f000 fc78 	bl	800ca88 <__multadd>
 800c198:	45b8      	cmp	r8, r7
 800c19a:	ee08 0a10 	vmov	s16, r0
 800c19e:	f04f 0300 	mov.w	r3, #0
 800c1a2:	f04f 020a 	mov.w	r2, #10
 800c1a6:	4641      	mov	r1, r8
 800c1a8:	4620      	mov	r0, r4
 800c1aa:	d106      	bne.n	800c1ba <_dtoa_r+0xb0a>
 800c1ac:	f000 fc6c 	bl	800ca88 <__multadd>
 800c1b0:	4680      	mov	r8, r0
 800c1b2:	4607      	mov	r7, r0
 800c1b4:	f109 0901 	add.w	r9, r9, #1
 800c1b8:	e772      	b.n	800c0a0 <_dtoa_r+0x9f0>
 800c1ba:	f000 fc65 	bl	800ca88 <__multadd>
 800c1be:	4639      	mov	r1, r7
 800c1c0:	4680      	mov	r8, r0
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	220a      	movs	r2, #10
 800c1c6:	4620      	mov	r0, r4
 800c1c8:	f000 fc5e 	bl	800ca88 <__multadd>
 800c1cc:	4607      	mov	r7, r0
 800c1ce:	e7f1      	b.n	800c1b4 <_dtoa_r+0xb04>
 800c1d0:	9b03      	ldr	r3, [sp, #12]
 800c1d2:	9302      	str	r3, [sp, #8]
 800c1d4:	9d01      	ldr	r5, [sp, #4]
 800c1d6:	ee18 0a10 	vmov	r0, s16
 800c1da:	4631      	mov	r1, r6
 800c1dc:	f7ff f9dc 	bl	800b598 <quorem>
 800c1e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c1e4:	9b01      	ldr	r3, [sp, #4]
 800c1e6:	f805 ab01 	strb.w	sl, [r5], #1
 800c1ea:	1aea      	subs	r2, r5, r3
 800c1ec:	9b02      	ldr	r3, [sp, #8]
 800c1ee:	4293      	cmp	r3, r2
 800c1f0:	dd09      	ble.n	800c206 <_dtoa_r+0xb56>
 800c1f2:	ee18 1a10 	vmov	r1, s16
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	220a      	movs	r2, #10
 800c1fa:	4620      	mov	r0, r4
 800c1fc:	f000 fc44 	bl	800ca88 <__multadd>
 800c200:	ee08 0a10 	vmov	s16, r0
 800c204:	e7e7      	b.n	800c1d6 <_dtoa_r+0xb26>
 800c206:	9b02      	ldr	r3, [sp, #8]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	bfc8      	it	gt
 800c20c:	461d      	movgt	r5, r3
 800c20e:	9b01      	ldr	r3, [sp, #4]
 800c210:	bfd8      	it	le
 800c212:	2501      	movle	r5, #1
 800c214:	441d      	add	r5, r3
 800c216:	f04f 0800 	mov.w	r8, #0
 800c21a:	ee18 1a10 	vmov	r1, s16
 800c21e:	2201      	movs	r2, #1
 800c220:	4620      	mov	r0, r4
 800c222:	f000 fe2b 	bl	800ce7c <__lshift>
 800c226:	4631      	mov	r1, r6
 800c228:	ee08 0a10 	vmov	s16, r0
 800c22c:	f000 fe96 	bl	800cf5c <__mcmp>
 800c230:	2800      	cmp	r0, #0
 800c232:	dc91      	bgt.n	800c158 <_dtoa_r+0xaa8>
 800c234:	d102      	bne.n	800c23c <_dtoa_r+0xb8c>
 800c236:	f01a 0f01 	tst.w	sl, #1
 800c23a:	d18d      	bne.n	800c158 <_dtoa_r+0xaa8>
 800c23c:	462b      	mov	r3, r5
 800c23e:	461d      	mov	r5, r3
 800c240:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c244:	2a30      	cmp	r2, #48	; 0x30
 800c246:	d0fa      	beq.n	800c23e <_dtoa_r+0xb8e>
 800c248:	e6d7      	b.n	800bffa <_dtoa_r+0x94a>
 800c24a:	9a01      	ldr	r2, [sp, #4]
 800c24c:	429a      	cmp	r2, r3
 800c24e:	d184      	bne.n	800c15a <_dtoa_r+0xaaa>
 800c250:	9b00      	ldr	r3, [sp, #0]
 800c252:	3301      	adds	r3, #1
 800c254:	9300      	str	r3, [sp, #0]
 800c256:	2331      	movs	r3, #49	; 0x31
 800c258:	7013      	strb	r3, [r2, #0]
 800c25a:	e6ce      	b.n	800bffa <_dtoa_r+0x94a>
 800c25c:	4b09      	ldr	r3, [pc, #36]	; (800c284 <_dtoa_r+0xbd4>)
 800c25e:	f7ff ba95 	b.w	800b78c <_dtoa_r+0xdc>
 800c262:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c264:	2b00      	cmp	r3, #0
 800c266:	f47f aa6e 	bne.w	800b746 <_dtoa_r+0x96>
 800c26a:	4b07      	ldr	r3, [pc, #28]	; (800c288 <_dtoa_r+0xbd8>)
 800c26c:	f7ff ba8e 	b.w	800b78c <_dtoa_r+0xdc>
 800c270:	9b02      	ldr	r3, [sp, #8]
 800c272:	2b00      	cmp	r3, #0
 800c274:	dcae      	bgt.n	800c1d4 <_dtoa_r+0xb24>
 800c276:	9b06      	ldr	r3, [sp, #24]
 800c278:	2b02      	cmp	r3, #2
 800c27a:	f73f aea8 	bgt.w	800bfce <_dtoa_r+0x91e>
 800c27e:	e7a9      	b.n	800c1d4 <_dtoa_r+0xb24>
 800c280:	0800f0b0 	.word	0x0800f0b0
 800c284:	0800eeb4 	.word	0x0800eeb4
 800c288:	0800f031 	.word	0x0800f031

0800c28c <rshift>:
 800c28c:	6903      	ldr	r3, [r0, #16]
 800c28e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c292:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c296:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c29a:	f100 0414 	add.w	r4, r0, #20
 800c29e:	dd45      	ble.n	800c32c <rshift+0xa0>
 800c2a0:	f011 011f 	ands.w	r1, r1, #31
 800c2a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c2a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c2ac:	d10c      	bne.n	800c2c8 <rshift+0x3c>
 800c2ae:	f100 0710 	add.w	r7, r0, #16
 800c2b2:	4629      	mov	r1, r5
 800c2b4:	42b1      	cmp	r1, r6
 800c2b6:	d334      	bcc.n	800c322 <rshift+0x96>
 800c2b8:	1a9b      	subs	r3, r3, r2
 800c2ba:	009b      	lsls	r3, r3, #2
 800c2bc:	1eea      	subs	r2, r5, #3
 800c2be:	4296      	cmp	r6, r2
 800c2c0:	bf38      	it	cc
 800c2c2:	2300      	movcc	r3, #0
 800c2c4:	4423      	add	r3, r4
 800c2c6:	e015      	b.n	800c2f4 <rshift+0x68>
 800c2c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c2cc:	f1c1 0820 	rsb	r8, r1, #32
 800c2d0:	40cf      	lsrs	r7, r1
 800c2d2:	f105 0e04 	add.w	lr, r5, #4
 800c2d6:	46a1      	mov	r9, r4
 800c2d8:	4576      	cmp	r6, lr
 800c2da:	46f4      	mov	ip, lr
 800c2dc:	d815      	bhi.n	800c30a <rshift+0x7e>
 800c2de:	1a9a      	subs	r2, r3, r2
 800c2e0:	0092      	lsls	r2, r2, #2
 800c2e2:	3a04      	subs	r2, #4
 800c2e4:	3501      	adds	r5, #1
 800c2e6:	42ae      	cmp	r6, r5
 800c2e8:	bf38      	it	cc
 800c2ea:	2200      	movcc	r2, #0
 800c2ec:	18a3      	adds	r3, r4, r2
 800c2ee:	50a7      	str	r7, [r4, r2]
 800c2f0:	b107      	cbz	r7, 800c2f4 <rshift+0x68>
 800c2f2:	3304      	adds	r3, #4
 800c2f4:	1b1a      	subs	r2, r3, r4
 800c2f6:	42a3      	cmp	r3, r4
 800c2f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c2fc:	bf08      	it	eq
 800c2fe:	2300      	moveq	r3, #0
 800c300:	6102      	str	r2, [r0, #16]
 800c302:	bf08      	it	eq
 800c304:	6143      	streq	r3, [r0, #20]
 800c306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c30a:	f8dc c000 	ldr.w	ip, [ip]
 800c30e:	fa0c fc08 	lsl.w	ip, ip, r8
 800c312:	ea4c 0707 	orr.w	r7, ip, r7
 800c316:	f849 7b04 	str.w	r7, [r9], #4
 800c31a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c31e:	40cf      	lsrs	r7, r1
 800c320:	e7da      	b.n	800c2d8 <rshift+0x4c>
 800c322:	f851 cb04 	ldr.w	ip, [r1], #4
 800c326:	f847 cf04 	str.w	ip, [r7, #4]!
 800c32a:	e7c3      	b.n	800c2b4 <rshift+0x28>
 800c32c:	4623      	mov	r3, r4
 800c32e:	e7e1      	b.n	800c2f4 <rshift+0x68>

0800c330 <__hexdig_fun>:
 800c330:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c334:	2b09      	cmp	r3, #9
 800c336:	d802      	bhi.n	800c33e <__hexdig_fun+0xe>
 800c338:	3820      	subs	r0, #32
 800c33a:	b2c0      	uxtb	r0, r0
 800c33c:	4770      	bx	lr
 800c33e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c342:	2b05      	cmp	r3, #5
 800c344:	d801      	bhi.n	800c34a <__hexdig_fun+0x1a>
 800c346:	3847      	subs	r0, #71	; 0x47
 800c348:	e7f7      	b.n	800c33a <__hexdig_fun+0xa>
 800c34a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c34e:	2b05      	cmp	r3, #5
 800c350:	d801      	bhi.n	800c356 <__hexdig_fun+0x26>
 800c352:	3827      	subs	r0, #39	; 0x27
 800c354:	e7f1      	b.n	800c33a <__hexdig_fun+0xa>
 800c356:	2000      	movs	r0, #0
 800c358:	4770      	bx	lr
	...

0800c35c <__gethex>:
 800c35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c360:	ed2d 8b02 	vpush	{d8}
 800c364:	b089      	sub	sp, #36	; 0x24
 800c366:	ee08 0a10 	vmov	s16, r0
 800c36a:	9304      	str	r3, [sp, #16]
 800c36c:	4bb4      	ldr	r3, [pc, #720]	; (800c640 <__gethex+0x2e4>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	9301      	str	r3, [sp, #4]
 800c372:	4618      	mov	r0, r3
 800c374:	468b      	mov	fp, r1
 800c376:	4690      	mov	r8, r2
 800c378:	f7f3 ff2a 	bl	80001d0 <strlen>
 800c37c:	9b01      	ldr	r3, [sp, #4]
 800c37e:	f8db 2000 	ldr.w	r2, [fp]
 800c382:	4403      	add	r3, r0
 800c384:	4682      	mov	sl, r0
 800c386:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c38a:	9305      	str	r3, [sp, #20]
 800c38c:	1c93      	adds	r3, r2, #2
 800c38e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c392:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c396:	32fe      	adds	r2, #254	; 0xfe
 800c398:	18d1      	adds	r1, r2, r3
 800c39a:	461f      	mov	r7, r3
 800c39c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c3a0:	9100      	str	r1, [sp, #0]
 800c3a2:	2830      	cmp	r0, #48	; 0x30
 800c3a4:	d0f8      	beq.n	800c398 <__gethex+0x3c>
 800c3a6:	f7ff ffc3 	bl	800c330 <__hexdig_fun>
 800c3aa:	4604      	mov	r4, r0
 800c3ac:	2800      	cmp	r0, #0
 800c3ae:	d13a      	bne.n	800c426 <__gethex+0xca>
 800c3b0:	9901      	ldr	r1, [sp, #4]
 800c3b2:	4652      	mov	r2, sl
 800c3b4:	4638      	mov	r0, r7
 800c3b6:	f001 fa33 	bl	800d820 <strncmp>
 800c3ba:	4605      	mov	r5, r0
 800c3bc:	2800      	cmp	r0, #0
 800c3be:	d168      	bne.n	800c492 <__gethex+0x136>
 800c3c0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c3c4:	eb07 060a 	add.w	r6, r7, sl
 800c3c8:	f7ff ffb2 	bl	800c330 <__hexdig_fun>
 800c3cc:	2800      	cmp	r0, #0
 800c3ce:	d062      	beq.n	800c496 <__gethex+0x13a>
 800c3d0:	4633      	mov	r3, r6
 800c3d2:	7818      	ldrb	r0, [r3, #0]
 800c3d4:	2830      	cmp	r0, #48	; 0x30
 800c3d6:	461f      	mov	r7, r3
 800c3d8:	f103 0301 	add.w	r3, r3, #1
 800c3dc:	d0f9      	beq.n	800c3d2 <__gethex+0x76>
 800c3de:	f7ff ffa7 	bl	800c330 <__hexdig_fun>
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	fab0 f480 	clz	r4, r0
 800c3e8:	0964      	lsrs	r4, r4, #5
 800c3ea:	4635      	mov	r5, r6
 800c3ec:	9300      	str	r3, [sp, #0]
 800c3ee:	463a      	mov	r2, r7
 800c3f0:	4616      	mov	r6, r2
 800c3f2:	3201      	adds	r2, #1
 800c3f4:	7830      	ldrb	r0, [r6, #0]
 800c3f6:	f7ff ff9b 	bl	800c330 <__hexdig_fun>
 800c3fa:	2800      	cmp	r0, #0
 800c3fc:	d1f8      	bne.n	800c3f0 <__gethex+0x94>
 800c3fe:	9901      	ldr	r1, [sp, #4]
 800c400:	4652      	mov	r2, sl
 800c402:	4630      	mov	r0, r6
 800c404:	f001 fa0c 	bl	800d820 <strncmp>
 800c408:	b980      	cbnz	r0, 800c42c <__gethex+0xd0>
 800c40a:	b94d      	cbnz	r5, 800c420 <__gethex+0xc4>
 800c40c:	eb06 050a 	add.w	r5, r6, sl
 800c410:	462a      	mov	r2, r5
 800c412:	4616      	mov	r6, r2
 800c414:	3201      	adds	r2, #1
 800c416:	7830      	ldrb	r0, [r6, #0]
 800c418:	f7ff ff8a 	bl	800c330 <__hexdig_fun>
 800c41c:	2800      	cmp	r0, #0
 800c41e:	d1f8      	bne.n	800c412 <__gethex+0xb6>
 800c420:	1bad      	subs	r5, r5, r6
 800c422:	00ad      	lsls	r5, r5, #2
 800c424:	e004      	b.n	800c430 <__gethex+0xd4>
 800c426:	2400      	movs	r4, #0
 800c428:	4625      	mov	r5, r4
 800c42a:	e7e0      	b.n	800c3ee <__gethex+0x92>
 800c42c:	2d00      	cmp	r5, #0
 800c42e:	d1f7      	bne.n	800c420 <__gethex+0xc4>
 800c430:	7833      	ldrb	r3, [r6, #0]
 800c432:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c436:	2b50      	cmp	r3, #80	; 0x50
 800c438:	d13b      	bne.n	800c4b2 <__gethex+0x156>
 800c43a:	7873      	ldrb	r3, [r6, #1]
 800c43c:	2b2b      	cmp	r3, #43	; 0x2b
 800c43e:	d02c      	beq.n	800c49a <__gethex+0x13e>
 800c440:	2b2d      	cmp	r3, #45	; 0x2d
 800c442:	d02e      	beq.n	800c4a2 <__gethex+0x146>
 800c444:	1c71      	adds	r1, r6, #1
 800c446:	f04f 0900 	mov.w	r9, #0
 800c44a:	7808      	ldrb	r0, [r1, #0]
 800c44c:	f7ff ff70 	bl	800c330 <__hexdig_fun>
 800c450:	1e43      	subs	r3, r0, #1
 800c452:	b2db      	uxtb	r3, r3
 800c454:	2b18      	cmp	r3, #24
 800c456:	d82c      	bhi.n	800c4b2 <__gethex+0x156>
 800c458:	f1a0 0210 	sub.w	r2, r0, #16
 800c45c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c460:	f7ff ff66 	bl	800c330 <__hexdig_fun>
 800c464:	1e43      	subs	r3, r0, #1
 800c466:	b2db      	uxtb	r3, r3
 800c468:	2b18      	cmp	r3, #24
 800c46a:	d91d      	bls.n	800c4a8 <__gethex+0x14c>
 800c46c:	f1b9 0f00 	cmp.w	r9, #0
 800c470:	d000      	beq.n	800c474 <__gethex+0x118>
 800c472:	4252      	negs	r2, r2
 800c474:	4415      	add	r5, r2
 800c476:	f8cb 1000 	str.w	r1, [fp]
 800c47a:	b1e4      	cbz	r4, 800c4b6 <__gethex+0x15a>
 800c47c:	9b00      	ldr	r3, [sp, #0]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	bf14      	ite	ne
 800c482:	2700      	movne	r7, #0
 800c484:	2706      	moveq	r7, #6
 800c486:	4638      	mov	r0, r7
 800c488:	b009      	add	sp, #36	; 0x24
 800c48a:	ecbd 8b02 	vpop	{d8}
 800c48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c492:	463e      	mov	r6, r7
 800c494:	4625      	mov	r5, r4
 800c496:	2401      	movs	r4, #1
 800c498:	e7ca      	b.n	800c430 <__gethex+0xd4>
 800c49a:	f04f 0900 	mov.w	r9, #0
 800c49e:	1cb1      	adds	r1, r6, #2
 800c4a0:	e7d3      	b.n	800c44a <__gethex+0xee>
 800c4a2:	f04f 0901 	mov.w	r9, #1
 800c4a6:	e7fa      	b.n	800c49e <__gethex+0x142>
 800c4a8:	230a      	movs	r3, #10
 800c4aa:	fb03 0202 	mla	r2, r3, r2, r0
 800c4ae:	3a10      	subs	r2, #16
 800c4b0:	e7d4      	b.n	800c45c <__gethex+0x100>
 800c4b2:	4631      	mov	r1, r6
 800c4b4:	e7df      	b.n	800c476 <__gethex+0x11a>
 800c4b6:	1bf3      	subs	r3, r6, r7
 800c4b8:	3b01      	subs	r3, #1
 800c4ba:	4621      	mov	r1, r4
 800c4bc:	2b07      	cmp	r3, #7
 800c4be:	dc0b      	bgt.n	800c4d8 <__gethex+0x17c>
 800c4c0:	ee18 0a10 	vmov	r0, s16
 800c4c4:	f000 fa7e 	bl	800c9c4 <_Balloc>
 800c4c8:	4604      	mov	r4, r0
 800c4ca:	b940      	cbnz	r0, 800c4de <__gethex+0x182>
 800c4cc:	4b5d      	ldr	r3, [pc, #372]	; (800c644 <__gethex+0x2e8>)
 800c4ce:	4602      	mov	r2, r0
 800c4d0:	21de      	movs	r1, #222	; 0xde
 800c4d2:	485d      	ldr	r0, [pc, #372]	; (800c648 <__gethex+0x2ec>)
 800c4d4:	f001 f9c6 	bl	800d864 <__assert_func>
 800c4d8:	3101      	adds	r1, #1
 800c4da:	105b      	asrs	r3, r3, #1
 800c4dc:	e7ee      	b.n	800c4bc <__gethex+0x160>
 800c4de:	f100 0914 	add.w	r9, r0, #20
 800c4e2:	f04f 0b00 	mov.w	fp, #0
 800c4e6:	f1ca 0301 	rsb	r3, sl, #1
 800c4ea:	f8cd 9008 	str.w	r9, [sp, #8]
 800c4ee:	f8cd b000 	str.w	fp, [sp]
 800c4f2:	9306      	str	r3, [sp, #24]
 800c4f4:	42b7      	cmp	r7, r6
 800c4f6:	d340      	bcc.n	800c57a <__gethex+0x21e>
 800c4f8:	9802      	ldr	r0, [sp, #8]
 800c4fa:	9b00      	ldr	r3, [sp, #0]
 800c4fc:	f840 3b04 	str.w	r3, [r0], #4
 800c500:	eba0 0009 	sub.w	r0, r0, r9
 800c504:	1080      	asrs	r0, r0, #2
 800c506:	0146      	lsls	r6, r0, #5
 800c508:	6120      	str	r0, [r4, #16]
 800c50a:	4618      	mov	r0, r3
 800c50c:	f000 fb4c 	bl	800cba8 <__hi0bits>
 800c510:	1a30      	subs	r0, r6, r0
 800c512:	f8d8 6000 	ldr.w	r6, [r8]
 800c516:	42b0      	cmp	r0, r6
 800c518:	dd63      	ble.n	800c5e2 <__gethex+0x286>
 800c51a:	1b87      	subs	r7, r0, r6
 800c51c:	4639      	mov	r1, r7
 800c51e:	4620      	mov	r0, r4
 800c520:	f000 fef0 	bl	800d304 <__any_on>
 800c524:	4682      	mov	sl, r0
 800c526:	b1a8      	cbz	r0, 800c554 <__gethex+0x1f8>
 800c528:	1e7b      	subs	r3, r7, #1
 800c52a:	1159      	asrs	r1, r3, #5
 800c52c:	f003 021f 	and.w	r2, r3, #31
 800c530:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c534:	f04f 0a01 	mov.w	sl, #1
 800c538:	fa0a f202 	lsl.w	r2, sl, r2
 800c53c:	420a      	tst	r2, r1
 800c53e:	d009      	beq.n	800c554 <__gethex+0x1f8>
 800c540:	4553      	cmp	r3, sl
 800c542:	dd05      	ble.n	800c550 <__gethex+0x1f4>
 800c544:	1eb9      	subs	r1, r7, #2
 800c546:	4620      	mov	r0, r4
 800c548:	f000 fedc 	bl	800d304 <__any_on>
 800c54c:	2800      	cmp	r0, #0
 800c54e:	d145      	bne.n	800c5dc <__gethex+0x280>
 800c550:	f04f 0a02 	mov.w	sl, #2
 800c554:	4639      	mov	r1, r7
 800c556:	4620      	mov	r0, r4
 800c558:	f7ff fe98 	bl	800c28c <rshift>
 800c55c:	443d      	add	r5, r7
 800c55e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c562:	42ab      	cmp	r3, r5
 800c564:	da4c      	bge.n	800c600 <__gethex+0x2a4>
 800c566:	ee18 0a10 	vmov	r0, s16
 800c56a:	4621      	mov	r1, r4
 800c56c:	f000 fa6a 	bl	800ca44 <_Bfree>
 800c570:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c572:	2300      	movs	r3, #0
 800c574:	6013      	str	r3, [r2, #0]
 800c576:	27a3      	movs	r7, #163	; 0xa3
 800c578:	e785      	b.n	800c486 <__gethex+0x12a>
 800c57a:	1e73      	subs	r3, r6, #1
 800c57c:	9a05      	ldr	r2, [sp, #20]
 800c57e:	9303      	str	r3, [sp, #12]
 800c580:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c584:	4293      	cmp	r3, r2
 800c586:	d019      	beq.n	800c5bc <__gethex+0x260>
 800c588:	f1bb 0f20 	cmp.w	fp, #32
 800c58c:	d107      	bne.n	800c59e <__gethex+0x242>
 800c58e:	9b02      	ldr	r3, [sp, #8]
 800c590:	9a00      	ldr	r2, [sp, #0]
 800c592:	f843 2b04 	str.w	r2, [r3], #4
 800c596:	9302      	str	r3, [sp, #8]
 800c598:	2300      	movs	r3, #0
 800c59a:	9300      	str	r3, [sp, #0]
 800c59c:	469b      	mov	fp, r3
 800c59e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c5a2:	f7ff fec5 	bl	800c330 <__hexdig_fun>
 800c5a6:	9b00      	ldr	r3, [sp, #0]
 800c5a8:	f000 000f 	and.w	r0, r0, #15
 800c5ac:	fa00 f00b 	lsl.w	r0, r0, fp
 800c5b0:	4303      	orrs	r3, r0
 800c5b2:	9300      	str	r3, [sp, #0]
 800c5b4:	f10b 0b04 	add.w	fp, fp, #4
 800c5b8:	9b03      	ldr	r3, [sp, #12]
 800c5ba:	e00d      	b.n	800c5d8 <__gethex+0x27c>
 800c5bc:	9b03      	ldr	r3, [sp, #12]
 800c5be:	9a06      	ldr	r2, [sp, #24]
 800c5c0:	4413      	add	r3, r2
 800c5c2:	42bb      	cmp	r3, r7
 800c5c4:	d3e0      	bcc.n	800c588 <__gethex+0x22c>
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	9901      	ldr	r1, [sp, #4]
 800c5ca:	9307      	str	r3, [sp, #28]
 800c5cc:	4652      	mov	r2, sl
 800c5ce:	f001 f927 	bl	800d820 <strncmp>
 800c5d2:	9b07      	ldr	r3, [sp, #28]
 800c5d4:	2800      	cmp	r0, #0
 800c5d6:	d1d7      	bne.n	800c588 <__gethex+0x22c>
 800c5d8:	461e      	mov	r6, r3
 800c5da:	e78b      	b.n	800c4f4 <__gethex+0x198>
 800c5dc:	f04f 0a03 	mov.w	sl, #3
 800c5e0:	e7b8      	b.n	800c554 <__gethex+0x1f8>
 800c5e2:	da0a      	bge.n	800c5fa <__gethex+0x29e>
 800c5e4:	1a37      	subs	r7, r6, r0
 800c5e6:	4621      	mov	r1, r4
 800c5e8:	ee18 0a10 	vmov	r0, s16
 800c5ec:	463a      	mov	r2, r7
 800c5ee:	f000 fc45 	bl	800ce7c <__lshift>
 800c5f2:	1bed      	subs	r5, r5, r7
 800c5f4:	4604      	mov	r4, r0
 800c5f6:	f100 0914 	add.w	r9, r0, #20
 800c5fa:	f04f 0a00 	mov.w	sl, #0
 800c5fe:	e7ae      	b.n	800c55e <__gethex+0x202>
 800c600:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c604:	42a8      	cmp	r0, r5
 800c606:	dd72      	ble.n	800c6ee <__gethex+0x392>
 800c608:	1b45      	subs	r5, r0, r5
 800c60a:	42ae      	cmp	r6, r5
 800c60c:	dc36      	bgt.n	800c67c <__gethex+0x320>
 800c60e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c612:	2b02      	cmp	r3, #2
 800c614:	d02a      	beq.n	800c66c <__gethex+0x310>
 800c616:	2b03      	cmp	r3, #3
 800c618:	d02c      	beq.n	800c674 <__gethex+0x318>
 800c61a:	2b01      	cmp	r3, #1
 800c61c:	d11c      	bne.n	800c658 <__gethex+0x2fc>
 800c61e:	42ae      	cmp	r6, r5
 800c620:	d11a      	bne.n	800c658 <__gethex+0x2fc>
 800c622:	2e01      	cmp	r6, #1
 800c624:	d112      	bne.n	800c64c <__gethex+0x2f0>
 800c626:	9a04      	ldr	r2, [sp, #16]
 800c628:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c62c:	6013      	str	r3, [r2, #0]
 800c62e:	2301      	movs	r3, #1
 800c630:	6123      	str	r3, [r4, #16]
 800c632:	f8c9 3000 	str.w	r3, [r9]
 800c636:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c638:	2762      	movs	r7, #98	; 0x62
 800c63a:	601c      	str	r4, [r3, #0]
 800c63c:	e723      	b.n	800c486 <__gethex+0x12a>
 800c63e:	bf00      	nop
 800c640:	0800f128 	.word	0x0800f128
 800c644:	0800f0b0 	.word	0x0800f0b0
 800c648:	0800f0c1 	.word	0x0800f0c1
 800c64c:	1e71      	subs	r1, r6, #1
 800c64e:	4620      	mov	r0, r4
 800c650:	f000 fe58 	bl	800d304 <__any_on>
 800c654:	2800      	cmp	r0, #0
 800c656:	d1e6      	bne.n	800c626 <__gethex+0x2ca>
 800c658:	ee18 0a10 	vmov	r0, s16
 800c65c:	4621      	mov	r1, r4
 800c65e:	f000 f9f1 	bl	800ca44 <_Bfree>
 800c662:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c664:	2300      	movs	r3, #0
 800c666:	6013      	str	r3, [r2, #0]
 800c668:	2750      	movs	r7, #80	; 0x50
 800c66a:	e70c      	b.n	800c486 <__gethex+0x12a>
 800c66c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d1f2      	bne.n	800c658 <__gethex+0x2fc>
 800c672:	e7d8      	b.n	800c626 <__gethex+0x2ca>
 800c674:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c676:	2b00      	cmp	r3, #0
 800c678:	d1d5      	bne.n	800c626 <__gethex+0x2ca>
 800c67a:	e7ed      	b.n	800c658 <__gethex+0x2fc>
 800c67c:	1e6f      	subs	r7, r5, #1
 800c67e:	f1ba 0f00 	cmp.w	sl, #0
 800c682:	d131      	bne.n	800c6e8 <__gethex+0x38c>
 800c684:	b127      	cbz	r7, 800c690 <__gethex+0x334>
 800c686:	4639      	mov	r1, r7
 800c688:	4620      	mov	r0, r4
 800c68a:	f000 fe3b 	bl	800d304 <__any_on>
 800c68e:	4682      	mov	sl, r0
 800c690:	117b      	asrs	r3, r7, #5
 800c692:	2101      	movs	r1, #1
 800c694:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c698:	f007 071f 	and.w	r7, r7, #31
 800c69c:	fa01 f707 	lsl.w	r7, r1, r7
 800c6a0:	421f      	tst	r7, r3
 800c6a2:	4629      	mov	r1, r5
 800c6a4:	4620      	mov	r0, r4
 800c6a6:	bf18      	it	ne
 800c6a8:	f04a 0a02 	orrne.w	sl, sl, #2
 800c6ac:	1b76      	subs	r6, r6, r5
 800c6ae:	f7ff fded 	bl	800c28c <rshift>
 800c6b2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c6b6:	2702      	movs	r7, #2
 800c6b8:	f1ba 0f00 	cmp.w	sl, #0
 800c6bc:	d048      	beq.n	800c750 <__gethex+0x3f4>
 800c6be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c6c2:	2b02      	cmp	r3, #2
 800c6c4:	d015      	beq.n	800c6f2 <__gethex+0x396>
 800c6c6:	2b03      	cmp	r3, #3
 800c6c8:	d017      	beq.n	800c6fa <__gethex+0x39e>
 800c6ca:	2b01      	cmp	r3, #1
 800c6cc:	d109      	bne.n	800c6e2 <__gethex+0x386>
 800c6ce:	f01a 0f02 	tst.w	sl, #2
 800c6d2:	d006      	beq.n	800c6e2 <__gethex+0x386>
 800c6d4:	f8d9 0000 	ldr.w	r0, [r9]
 800c6d8:	ea4a 0a00 	orr.w	sl, sl, r0
 800c6dc:	f01a 0f01 	tst.w	sl, #1
 800c6e0:	d10e      	bne.n	800c700 <__gethex+0x3a4>
 800c6e2:	f047 0710 	orr.w	r7, r7, #16
 800c6e6:	e033      	b.n	800c750 <__gethex+0x3f4>
 800c6e8:	f04f 0a01 	mov.w	sl, #1
 800c6ec:	e7d0      	b.n	800c690 <__gethex+0x334>
 800c6ee:	2701      	movs	r7, #1
 800c6f0:	e7e2      	b.n	800c6b8 <__gethex+0x35c>
 800c6f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c6f4:	f1c3 0301 	rsb	r3, r3, #1
 800c6f8:	9315      	str	r3, [sp, #84]	; 0x54
 800c6fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d0f0      	beq.n	800c6e2 <__gethex+0x386>
 800c700:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c704:	f104 0314 	add.w	r3, r4, #20
 800c708:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c70c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c710:	f04f 0c00 	mov.w	ip, #0
 800c714:	4618      	mov	r0, r3
 800c716:	f853 2b04 	ldr.w	r2, [r3], #4
 800c71a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c71e:	d01c      	beq.n	800c75a <__gethex+0x3fe>
 800c720:	3201      	adds	r2, #1
 800c722:	6002      	str	r2, [r0, #0]
 800c724:	2f02      	cmp	r7, #2
 800c726:	f104 0314 	add.w	r3, r4, #20
 800c72a:	d13f      	bne.n	800c7ac <__gethex+0x450>
 800c72c:	f8d8 2000 	ldr.w	r2, [r8]
 800c730:	3a01      	subs	r2, #1
 800c732:	42b2      	cmp	r2, r6
 800c734:	d10a      	bne.n	800c74c <__gethex+0x3f0>
 800c736:	1171      	asrs	r1, r6, #5
 800c738:	2201      	movs	r2, #1
 800c73a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c73e:	f006 061f 	and.w	r6, r6, #31
 800c742:	fa02 f606 	lsl.w	r6, r2, r6
 800c746:	421e      	tst	r6, r3
 800c748:	bf18      	it	ne
 800c74a:	4617      	movne	r7, r2
 800c74c:	f047 0720 	orr.w	r7, r7, #32
 800c750:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c752:	601c      	str	r4, [r3, #0]
 800c754:	9b04      	ldr	r3, [sp, #16]
 800c756:	601d      	str	r5, [r3, #0]
 800c758:	e695      	b.n	800c486 <__gethex+0x12a>
 800c75a:	4299      	cmp	r1, r3
 800c75c:	f843 cc04 	str.w	ip, [r3, #-4]
 800c760:	d8d8      	bhi.n	800c714 <__gethex+0x3b8>
 800c762:	68a3      	ldr	r3, [r4, #8]
 800c764:	459b      	cmp	fp, r3
 800c766:	db19      	blt.n	800c79c <__gethex+0x440>
 800c768:	6861      	ldr	r1, [r4, #4]
 800c76a:	ee18 0a10 	vmov	r0, s16
 800c76e:	3101      	adds	r1, #1
 800c770:	f000 f928 	bl	800c9c4 <_Balloc>
 800c774:	4681      	mov	r9, r0
 800c776:	b918      	cbnz	r0, 800c780 <__gethex+0x424>
 800c778:	4b1a      	ldr	r3, [pc, #104]	; (800c7e4 <__gethex+0x488>)
 800c77a:	4602      	mov	r2, r0
 800c77c:	2184      	movs	r1, #132	; 0x84
 800c77e:	e6a8      	b.n	800c4d2 <__gethex+0x176>
 800c780:	6922      	ldr	r2, [r4, #16]
 800c782:	3202      	adds	r2, #2
 800c784:	f104 010c 	add.w	r1, r4, #12
 800c788:	0092      	lsls	r2, r2, #2
 800c78a:	300c      	adds	r0, #12
 800c78c:	f000 f90c 	bl	800c9a8 <memcpy>
 800c790:	4621      	mov	r1, r4
 800c792:	ee18 0a10 	vmov	r0, s16
 800c796:	f000 f955 	bl	800ca44 <_Bfree>
 800c79a:	464c      	mov	r4, r9
 800c79c:	6923      	ldr	r3, [r4, #16]
 800c79e:	1c5a      	adds	r2, r3, #1
 800c7a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c7a4:	6122      	str	r2, [r4, #16]
 800c7a6:	2201      	movs	r2, #1
 800c7a8:	615a      	str	r2, [r3, #20]
 800c7aa:	e7bb      	b.n	800c724 <__gethex+0x3c8>
 800c7ac:	6922      	ldr	r2, [r4, #16]
 800c7ae:	455a      	cmp	r2, fp
 800c7b0:	dd0b      	ble.n	800c7ca <__gethex+0x46e>
 800c7b2:	2101      	movs	r1, #1
 800c7b4:	4620      	mov	r0, r4
 800c7b6:	f7ff fd69 	bl	800c28c <rshift>
 800c7ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c7be:	3501      	adds	r5, #1
 800c7c0:	42ab      	cmp	r3, r5
 800c7c2:	f6ff aed0 	blt.w	800c566 <__gethex+0x20a>
 800c7c6:	2701      	movs	r7, #1
 800c7c8:	e7c0      	b.n	800c74c <__gethex+0x3f0>
 800c7ca:	f016 061f 	ands.w	r6, r6, #31
 800c7ce:	d0fa      	beq.n	800c7c6 <__gethex+0x46a>
 800c7d0:	4453      	add	r3, sl
 800c7d2:	f1c6 0620 	rsb	r6, r6, #32
 800c7d6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c7da:	f000 f9e5 	bl	800cba8 <__hi0bits>
 800c7de:	42b0      	cmp	r0, r6
 800c7e0:	dbe7      	blt.n	800c7b2 <__gethex+0x456>
 800c7e2:	e7f0      	b.n	800c7c6 <__gethex+0x46a>
 800c7e4:	0800f0b0 	.word	0x0800f0b0

0800c7e8 <L_shift>:
 800c7e8:	f1c2 0208 	rsb	r2, r2, #8
 800c7ec:	0092      	lsls	r2, r2, #2
 800c7ee:	b570      	push	{r4, r5, r6, lr}
 800c7f0:	f1c2 0620 	rsb	r6, r2, #32
 800c7f4:	6843      	ldr	r3, [r0, #4]
 800c7f6:	6804      	ldr	r4, [r0, #0]
 800c7f8:	fa03 f506 	lsl.w	r5, r3, r6
 800c7fc:	432c      	orrs	r4, r5
 800c7fe:	40d3      	lsrs	r3, r2
 800c800:	6004      	str	r4, [r0, #0]
 800c802:	f840 3f04 	str.w	r3, [r0, #4]!
 800c806:	4288      	cmp	r0, r1
 800c808:	d3f4      	bcc.n	800c7f4 <L_shift+0xc>
 800c80a:	bd70      	pop	{r4, r5, r6, pc}

0800c80c <__match>:
 800c80c:	b530      	push	{r4, r5, lr}
 800c80e:	6803      	ldr	r3, [r0, #0]
 800c810:	3301      	adds	r3, #1
 800c812:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c816:	b914      	cbnz	r4, 800c81e <__match+0x12>
 800c818:	6003      	str	r3, [r0, #0]
 800c81a:	2001      	movs	r0, #1
 800c81c:	bd30      	pop	{r4, r5, pc}
 800c81e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c822:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c826:	2d19      	cmp	r5, #25
 800c828:	bf98      	it	ls
 800c82a:	3220      	addls	r2, #32
 800c82c:	42a2      	cmp	r2, r4
 800c82e:	d0f0      	beq.n	800c812 <__match+0x6>
 800c830:	2000      	movs	r0, #0
 800c832:	e7f3      	b.n	800c81c <__match+0x10>

0800c834 <__hexnan>:
 800c834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c838:	680b      	ldr	r3, [r1, #0]
 800c83a:	115e      	asrs	r6, r3, #5
 800c83c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c840:	f013 031f 	ands.w	r3, r3, #31
 800c844:	b087      	sub	sp, #28
 800c846:	bf18      	it	ne
 800c848:	3604      	addne	r6, #4
 800c84a:	2500      	movs	r5, #0
 800c84c:	1f37      	subs	r7, r6, #4
 800c84e:	4690      	mov	r8, r2
 800c850:	6802      	ldr	r2, [r0, #0]
 800c852:	9301      	str	r3, [sp, #4]
 800c854:	4682      	mov	sl, r0
 800c856:	f846 5c04 	str.w	r5, [r6, #-4]
 800c85a:	46b9      	mov	r9, r7
 800c85c:	463c      	mov	r4, r7
 800c85e:	9502      	str	r5, [sp, #8]
 800c860:	46ab      	mov	fp, r5
 800c862:	7851      	ldrb	r1, [r2, #1]
 800c864:	1c53      	adds	r3, r2, #1
 800c866:	9303      	str	r3, [sp, #12]
 800c868:	b341      	cbz	r1, 800c8bc <__hexnan+0x88>
 800c86a:	4608      	mov	r0, r1
 800c86c:	9205      	str	r2, [sp, #20]
 800c86e:	9104      	str	r1, [sp, #16]
 800c870:	f7ff fd5e 	bl	800c330 <__hexdig_fun>
 800c874:	2800      	cmp	r0, #0
 800c876:	d14f      	bne.n	800c918 <__hexnan+0xe4>
 800c878:	9904      	ldr	r1, [sp, #16]
 800c87a:	9a05      	ldr	r2, [sp, #20]
 800c87c:	2920      	cmp	r1, #32
 800c87e:	d818      	bhi.n	800c8b2 <__hexnan+0x7e>
 800c880:	9b02      	ldr	r3, [sp, #8]
 800c882:	459b      	cmp	fp, r3
 800c884:	dd13      	ble.n	800c8ae <__hexnan+0x7a>
 800c886:	454c      	cmp	r4, r9
 800c888:	d206      	bcs.n	800c898 <__hexnan+0x64>
 800c88a:	2d07      	cmp	r5, #7
 800c88c:	dc04      	bgt.n	800c898 <__hexnan+0x64>
 800c88e:	462a      	mov	r2, r5
 800c890:	4649      	mov	r1, r9
 800c892:	4620      	mov	r0, r4
 800c894:	f7ff ffa8 	bl	800c7e8 <L_shift>
 800c898:	4544      	cmp	r4, r8
 800c89a:	d950      	bls.n	800c93e <__hexnan+0x10a>
 800c89c:	2300      	movs	r3, #0
 800c89e:	f1a4 0904 	sub.w	r9, r4, #4
 800c8a2:	f844 3c04 	str.w	r3, [r4, #-4]
 800c8a6:	f8cd b008 	str.w	fp, [sp, #8]
 800c8aa:	464c      	mov	r4, r9
 800c8ac:	461d      	mov	r5, r3
 800c8ae:	9a03      	ldr	r2, [sp, #12]
 800c8b0:	e7d7      	b.n	800c862 <__hexnan+0x2e>
 800c8b2:	2929      	cmp	r1, #41	; 0x29
 800c8b4:	d156      	bne.n	800c964 <__hexnan+0x130>
 800c8b6:	3202      	adds	r2, #2
 800c8b8:	f8ca 2000 	str.w	r2, [sl]
 800c8bc:	f1bb 0f00 	cmp.w	fp, #0
 800c8c0:	d050      	beq.n	800c964 <__hexnan+0x130>
 800c8c2:	454c      	cmp	r4, r9
 800c8c4:	d206      	bcs.n	800c8d4 <__hexnan+0xa0>
 800c8c6:	2d07      	cmp	r5, #7
 800c8c8:	dc04      	bgt.n	800c8d4 <__hexnan+0xa0>
 800c8ca:	462a      	mov	r2, r5
 800c8cc:	4649      	mov	r1, r9
 800c8ce:	4620      	mov	r0, r4
 800c8d0:	f7ff ff8a 	bl	800c7e8 <L_shift>
 800c8d4:	4544      	cmp	r4, r8
 800c8d6:	d934      	bls.n	800c942 <__hexnan+0x10e>
 800c8d8:	f1a8 0204 	sub.w	r2, r8, #4
 800c8dc:	4623      	mov	r3, r4
 800c8de:	f853 1b04 	ldr.w	r1, [r3], #4
 800c8e2:	f842 1f04 	str.w	r1, [r2, #4]!
 800c8e6:	429f      	cmp	r7, r3
 800c8e8:	d2f9      	bcs.n	800c8de <__hexnan+0xaa>
 800c8ea:	1b3b      	subs	r3, r7, r4
 800c8ec:	f023 0303 	bic.w	r3, r3, #3
 800c8f0:	3304      	adds	r3, #4
 800c8f2:	3401      	adds	r4, #1
 800c8f4:	3e03      	subs	r6, #3
 800c8f6:	42b4      	cmp	r4, r6
 800c8f8:	bf88      	it	hi
 800c8fa:	2304      	movhi	r3, #4
 800c8fc:	4443      	add	r3, r8
 800c8fe:	2200      	movs	r2, #0
 800c900:	f843 2b04 	str.w	r2, [r3], #4
 800c904:	429f      	cmp	r7, r3
 800c906:	d2fb      	bcs.n	800c900 <__hexnan+0xcc>
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	b91b      	cbnz	r3, 800c914 <__hexnan+0xe0>
 800c90c:	4547      	cmp	r7, r8
 800c90e:	d127      	bne.n	800c960 <__hexnan+0x12c>
 800c910:	2301      	movs	r3, #1
 800c912:	603b      	str	r3, [r7, #0]
 800c914:	2005      	movs	r0, #5
 800c916:	e026      	b.n	800c966 <__hexnan+0x132>
 800c918:	3501      	adds	r5, #1
 800c91a:	2d08      	cmp	r5, #8
 800c91c:	f10b 0b01 	add.w	fp, fp, #1
 800c920:	dd06      	ble.n	800c930 <__hexnan+0xfc>
 800c922:	4544      	cmp	r4, r8
 800c924:	d9c3      	bls.n	800c8ae <__hexnan+0x7a>
 800c926:	2300      	movs	r3, #0
 800c928:	f844 3c04 	str.w	r3, [r4, #-4]
 800c92c:	2501      	movs	r5, #1
 800c92e:	3c04      	subs	r4, #4
 800c930:	6822      	ldr	r2, [r4, #0]
 800c932:	f000 000f 	and.w	r0, r0, #15
 800c936:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c93a:	6022      	str	r2, [r4, #0]
 800c93c:	e7b7      	b.n	800c8ae <__hexnan+0x7a>
 800c93e:	2508      	movs	r5, #8
 800c940:	e7b5      	b.n	800c8ae <__hexnan+0x7a>
 800c942:	9b01      	ldr	r3, [sp, #4]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d0df      	beq.n	800c908 <__hexnan+0xd4>
 800c948:	f04f 32ff 	mov.w	r2, #4294967295
 800c94c:	f1c3 0320 	rsb	r3, r3, #32
 800c950:	fa22 f303 	lsr.w	r3, r2, r3
 800c954:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c958:	401a      	ands	r2, r3
 800c95a:	f846 2c04 	str.w	r2, [r6, #-4]
 800c95e:	e7d3      	b.n	800c908 <__hexnan+0xd4>
 800c960:	3f04      	subs	r7, #4
 800c962:	e7d1      	b.n	800c908 <__hexnan+0xd4>
 800c964:	2004      	movs	r0, #4
 800c966:	b007      	add	sp, #28
 800c968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c96c <_localeconv_r>:
 800c96c:	4800      	ldr	r0, [pc, #0]	; (800c970 <_localeconv_r+0x4>)
 800c96e:	4770      	bx	lr
 800c970:	200003e4 	.word	0x200003e4

0800c974 <malloc>:
 800c974:	4b02      	ldr	r3, [pc, #8]	; (800c980 <malloc+0xc>)
 800c976:	4601      	mov	r1, r0
 800c978:	6818      	ldr	r0, [r3, #0]
 800c97a:	f000 bd67 	b.w	800d44c <_malloc_r>
 800c97e:	bf00      	nop
 800c980:	2000028c 	.word	0x2000028c

0800c984 <__ascii_mbtowc>:
 800c984:	b082      	sub	sp, #8
 800c986:	b901      	cbnz	r1, 800c98a <__ascii_mbtowc+0x6>
 800c988:	a901      	add	r1, sp, #4
 800c98a:	b142      	cbz	r2, 800c99e <__ascii_mbtowc+0x1a>
 800c98c:	b14b      	cbz	r3, 800c9a2 <__ascii_mbtowc+0x1e>
 800c98e:	7813      	ldrb	r3, [r2, #0]
 800c990:	600b      	str	r3, [r1, #0]
 800c992:	7812      	ldrb	r2, [r2, #0]
 800c994:	1e10      	subs	r0, r2, #0
 800c996:	bf18      	it	ne
 800c998:	2001      	movne	r0, #1
 800c99a:	b002      	add	sp, #8
 800c99c:	4770      	bx	lr
 800c99e:	4610      	mov	r0, r2
 800c9a0:	e7fb      	b.n	800c99a <__ascii_mbtowc+0x16>
 800c9a2:	f06f 0001 	mvn.w	r0, #1
 800c9a6:	e7f8      	b.n	800c99a <__ascii_mbtowc+0x16>

0800c9a8 <memcpy>:
 800c9a8:	440a      	add	r2, r1
 800c9aa:	4291      	cmp	r1, r2
 800c9ac:	f100 33ff 	add.w	r3, r0, #4294967295
 800c9b0:	d100      	bne.n	800c9b4 <memcpy+0xc>
 800c9b2:	4770      	bx	lr
 800c9b4:	b510      	push	{r4, lr}
 800c9b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c9be:	4291      	cmp	r1, r2
 800c9c0:	d1f9      	bne.n	800c9b6 <memcpy+0xe>
 800c9c2:	bd10      	pop	{r4, pc}

0800c9c4 <_Balloc>:
 800c9c4:	b570      	push	{r4, r5, r6, lr}
 800c9c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c9c8:	4604      	mov	r4, r0
 800c9ca:	460d      	mov	r5, r1
 800c9cc:	b976      	cbnz	r6, 800c9ec <_Balloc+0x28>
 800c9ce:	2010      	movs	r0, #16
 800c9d0:	f7ff ffd0 	bl	800c974 <malloc>
 800c9d4:	4602      	mov	r2, r0
 800c9d6:	6260      	str	r0, [r4, #36]	; 0x24
 800c9d8:	b920      	cbnz	r0, 800c9e4 <_Balloc+0x20>
 800c9da:	4b18      	ldr	r3, [pc, #96]	; (800ca3c <_Balloc+0x78>)
 800c9dc:	4818      	ldr	r0, [pc, #96]	; (800ca40 <_Balloc+0x7c>)
 800c9de:	2166      	movs	r1, #102	; 0x66
 800c9e0:	f000 ff40 	bl	800d864 <__assert_func>
 800c9e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c9e8:	6006      	str	r6, [r0, #0]
 800c9ea:	60c6      	str	r6, [r0, #12]
 800c9ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c9ee:	68f3      	ldr	r3, [r6, #12]
 800c9f0:	b183      	cbz	r3, 800ca14 <_Balloc+0x50>
 800c9f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9f4:	68db      	ldr	r3, [r3, #12]
 800c9f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c9fa:	b9b8      	cbnz	r0, 800ca2c <_Balloc+0x68>
 800c9fc:	2101      	movs	r1, #1
 800c9fe:	fa01 f605 	lsl.w	r6, r1, r5
 800ca02:	1d72      	adds	r2, r6, #5
 800ca04:	0092      	lsls	r2, r2, #2
 800ca06:	4620      	mov	r0, r4
 800ca08:	f000 fc9d 	bl	800d346 <_calloc_r>
 800ca0c:	b160      	cbz	r0, 800ca28 <_Balloc+0x64>
 800ca0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ca12:	e00e      	b.n	800ca32 <_Balloc+0x6e>
 800ca14:	2221      	movs	r2, #33	; 0x21
 800ca16:	2104      	movs	r1, #4
 800ca18:	4620      	mov	r0, r4
 800ca1a:	f000 fc94 	bl	800d346 <_calloc_r>
 800ca1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca20:	60f0      	str	r0, [r6, #12]
 800ca22:	68db      	ldr	r3, [r3, #12]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d1e4      	bne.n	800c9f2 <_Balloc+0x2e>
 800ca28:	2000      	movs	r0, #0
 800ca2a:	bd70      	pop	{r4, r5, r6, pc}
 800ca2c:	6802      	ldr	r2, [r0, #0]
 800ca2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ca32:	2300      	movs	r3, #0
 800ca34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ca38:	e7f7      	b.n	800ca2a <_Balloc+0x66>
 800ca3a:	bf00      	nop
 800ca3c:	0800f03e 	.word	0x0800f03e
 800ca40:	0800f13c 	.word	0x0800f13c

0800ca44 <_Bfree>:
 800ca44:	b570      	push	{r4, r5, r6, lr}
 800ca46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ca48:	4605      	mov	r5, r0
 800ca4a:	460c      	mov	r4, r1
 800ca4c:	b976      	cbnz	r6, 800ca6c <_Bfree+0x28>
 800ca4e:	2010      	movs	r0, #16
 800ca50:	f7ff ff90 	bl	800c974 <malloc>
 800ca54:	4602      	mov	r2, r0
 800ca56:	6268      	str	r0, [r5, #36]	; 0x24
 800ca58:	b920      	cbnz	r0, 800ca64 <_Bfree+0x20>
 800ca5a:	4b09      	ldr	r3, [pc, #36]	; (800ca80 <_Bfree+0x3c>)
 800ca5c:	4809      	ldr	r0, [pc, #36]	; (800ca84 <_Bfree+0x40>)
 800ca5e:	218a      	movs	r1, #138	; 0x8a
 800ca60:	f000 ff00 	bl	800d864 <__assert_func>
 800ca64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca68:	6006      	str	r6, [r0, #0]
 800ca6a:	60c6      	str	r6, [r0, #12]
 800ca6c:	b13c      	cbz	r4, 800ca7e <_Bfree+0x3a>
 800ca6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ca70:	6862      	ldr	r2, [r4, #4]
 800ca72:	68db      	ldr	r3, [r3, #12]
 800ca74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ca78:	6021      	str	r1, [r4, #0]
 800ca7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ca7e:	bd70      	pop	{r4, r5, r6, pc}
 800ca80:	0800f03e 	.word	0x0800f03e
 800ca84:	0800f13c 	.word	0x0800f13c

0800ca88 <__multadd>:
 800ca88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca8c:	690d      	ldr	r5, [r1, #16]
 800ca8e:	4607      	mov	r7, r0
 800ca90:	460c      	mov	r4, r1
 800ca92:	461e      	mov	r6, r3
 800ca94:	f101 0c14 	add.w	ip, r1, #20
 800ca98:	2000      	movs	r0, #0
 800ca9a:	f8dc 3000 	ldr.w	r3, [ip]
 800ca9e:	b299      	uxth	r1, r3
 800caa0:	fb02 6101 	mla	r1, r2, r1, r6
 800caa4:	0c1e      	lsrs	r6, r3, #16
 800caa6:	0c0b      	lsrs	r3, r1, #16
 800caa8:	fb02 3306 	mla	r3, r2, r6, r3
 800caac:	b289      	uxth	r1, r1
 800caae:	3001      	adds	r0, #1
 800cab0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cab4:	4285      	cmp	r5, r0
 800cab6:	f84c 1b04 	str.w	r1, [ip], #4
 800caba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cabe:	dcec      	bgt.n	800ca9a <__multadd+0x12>
 800cac0:	b30e      	cbz	r6, 800cb06 <__multadd+0x7e>
 800cac2:	68a3      	ldr	r3, [r4, #8]
 800cac4:	42ab      	cmp	r3, r5
 800cac6:	dc19      	bgt.n	800cafc <__multadd+0x74>
 800cac8:	6861      	ldr	r1, [r4, #4]
 800caca:	4638      	mov	r0, r7
 800cacc:	3101      	adds	r1, #1
 800cace:	f7ff ff79 	bl	800c9c4 <_Balloc>
 800cad2:	4680      	mov	r8, r0
 800cad4:	b928      	cbnz	r0, 800cae2 <__multadd+0x5a>
 800cad6:	4602      	mov	r2, r0
 800cad8:	4b0c      	ldr	r3, [pc, #48]	; (800cb0c <__multadd+0x84>)
 800cada:	480d      	ldr	r0, [pc, #52]	; (800cb10 <__multadd+0x88>)
 800cadc:	21b5      	movs	r1, #181	; 0xb5
 800cade:	f000 fec1 	bl	800d864 <__assert_func>
 800cae2:	6922      	ldr	r2, [r4, #16]
 800cae4:	3202      	adds	r2, #2
 800cae6:	f104 010c 	add.w	r1, r4, #12
 800caea:	0092      	lsls	r2, r2, #2
 800caec:	300c      	adds	r0, #12
 800caee:	f7ff ff5b 	bl	800c9a8 <memcpy>
 800caf2:	4621      	mov	r1, r4
 800caf4:	4638      	mov	r0, r7
 800caf6:	f7ff ffa5 	bl	800ca44 <_Bfree>
 800cafa:	4644      	mov	r4, r8
 800cafc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cb00:	3501      	adds	r5, #1
 800cb02:	615e      	str	r6, [r3, #20]
 800cb04:	6125      	str	r5, [r4, #16]
 800cb06:	4620      	mov	r0, r4
 800cb08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb0c:	0800f0b0 	.word	0x0800f0b0
 800cb10:	0800f13c 	.word	0x0800f13c

0800cb14 <__s2b>:
 800cb14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb18:	460c      	mov	r4, r1
 800cb1a:	4615      	mov	r5, r2
 800cb1c:	461f      	mov	r7, r3
 800cb1e:	2209      	movs	r2, #9
 800cb20:	3308      	adds	r3, #8
 800cb22:	4606      	mov	r6, r0
 800cb24:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb28:	2100      	movs	r1, #0
 800cb2a:	2201      	movs	r2, #1
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	db09      	blt.n	800cb44 <__s2b+0x30>
 800cb30:	4630      	mov	r0, r6
 800cb32:	f7ff ff47 	bl	800c9c4 <_Balloc>
 800cb36:	b940      	cbnz	r0, 800cb4a <__s2b+0x36>
 800cb38:	4602      	mov	r2, r0
 800cb3a:	4b19      	ldr	r3, [pc, #100]	; (800cba0 <__s2b+0x8c>)
 800cb3c:	4819      	ldr	r0, [pc, #100]	; (800cba4 <__s2b+0x90>)
 800cb3e:	21ce      	movs	r1, #206	; 0xce
 800cb40:	f000 fe90 	bl	800d864 <__assert_func>
 800cb44:	0052      	lsls	r2, r2, #1
 800cb46:	3101      	adds	r1, #1
 800cb48:	e7f0      	b.n	800cb2c <__s2b+0x18>
 800cb4a:	9b08      	ldr	r3, [sp, #32]
 800cb4c:	6143      	str	r3, [r0, #20]
 800cb4e:	2d09      	cmp	r5, #9
 800cb50:	f04f 0301 	mov.w	r3, #1
 800cb54:	6103      	str	r3, [r0, #16]
 800cb56:	dd16      	ble.n	800cb86 <__s2b+0x72>
 800cb58:	f104 0909 	add.w	r9, r4, #9
 800cb5c:	46c8      	mov	r8, r9
 800cb5e:	442c      	add	r4, r5
 800cb60:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cb64:	4601      	mov	r1, r0
 800cb66:	3b30      	subs	r3, #48	; 0x30
 800cb68:	220a      	movs	r2, #10
 800cb6a:	4630      	mov	r0, r6
 800cb6c:	f7ff ff8c 	bl	800ca88 <__multadd>
 800cb70:	45a0      	cmp	r8, r4
 800cb72:	d1f5      	bne.n	800cb60 <__s2b+0x4c>
 800cb74:	f1a5 0408 	sub.w	r4, r5, #8
 800cb78:	444c      	add	r4, r9
 800cb7a:	1b2d      	subs	r5, r5, r4
 800cb7c:	1963      	adds	r3, r4, r5
 800cb7e:	42bb      	cmp	r3, r7
 800cb80:	db04      	blt.n	800cb8c <__s2b+0x78>
 800cb82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb86:	340a      	adds	r4, #10
 800cb88:	2509      	movs	r5, #9
 800cb8a:	e7f6      	b.n	800cb7a <__s2b+0x66>
 800cb8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cb90:	4601      	mov	r1, r0
 800cb92:	3b30      	subs	r3, #48	; 0x30
 800cb94:	220a      	movs	r2, #10
 800cb96:	4630      	mov	r0, r6
 800cb98:	f7ff ff76 	bl	800ca88 <__multadd>
 800cb9c:	e7ee      	b.n	800cb7c <__s2b+0x68>
 800cb9e:	bf00      	nop
 800cba0:	0800f0b0 	.word	0x0800f0b0
 800cba4:	0800f13c 	.word	0x0800f13c

0800cba8 <__hi0bits>:
 800cba8:	0c03      	lsrs	r3, r0, #16
 800cbaa:	041b      	lsls	r3, r3, #16
 800cbac:	b9d3      	cbnz	r3, 800cbe4 <__hi0bits+0x3c>
 800cbae:	0400      	lsls	r0, r0, #16
 800cbb0:	2310      	movs	r3, #16
 800cbb2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cbb6:	bf04      	itt	eq
 800cbb8:	0200      	lsleq	r0, r0, #8
 800cbba:	3308      	addeq	r3, #8
 800cbbc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cbc0:	bf04      	itt	eq
 800cbc2:	0100      	lsleq	r0, r0, #4
 800cbc4:	3304      	addeq	r3, #4
 800cbc6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cbca:	bf04      	itt	eq
 800cbcc:	0080      	lsleq	r0, r0, #2
 800cbce:	3302      	addeq	r3, #2
 800cbd0:	2800      	cmp	r0, #0
 800cbd2:	db05      	blt.n	800cbe0 <__hi0bits+0x38>
 800cbd4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cbd8:	f103 0301 	add.w	r3, r3, #1
 800cbdc:	bf08      	it	eq
 800cbde:	2320      	moveq	r3, #32
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	4770      	bx	lr
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	e7e4      	b.n	800cbb2 <__hi0bits+0xa>

0800cbe8 <__lo0bits>:
 800cbe8:	6803      	ldr	r3, [r0, #0]
 800cbea:	f013 0207 	ands.w	r2, r3, #7
 800cbee:	4601      	mov	r1, r0
 800cbf0:	d00b      	beq.n	800cc0a <__lo0bits+0x22>
 800cbf2:	07da      	lsls	r2, r3, #31
 800cbf4:	d423      	bmi.n	800cc3e <__lo0bits+0x56>
 800cbf6:	0798      	lsls	r0, r3, #30
 800cbf8:	bf49      	itett	mi
 800cbfa:	085b      	lsrmi	r3, r3, #1
 800cbfc:	089b      	lsrpl	r3, r3, #2
 800cbfe:	2001      	movmi	r0, #1
 800cc00:	600b      	strmi	r3, [r1, #0]
 800cc02:	bf5c      	itt	pl
 800cc04:	600b      	strpl	r3, [r1, #0]
 800cc06:	2002      	movpl	r0, #2
 800cc08:	4770      	bx	lr
 800cc0a:	b298      	uxth	r0, r3
 800cc0c:	b9a8      	cbnz	r0, 800cc3a <__lo0bits+0x52>
 800cc0e:	0c1b      	lsrs	r3, r3, #16
 800cc10:	2010      	movs	r0, #16
 800cc12:	b2da      	uxtb	r2, r3
 800cc14:	b90a      	cbnz	r2, 800cc1a <__lo0bits+0x32>
 800cc16:	3008      	adds	r0, #8
 800cc18:	0a1b      	lsrs	r3, r3, #8
 800cc1a:	071a      	lsls	r2, r3, #28
 800cc1c:	bf04      	itt	eq
 800cc1e:	091b      	lsreq	r3, r3, #4
 800cc20:	3004      	addeq	r0, #4
 800cc22:	079a      	lsls	r2, r3, #30
 800cc24:	bf04      	itt	eq
 800cc26:	089b      	lsreq	r3, r3, #2
 800cc28:	3002      	addeq	r0, #2
 800cc2a:	07da      	lsls	r2, r3, #31
 800cc2c:	d403      	bmi.n	800cc36 <__lo0bits+0x4e>
 800cc2e:	085b      	lsrs	r3, r3, #1
 800cc30:	f100 0001 	add.w	r0, r0, #1
 800cc34:	d005      	beq.n	800cc42 <__lo0bits+0x5a>
 800cc36:	600b      	str	r3, [r1, #0]
 800cc38:	4770      	bx	lr
 800cc3a:	4610      	mov	r0, r2
 800cc3c:	e7e9      	b.n	800cc12 <__lo0bits+0x2a>
 800cc3e:	2000      	movs	r0, #0
 800cc40:	4770      	bx	lr
 800cc42:	2020      	movs	r0, #32
 800cc44:	4770      	bx	lr
	...

0800cc48 <__i2b>:
 800cc48:	b510      	push	{r4, lr}
 800cc4a:	460c      	mov	r4, r1
 800cc4c:	2101      	movs	r1, #1
 800cc4e:	f7ff feb9 	bl	800c9c4 <_Balloc>
 800cc52:	4602      	mov	r2, r0
 800cc54:	b928      	cbnz	r0, 800cc62 <__i2b+0x1a>
 800cc56:	4b05      	ldr	r3, [pc, #20]	; (800cc6c <__i2b+0x24>)
 800cc58:	4805      	ldr	r0, [pc, #20]	; (800cc70 <__i2b+0x28>)
 800cc5a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cc5e:	f000 fe01 	bl	800d864 <__assert_func>
 800cc62:	2301      	movs	r3, #1
 800cc64:	6144      	str	r4, [r0, #20]
 800cc66:	6103      	str	r3, [r0, #16]
 800cc68:	bd10      	pop	{r4, pc}
 800cc6a:	bf00      	nop
 800cc6c:	0800f0b0 	.word	0x0800f0b0
 800cc70:	0800f13c 	.word	0x0800f13c

0800cc74 <__multiply>:
 800cc74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc78:	4691      	mov	r9, r2
 800cc7a:	690a      	ldr	r2, [r1, #16]
 800cc7c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cc80:	429a      	cmp	r2, r3
 800cc82:	bfb8      	it	lt
 800cc84:	460b      	movlt	r3, r1
 800cc86:	460c      	mov	r4, r1
 800cc88:	bfbc      	itt	lt
 800cc8a:	464c      	movlt	r4, r9
 800cc8c:	4699      	movlt	r9, r3
 800cc8e:	6927      	ldr	r7, [r4, #16]
 800cc90:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cc94:	68a3      	ldr	r3, [r4, #8]
 800cc96:	6861      	ldr	r1, [r4, #4]
 800cc98:	eb07 060a 	add.w	r6, r7, sl
 800cc9c:	42b3      	cmp	r3, r6
 800cc9e:	b085      	sub	sp, #20
 800cca0:	bfb8      	it	lt
 800cca2:	3101      	addlt	r1, #1
 800cca4:	f7ff fe8e 	bl	800c9c4 <_Balloc>
 800cca8:	b930      	cbnz	r0, 800ccb8 <__multiply+0x44>
 800ccaa:	4602      	mov	r2, r0
 800ccac:	4b44      	ldr	r3, [pc, #272]	; (800cdc0 <__multiply+0x14c>)
 800ccae:	4845      	ldr	r0, [pc, #276]	; (800cdc4 <__multiply+0x150>)
 800ccb0:	f240 115d 	movw	r1, #349	; 0x15d
 800ccb4:	f000 fdd6 	bl	800d864 <__assert_func>
 800ccb8:	f100 0514 	add.w	r5, r0, #20
 800ccbc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ccc0:	462b      	mov	r3, r5
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	4543      	cmp	r3, r8
 800ccc6:	d321      	bcc.n	800cd0c <__multiply+0x98>
 800ccc8:	f104 0314 	add.w	r3, r4, #20
 800cccc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ccd0:	f109 0314 	add.w	r3, r9, #20
 800ccd4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ccd8:	9202      	str	r2, [sp, #8]
 800ccda:	1b3a      	subs	r2, r7, r4
 800ccdc:	3a15      	subs	r2, #21
 800ccde:	f022 0203 	bic.w	r2, r2, #3
 800cce2:	3204      	adds	r2, #4
 800cce4:	f104 0115 	add.w	r1, r4, #21
 800cce8:	428f      	cmp	r7, r1
 800ccea:	bf38      	it	cc
 800ccec:	2204      	movcc	r2, #4
 800ccee:	9201      	str	r2, [sp, #4]
 800ccf0:	9a02      	ldr	r2, [sp, #8]
 800ccf2:	9303      	str	r3, [sp, #12]
 800ccf4:	429a      	cmp	r2, r3
 800ccf6:	d80c      	bhi.n	800cd12 <__multiply+0x9e>
 800ccf8:	2e00      	cmp	r6, #0
 800ccfa:	dd03      	ble.n	800cd04 <__multiply+0x90>
 800ccfc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d05a      	beq.n	800cdba <__multiply+0x146>
 800cd04:	6106      	str	r6, [r0, #16]
 800cd06:	b005      	add	sp, #20
 800cd08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd0c:	f843 2b04 	str.w	r2, [r3], #4
 800cd10:	e7d8      	b.n	800ccc4 <__multiply+0x50>
 800cd12:	f8b3 a000 	ldrh.w	sl, [r3]
 800cd16:	f1ba 0f00 	cmp.w	sl, #0
 800cd1a:	d024      	beq.n	800cd66 <__multiply+0xf2>
 800cd1c:	f104 0e14 	add.w	lr, r4, #20
 800cd20:	46a9      	mov	r9, r5
 800cd22:	f04f 0c00 	mov.w	ip, #0
 800cd26:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cd2a:	f8d9 1000 	ldr.w	r1, [r9]
 800cd2e:	fa1f fb82 	uxth.w	fp, r2
 800cd32:	b289      	uxth	r1, r1
 800cd34:	fb0a 110b 	mla	r1, sl, fp, r1
 800cd38:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cd3c:	f8d9 2000 	ldr.w	r2, [r9]
 800cd40:	4461      	add	r1, ip
 800cd42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cd46:	fb0a c20b 	mla	r2, sl, fp, ip
 800cd4a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cd4e:	b289      	uxth	r1, r1
 800cd50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cd54:	4577      	cmp	r7, lr
 800cd56:	f849 1b04 	str.w	r1, [r9], #4
 800cd5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cd5e:	d8e2      	bhi.n	800cd26 <__multiply+0xb2>
 800cd60:	9a01      	ldr	r2, [sp, #4]
 800cd62:	f845 c002 	str.w	ip, [r5, r2]
 800cd66:	9a03      	ldr	r2, [sp, #12]
 800cd68:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cd6c:	3304      	adds	r3, #4
 800cd6e:	f1b9 0f00 	cmp.w	r9, #0
 800cd72:	d020      	beq.n	800cdb6 <__multiply+0x142>
 800cd74:	6829      	ldr	r1, [r5, #0]
 800cd76:	f104 0c14 	add.w	ip, r4, #20
 800cd7a:	46ae      	mov	lr, r5
 800cd7c:	f04f 0a00 	mov.w	sl, #0
 800cd80:	f8bc b000 	ldrh.w	fp, [ip]
 800cd84:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cd88:	fb09 220b 	mla	r2, r9, fp, r2
 800cd8c:	4492      	add	sl, r2
 800cd8e:	b289      	uxth	r1, r1
 800cd90:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800cd94:	f84e 1b04 	str.w	r1, [lr], #4
 800cd98:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cd9c:	f8be 1000 	ldrh.w	r1, [lr]
 800cda0:	0c12      	lsrs	r2, r2, #16
 800cda2:	fb09 1102 	mla	r1, r9, r2, r1
 800cda6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800cdaa:	4567      	cmp	r7, ip
 800cdac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cdb0:	d8e6      	bhi.n	800cd80 <__multiply+0x10c>
 800cdb2:	9a01      	ldr	r2, [sp, #4]
 800cdb4:	50a9      	str	r1, [r5, r2]
 800cdb6:	3504      	adds	r5, #4
 800cdb8:	e79a      	b.n	800ccf0 <__multiply+0x7c>
 800cdba:	3e01      	subs	r6, #1
 800cdbc:	e79c      	b.n	800ccf8 <__multiply+0x84>
 800cdbe:	bf00      	nop
 800cdc0:	0800f0b0 	.word	0x0800f0b0
 800cdc4:	0800f13c 	.word	0x0800f13c

0800cdc8 <__pow5mult>:
 800cdc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdcc:	4615      	mov	r5, r2
 800cdce:	f012 0203 	ands.w	r2, r2, #3
 800cdd2:	4606      	mov	r6, r0
 800cdd4:	460f      	mov	r7, r1
 800cdd6:	d007      	beq.n	800cde8 <__pow5mult+0x20>
 800cdd8:	4c25      	ldr	r4, [pc, #148]	; (800ce70 <__pow5mult+0xa8>)
 800cdda:	3a01      	subs	r2, #1
 800cddc:	2300      	movs	r3, #0
 800cdde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cde2:	f7ff fe51 	bl	800ca88 <__multadd>
 800cde6:	4607      	mov	r7, r0
 800cde8:	10ad      	asrs	r5, r5, #2
 800cdea:	d03d      	beq.n	800ce68 <__pow5mult+0xa0>
 800cdec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cdee:	b97c      	cbnz	r4, 800ce10 <__pow5mult+0x48>
 800cdf0:	2010      	movs	r0, #16
 800cdf2:	f7ff fdbf 	bl	800c974 <malloc>
 800cdf6:	4602      	mov	r2, r0
 800cdf8:	6270      	str	r0, [r6, #36]	; 0x24
 800cdfa:	b928      	cbnz	r0, 800ce08 <__pow5mult+0x40>
 800cdfc:	4b1d      	ldr	r3, [pc, #116]	; (800ce74 <__pow5mult+0xac>)
 800cdfe:	481e      	ldr	r0, [pc, #120]	; (800ce78 <__pow5mult+0xb0>)
 800ce00:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ce04:	f000 fd2e 	bl	800d864 <__assert_func>
 800ce08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ce0c:	6004      	str	r4, [r0, #0]
 800ce0e:	60c4      	str	r4, [r0, #12]
 800ce10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ce14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ce18:	b94c      	cbnz	r4, 800ce2e <__pow5mult+0x66>
 800ce1a:	f240 2171 	movw	r1, #625	; 0x271
 800ce1e:	4630      	mov	r0, r6
 800ce20:	f7ff ff12 	bl	800cc48 <__i2b>
 800ce24:	2300      	movs	r3, #0
 800ce26:	f8c8 0008 	str.w	r0, [r8, #8]
 800ce2a:	4604      	mov	r4, r0
 800ce2c:	6003      	str	r3, [r0, #0]
 800ce2e:	f04f 0900 	mov.w	r9, #0
 800ce32:	07eb      	lsls	r3, r5, #31
 800ce34:	d50a      	bpl.n	800ce4c <__pow5mult+0x84>
 800ce36:	4639      	mov	r1, r7
 800ce38:	4622      	mov	r2, r4
 800ce3a:	4630      	mov	r0, r6
 800ce3c:	f7ff ff1a 	bl	800cc74 <__multiply>
 800ce40:	4639      	mov	r1, r7
 800ce42:	4680      	mov	r8, r0
 800ce44:	4630      	mov	r0, r6
 800ce46:	f7ff fdfd 	bl	800ca44 <_Bfree>
 800ce4a:	4647      	mov	r7, r8
 800ce4c:	106d      	asrs	r5, r5, #1
 800ce4e:	d00b      	beq.n	800ce68 <__pow5mult+0xa0>
 800ce50:	6820      	ldr	r0, [r4, #0]
 800ce52:	b938      	cbnz	r0, 800ce64 <__pow5mult+0x9c>
 800ce54:	4622      	mov	r2, r4
 800ce56:	4621      	mov	r1, r4
 800ce58:	4630      	mov	r0, r6
 800ce5a:	f7ff ff0b 	bl	800cc74 <__multiply>
 800ce5e:	6020      	str	r0, [r4, #0]
 800ce60:	f8c0 9000 	str.w	r9, [r0]
 800ce64:	4604      	mov	r4, r0
 800ce66:	e7e4      	b.n	800ce32 <__pow5mult+0x6a>
 800ce68:	4638      	mov	r0, r7
 800ce6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce6e:	bf00      	nop
 800ce70:	0800f288 	.word	0x0800f288
 800ce74:	0800f03e 	.word	0x0800f03e
 800ce78:	0800f13c 	.word	0x0800f13c

0800ce7c <__lshift>:
 800ce7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce80:	460c      	mov	r4, r1
 800ce82:	6849      	ldr	r1, [r1, #4]
 800ce84:	6923      	ldr	r3, [r4, #16]
 800ce86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ce8a:	68a3      	ldr	r3, [r4, #8]
 800ce8c:	4607      	mov	r7, r0
 800ce8e:	4691      	mov	r9, r2
 800ce90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ce94:	f108 0601 	add.w	r6, r8, #1
 800ce98:	42b3      	cmp	r3, r6
 800ce9a:	db0b      	blt.n	800ceb4 <__lshift+0x38>
 800ce9c:	4638      	mov	r0, r7
 800ce9e:	f7ff fd91 	bl	800c9c4 <_Balloc>
 800cea2:	4605      	mov	r5, r0
 800cea4:	b948      	cbnz	r0, 800ceba <__lshift+0x3e>
 800cea6:	4602      	mov	r2, r0
 800cea8:	4b2a      	ldr	r3, [pc, #168]	; (800cf54 <__lshift+0xd8>)
 800ceaa:	482b      	ldr	r0, [pc, #172]	; (800cf58 <__lshift+0xdc>)
 800ceac:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ceb0:	f000 fcd8 	bl	800d864 <__assert_func>
 800ceb4:	3101      	adds	r1, #1
 800ceb6:	005b      	lsls	r3, r3, #1
 800ceb8:	e7ee      	b.n	800ce98 <__lshift+0x1c>
 800ceba:	2300      	movs	r3, #0
 800cebc:	f100 0114 	add.w	r1, r0, #20
 800cec0:	f100 0210 	add.w	r2, r0, #16
 800cec4:	4618      	mov	r0, r3
 800cec6:	4553      	cmp	r3, sl
 800cec8:	db37      	blt.n	800cf3a <__lshift+0xbe>
 800ceca:	6920      	ldr	r0, [r4, #16]
 800cecc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ced0:	f104 0314 	add.w	r3, r4, #20
 800ced4:	f019 091f 	ands.w	r9, r9, #31
 800ced8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cedc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cee0:	d02f      	beq.n	800cf42 <__lshift+0xc6>
 800cee2:	f1c9 0e20 	rsb	lr, r9, #32
 800cee6:	468a      	mov	sl, r1
 800cee8:	f04f 0c00 	mov.w	ip, #0
 800ceec:	681a      	ldr	r2, [r3, #0]
 800ceee:	fa02 f209 	lsl.w	r2, r2, r9
 800cef2:	ea42 020c 	orr.w	r2, r2, ip
 800cef6:	f84a 2b04 	str.w	r2, [sl], #4
 800cefa:	f853 2b04 	ldr.w	r2, [r3], #4
 800cefe:	4298      	cmp	r0, r3
 800cf00:	fa22 fc0e 	lsr.w	ip, r2, lr
 800cf04:	d8f2      	bhi.n	800ceec <__lshift+0x70>
 800cf06:	1b03      	subs	r3, r0, r4
 800cf08:	3b15      	subs	r3, #21
 800cf0a:	f023 0303 	bic.w	r3, r3, #3
 800cf0e:	3304      	adds	r3, #4
 800cf10:	f104 0215 	add.w	r2, r4, #21
 800cf14:	4290      	cmp	r0, r2
 800cf16:	bf38      	it	cc
 800cf18:	2304      	movcc	r3, #4
 800cf1a:	f841 c003 	str.w	ip, [r1, r3]
 800cf1e:	f1bc 0f00 	cmp.w	ip, #0
 800cf22:	d001      	beq.n	800cf28 <__lshift+0xac>
 800cf24:	f108 0602 	add.w	r6, r8, #2
 800cf28:	3e01      	subs	r6, #1
 800cf2a:	4638      	mov	r0, r7
 800cf2c:	612e      	str	r6, [r5, #16]
 800cf2e:	4621      	mov	r1, r4
 800cf30:	f7ff fd88 	bl	800ca44 <_Bfree>
 800cf34:	4628      	mov	r0, r5
 800cf36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf3a:	f842 0f04 	str.w	r0, [r2, #4]!
 800cf3e:	3301      	adds	r3, #1
 800cf40:	e7c1      	b.n	800cec6 <__lshift+0x4a>
 800cf42:	3904      	subs	r1, #4
 800cf44:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf48:	f841 2f04 	str.w	r2, [r1, #4]!
 800cf4c:	4298      	cmp	r0, r3
 800cf4e:	d8f9      	bhi.n	800cf44 <__lshift+0xc8>
 800cf50:	e7ea      	b.n	800cf28 <__lshift+0xac>
 800cf52:	bf00      	nop
 800cf54:	0800f0b0 	.word	0x0800f0b0
 800cf58:	0800f13c 	.word	0x0800f13c

0800cf5c <__mcmp>:
 800cf5c:	b530      	push	{r4, r5, lr}
 800cf5e:	6902      	ldr	r2, [r0, #16]
 800cf60:	690c      	ldr	r4, [r1, #16]
 800cf62:	1b12      	subs	r2, r2, r4
 800cf64:	d10e      	bne.n	800cf84 <__mcmp+0x28>
 800cf66:	f100 0314 	add.w	r3, r0, #20
 800cf6a:	3114      	adds	r1, #20
 800cf6c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cf70:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cf74:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cf78:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cf7c:	42a5      	cmp	r5, r4
 800cf7e:	d003      	beq.n	800cf88 <__mcmp+0x2c>
 800cf80:	d305      	bcc.n	800cf8e <__mcmp+0x32>
 800cf82:	2201      	movs	r2, #1
 800cf84:	4610      	mov	r0, r2
 800cf86:	bd30      	pop	{r4, r5, pc}
 800cf88:	4283      	cmp	r3, r0
 800cf8a:	d3f3      	bcc.n	800cf74 <__mcmp+0x18>
 800cf8c:	e7fa      	b.n	800cf84 <__mcmp+0x28>
 800cf8e:	f04f 32ff 	mov.w	r2, #4294967295
 800cf92:	e7f7      	b.n	800cf84 <__mcmp+0x28>

0800cf94 <__mdiff>:
 800cf94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf98:	460c      	mov	r4, r1
 800cf9a:	4606      	mov	r6, r0
 800cf9c:	4611      	mov	r1, r2
 800cf9e:	4620      	mov	r0, r4
 800cfa0:	4690      	mov	r8, r2
 800cfa2:	f7ff ffdb 	bl	800cf5c <__mcmp>
 800cfa6:	1e05      	subs	r5, r0, #0
 800cfa8:	d110      	bne.n	800cfcc <__mdiff+0x38>
 800cfaa:	4629      	mov	r1, r5
 800cfac:	4630      	mov	r0, r6
 800cfae:	f7ff fd09 	bl	800c9c4 <_Balloc>
 800cfb2:	b930      	cbnz	r0, 800cfc2 <__mdiff+0x2e>
 800cfb4:	4b3a      	ldr	r3, [pc, #232]	; (800d0a0 <__mdiff+0x10c>)
 800cfb6:	4602      	mov	r2, r0
 800cfb8:	f240 2132 	movw	r1, #562	; 0x232
 800cfbc:	4839      	ldr	r0, [pc, #228]	; (800d0a4 <__mdiff+0x110>)
 800cfbe:	f000 fc51 	bl	800d864 <__assert_func>
 800cfc2:	2301      	movs	r3, #1
 800cfc4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cfc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfcc:	bfa4      	itt	ge
 800cfce:	4643      	movge	r3, r8
 800cfd0:	46a0      	movge	r8, r4
 800cfd2:	4630      	mov	r0, r6
 800cfd4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cfd8:	bfa6      	itte	ge
 800cfda:	461c      	movge	r4, r3
 800cfdc:	2500      	movge	r5, #0
 800cfde:	2501      	movlt	r5, #1
 800cfe0:	f7ff fcf0 	bl	800c9c4 <_Balloc>
 800cfe4:	b920      	cbnz	r0, 800cff0 <__mdiff+0x5c>
 800cfe6:	4b2e      	ldr	r3, [pc, #184]	; (800d0a0 <__mdiff+0x10c>)
 800cfe8:	4602      	mov	r2, r0
 800cfea:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cfee:	e7e5      	b.n	800cfbc <__mdiff+0x28>
 800cff0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cff4:	6926      	ldr	r6, [r4, #16]
 800cff6:	60c5      	str	r5, [r0, #12]
 800cff8:	f104 0914 	add.w	r9, r4, #20
 800cffc:	f108 0514 	add.w	r5, r8, #20
 800d000:	f100 0e14 	add.w	lr, r0, #20
 800d004:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d008:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d00c:	f108 0210 	add.w	r2, r8, #16
 800d010:	46f2      	mov	sl, lr
 800d012:	2100      	movs	r1, #0
 800d014:	f859 3b04 	ldr.w	r3, [r9], #4
 800d018:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d01c:	fa1f f883 	uxth.w	r8, r3
 800d020:	fa11 f18b 	uxtah	r1, r1, fp
 800d024:	0c1b      	lsrs	r3, r3, #16
 800d026:	eba1 0808 	sub.w	r8, r1, r8
 800d02a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d02e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d032:	fa1f f888 	uxth.w	r8, r8
 800d036:	1419      	asrs	r1, r3, #16
 800d038:	454e      	cmp	r6, r9
 800d03a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d03e:	f84a 3b04 	str.w	r3, [sl], #4
 800d042:	d8e7      	bhi.n	800d014 <__mdiff+0x80>
 800d044:	1b33      	subs	r3, r6, r4
 800d046:	3b15      	subs	r3, #21
 800d048:	f023 0303 	bic.w	r3, r3, #3
 800d04c:	3304      	adds	r3, #4
 800d04e:	3415      	adds	r4, #21
 800d050:	42a6      	cmp	r6, r4
 800d052:	bf38      	it	cc
 800d054:	2304      	movcc	r3, #4
 800d056:	441d      	add	r5, r3
 800d058:	4473      	add	r3, lr
 800d05a:	469e      	mov	lr, r3
 800d05c:	462e      	mov	r6, r5
 800d05e:	4566      	cmp	r6, ip
 800d060:	d30e      	bcc.n	800d080 <__mdiff+0xec>
 800d062:	f10c 0203 	add.w	r2, ip, #3
 800d066:	1b52      	subs	r2, r2, r5
 800d068:	f022 0203 	bic.w	r2, r2, #3
 800d06c:	3d03      	subs	r5, #3
 800d06e:	45ac      	cmp	ip, r5
 800d070:	bf38      	it	cc
 800d072:	2200      	movcc	r2, #0
 800d074:	441a      	add	r2, r3
 800d076:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d07a:	b17b      	cbz	r3, 800d09c <__mdiff+0x108>
 800d07c:	6107      	str	r7, [r0, #16]
 800d07e:	e7a3      	b.n	800cfc8 <__mdiff+0x34>
 800d080:	f856 8b04 	ldr.w	r8, [r6], #4
 800d084:	fa11 f288 	uxtah	r2, r1, r8
 800d088:	1414      	asrs	r4, r2, #16
 800d08a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d08e:	b292      	uxth	r2, r2
 800d090:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d094:	f84e 2b04 	str.w	r2, [lr], #4
 800d098:	1421      	asrs	r1, r4, #16
 800d09a:	e7e0      	b.n	800d05e <__mdiff+0xca>
 800d09c:	3f01      	subs	r7, #1
 800d09e:	e7ea      	b.n	800d076 <__mdiff+0xe2>
 800d0a0:	0800f0b0 	.word	0x0800f0b0
 800d0a4:	0800f13c 	.word	0x0800f13c

0800d0a8 <__ulp>:
 800d0a8:	b082      	sub	sp, #8
 800d0aa:	ed8d 0b00 	vstr	d0, [sp]
 800d0ae:	9b01      	ldr	r3, [sp, #4]
 800d0b0:	4912      	ldr	r1, [pc, #72]	; (800d0fc <__ulp+0x54>)
 800d0b2:	4019      	ands	r1, r3
 800d0b4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d0b8:	2900      	cmp	r1, #0
 800d0ba:	dd05      	ble.n	800d0c8 <__ulp+0x20>
 800d0bc:	2200      	movs	r2, #0
 800d0be:	460b      	mov	r3, r1
 800d0c0:	ec43 2b10 	vmov	d0, r2, r3
 800d0c4:	b002      	add	sp, #8
 800d0c6:	4770      	bx	lr
 800d0c8:	4249      	negs	r1, r1
 800d0ca:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d0ce:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d0d2:	f04f 0200 	mov.w	r2, #0
 800d0d6:	f04f 0300 	mov.w	r3, #0
 800d0da:	da04      	bge.n	800d0e6 <__ulp+0x3e>
 800d0dc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d0e0:	fa41 f300 	asr.w	r3, r1, r0
 800d0e4:	e7ec      	b.n	800d0c0 <__ulp+0x18>
 800d0e6:	f1a0 0114 	sub.w	r1, r0, #20
 800d0ea:	291e      	cmp	r1, #30
 800d0ec:	bfda      	itte	le
 800d0ee:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d0f2:	fa20 f101 	lsrle.w	r1, r0, r1
 800d0f6:	2101      	movgt	r1, #1
 800d0f8:	460a      	mov	r2, r1
 800d0fa:	e7e1      	b.n	800d0c0 <__ulp+0x18>
 800d0fc:	7ff00000 	.word	0x7ff00000

0800d100 <__b2d>:
 800d100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d102:	6905      	ldr	r5, [r0, #16]
 800d104:	f100 0714 	add.w	r7, r0, #20
 800d108:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d10c:	1f2e      	subs	r6, r5, #4
 800d10e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d112:	4620      	mov	r0, r4
 800d114:	f7ff fd48 	bl	800cba8 <__hi0bits>
 800d118:	f1c0 0320 	rsb	r3, r0, #32
 800d11c:	280a      	cmp	r0, #10
 800d11e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d19c <__b2d+0x9c>
 800d122:	600b      	str	r3, [r1, #0]
 800d124:	dc14      	bgt.n	800d150 <__b2d+0x50>
 800d126:	f1c0 0e0b 	rsb	lr, r0, #11
 800d12a:	fa24 f10e 	lsr.w	r1, r4, lr
 800d12e:	42b7      	cmp	r7, r6
 800d130:	ea41 030c 	orr.w	r3, r1, ip
 800d134:	bf34      	ite	cc
 800d136:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d13a:	2100      	movcs	r1, #0
 800d13c:	3015      	adds	r0, #21
 800d13e:	fa04 f000 	lsl.w	r0, r4, r0
 800d142:	fa21 f10e 	lsr.w	r1, r1, lr
 800d146:	ea40 0201 	orr.w	r2, r0, r1
 800d14a:	ec43 2b10 	vmov	d0, r2, r3
 800d14e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d150:	42b7      	cmp	r7, r6
 800d152:	bf3a      	itte	cc
 800d154:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d158:	f1a5 0608 	subcc.w	r6, r5, #8
 800d15c:	2100      	movcs	r1, #0
 800d15e:	380b      	subs	r0, #11
 800d160:	d017      	beq.n	800d192 <__b2d+0x92>
 800d162:	f1c0 0c20 	rsb	ip, r0, #32
 800d166:	fa04 f500 	lsl.w	r5, r4, r0
 800d16a:	42be      	cmp	r6, r7
 800d16c:	fa21 f40c 	lsr.w	r4, r1, ip
 800d170:	ea45 0504 	orr.w	r5, r5, r4
 800d174:	bf8c      	ite	hi
 800d176:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d17a:	2400      	movls	r4, #0
 800d17c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d180:	fa01 f000 	lsl.w	r0, r1, r0
 800d184:	fa24 f40c 	lsr.w	r4, r4, ip
 800d188:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d18c:	ea40 0204 	orr.w	r2, r0, r4
 800d190:	e7db      	b.n	800d14a <__b2d+0x4a>
 800d192:	ea44 030c 	orr.w	r3, r4, ip
 800d196:	460a      	mov	r2, r1
 800d198:	e7d7      	b.n	800d14a <__b2d+0x4a>
 800d19a:	bf00      	nop
 800d19c:	3ff00000 	.word	0x3ff00000

0800d1a0 <__d2b>:
 800d1a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d1a4:	4689      	mov	r9, r1
 800d1a6:	2101      	movs	r1, #1
 800d1a8:	ec57 6b10 	vmov	r6, r7, d0
 800d1ac:	4690      	mov	r8, r2
 800d1ae:	f7ff fc09 	bl	800c9c4 <_Balloc>
 800d1b2:	4604      	mov	r4, r0
 800d1b4:	b930      	cbnz	r0, 800d1c4 <__d2b+0x24>
 800d1b6:	4602      	mov	r2, r0
 800d1b8:	4b25      	ldr	r3, [pc, #148]	; (800d250 <__d2b+0xb0>)
 800d1ba:	4826      	ldr	r0, [pc, #152]	; (800d254 <__d2b+0xb4>)
 800d1bc:	f240 310a 	movw	r1, #778	; 0x30a
 800d1c0:	f000 fb50 	bl	800d864 <__assert_func>
 800d1c4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d1c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d1cc:	bb35      	cbnz	r5, 800d21c <__d2b+0x7c>
 800d1ce:	2e00      	cmp	r6, #0
 800d1d0:	9301      	str	r3, [sp, #4]
 800d1d2:	d028      	beq.n	800d226 <__d2b+0x86>
 800d1d4:	4668      	mov	r0, sp
 800d1d6:	9600      	str	r6, [sp, #0]
 800d1d8:	f7ff fd06 	bl	800cbe8 <__lo0bits>
 800d1dc:	9900      	ldr	r1, [sp, #0]
 800d1de:	b300      	cbz	r0, 800d222 <__d2b+0x82>
 800d1e0:	9a01      	ldr	r2, [sp, #4]
 800d1e2:	f1c0 0320 	rsb	r3, r0, #32
 800d1e6:	fa02 f303 	lsl.w	r3, r2, r3
 800d1ea:	430b      	orrs	r3, r1
 800d1ec:	40c2      	lsrs	r2, r0
 800d1ee:	6163      	str	r3, [r4, #20]
 800d1f0:	9201      	str	r2, [sp, #4]
 800d1f2:	9b01      	ldr	r3, [sp, #4]
 800d1f4:	61a3      	str	r3, [r4, #24]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	bf14      	ite	ne
 800d1fa:	2202      	movne	r2, #2
 800d1fc:	2201      	moveq	r2, #1
 800d1fe:	6122      	str	r2, [r4, #16]
 800d200:	b1d5      	cbz	r5, 800d238 <__d2b+0x98>
 800d202:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d206:	4405      	add	r5, r0
 800d208:	f8c9 5000 	str.w	r5, [r9]
 800d20c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d210:	f8c8 0000 	str.w	r0, [r8]
 800d214:	4620      	mov	r0, r4
 800d216:	b003      	add	sp, #12
 800d218:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d21c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d220:	e7d5      	b.n	800d1ce <__d2b+0x2e>
 800d222:	6161      	str	r1, [r4, #20]
 800d224:	e7e5      	b.n	800d1f2 <__d2b+0x52>
 800d226:	a801      	add	r0, sp, #4
 800d228:	f7ff fcde 	bl	800cbe8 <__lo0bits>
 800d22c:	9b01      	ldr	r3, [sp, #4]
 800d22e:	6163      	str	r3, [r4, #20]
 800d230:	2201      	movs	r2, #1
 800d232:	6122      	str	r2, [r4, #16]
 800d234:	3020      	adds	r0, #32
 800d236:	e7e3      	b.n	800d200 <__d2b+0x60>
 800d238:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d23c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d240:	f8c9 0000 	str.w	r0, [r9]
 800d244:	6918      	ldr	r0, [r3, #16]
 800d246:	f7ff fcaf 	bl	800cba8 <__hi0bits>
 800d24a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d24e:	e7df      	b.n	800d210 <__d2b+0x70>
 800d250:	0800f0b0 	.word	0x0800f0b0
 800d254:	0800f13c 	.word	0x0800f13c

0800d258 <__ratio>:
 800d258:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d25c:	4688      	mov	r8, r1
 800d25e:	4669      	mov	r1, sp
 800d260:	4681      	mov	r9, r0
 800d262:	f7ff ff4d 	bl	800d100 <__b2d>
 800d266:	a901      	add	r1, sp, #4
 800d268:	4640      	mov	r0, r8
 800d26a:	ec55 4b10 	vmov	r4, r5, d0
 800d26e:	f7ff ff47 	bl	800d100 <__b2d>
 800d272:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d276:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d27a:	eba3 0c02 	sub.w	ip, r3, r2
 800d27e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d282:	1a9b      	subs	r3, r3, r2
 800d284:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d288:	ec51 0b10 	vmov	r0, r1, d0
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	bfd6      	itet	le
 800d290:	460a      	movle	r2, r1
 800d292:	462a      	movgt	r2, r5
 800d294:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d298:	468b      	mov	fp, r1
 800d29a:	462f      	mov	r7, r5
 800d29c:	bfd4      	ite	le
 800d29e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d2a2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d2a6:	4620      	mov	r0, r4
 800d2a8:	ee10 2a10 	vmov	r2, s0
 800d2ac:	465b      	mov	r3, fp
 800d2ae:	4639      	mov	r1, r7
 800d2b0:	f7f3 facc 	bl	800084c <__aeabi_ddiv>
 800d2b4:	ec41 0b10 	vmov	d0, r0, r1
 800d2b8:	b003      	add	sp, #12
 800d2ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d2be <__copybits>:
 800d2be:	3901      	subs	r1, #1
 800d2c0:	b570      	push	{r4, r5, r6, lr}
 800d2c2:	1149      	asrs	r1, r1, #5
 800d2c4:	6914      	ldr	r4, [r2, #16]
 800d2c6:	3101      	adds	r1, #1
 800d2c8:	f102 0314 	add.w	r3, r2, #20
 800d2cc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d2d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d2d4:	1f05      	subs	r5, r0, #4
 800d2d6:	42a3      	cmp	r3, r4
 800d2d8:	d30c      	bcc.n	800d2f4 <__copybits+0x36>
 800d2da:	1aa3      	subs	r3, r4, r2
 800d2dc:	3b11      	subs	r3, #17
 800d2de:	f023 0303 	bic.w	r3, r3, #3
 800d2e2:	3211      	adds	r2, #17
 800d2e4:	42a2      	cmp	r2, r4
 800d2e6:	bf88      	it	hi
 800d2e8:	2300      	movhi	r3, #0
 800d2ea:	4418      	add	r0, r3
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	4288      	cmp	r0, r1
 800d2f0:	d305      	bcc.n	800d2fe <__copybits+0x40>
 800d2f2:	bd70      	pop	{r4, r5, r6, pc}
 800d2f4:	f853 6b04 	ldr.w	r6, [r3], #4
 800d2f8:	f845 6f04 	str.w	r6, [r5, #4]!
 800d2fc:	e7eb      	b.n	800d2d6 <__copybits+0x18>
 800d2fe:	f840 3b04 	str.w	r3, [r0], #4
 800d302:	e7f4      	b.n	800d2ee <__copybits+0x30>

0800d304 <__any_on>:
 800d304:	f100 0214 	add.w	r2, r0, #20
 800d308:	6900      	ldr	r0, [r0, #16]
 800d30a:	114b      	asrs	r3, r1, #5
 800d30c:	4298      	cmp	r0, r3
 800d30e:	b510      	push	{r4, lr}
 800d310:	db11      	blt.n	800d336 <__any_on+0x32>
 800d312:	dd0a      	ble.n	800d32a <__any_on+0x26>
 800d314:	f011 011f 	ands.w	r1, r1, #31
 800d318:	d007      	beq.n	800d32a <__any_on+0x26>
 800d31a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d31e:	fa24 f001 	lsr.w	r0, r4, r1
 800d322:	fa00 f101 	lsl.w	r1, r0, r1
 800d326:	428c      	cmp	r4, r1
 800d328:	d10b      	bne.n	800d342 <__any_on+0x3e>
 800d32a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d32e:	4293      	cmp	r3, r2
 800d330:	d803      	bhi.n	800d33a <__any_on+0x36>
 800d332:	2000      	movs	r0, #0
 800d334:	bd10      	pop	{r4, pc}
 800d336:	4603      	mov	r3, r0
 800d338:	e7f7      	b.n	800d32a <__any_on+0x26>
 800d33a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d33e:	2900      	cmp	r1, #0
 800d340:	d0f5      	beq.n	800d32e <__any_on+0x2a>
 800d342:	2001      	movs	r0, #1
 800d344:	e7f6      	b.n	800d334 <__any_on+0x30>

0800d346 <_calloc_r>:
 800d346:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d348:	fba1 2402 	umull	r2, r4, r1, r2
 800d34c:	b94c      	cbnz	r4, 800d362 <_calloc_r+0x1c>
 800d34e:	4611      	mov	r1, r2
 800d350:	9201      	str	r2, [sp, #4]
 800d352:	f000 f87b 	bl	800d44c <_malloc_r>
 800d356:	9a01      	ldr	r2, [sp, #4]
 800d358:	4605      	mov	r5, r0
 800d35a:	b930      	cbnz	r0, 800d36a <_calloc_r+0x24>
 800d35c:	4628      	mov	r0, r5
 800d35e:	b003      	add	sp, #12
 800d360:	bd30      	pop	{r4, r5, pc}
 800d362:	220c      	movs	r2, #12
 800d364:	6002      	str	r2, [r0, #0]
 800d366:	2500      	movs	r5, #0
 800d368:	e7f8      	b.n	800d35c <_calloc_r+0x16>
 800d36a:	4621      	mov	r1, r4
 800d36c:	f7fc fbbe 	bl	8009aec <memset>
 800d370:	e7f4      	b.n	800d35c <_calloc_r+0x16>
	...

0800d374 <_free_r>:
 800d374:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d376:	2900      	cmp	r1, #0
 800d378:	d044      	beq.n	800d404 <_free_r+0x90>
 800d37a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d37e:	9001      	str	r0, [sp, #4]
 800d380:	2b00      	cmp	r3, #0
 800d382:	f1a1 0404 	sub.w	r4, r1, #4
 800d386:	bfb8      	it	lt
 800d388:	18e4      	addlt	r4, r4, r3
 800d38a:	f000 fab5 	bl	800d8f8 <__malloc_lock>
 800d38e:	4a1e      	ldr	r2, [pc, #120]	; (800d408 <_free_r+0x94>)
 800d390:	9801      	ldr	r0, [sp, #4]
 800d392:	6813      	ldr	r3, [r2, #0]
 800d394:	b933      	cbnz	r3, 800d3a4 <_free_r+0x30>
 800d396:	6063      	str	r3, [r4, #4]
 800d398:	6014      	str	r4, [r2, #0]
 800d39a:	b003      	add	sp, #12
 800d39c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d3a0:	f000 bab0 	b.w	800d904 <__malloc_unlock>
 800d3a4:	42a3      	cmp	r3, r4
 800d3a6:	d908      	bls.n	800d3ba <_free_r+0x46>
 800d3a8:	6825      	ldr	r5, [r4, #0]
 800d3aa:	1961      	adds	r1, r4, r5
 800d3ac:	428b      	cmp	r3, r1
 800d3ae:	bf01      	itttt	eq
 800d3b0:	6819      	ldreq	r1, [r3, #0]
 800d3b2:	685b      	ldreq	r3, [r3, #4]
 800d3b4:	1949      	addeq	r1, r1, r5
 800d3b6:	6021      	streq	r1, [r4, #0]
 800d3b8:	e7ed      	b.n	800d396 <_free_r+0x22>
 800d3ba:	461a      	mov	r2, r3
 800d3bc:	685b      	ldr	r3, [r3, #4]
 800d3be:	b10b      	cbz	r3, 800d3c4 <_free_r+0x50>
 800d3c0:	42a3      	cmp	r3, r4
 800d3c2:	d9fa      	bls.n	800d3ba <_free_r+0x46>
 800d3c4:	6811      	ldr	r1, [r2, #0]
 800d3c6:	1855      	adds	r5, r2, r1
 800d3c8:	42a5      	cmp	r5, r4
 800d3ca:	d10b      	bne.n	800d3e4 <_free_r+0x70>
 800d3cc:	6824      	ldr	r4, [r4, #0]
 800d3ce:	4421      	add	r1, r4
 800d3d0:	1854      	adds	r4, r2, r1
 800d3d2:	42a3      	cmp	r3, r4
 800d3d4:	6011      	str	r1, [r2, #0]
 800d3d6:	d1e0      	bne.n	800d39a <_free_r+0x26>
 800d3d8:	681c      	ldr	r4, [r3, #0]
 800d3da:	685b      	ldr	r3, [r3, #4]
 800d3dc:	6053      	str	r3, [r2, #4]
 800d3de:	4421      	add	r1, r4
 800d3e0:	6011      	str	r1, [r2, #0]
 800d3e2:	e7da      	b.n	800d39a <_free_r+0x26>
 800d3e4:	d902      	bls.n	800d3ec <_free_r+0x78>
 800d3e6:	230c      	movs	r3, #12
 800d3e8:	6003      	str	r3, [r0, #0]
 800d3ea:	e7d6      	b.n	800d39a <_free_r+0x26>
 800d3ec:	6825      	ldr	r5, [r4, #0]
 800d3ee:	1961      	adds	r1, r4, r5
 800d3f0:	428b      	cmp	r3, r1
 800d3f2:	bf04      	itt	eq
 800d3f4:	6819      	ldreq	r1, [r3, #0]
 800d3f6:	685b      	ldreq	r3, [r3, #4]
 800d3f8:	6063      	str	r3, [r4, #4]
 800d3fa:	bf04      	itt	eq
 800d3fc:	1949      	addeq	r1, r1, r5
 800d3fe:	6021      	streq	r1, [r4, #0]
 800d400:	6054      	str	r4, [r2, #4]
 800d402:	e7ca      	b.n	800d39a <_free_r+0x26>
 800d404:	b003      	add	sp, #12
 800d406:	bd30      	pop	{r4, r5, pc}
 800d408:	20000bd8 	.word	0x20000bd8

0800d40c <sbrk_aligned>:
 800d40c:	b570      	push	{r4, r5, r6, lr}
 800d40e:	4e0e      	ldr	r6, [pc, #56]	; (800d448 <sbrk_aligned+0x3c>)
 800d410:	460c      	mov	r4, r1
 800d412:	6831      	ldr	r1, [r6, #0]
 800d414:	4605      	mov	r5, r0
 800d416:	b911      	cbnz	r1, 800d41e <sbrk_aligned+0x12>
 800d418:	f000 f9f2 	bl	800d800 <_sbrk_r>
 800d41c:	6030      	str	r0, [r6, #0]
 800d41e:	4621      	mov	r1, r4
 800d420:	4628      	mov	r0, r5
 800d422:	f000 f9ed 	bl	800d800 <_sbrk_r>
 800d426:	1c43      	adds	r3, r0, #1
 800d428:	d00a      	beq.n	800d440 <sbrk_aligned+0x34>
 800d42a:	1cc4      	adds	r4, r0, #3
 800d42c:	f024 0403 	bic.w	r4, r4, #3
 800d430:	42a0      	cmp	r0, r4
 800d432:	d007      	beq.n	800d444 <sbrk_aligned+0x38>
 800d434:	1a21      	subs	r1, r4, r0
 800d436:	4628      	mov	r0, r5
 800d438:	f000 f9e2 	bl	800d800 <_sbrk_r>
 800d43c:	3001      	adds	r0, #1
 800d43e:	d101      	bne.n	800d444 <sbrk_aligned+0x38>
 800d440:	f04f 34ff 	mov.w	r4, #4294967295
 800d444:	4620      	mov	r0, r4
 800d446:	bd70      	pop	{r4, r5, r6, pc}
 800d448:	20000bdc 	.word	0x20000bdc

0800d44c <_malloc_r>:
 800d44c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d450:	1ccd      	adds	r5, r1, #3
 800d452:	f025 0503 	bic.w	r5, r5, #3
 800d456:	3508      	adds	r5, #8
 800d458:	2d0c      	cmp	r5, #12
 800d45a:	bf38      	it	cc
 800d45c:	250c      	movcc	r5, #12
 800d45e:	2d00      	cmp	r5, #0
 800d460:	4607      	mov	r7, r0
 800d462:	db01      	blt.n	800d468 <_malloc_r+0x1c>
 800d464:	42a9      	cmp	r1, r5
 800d466:	d905      	bls.n	800d474 <_malloc_r+0x28>
 800d468:	230c      	movs	r3, #12
 800d46a:	603b      	str	r3, [r7, #0]
 800d46c:	2600      	movs	r6, #0
 800d46e:	4630      	mov	r0, r6
 800d470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d474:	4e2e      	ldr	r6, [pc, #184]	; (800d530 <_malloc_r+0xe4>)
 800d476:	f000 fa3f 	bl	800d8f8 <__malloc_lock>
 800d47a:	6833      	ldr	r3, [r6, #0]
 800d47c:	461c      	mov	r4, r3
 800d47e:	bb34      	cbnz	r4, 800d4ce <_malloc_r+0x82>
 800d480:	4629      	mov	r1, r5
 800d482:	4638      	mov	r0, r7
 800d484:	f7ff ffc2 	bl	800d40c <sbrk_aligned>
 800d488:	1c43      	adds	r3, r0, #1
 800d48a:	4604      	mov	r4, r0
 800d48c:	d14d      	bne.n	800d52a <_malloc_r+0xde>
 800d48e:	6834      	ldr	r4, [r6, #0]
 800d490:	4626      	mov	r6, r4
 800d492:	2e00      	cmp	r6, #0
 800d494:	d140      	bne.n	800d518 <_malloc_r+0xcc>
 800d496:	6823      	ldr	r3, [r4, #0]
 800d498:	4631      	mov	r1, r6
 800d49a:	4638      	mov	r0, r7
 800d49c:	eb04 0803 	add.w	r8, r4, r3
 800d4a0:	f000 f9ae 	bl	800d800 <_sbrk_r>
 800d4a4:	4580      	cmp	r8, r0
 800d4a6:	d13a      	bne.n	800d51e <_malloc_r+0xd2>
 800d4a8:	6821      	ldr	r1, [r4, #0]
 800d4aa:	3503      	adds	r5, #3
 800d4ac:	1a6d      	subs	r5, r5, r1
 800d4ae:	f025 0503 	bic.w	r5, r5, #3
 800d4b2:	3508      	adds	r5, #8
 800d4b4:	2d0c      	cmp	r5, #12
 800d4b6:	bf38      	it	cc
 800d4b8:	250c      	movcc	r5, #12
 800d4ba:	4629      	mov	r1, r5
 800d4bc:	4638      	mov	r0, r7
 800d4be:	f7ff ffa5 	bl	800d40c <sbrk_aligned>
 800d4c2:	3001      	adds	r0, #1
 800d4c4:	d02b      	beq.n	800d51e <_malloc_r+0xd2>
 800d4c6:	6823      	ldr	r3, [r4, #0]
 800d4c8:	442b      	add	r3, r5
 800d4ca:	6023      	str	r3, [r4, #0]
 800d4cc:	e00e      	b.n	800d4ec <_malloc_r+0xa0>
 800d4ce:	6822      	ldr	r2, [r4, #0]
 800d4d0:	1b52      	subs	r2, r2, r5
 800d4d2:	d41e      	bmi.n	800d512 <_malloc_r+0xc6>
 800d4d4:	2a0b      	cmp	r2, #11
 800d4d6:	d916      	bls.n	800d506 <_malloc_r+0xba>
 800d4d8:	1961      	adds	r1, r4, r5
 800d4da:	42a3      	cmp	r3, r4
 800d4dc:	6025      	str	r5, [r4, #0]
 800d4de:	bf18      	it	ne
 800d4e0:	6059      	strne	r1, [r3, #4]
 800d4e2:	6863      	ldr	r3, [r4, #4]
 800d4e4:	bf08      	it	eq
 800d4e6:	6031      	streq	r1, [r6, #0]
 800d4e8:	5162      	str	r2, [r4, r5]
 800d4ea:	604b      	str	r3, [r1, #4]
 800d4ec:	4638      	mov	r0, r7
 800d4ee:	f104 060b 	add.w	r6, r4, #11
 800d4f2:	f000 fa07 	bl	800d904 <__malloc_unlock>
 800d4f6:	f026 0607 	bic.w	r6, r6, #7
 800d4fa:	1d23      	adds	r3, r4, #4
 800d4fc:	1af2      	subs	r2, r6, r3
 800d4fe:	d0b6      	beq.n	800d46e <_malloc_r+0x22>
 800d500:	1b9b      	subs	r3, r3, r6
 800d502:	50a3      	str	r3, [r4, r2]
 800d504:	e7b3      	b.n	800d46e <_malloc_r+0x22>
 800d506:	6862      	ldr	r2, [r4, #4]
 800d508:	42a3      	cmp	r3, r4
 800d50a:	bf0c      	ite	eq
 800d50c:	6032      	streq	r2, [r6, #0]
 800d50e:	605a      	strne	r2, [r3, #4]
 800d510:	e7ec      	b.n	800d4ec <_malloc_r+0xa0>
 800d512:	4623      	mov	r3, r4
 800d514:	6864      	ldr	r4, [r4, #4]
 800d516:	e7b2      	b.n	800d47e <_malloc_r+0x32>
 800d518:	4634      	mov	r4, r6
 800d51a:	6876      	ldr	r6, [r6, #4]
 800d51c:	e7b9      	b.n	800d492 <_malloc_r+0x46>
 800d51e:	230c      	movs	r3, #12
 800d520:	603b      	str	r3, [r7, #0]
 800d522:	4638      	mov	r0, r7
 800d524:	f000 f9ee 	bl	800d904 <__malloc_unlock>
 800d528:	e7a1      	b.n	800d46e <_malloc_r+0x22>
 800d52a:	6025      	str	r5, [r4, #0]
 800d52c:	e7de      	b.n	800d4ec <_malloc_r+0xa0>
 800d52e:	bf00      	nop
 800d530:	20000bd8 	.word	0x20000bd8

0800d534 <__ssputs_r>:
 800d534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d538:	688e      	ldr	r6, [r1, #8]
 800d53a:	429e      	cmp	r6, r3
 800d53c:	4682      	mov	sl, r0
 800d53e:	460c      	mov	r4, r1
 800d540:	4690      	mov	r8, r2
 800d542:	461f      	mov	r7, r3
 800d544:	d838      	bhi.n	800d5b8 <__ssputs_r+0x84>
 800d546:	898a      	ldrh	r2, [r1, #12]
 800d548:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d54c:	d032      	beq.n	800d5b4 <__ssputs_r+0x80>
 800d54e:	6825      	ldr	r5, [r4, #0]
 800d550:	6909      	ldr	r1, [r1, #16]
 800d552:	eba5 0901 	sub.w	r9, r5, r1
 800d556:	6965      	ldr	r5, [r4, #20]
 800d558:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d55c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d560:	3301      	adds	r3, #1
 800d562:	444b      	add	r3, r9
 800d564:	106d      	asrs	r5, r5, #1
 800d566:	429d      	cmp	r5, r3
 800d568:	bf38      	it	cc
 800d56a:	461d      	movcc	r5, r3
 800d56c:	0553      	lsls	r3, r2, #21
 800d56e:	d531      	bpl.n	800d5d4 <__ssputs_r+0xa0>
 800d570:	4629      	mov	r1, r5
 800d572:	f7ff ff6b 	bl	800d44c <_malloc_r>
 800d576:	4606      	mov	r6, r0
 800d578:	b950      	cbnz	r0, 800d590 <__ssputs_r+0x5c>
 800d57a:	230c      	movs	r3, #12
 800d57c:	f8ca 3000 	str.w	r3, [sl]
 800d580:	89a3      	ldrh	r3, [r4, #12]
 800d582:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d586:	81a3      	strh	r3, [r4, #12]
 800d588:	f04f 30ff 	mov.w	r0, #4294967295
 800d58c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d590:	6921      	ldr	r1, [r4, #16]
 800d592:	464a      	mov	r2, r9
 800d594:	f7ff fa08 	bl	800c9a8 <memcpy>
 800d598:	89a3      	ldrh	r3, [r4, #12]
 800d59a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d59e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5a2:	81a3      	strh	r3, [r4, #12]
 800d5a4:	6126      	str	r6, [r4, #16]
 800d5a6:	6165      	str	r5, [r4, #20]
 800d5a8:	444e      	add	r6, r9
 800d5aa:	eba5 0509 	sub.w	r5, r5, r9
 800d5ae:	6026      	str	r6, [r4, #0]
 800d5b0:	60a5      	str	r5, [r4, #8]
 800d5b2:	463e      	mov	r6, r7
 800d5b4:	42be      	cmp	r6, r7
 800d5b6:	d900      	bls.n	800d5ba <__ssputs_r+0x86>
 800d5b8:	463e      	mov	r6, r7
 800d5ba:	6820      	ldr	r0, [r4, #0]
 800d5bc:	4632      	mov	r2, r6
 800d5be:	4641      	mov	r1, r8
 800d5c0:	f000 f980 	bl	800d8c4 <memmove>
 800d5c4:	68a3      	ldr	r3, [r4, #8]
 800d5c6:	1b9b      	subs	r3, r3, r6
 800d5c8:	60a3      	str	r3, [r4, #8]
 800d5ca:	6823      	ldr	r3, [r4, #0]
 800d5cc:	4433      	add	r3, r6
 800d5ce:	6023      	str	r3, [r4, #0]
 800d5d0:	2000      	movs	r0, #0
 800d5d2:	e7db      	b.n	800d58c <__ssputs_r+0x58>
 800d5d4:	462a      	mov	r2, r5
 800d5d6:	f000 f99b 	bl	800d910 <_realloc_r>
 800d5da:	4606      	mov	r6, r0
 800d5dc:	2800      	cmp	r0, #0
 800d5de:	d1e1      	bne.n	800d5a4 <__ssputs_r+0x70>
 800d5e0:	6921      	ldr	r1, [r4, #16]
 800d5e2:	4650      	mov	r0, sl
 800d5e4:	f7ff fec6 	bl	800d374 <_free_r>
 800d5e8:	e7c7      	b.n	800d57a <__ssputs_r+0x46>
	...

0800d5ec <_svfiprintf_r>:
 800d5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5f0:	4698      	mov	r8, r3
 800d5f2:	898b      	ldrh	r3, [r1, #12]
 800d5f4:	061b      	lsls	r3, r3, #24
 800d5f6:	b09d      	sub	sp, #116	; 0x74
 800d5f8:	4607      	mov	r7, r0
 800d5fa:	460d      	mov	r5, r1
 800d5fc:	4614      	mov	r4, r2
 800d5fe:	d50e      	bpl.n	800d61e <_svfiprintf_r+0x32>
 800d600:	690b      	ldr	r3, [r1, #16]
 800d602:	b963      	cbnz	r3, 800d61e <_svfiprintf_r+0x32>
 800d604:	2140      	movs	r1, #64	; 0x40
 800d606:	f7ff ff21 	bl	800d44c <_malloc_r>
 800d60a:	6028      	str	r0, [r5, #0]
 800d60c:	6128      	str	r0, [r5, #16]
 800d60e:	b920      	cbnz	r0, 800d61a <_svfiprintf_r+0x2e>
 800d610:	230c      	movs	r3, #12
 800d612:	603b      	str	r3, [r7, #0]
 800d614:	f04f 30ff 	mov.w	r0, #4294967295
 800d618:	e0d1      	b.n	800d7be <_svfiprintf_r+0x1d2>
 800d61a:	2340      	movs	r3, #64	; 0x40
 800d61c:	616b      	str	r3, [r5, #20]
 800d61e:	2300      	movs	r3, #0
 800d620:	9309      	str	r3, [sp, #36]	; 0x24
 800d622:	2320      	movs	r3, #32
 800d624:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d628:	f8cd 800c 	str.w	r8, [sp, #12]
 800d62c:	2330      	movs	r3, #48	; 0x30
 800d62e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d7d8 <_svfiprintf_r+0x1ec>
 800d632:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d636:	f04f 0901 	mov.w	r9, #1
 800d63a:	4623      	mov	r3, r4
 800d63c:	469a      	mov	sl, r3
 800d63e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d642:	b10a      	cbz	r2, 800d648 <_svfiprintf_r+0x5c>
 800d644:	2a25      	cmp	r2, #37	; 0x25
 800d646:	d1f9      	bne.n	800d63c <_svfiprintf_r+0x50>
 800d648:	ebba 0b04 	subs.w	fp, sl, r4
 800d64c:	d00b      	beq.n	800d666 <_svfiprintf_r+0x7a>
 800d64e:	465b      	mov	r3, fp
 800d650:	4622      	mov	r2, r4
 800d652:	4629      	mov	r1, r5
 800d654:	4638      	mov	r0, r7
 800d656:	f7ff ff6d 	bl	800d534 <__ssputs_r>
 800d65a:	3001      	adds	r0, #1
 800d65c:	f000 80aa 	beq.w	800d7b4 <_svfiprintf_r+0x1c8>
 800d660:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d662:	445a      	add	r2, fp
 800d664:	9209      	str	r2, [sp, #36]	; 0x24
 800d666:	f89a 3000 	ldrb.w	r3, [sl]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	f000 80a2 	beq.w	800d7b4 <_svfiprintf_r+0x1c8>
 800d670:	2300      	movs	r3, #0
 800d672:	f04f 32ff 	mov.w	r2, #4294967295
 800d676:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d67a:	f10a 0a01 	add.w	sl, sl, #1
 800d67e:	9304      	str	r3, [sp, #16]
 800d680:	9307      	str	r3, [sp, #28]
 800d682:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d686:	931a      	str	r3, [sp, #104]	; 0x68
 800d688:	4654      	mov	r4, sl
 800d68a:	2205      	movs	r2, #5
 800d68c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d690:	4851      	ldr	r0, [pc, #324]	; (800d7d8 <_svfiprintf_r+0x1ec>)
 800d692:	f7f2 fda5 	bl	80001e0 <memchr>
 800d696:	9a04      	ldr	r2, [sp, #16]
 800d698:	b9d8      	cbnz	r0, 800d6d2 <_svfiprintf_r+0xe6>
 800d69a:	06d0      	lsls	r0, r2, #27
 800d69c:	bf44      	itt	mi
 800d69e:	2320      	movmi	r3, #32
 800d6a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d6a4:	0711      	lsls	r1, r2, #28
 800d6a6:	bf44      	itt	mi
 800d6a8:	232b      	movmi	r3, #43	; 0x2b
 800d6aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d6ae:	f89a 3000 	ldrb.w	r3, [sl]
 800d6b2:	2b2a      	cmp	r3, #42	; 0x2a
 800d6b4:	d015      	beq.n	800d6e2 <_svfiprintf_r+0xf6>
 800d6b6:	9a07      	ldr	r2, [sp, #28]
 800d6b8:	4654      	mov	r4, sl
 800d6ba:	2000      	movs	r0, #0
 800d6bc:	f04f 0c0a 	mov.w	ip, #10
 800d6c0:	4621      	mov	r1, r4
 800d6c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d6c6:	3b30      	subs	r3, #48	; 0x30
 800d6c8:	2b09      	cmp	r3, #9
 800d6ca:	d94e      	bls.n	800d76a <_svfiprintf_r+0x17e>
 800d6cc:	b1b0      	cbz	r0, 800d6fc <_svfiprintf_r+0x110>
 800d6ce:	9207      	str	r2, [sp, #28]
 800d6d0:	e014      	b.n	800d6fc <_svfiprintf_r+0x110>
 800d6d2:	eba0 0308 	sub.w	r3, r0, r8
 800d6d6:	fa09 f303 	lsl.w	r3, r9, r3
 800d6da:	4313      	orrs	r3, r2
 800d6dc:	9304      	str	r3, [sp, #16]
 800d6de:	46a2      	mov	sl, r4
 800d6e0:	e7d2      	b.n	800d688 <_svfiprintf_r+0x9c>
 800d6e2:	9b03      	ldr	r3, [sp, #12]
 800d6e4:	1d19      	adds	r1, r3, #4
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	9103      	str	r1, [sp, #12]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	bfbb      	ittet	lt
 800d6ee:	425b      	neglt	r3, r3
 800d6f0:	f042 0202 	orrlt.w	r2, r2, #2
 800d6f4:	9307      	strge	r3, [sp, #28]
 800d6f6:	9307      	strlt	r3, [sp, #28]
 800d6f8:	bfb8      	it	lt
 800d6fa:	9204      	strlt	r2, [sp, #16]
 800d6fc:	7823      	ldrb	r3, [r4, #0]
 800d6fe:	2b2e      	cmp	r3, #46	; 0x2e
 800d700:	d10c      	bne.n	800d71c <_svfiprintf_r+0x130>
 800d702:	7863      	ldrb	r3, [r4, #1]
 800d704:	2b2a      	cmp	r3, #42	; 0x2a
 800d706:	d135      	bne.n	800d774 <_svfiprintf_r+0x188>
 800d708:	9b03      	ldr	r3, [sp, #12]
 800d70a:	1d1a      	adds	r2, r3, #4
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	9203      	str	r2, [sp, #12]
 800d710:	2b00      	cmp	r3, #0
 800d712:	bfb8      	it	lt
 800d714:	f04f 33ff 	movlt.w	r3, #4294967295
 800d718:	3402      	adds	r4, #2
 800d71a:	9305      	str	r3, [sp, #20]
 800d71c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d7e8 <_svfiprintf_r+0x1fc>
 800d720:	7821      	ldrb	r1, [r4, #0]
 800d722:	2203      	movs	r2, #3
 800d724:	4650      	mov	r0, sl
 800d726:	f7f2 fd5b 	bl	80001e0 <memchr>
 800d72a:	b140      	cbz	r0, 800d73e <_svfiprintf_r+0x152>
 800d72c:	2340      	movs	r3, #64	; 0x40
 800d72e:	eba0 000a 	sub.w	r0, r0, sl
 800d732:	fa03 f000 	lsl.w	r0, r3, r0
 800d736:	9b04      	ldr	r3, [sp, #16]
 800d738:	4303      	orrs	r3, r0
 800d73a:	3401      	adds	r4, #1
 800d73c:	9304      	str	r3, [sp, #16]
 800d73e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d742:	4826      	ldr	r0, [pc, #152]	; (800d7dc <_svfiprintf_r+0x1f0>)
 800d744:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d748:	2206      	movs	r2, #6
 800d74a:	f7f2 fd49 	bl	80001e0 <memchr>
 800d74e:	2800      	cmp	r0, #0
 800d750:	d038      	beq.n	800d7c4 <_svfiprintf_r+0x1d8>
 800d752:	4b23      	ldr	r3, [pc, #140]	; (800d7e0 <_svfiprintf_r+0x1f4>)
 800d754:	bb1b      	cbnz	r3, 800d79e <_svfiprintf_r+0x1b2>
 800d756:	9b03      	ldr	r3, [sp, #12]
 800d758:	3307      	adds	r3, #7
 800d75a:	f023 0307 	bic.w	r3, r3, #7
 800d75e:	3308      	adds	r3, #8
 800d760:	9303      	str	r3, [sp, #12]
 800d762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d764:	4433      	add	r3, r6
 800d766:	9309      	str	r3, [sp, #36]	; 0x24
 800d768:	e767      	b.n	800d63a <_svfiprintf_r+0x4e>
 800d76a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d76e:	460c      	mov	r4, r1
 800d770:	2001      	movs	r0, #1
 800d772:	e7a5      	b.n	800d6c0 <_svfiprintf_r+0xd4>
 800d774:	2300      	movs	r3, #0
 800d776:	3401      	adds	r4, #1
 800d778:	9305      	str	r3, [sp, #20]
 800d77a:	4619      	mov	r1, r3
 800d77c:	f04f 0c0a 	mov.w	ip, #10
 800d780:	4620      	mov	r0, r4
 800d782:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d786:	3a30      	subs	r2, #48	; 0x30
 800d788:	2a09      	cmp	r2, #9
 800d78a:	d903      	bls.n	800d794 <_svfiprintf_r+0x1a8>
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d0c5      	beq.n	800d71c <_svfiprintf_r+0x130>
 800d790:	9105      	str	r1, [sp, #20]
 800d792:	e7c3      	b.n	800d71c <_svfiprintf_r+0x130>
 800d794:	fb0c 2101 	mla	r1, ip, r1, r2
 800d798:	4604      	mov	r4, r0
 800d79a:	2301      	movs	r3, #1
 800d79c:	e7f0      	b.n	800d780 <_svfiprintf_r+0x194>
 800d79e:	ab03      	add	r3, sp, #12
 800d7a0:	9300      	str	r3, [sp, #0]
 800d7a2:	462a      	mov	r2, r5
 800d7a4:	4b0f      	ldr	r3, [pc, #60]	; (800d7e4 <_svfiprintf_r+0x1f8>)
 800d7a6:	a904      	add	r1, sp, #16
 800d7a8:	4638      	mov	r0, r7
 800d7aa:	f7fc fa47 	bl	8009c3c <_printf_float>
 800d7ae:	1c42      	adds	r2, r0, #1
 800d7b0:	4606      	mov	r6, r0
 800d7b2:	d1d6      	bne.n	800d762 <_svfiprintf_r+0x176>
 800d7b4:	89ab      	ldrh	r3, [r5, #12]
 800d7b6:	065b      	lsls	r3, r3, #25
 800d7b8:	f53f af2c 	bmi.w	800d614 <_svfiprintf_r+0x28>
 800d7bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d7be:	b01d      	add	sp, #116	; 0x74
 800d7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7c4:	ab03      	add	r3, sp, #12
 800d7c6:	9300      	str	r3, [sp, #0]
 800d7c8:	462a      	mov	r2, r5
 800d7ca:	4b06      	ldr	r3, [pc, #24]	; (800d7e4 <_svfiprintf_r+0x1f8>)
 800d7cc:	a904      	add	r1, sp, #16
 800d7ce:	4638      	mov	r0, r7
 800d7d0:	f7fc fcd8 	bl	800a184 <_printf_i>
 800d7d4:	e7eb      	b.n	800d7ae <_svfiprintf_r+0x1c2>
 800d7d6:	bf00      	nop
 800d7d8:	0800f294 	.word	0x0800f294
 800d7dc:	0800f29e 	.word	0x0800f29e
 800d7e0:	08009c3d 	.word	0x08009c3d
 800d7e4:	0800d535 	.word	0x0800d535
 800d7e8:	0800f29a 	.word	0x0800f29a
 800d7ec:	00000000 	.word	0x00000000

0800d7f0 <nan>:
 800d7f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d7f8 <nan+0x8>
 800d7f4:	4770      	bx	lr
 800d7f6:	bf00      	nop
 800d7f8:	00000000 	.word	0x00000000
 800d7fc:	7ff80000 	.word	0x7ff80000

0800d800 <_sbrk_r>:
 800d800:	b538      	push	{r3, r4, r5, lr}
 800d802:	4d06      	ldr	r5, [pc, #24]	; (800d81c <_sbrk_r+0x1c>)
 800d804:	2300      	movs	r3, #0
 800d806:	4604      	mov	r4, r0
 800d808:	4608      	mov	r0, r1
 800d80a:	602b      	str	r3, [r5, #0]
 800d80c:	f7f5 feb2 	bl	8003574 <_sbrk>
 800d810:	1c43      	adds	r3, r0, #1
 800d812:	d102      	bne.n	800d81a <_sbrk_r+0x1a>
 800d814:	682b      	ldr	r3, [r5, #0]
 800d816:	b103      	cbz	r3, 800d81a <_sbrk_r+0x1a>
 800d818:	6023      	str	r3, [r4, #0]
 800d81a:	bd38      	pop	{r3, r4, r5, pc}
 800d81c:	20000be0 	.word	0x20000be0

0800d820 <strncmp>:
 800d820:	b510      	push	{r4, lr}
 800d822:	b17a      	cbz	r2, 800d844 <strncmp+0x24>
 800d824:	4603      	mov	r3, r0
 800d826:	3901      	subs	r1, #1
 800d828:	1884      	adds	r4, r0, r2
 800d82a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d82e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d832:	4290      	cmp	r0, r2
 800d834:	d101      	bne.n	800d83a <strncmp+0x1a>
 800d836:	42a3      	cmp	r3, r4
 800d838:	d101      	bne.n	800d83e <strncmp+0x1e>
 800d83a:	1a80      	subs	r0, r0, r2
 800d83c:	bd10      	pop	{r4, pc}
 800d83e:	2800      	cmp	r0, #0
 800d840:	d1f3      	bne.n	800d82a <strncmp+0xa>
 800d842:	e7fa      	b.n	800d83a <strncmp+0x1a>
 800d844:	4610      	mov	r0, r2
 800d846:	e7f9      	b.n	800d83c <strncmp+0x1c>

0800d848 <__ascii_wctomb>:
 800d848:	b149      	cbz	r1, 800d85e <__ascii_wctomb+0x16>
 800d84a:	2aff      	cmp	r2, #255	; 0xff
 800d84c:	bf85      	ittet	hi
 800d84e:	238a      	movhi	r3, #138	; 0x8a
 800d850:	6003      	strhi	r3, [r0, #0]
 800d852:	700a      	strbls	r2, [r1, #0]
 800d854:	f04f 30ff 	movhi.w	r0, #4294967295
 800d858:	bf98      	it	ls
 800d85a:	2001      	movls	r0, #1
 800d85c:	4770      	bx	lr
 800d85e:	4608      	mov	r0, r1
 800d860:	4770      	bx	lr
	...

0800d864 <__assert_func>:
 800d864:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d866:	4614      	mov	r4, r2
 800d868:	461a      	mov	r2, r3
 800d86a:	4b09      	ldr	r3, [pc, #36]	; (800d890 <__assert_func+0x2c>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	4605      	mov	r5, r0
 800d870:	68d8      	ldr	r0, [r3, #12]
 800d872:	b14c      	cbz	r4, 800d888 <__assert_func+0x24>
 800d874:	4b07      	ldr	r3, [pc, #28]	; (800d894 <__assert_func+0x30>)
 800d876:	9100      	str	r1, [sp, #0]
 800d878:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d87c:	4906      	ldr	r1, [pc, #24]	; (800d898 <__assert_func+0x34>)
 800d87e:	462b      	mov	r3, r5
 800d880:	f000 f80e 	bl	800d8a0 <fiprintf>
 800d884:	f000 fa8c 	bl	800dda0 <abort>
 800d888:	4b04      	ldr	r3, [pc, #16]	; (800d89c <__assert_func+0x38>)
 800d88a:	461c      	mov	r4, r3
 800d88c:	e7f3      	b.n	800d876 <__assert_func+0x12>
 800d88e:	bf00      	nop
 800d890:	2000028c 	.word	0x2000028c
 800d894:	0800f2a5 	.word	0x0800f2a5
 800d898:	0800f2b2 	.word	0x0800f2b2
 800d89c:	0800f2e0 	.word	0x0800f2e0

0800d8a0 <fiprintf>:
 800d8a0:	b40e      	push	{r1, r2, r3}
 800d8a2:	b503      	push	{r0, r1, lr}
 800d8a4:	4601      	mov	r1, r0
 800d8a6:	ab03      	add	r3, sp, #12
 800d8a8:	4805      	ldr	r0, [pc, #20]	; (800d8c0 <fiprintf+0x20>)
 800d8aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8ae:	6800      	ldr	r0, [r0, #0]
 800d8b0:	9301      	str	r3, [sp, #4]
 800d8b2:	f000 f885 	bl	800d9c0 <_vfiprintf_r>
 800d8b6:	b002      	add	sp, #8
 800d8b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d8bc:	b003      	add	sp, #12
 800d8be:	4770      	bx	lr
 800d8c0:	2000028c 	.word	0x2000028c

0800d8c4 <memmove>:
 800d8c4:	4288      	cmp	r0, r1
 800d8c6:	b510      	push	{r4, lr}
 800d8c8:	eb01 0402 	add.w	r4, r1, r2
 800d8cc:	d902      	bls.n	800d8d4 <memmove+0x10>
 800d8ce:	4284      	cmp	r4, r0
 800d8d0:	4623      	mov	r3, r4
 800d8d2:	d807      	bhi.n	800d8e4 <memmove+0x20>
 800d8d4:	1e43      	subs	r3, r0, #1
 800d8d6:	42a1      	cmp	r1, r4
 800d8d8:	d008      	beq.n	800d8ec <memmove+0x28>
 800d8da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d8de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d8e2:	e7f8      	b.n	800d8d6 <memmove+0x12>
 800d8e4:	4402      	add	r2, r0
 800d8e6:	4601      	mov	r1, r0
 800d8e8:	428a      	cmp	r2, r1
 800d8ea:	d100      	bne.n	800d8ee <memmove+0x2a>
 800d8ec:	bd10      	pop	{r4, pc}
 800d8ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d8f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d8f6:	e7f7      	b.n	800d8e8 <memmove+0x24>

0800d8f8 <__malloc_lock>:
 800d8f8:	4801      	ldr	r0, [pc, #4]	; (800d900 <__malloc_lock+0x8>)
 800d8fa:	f000 bc11 	b.w	800e120 <__retarget_lock_acquire_recursive>
 800d8fe:	bf00      	nop
 800d900:	20000be4 	.word	0x20000be4

0800d904 <__malloc_unlock>:
 800d904:	4801      	ldr	r0, [pc, #4]	; (800d90c <__malloc_unlock+0x8>)
 800d906:	f000 bc0c 	b.w	800e122 <__retarget_lock_release_recursive>
 800d90a:	bf00      	nop
 800d90c:	20000be4 	.word	0x20000be4

0800d910 <_realloc_r>:
 800d910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d914:	4680      	mov	r8, r0
 800d916:	4614      	mov	r4, r2
 800d918:	460e      	mov	r6, r1
 800d91a:	b921      	cbnz	r1, 800d926 <_realloc_r+0x16>
 800d91c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d920:	4611      	mov	r1, r2
 800d922:	f7ff bd93 	b.w	800d44c <_malloc_r>
 800d926:	b92a      	cbnz	r2, 800d934 <_realloc_r+0x24>
 800d928:	f7ff fd24 	bl	800d374 <_free_r>
 800d92c:	4625      	mov	r5, r4
 800d92e:	4628      	mov	r0, r5
 800d930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d934:	f000 fc5c 	bl	800e1f0 <_malloc_usable_size_r>
 800d938:	4284      	cmp	r4, r0
 800d93a:	4607      	mov	r7, r0
 800d93c:	d802      	bhi.n	800d944 <_realloc_r+0x34>
 800d93e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d942:	d812      	bhi.n	800d96a <_realloc_r+0x5a>
 800d944:	4621      	mov	r1, r4
 800d946:	4640      	mov	r0, r8
 800d948:	f7ff fd80 	bl	800d44c <_malloc_r>
 800d94c:	4605      	mov	r5, r0
 800d94e:	2800      	cmp	r0, #0
 800d950:	d0ed      	beq.n	800d92e <_realloc_r+0x1e>
 800d952:	42bc      	cmp	r4, r7
 800d954:	4622      	mov	r2, r4
 800d956:	4631      	mov	r1, r6
 800d958:	bf28      	it	cs
 800d95a:	463a      	movcs	r2, r7
 800d95c:	f7ff f824 	bl	800c9a8 <memcpy>
 800d960:	4631      	mov	r1, r6
 800d962:	4640      	mov	r0, r8
 800d964:	f7ff fd06 	bl	800d374 <_free_r>
 800d968:	e7e1      	b.n	800d92e <_realloc_r+0x1e>
 800d96a:	4635      	mov	r5, r6
 800d96c:	e7df      	b.n	800d92e <_realloc_r+0x1e>

0800d96e <__sfputc_r>:
 800d96e:	6893      	ldr	r3, [r2, #8]
 800d970:	3b01      	subs	r3, #1
 800d972:	2b00      	cmp	r3, #0
 800d974:	b410      	push	{r4}
 800d976:	6093      	str	r3, [r2, #8]
 800d978:	da08      	bge.n	800d98c <__sfputc_r+0x1e>
 800d97a:	6994      	ldr	r4, [r2, #24]
 800d97c:	42a3      	cmp	r3, r4
 800d97e:	db01      	blt.n	800d984 <__sfputc_r+0x16>
 800d980:	290a      	cmp	r1, #10
 800d982:	d103      	bne.n	800d98c <__sfputc_r+0x1e>
 800d984:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d988:	f000 b94a 	b.w	800dc20 <__swbuf_r>
 800d98c:	6813      	ldr	r3, [r2, #0]
 800d98e:	1c58      	adds	r0, r3, #1
 800d990:	6010      	str	r0, [r2, #0]
 800d992:	7019      	strb	r1, [r3, #0]
 800d994:	4608      	mov	r0, r1
 800d996:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d99a:	4770      	bx	lr

0800d99c <__sfputs_r>:
 800d99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d99e:	4606      	mov	r6, r0
 800d9a0:	460f      	mov	r7, r1
 800d9a2:	4614      	mov	r4, r2
 800d9a4:	18d5      	adds	r5, r2, r3
 800d9a6:	42ac      	cmp	r4, r5
 800d9a8:	d101      	bne.n	800d9ae <__sfputs_r+0x12>
 800d9aa:	2000      	movs	r0, #0
 800d9ac:	e007      	b.n	800d9be <__sfputs_r+0x22>
 800d9ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9b2:	463a      	mov	r2, r7
 800d9b4:	4630      	mov	r0, r6
 800d9b6:	f7ff ffda 	bl	800d96e <__sfputc_r>
 800d9ba:	1c43      	adds	r3, r0, #1
 800d9bc:	d1f3      	bne.n	800d9a6 <__sfputs_r+0xa>
 800d9be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d9c0 <_vfiprintf_r>:
 800d9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9c4:	460d      	mov	r5, r1
 800d9c6:	b09d      	sub	sp, #116	; 0x74
 800d9c8:	4614      	mov	r4, r2
 800d9ca:	4698      	mov	r8, r3
 800d9cc:	4606      	mov	r6, r0
 800d9ce:	b118      	cbz	r0, 800d9d8 <_vfiprintf_r+0x18>
 800d9d0:	6983      	ldr	r3, [r0, #24]
 800d9d2:	b90b      	cbnz	r3, 800d9d8 <_vfiprintf_r+0x18>
 800d9d4:	f000 fb06 	bl	800dfe4 <__sinit>
 800d9d8:	4b89      	ldr	r3, [pc, #548]	; (800dc00 <_vfiprintf_r+0x240>)
 800d9da:	429d      	cmp	r5, r3
 800d9dc:	d11b      	bne.n	800da16 <_vfiprintf_r+0x56>
 800d9de:	6875      	ldr	r5, [r6, #4]
 800d9e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d9e2:	07d9      	lsls	r1, r3, #31
 800d9e4:	d405      	bmi.n	800d9f2 <_vfiprintf_r+0x32>
 800d9e6:	89ab      	ldrh	r3, [r5, #12]
 800d9e8:	059a      	lsls	r2, r3, #22
 800d9ea:	d402      	bmi.n	800d9f2 <_vfiprintf_r+0x32>
 800d9ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d9ee:	f000 fb97 	bl	800e120 <__retarget_lock_acquire_recursive>
 800d9f2:	89ab      	ldrh	r3, [r5, #12]
 800d9f4:	071b      	lsls	r3, r3, #28
 800d9f6:	d501      	bpl.n	800d9fc <_vfiprintf_r+0x3c>
 800d9f8:	692b      	ldr	r3, [r5, #16]
 800d9fa:	b9eb      	cbnz	r3, 800da38 <_vfiprintf_r+0x78>
 800d9fc:	4629      	mov	r1, r5
 800d9fe:	4630      	mov	r0, r6
 800da00:	f000 f960 	bl	800dcc4 <__swsetup_r>
 800da04:	b1c0      	cbz	r0, 800da38 <_vfiprintf_r+0x78>
 800da06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da08:	07dc      	lsls	r4, r3, #31
 800da0a:	d50e      	bpl.n	800da2a <_vfiprintf_r+0x6a>
 800da0c:	f04f 30ff 	mov.w	r0, #4294967295
 800da10:	b01d      	add	sp, #116	; 0x74
 800da12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da16:	4b7b      	ldr	r3, [pc, #492]	; (800dc04 <_vfiprintf_r+0x244>)
 800da18:	429d      	cmp	r5, r3
 800da1a:	d101      	bne.n	800da20 <_vfiprintf_r+0x60>
 800da1c:	68b5      	ldr	r5, [r6, #8]
 800da1e:	e7df      	b.n	800d9e0 <_vfiprintf_r+0x20>
 800da20:	4b79      	ldr	r3, [pc, #484]	; (800dc08 <_vfiprintf_r+0x248>)
 800da22:	429d      	cmp	r5, r3
 800da24:	bf08      	it	eq
 800da26:	68f5      	ldreq	r5, [r6, #12]
 800da28:	e7da      	b.n	800d9e0 <_vfiprintf_r+0x20>
 800da2a:	89ab      	ldrh	r3, [r5, #12]
 800da2c:	0598      	lsls	r0, r3, #22
 800da2e:	d4ed      	bmi.n	800da0c <_vfiprintf_r+0x4c>
 800da30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da32:	f000 fb76 	bl	800e122 <__retarget_lock_release_recursive>
 800da36:	e7e9      	b.n	800da0c <_vfiprintf_r+0x4c>
 800da38:	2300      	movs	r3, #0
 800da3a:	9309      	str	r3, [sp, #36]	; 0x24
 800da3c:	2320      	movs	r3, #32
 800da3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da42:	f8cd 800c 	str.w	r8, [sp, #12]
 800da46:	2330      	movs	r3, #48	; 0x30
 800da48:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dc0c <_vfiprintf_r+0x24c>
 800da4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800da50:	f04f 0901 	mov.w	r9, #1
 800da54:	4623      	mov	r3, r4
 800da56:	469a      	mov	sl, r3
 800da58:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da5c:	b10a      	cbz	r2, 800da62 <_vfiprintf_r+0xa2>
 800da5e:	2a25      	cmp	r2, #37	; 0x25
 800da60:	d1f9      	bne.n	800da56 <_vfiprintf_r+0x96>
 800da62:	ebba 0b04 	subs.w	fp, sl, r4
 800da66:	d00b      	beq.n	800da80 <_vfiprintf_r+0xc0>
 800da68:	465b      	mov	r3, fp
 800da6a:	4622      	mov	r2, r4
 800da6c:	4629      	mov	r1, r5
 800da6e:	4630      	mov	r0, r6
 800da70:	f7ff ff94 	bl	800d99c <__sfputs_r>
 800da74:	3001      	adds	r0, #1
 800da76:	f000 80aa 	beq.w	800dbce <_vfiprintf_r+0x20e>
 800da7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da7c:	445a      	add	r2, fp
 800da7e:	9209      	str	r2, [sp, #36]	; 0x24
 800da80:	f89a 3000 	ldrb.w	r3, [sl]
 800da84:	2b00      	cmp	r3, #0
 800da86:	f000 80a2 	beq.w	800dbce <_vfiprintf_r+0x20e>
 800da8a:	2300      	movs	r3, #0
 800da8c:	f04f 32ff 	mov.w	r2, #4294967295
 800da90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da94:	f10a 0a01 	add.w	sl, sl, #1
 800da98:	9304      	str	r3, [sp, #16]
 800da9a:	9307      	str	r3, [sp, #28]
 800da9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800daa0:	931a      	str	r3, [sp, #104]	; 0x68
 800daa2:	4654      	mov	r4, sl
 800daa4:	2205      	movs	r2, #5
 800daa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800daaa:	4858      	ldr	r0, [pc, #352]	; (800dc0c <_vfiprintf_r+0x24c>)
 800daac:	f7f2 fb98 	bl	80001e0 <memchr>
 800dab0:	9a04      	ldr	r2, [sp, #16]
 800dab2:	b9d8      	cbnz	r0, 800daec <_vfiprintf_r+0x12c>
 800dab4:	06d1      	lsls	r1, r2, #27
 800dab6:	bf44      	itt	mi
 800dab8:	2320      	movmi	r3, #32
 800daba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dabe:	0713      	lsls	r3, r2, #28
 800dac0:	bf44      	itt	mi
 800dac2:	232b      	movmi	r3, #43	; 0x2b
 800dac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dac8:	f89a 3000 	ldrb.w	r3, [sl]
 800dacc:	2b2a      	cmp	r3, #42	; 0x2a
 800dace:	d015      	beq.n	800dafc <_vfiprintf_r+0x13c>
 800dad0:	9a07      	ldr	r2, [sp, #28]
 800dad2:	4654      	mov	r4, sl
 800dad4:	2000      	movs	r0, #0
 800dad6:	f04f 0c0a 	mov.w	ip, #10
 800dada:	4621      	mov	r1, r4
 800dadc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dae0:	3b30      	subs	r3, #48	; 0x30
 800dae2:	2b09      	cmp	r3, #9
 800dae4:	d94e      	bls.n	800db84 <_vfiprintf_r+0x1c4>
 800dae6:	b1b0      	cbz	r0, 800db16 <_vfiprintf_r+0x156>
 800dae8:	9207      	str	r2, [sp, #28]
 800daea:	e014      	b.n	800db16 <_vfiprintf_r+0x156>
 800daec:	eba0 0308 	sub.w	r3, r0, r8
 800daf0:	fa09 f303 	lsl.w	r3, r9, r3
 800daf4:	4313      	orrs	r3, r2
 800daf6:	9304      	str	r3, [sp, #16]
 800daf8:	46a2      	mov	sl, r4
 800dafa:	e7d2      	b.n	800daa2 <_vfiprintf_r+0xe2>
 800dafc:	9b03      	ldr	r3, [sp, #12]
 800dafe:	1d19      	adds	r1, r3, #4
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	9103      	str	r1, [sp, #12]
 800db04:	2b00      	cmp	r3, #0
 800db06:	bfbb      	ittet	lt
 800db08:	425b      	neglt	r3, r3
 800db0a:	f042 0202 	orrlt.w	r2, r2, #2
 800db0e:	9307      	strge	r3, [sp, #28]
 800db10:	9307      	strlt	r3, [sp, #28]
 800db12:	bfb8      	it	lt
 800db14:	9204      	strlt	r2, [sp, #16]
 800db16:	7823      	ldrb	r3, [r4, #0]
 800db18:	2b2e      	cmp	r3, #46	; 0x2e
 800db1a:	d10c      	bne.n	800db36 <_vfiprintf_r+0x176>
 800db1c:	7863      	ldrb	r3, [r4, #1]
 800db1e:	2b2a      	cmp	r3, #42	; 0x2a
 800db20:	d135      	bne.n	800db8e <_vfiprintf_r+0x1ce>
 800db22:	9b03      	ldr	r3, [sp, #12]
 800db24:	1d1a      	adds	r2, r3, #4
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	9203      	str	r2, [sp, #12]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	bfb8      	it	lt
 800db2e:	f04f 33ff 	movlt.w	r3, #4294967295
 800db32:	3402      	adds	r4, #2
 800db34:	9305      	str	r3, [sp, #20]
 800db36:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dc1c <_vfiprintf_r+0x25c>
 800db3a:	7821      	ldrb	r1, [r4, #0]
 800db3c:	2203      	movs	r2, #3
 800db3e:	4650      	mov	r0, sl
 800db40:	f7f2 fb4e 	bl	80001e0 <memchr>
 800db44:	b140      	cbz	r0, 800db58 <_vfiprintf_r+0x198>
 800db46:	2340      	movs	r3, #64	; 0x40
 800db48:	eba0 000a 	sub.w	r0, r0, sl
 800db4c:	fa03 f000 	lsl.w	r0, r3, r0
 800db50:	9b04      	ldr	r3, [sp, #16]
 800db52:	4303      	orrs	r3, r0
 800db54:	3401      	adds	r4, #1
 800db56:	9304      	str	r3, [sp, #16]
 800db58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db5c:	482c      	ldr	r0, [pc, #176]	; (800dc10 <_vfiprintf_r+0x250>)
 800db5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800db62:	2206      	movs	r2, #6
 800db64:	f7f2 fb3c 	bl	80001e0 <memchr>
 800db68:	2800      	cmp	r0, #0
 800db6a:	d03f      	beq.n	800dbec <_vfiprintf_r+0x22c>
 800db6c:	4b29      	ldr	r3, [pc, #164]	; (800dc14 <_vfiprintf_r+0x254>)
 800db6e:	bb1b      	cbnz	r3, 800dbb8 <_vfiprintf_r+0x1f8>
 800db70:	9b03      	ldr	r3, [sp, #12]
 800db72:	3307      	adds	r3, #7
 800db74:	f023 0307 	bic.w	r3, r3, #7
 800db78:	3308      	adds	r3, #8
 800db7a:	9303      	str	r3, [sp, #12]
 800db7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db7e:	443b      	add	r3, r7
 800db80:	9309      	str	r3, [sp, #36]	; 0x24
 800db82:	e767      	b.n	800da54 <_vfiprintf_r+0x94>
 800db84:	fb0c 3202 	mla	r2, ip, r2, r3
 800db88:	460c      	mov	r4, r1
 800db8a:	2001      	movs	r0, #1
 800db8c:	e7a5      	b.n	800dada <_vfiprintf_r+0x11a>
 800db8e:	2300      	movs	r3, #0
 800db90:	3401      	adds	r4, #1
 800db92:	9305      	str	r3, [sp, #20]
 800db94:	4619      	mov	r1, r3
 800db96:	f04f 0c0a 	mov.w	ip, #10
 800db9a:	4620      	mov	r0, r4
 800db9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dba0:	3a30      	subs	r2, #48	; 0x30
 800dba2:	2a09      	cmp	r2, #9
 800dba4:	d903      	bls.n	800dbae <_vfiprintf_r+0x1ee>
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d0c5      	beq.n	800db36 <_vfiprintf_r+0x176>
 800dbaa:	9105      	str	r1, [sp, #20]
 800dbac:	e7c3      	b.n	800db36 <_vfiprintf_r+0x176>
 800dbae:	fb0c 2101 	mla	r1, ip, r1, r2
 800dbb2:	4604      	mov	r4, r0
 800dbb4:	2301      	movs	r3, #1
 800dbb6:	e7f0      	b.n	800db9a <_vfiprintf_r+0x1da>
 800dbb8:	ab03      	add	r3, sp, #12
 800dbba:	9300      	str	r3, [sp, #0]
 800dbbc:	462a      	mov	r2, r5
 800dbbe:	4b16      	ldr	r3, [pc, #88]	; (800dc18 <_vfiprintf_r+0x258>)
 800dbc0:	a904      	add	r1, sp, #16
 800dbc2:	4630      	mov	r0, r6
 800dbc4:	f7fc f83a 	bl	8009c3c <_printf_float>
 800dbc8:	4607      	mov	r7, r0
 800dbca:	1c78      	adds	r0, r7, #1
 800dbcc:	d1d6      	bne.n	800db7c <_vfiprintf_r+0x1bc>
 800dbce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dbd0:	07d9      	lsls	r1, r3, #31
 800dbd2:	d405      	bmi.n	800dbe0 <_vfiprintf_r+0x220>
 800dbd4:	89ab      	ldrh	r3, [r5, #12]
 800dbd6:	059a      	lsls	r2, r3, #22
 800dbd8:	d402      	bmi.n	800dbe0 <_vfiprintf_r+0x220>
 800dbda:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dbdc:	f000 faa1 	bl	800e122 <__retarget_lock_release_recursive>
 800dbe0:	89ab      	ldrh	r3, [r5, #12]
 800dbe2:	065b      	lsls	r3, r3, #25
 800dbe4:	f53f af12 	bmi.w	800da0c <_vfiprintf_r+0x4c>
 800dbe8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dbea:	e711      	b.n	800da10 <_vfiprintf_r+0x50>
 800dbec:	ab03      	add	r3, sp, #12
 800dbee:	9300      	str	r3, [sp, #0]
 800dbf0:	462a      	mov	r2, r5
 800dbf2:	4b09      	ldr	r3, [pc, #36]	; (800dc18 <_vfiprintf_r+0x258>)
 800dbf4:	a904      	add	r1, sp, #16
 800dbf6:	4630      	mov	r0, r6
 800dbf8:	f7fc fac4 	bl	800a184 <_printf_i>
 800dbfc:	e7e4      	b.n	800dbc8 <_vfiprintf_r+0x208>
 800dbfe:	bf00      	nop
 800dc00:	0800f304 	.word	0x0800f304
 800dc04:	0800f324 	.word	0x0800f324
 800dc08:	0800f2e4 	.word	0x0800f2e4
 800dc0c:	0800f294 	.word	0x0800f294
 800dc10:	0800f29e 	.word	0x0800f29e
 800dc14:	08009c3d 	.word	0x08009c3d
 800dc18:	0800d99d 	.word	0x0800d99d
 800dc1c:	0800f29a 	.word	0x0800f29a

0800dc20 <__swbuf_r>:
 800dc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc22:	460e      	mov	r6, r1
 800dc24:	4614      	mov	r4, r2
 800dc26:	4605      	mov	r5, r0
 800dc28:	b118      	cbz	r0, 800dc32 <__swbuf_r+0x12>
 800dc2a:	6983      	ldr	r3, [r0, #24]
 800dc2c:	b90b      	cbnz	r3, 800dc32 <__swbuf_r+0x12>
 800dc2e:	f000 f9d9 	bl	800dfe4 <__sinit>
 800dc32:	4b21      	ldr	r3, [pc, #132]	; (800dcb8 <__swbuf_r+0x98>)
 800dc34:	429c      	cmp	r4, r3
 800dc36:	d12b      	bne.n	800dc90 <__swbuf_r+0x70>
 800dc38:	686c      	ldr	r4, [r5, #4]
 800dc3a:	69a3      	ldr	r3, [r4, #24]
 800dc3c:	60a3      	str	r3, [r4, #8]
 800dc3e:	89a3      	ldrh	r3, [r4, #12]
 800dc40:	071a      	lsls	r2, r3, #28
 800dc42:	d52f      	bpl.n	800dca4 <__swbuf_r+0x84>
 800dc44:	6923      	ldr	r3, [r4, #16]
 800dc46:	b36b      	cbz	r3, 800dca4 <__swbuf_r+0x84>
 800dc48:	6923      	ldr	r3, [r4, #16]
 800dc4a:	6820      	ldr	r0, [r4, #0]
 800dc4c:	1ac0      	subs	r0, r0, r3
 800dc4e:	6963      	ldr	r3, [r4, #20]
 800dc50:	b2f6      	uxtb	r6, r6
 800dc52:	4283      	cmp	r3, r0
 800dc54:	4637      	mov	r7, r6
 800dc56:	dc04      	bgt.n	800dc62 <__swbuf_r+0x42>
 800dc58:	4621      	mov	r1, r4
 800dc5a:	4628      	mov	r0, r5
 800dc5c:	f000 f92e 	bl	800debc <_fflush_r>
 800dc60:	bb30      	cbnz	r0, 800dcb0 <__swbuf_r+0x90>
 800dc62:	68a3      	ldr	r3, [r4, #8]
 800dc64:	3b01      	subs	r3, #1
 800dc66:	60a3      	str	r3, [r4, #8]
 800dc68:	6823      	ldr	r3, [r4, #0]
 800dc6a:	1c5a      	adds	r2, r3, #1
 800dc6c:	6022      	str	r2, [r4, #0]
 800dc6e:	701e      	strb	r6, [r3, #0]
 800dc70:	6963      	ldr	r3, [r4, #20]
 800dc72:	3001      	adds	r0, #1
 800dc74:	4283      	cmp	r3, r0
 800dc76:	d004      	beq.n	800dc82 <__swbuf_r+0x62>
 800dc78:	89a3      	ldrh	r3, [r4, #12]
 800dc7a:	07db      	lsls	r3, r3, #31
 800dc7c:	d506      	bpl.n	800dc8c <__swbuf_r+0x6c>
 800dc7e:	2e0a      	cmp	r6, #10
 800dc80:	d104      	bne.n	800dc8c <__swbuf_r+0x6c>
 800dc82:	4621      	mov	r1, r4
 800dc84:	4628      	mov	r0, r5
 800dc86:	f000 f919 	bl	800debc <_fflush_r>
 800dc8a:	b988      	cbnz	r0, 800dcb0 <__swbuf_r+0x90>
 800dc8c:	4638      	mov	r0, r7
 800dc8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc90:	4b0a      	ldr	r3, [pc, #40]	; (800dcbc <__swbuf_r+0x9c>)
 800dc92:	429c      	cmp	r4, r3
 800dc94:	d101      	bne.n	800dc9a <__swbuf_r+0x7a>
 800dc96:	68ac      	ldr	r4, [r5, #8]
 800dc98:	e7cf      	b.n	800dc3a <__swbuf_r+0x1a>
 800dc9a:	4b09      	ldr	r3, [pc, #36]	; (800dcc0 <__swbuf_r+0xa0>)
 800dc9c:	429c      	cmp	r4, r3
 800dc9e:	bf08      	it	eq
 800dca0:	68ec      	ldreq	r4, [r5, #12]
 800dca2:	e7ca      	b.n	800dc3a <__swbuf_r+0x1a>
 800dca4:	4621      	mov	r1, r4
 800dca6:	4628      	mov	r0, r5
 800dca8:	f000 f80c 	bl	800dcc4 <__swsetup_r>
 800dcac:	2800      	cmp	r0, #0
 800dcae:	d0cb      	beq.n	800dc48 <__swbuf_r+0x28>
 800dcb0:	f04f 37ff 	mov.w	r7, #4294967295
 800dcb4:	e7ea      	b.n	800dc8c <__swbuf_r+0x6c>
 800dcb6:	bf00      	nop
 800dcb8:	0800f304 	.word	0x0800f304
 800dcbc:	0800f324 	.word	0x0800f324
 800dcc0:	0800f2e4 	.word	0x0800f2e4

0800dcc4 <__swsetup_r>:
 800dcc4:	4b32      	ldr	r3, [pc, #200]	; (800dd90 <__swsetup_r+0xcc>)
 800dcc6:	b570      	push	{r4, r5, r6, lr}
 800dcc8:	681d      	ldr	r5, [r3, #0]
 800dcca:	4606      	mov	r6, r0
 800dccc:	460c      	mov	r4, r1
 800dcce:	b125      	cbz	r5, 800dcda <__swsetup_r+0x16>
 800dcd0:	69ab      	ldr	r3, [r5, #24]
 800dcd2:	b913      	cbnz	r3, 800dcda <__swsetup_r+0x16>
 800dcd4:	4628      	mov	r0, r5
 800dcd6:	f000 f985 	bl	800dfe4 <__sinit>
 800dcda:	4b2e      	ldr	r3, [pc, #184]	; (800dd94 <__swsetup_r+0xd0>)
 800dcdc:	429c      	cmp	r4, r3
 800dcde:	d10f      	bne.n	800dd00 <__swsetup_r+0x3c>
 800dce0:	686c      	ldr	r4, [r5, #4]
 800dce2:	89a3      	ldrh	r3, [r4, #12]
 800dce4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dce8:	0719      	lsls	r1, r3, #28
 800dcea:	d42c      	bmi.n	800dd46 <__swsetup_r+0x82>
 800dcec:	06dd      	lsls	r5, r3, #27
 800dcee:	d411      	bmi.n	800dd14 <__swsetup_r+0x50>
 800dcf0:	2309      	movs	r3, #9
 800dcf2:	6033      	str	r3, [r6, #0]
 800dcf4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dcf8:	81a3      	strh	r3, [r4, #12]
 800dcfa:	f04f 30ff 	mov.w	r0, #4294967295
 800dcfe:	e03e      	b.n	800dd7e <__swsetup_r+0xba>
 800dd00:	4b25      	ldr	r3, [pc, #148]	; (800dd98 <__swsetup_r+0xd4>)
 800dd02:	429c      	cmp	r4, r3
 800dd04:	d101      	bne.n	800dd0a <__swsetup_r+0x46>
 800dd06:	68ac      	ldr	r4, [r5, #8]
 800dd08:	e7eb      	b.n	800dce2 <__swsetup_r+0x1e>
 800dd0a:	4b24      	ldr	r3, [pc, #144]	; (800dd9c <__swsetup_r+0xd8>)
 800dd0c:	429c      	cmp	r4, r3
 800dd0e:	bf08      	it	eq
 800dd10:	68ec      	ldreq	r4, [r5, #12]
 800dd12:	e7e6      	b.n	800dce2 <__swsetup_r+0x1e>
 800dd14:	0758      	lsls	r0, r3, #29
 800dd16:	d512      	bpl.n	800dd3e <__swsetup_r+0x7a>
 800dd18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dd1a:	b141      	cbz	r1, 800dd2e <__swsetup_r+0x6a>
 800dd1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dd20:	4299      	cmp	r1, r3
 800dd22:	d002      	beq.n	800dd2a <__swsetup_r+0x66>
 800dd24:	4630      	mov	r0, r6
 800dd26:	f7ff fb25 	bl	800d374 <_free_r>
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	6363      	str	r3, [r4, #52]	; 0x34
 800dd2e:	89a3      	ldrh	r3, [r4, #12]
 800dd30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dd34:	81a3      	strh	r3, [r4, #12]
 800dd36:	2300      	movs	r3, #0
 800dd38:	6063      	str	r3, [r4, #4]
 800dd3a:	6923      	ldr	r3, [r4, #16]
 800dd3c:	6023      	str	r3, [r4, #0]
 800dd3e:	89a3      	ldrh	r3, [r4, #12]
 800dd40:	f043 0308 	orr.w	r3, r3, #8
 800dd44:	81a3      	strh	r3, [r4, #12]
 800dd46:	6923      	ldr	r3, [r4, #16]
 800dd48:	b94b      	cbnz	r3, 800dd5e <__swsetup_r+0x9a>
 800dd4a:	89a3      	ldrh	r3, [r4, #12]
 800dd4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dd50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd54:	d003      	beq.n	800dd5e <__swsetup_r+0x9a>
 800dd56:	4621      	mov	r1, r4
 800dd58:	4630      	mov	r0, r6
 800dd5a:	f000 fa09 	bl	800e170 <__smakebuf_r>
 800dd5e:	89a0      	ldrh	r0, [r4, #12]
 800dd60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dd64:	f010 0301 	ands.w	r3, r0, #1
 800dd68:	d00a      	beq.n	800dd80 <__swsetup_r+0xbc>
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	60a3      	str	r3, [r4, #8]
 800dd6e:	6963      	ldr	r3, [r4, #20]
 800dd70:	425b      	negs	r3, r3
 800dd72:	61a3      	str	r3, [r4, #24]
 800dd74:	6923      	ldr	r3, [r4, #16]
 800dd76:	b943      	cbnz	r3, 800dd8a <__swsetup_r+0xc6>
 800dd78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dd7c:	d1ba      	bne.n	800dcf4 <__swsetup_r+0x30>
 800dd7e:	bd70      	pop	{r4, r5, r6, pc}
 800dd80:	0781      	lsls	r1, r0, #30
 800dd82:	bf58      	it	pl
 800dd84:	6963      	ldrpl	r3, [r4, #20]
 800dd86:	60a3      	str	r3, [r4, #8]
 800dd88:	e7f4      	b.n	800dd74 <__swsetup_r+0xb0>
 800dd8a:	2000      	movs	r0, #0
 800dd8c:	e7f7      	b.n	800dd7e <__swsetup_r+0xba>
 800dd8e:	bf00      	nop
 800dd90:	2000028c 	.word	0x2000028c
 800dd94:	0800f304 	.word	0x0800f304
 800dd98:	0800f324 	.word	0x0800f324
 800dd9c:	0800f2e4 	.word	0x0800f2e4

0800dda0 <abort>:
 800dda0:	b508      	push	{r3, lr}
 800dda2:	2006      	movs	r0, #6
 800dda4:	f000 fa54 	bl	800e250 <raise>
 800dda8:	2001      	movs	r0, #1
 800ddaa:	f7f5 fb6b 	bl	8003484 <_exit>
	...

0800ddb0 <__sflush_r>:
 800ddb0:	898a      	ldrh	r2, [r1, #12]
 800ddb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddb6:	4605      	mov	r5, r0
 800ddb8:	0710      	lsls	r0, r2, #28
 800ddba:	460c      	mov	r4, r1
 800ddbc:	d458      	bmi.n	800de70 <__sflush_r+0xc0>
 800ddbe:	684b      	ldr	r3, [r1, #4]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	dc05      	bgt.n	800ddd0 <__sflush_r+0x20>
 800ddc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	dc02      	bgt.n	800ddd0 <__sflush_r+0x20>
 800ddca:	2000      	movs	r0, #0
 800ddcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ddd2:	2e00      	cmp	r6, #0
 800ddd4:	d0f9      	beq.n	800ddca <__sflush_r+0x1a>
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dddc:	682f      	ldr	r7, [r5, #0]
 800ddde:	602b      	str	r3, [r5, #0]
 800dde0:	d032      	beq.n	800de48 <__sflush_r+0x98>
 800dde2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dde4:	89a3      	ldrh	r3, [r4, #12]
 800dde6:	075a      	lsls	r2, r3, #29
 800dde8:	d505      	bpl.n	800ddf6 <__sflush_r+0x46>
 800ddea:	6863      	ldr	r3, [r4, #4]
 800ddec:	1ac0      	subs	r0, r0, r3
 800ddee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ddf0:	b10b      	cbz	r3, 800ddf6 <__sflush_r+0x46>
 800ddf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ddf4:	1ac0      	subs	r0, r0, r3
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	4602      	mov	r2, r0
 800ddfa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ddfc:	6a21      	ldr	r1, [r4, #32]
 800ddfe:	4628      	mov	r0, r5
 800de00:	47b0      	blx	r6
 800de02:	1c43      	adds	r3, r0, #1
 800de04:	89a3      	ldrh	r3, [r4, #12]
 800de06:	d106      	bne.n	800de16 <__sflush_r+0x66>
 800de08:	6829      	ldr	r1, [r5, #0]
 800de0a:	291d      	cmp	r1, #29
 800de0c:	d82c      	bhi.n	800de68 <__sflush_r+0xb8>
 800de0e:	4a2a      	ldr	r2, [pc, #168]	; (800deb8 <__sflush_r+0x108>)
 800de10:	40ca      	lsrs	r2, r1
 800de12:	07d6      	lsls	r6, r2, #31
 800de14:	d528      	bpl.n	800de68 <__sflush_r+0xb8>
 800de16:	2200      	movs	r2, #0
 800de18:	6062      	str	r2, [r4, #4]
 800de1a:	04d9      	lsls	r1, r3, #19
 800de1c:	6922      	ldr	r2, [r4, #16]
 800de1e:	6022      	str	r2, [r4, #0]
 800de20:	d504      	bpl.n	800de2c <__sflush_r+0x7c>
 800de22:	1c42      	adds	r2, r0, #1
 800de24:	d101      	bne.n	800de2a <__sflush_r+0x7a>
 800de26:	682b      	ldr	r3, [r5, #0]
 800de28:	b903      	cbnz	r3, 800de2c <__sflush_r+0x7c>
 800de2a:	6560      	str	r0, [r4, #84]	; 0x54
 800de2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de2e:	602f      	str	r7, [r5, #0]
 800de30:	2900      	cmp	r1, #0
 800de32:	d0ca      	beq.n	800ddca <__sflush_r+0x1a>
 800de34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de38:	4299      	cmp	r1, r3
 800de3a:	d002      	beq.n	800de42 <__sflush_r+0x92>
 800de3c:	4628      	mov	r0, r5
 800de3e:	f7ff fa99 	bl	800d374 <_free_r>
 800de42:	2000      	movs	r0, #0
 800de44:	6360      	str	r0, [r4, #52]	; 0x34
 800de46:	e7c1      	b.n	800ddcc <__sflush_r+0x1c>
 800de48:	6a21      	ldr	r1, [r4, #32]
 800de4a:	2301      	movs	r3, #1
 800de4c:	4628      	mov	r0, r5
 800de4e:	47b0      	blx	r6
 800de50:	1c41      	adds	r1, r0, #1
 800de52:	d1c7      	bne.n	800dde4 <__sflush_r+0x34>
 800de54:	682b      	ldr	r3, [r5, #0]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d0c4      	beq.n	800dde4 <__sflush_r+0x34>
 800de5a:	2b1d      	cmp	r3, #29
 800de5c:	d001      	beq.n	800de62 <__sflush_r+0xb2>
 800de5e:	2b16      	cmp	r3, #22
 800de60:	d101      	bne.n	800de66 <__sflush_r+0xb6>
 800de62:	602f      	str	r7, [r5, #0]
 800de64:	e7b1      	b.n	800ddca <__sflush_r+0x1a>
 800de66:	89a3      	ldrh	r3, [r4, #12]
 800de68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de6c:	81a3      	strh	r3, [r4, #12]
 800de6e:	e7ad      	b.n	800ddcc <__sflush_r+0x1c>
 800de70:	690f      	ldr	r7, [r1, #16]
 800de72:	2f00      	cmp	r7, #0
 800de74:	d0a9      	beq.n	800ddca <__sflush_r+0x1a>
 800de76:	0793      	lsls	r3, r2, #30
 800de78:	680e      	ldr	r6, [r1, #0]
 800de7a:	bf08      	it	eq
 800de7c:	694b      	ldreq	r3, [r1, #20]
 800de7e:	600f      	str	r7, [r1, #0]
 800de80:	bf18      	it	ne
 800de82:	2300      	movne	r3, #0
 800de84:	eba6 0807 	sub.w	r8, r6, r7
 800de88:	608b      	str	r3, [r1, #8]
 800de8a:	f1b8 0f00 	cmp.w	r8, #0
 800de8e:	dd9c      	ble.n	800ddca <__sflush_r+0x1a>
 800de90:	6a21      	ldr	r1, [r4, #32]
 800de92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800de94:	4643      	mov	r3, r8
 800de96:	463a      	mov	r2, r7
 800de98:	4628      	mov	r0, r5
 800de9a:	47b0      	blx	r6
 800de9c:	2800      	cmp	r0, #0
 800de9e:	dc06      	bgt.n	800deae <__sflush_r+0xfe>
 800dea0:	89a3      	ldrh	r3, [r4, #12]
 800dea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dea6:	81a3      	strh	r3, [r4, #12]
 800dea8:	f04f 30ff 	mov.w	r0, #4294967295
 800deac:	e78e      	b.n	800ddcc <__sflush_r+0x1c>
 800deae:	4407      	add	r7, r0
 800deb0:	eba8 0800 	sub.w	r8, r8, r0
 800deb4:	e7e9      	b.n	800de8a <__sflush_r+0xda>
 800deb6:	bf00      	nop
 800deb8:	20400001 	.word	0x20400001

0800debc <_fflush_r>:
 800debc:	b538      	push	{r3, r4, r5, lr}
 800debe:	690b      	ldr	r3, [r1, #16]
 800dec0:	4605      	mov	r5, r0
 800dec2:	460c      	mov	r4, r1
 800dec4:	b913      	cbnz	r3, 800decc <_fflush_r+0x10>
 800dec6:	2500      	movs	r5, #0
 800dec8:	4628      	mov	r0, r5
 800deca:	bd38      	pop	{r3, r4, r5, pc}
 800decc:	b118      	cbz	r0, 800ded6 <_fflush_r+0x1a>
 800dece:	6983      	ldr	r3, [r0, #24]
 800ded0:	b90b      	cbnz	r3, 800ded6 <_fflush_r+0x1a>
 800ded2:	f000 f887 	bl	800dfe4 <__sinit>
 800ded6:	4b14      	ldr	r3, [pc, #80]	; (800df28 <_fflush_r+0x6c>)
 800ded8:	429c      	cmp	r4, r3
 800deda:	d11b      	bne.n	800df14 <_fflush_r+0x58>
 800dedc:	686c      	ldr	r4, [r5, #4]
 800dede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d0ef      	beq.n	800dec6 <_fflush_r+0xa>
 800dee6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dee8:	07d0      	lsls	r0, r2, #31
 800deea:	d404      	bmi.n	800def6 <_fflush_r+0x3a>
 800deec:	0599      	lsls	r1, r3, #22
 800deee:	d402      	bmi.n	800def6 <_fflush_r+0x3a>
 800def0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800def2:	f000 f915 	bl	800e120 <__retarget_lock_acquire_recursive>
 800def6:	4628      	mov	r0, r5
 800def8:	4621      	mov	r1, r4
 800defa:	f7ff ff59 	bl	800ddb0 <__sflush_r>
 800defe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800df00:	07da      	lsls	r2, r3, #31
 800df02:	4605      	mov	r5, r0
 800df04:	d4e0      	bmi.n	800dec8 <_fflush_r+0xc>
 800df06:	89a3      	ldrh	r3, [r4, #12]
 800df08:	059b      	lsls	r3, r3, #22
 800df0a:	d4dd      	bmi.n	800dec8 <_fflush_r+0xc>
 800df0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df0e:	f000 f908 	bl	800e122 <__retarget_lock_release_recursive>
 800df12:	e7d9      	b.n	800dec8 <_fflush_r+0xc>
 800df14:	4b05      	ldr	r3, [pc, #20]	; (800df2c <_fflush_r+0x70>)
 800df16:	429c      	cmp	r4, r3
 800df18:	d101      	bne.n	800df1e <_fflush_r+0x62>
 800df1a:	68ac      	ldr	r4, [r5, #8]
 800df1c:	e7df      	b.n	800dede <_fflush_r+0x22>
 800df1e:	4b04      	ldr	r3, [pc, #16]	; (800df30 <_fflush_r+0x74>)
 800df20:	429c      	cmp	r4, r3
 800df22:	bf08      	it	eq
 800df24:	68ec      	ldreq	r4, [r5, #12]
 800df26:	e7da      	b.n	800dede <_fflush_r+0x22>
 800df28:	0800f304 	.word	0x0800f304
 800df2c:	0800f324 	.word	0x0800f324
 800df30:	0800f2e4 	.word	0x0800f2e4

0800df34 <std>:
 800df34:	2300      	movs	r3, #0
 800df36:	b510      	push	{r4, lr}
 800df38:	4604      	mov	r4, r0
 800df3a:	e9c0 3300 	strd	r3, r3, [r0]
 800df3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800df42:	6083      	str	r3, [r0, #8]
 800df44:	8181      	strh	r1, [r0, #12]
 800df46:	6643      	str	r3, [r0, #100]	; 0x64
 800df48:	81c2      	strh	r2, [r0, #14]
 800df4a:	6183      	str	r3, [r0, #24]
 800df4c:	4619      	mov	r1, r3
 800df4e:	2208      	movs	r2, #8
 800df50:	305c      	adds	r0, #92	; 0x5c
 800df52:	f7fb fdcb 	bl	8009aec <memset>
 800df56:	4b05      	ldr	r3, [pc, #20]	; (800df6c <std+0x38>)
 800df58:	6263      	str	r3, [r4, #36]	; 0x24
 800df5a:	4b05      	ldr	r3, [pc, #20]	; (800df70 <std+0x3c>)
 800df5c:	62a3      	str	r3, [r4, #40]	; 0x28
 800df5e:	4b05      	ldr	r3, [pc, #20]	; (800df74 <std+0x40>)
 800df60:	62e3      	str	r3, [r4, #44]	; 0x2c
 800df62:	4b05      	ldr	r3, [pc, #20]	; (800df78 <std+0x44>)
 800df64:	6224      	str	r4, [r4, #32]
 800df66:	6323      	str	r3, [r4, #48]	; 0x30
 800df68:	bd10      	pop	{r4, pc}
 800df6a:	bf00      	nop
 800df6c:	0800e289 	.word	0x0800e289
 800df70:	0800e2ab 	.word	0x0800e2ab
 800df74:	0800e2e3 	.word	0x0800e2e3
 800df78:	0800e307 	.word	0x0800e307

0800df7c <_cleanup_r>:
 800df7c:	4901      	ldr	r1, [pc, #4]	; (800df84 <_cleanup_r+0x8>)
 800df7e:	f000 b8af 	b.w	800e0e0 <_fwalk_reent>
 800df82:	bf00      	nop
 800df84:	0800debd 	.word	0x0800debd

0800df88 <__sfmoreglue>:
 800df88:	b570      	push	{r4, r5, r6, lr}
 800df8a:	2268      	movs	r2, #104	; 0x68
 800df8c:	1e4d      	subs	r5, r1, #1
 800df8e:	4355      	muls	r5, r2
 800df90:	460e      	mov	r6, r1
 800df92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800df96:	f7ff fa59 	bl	800d44c <_malloc_r>
 800df9a:	4604      	mov	r4, r0
 800df9c:	b140      	cbz	r0, 800dfb0 <__sfmoreglue+0x28>
 800df9e:	2100      	movs	r1, #0
 800dfa0:	e9c0 1600 	strd	r1, r6, [r0]
 800dfa4:	300c      	adds	r0, #12
 800dfa6:	60a0      	str	r0, [r4, #8]
 800dfa8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dfac:	f7fb fd9e 	bl	8009aec <memset>
 800dfb0:	4620      	mov	r0, r4
 800dfb2:	bd70      	pop	{r4, r5, r6, pc}

0800dfb4 <__sfp_lock_acquire>:
 800dfb4:	4801      	ldr	r0, [pc, #4]	; (800dfbc <__sfp_lock_acquire+0x8>)
 800dfb6:	f000 b8b3 	b.w	800e120 <__retarget_lock_acquire_recursive>
 800dfba:	bf00      	nop
 800dfbc:	20000be5 	.word	0x20000be5

0800dfc0 <__sfp_lock_release>:
 800dfc0:	4801      	ldr	r0, [pc, #4]	; (800dfc8 <__sfp_lock_release+0x8>)
 800dfc2:	f000 b8ae 	b.w	800e122 <__retarget_lock_release_recursive>
 800dfc6:	bf00      	nop
 800dfc8:	20000be5 	.word	0x20000be5

0800dfcc <__sinit_lock_acquire>:
 800dfcc:	4801      	ldr	r0, [pc, #4]	; (800dfd4 <__sinit_lock_acquire+0x8>)
 800dfce:	f000 b8a7 	b.w	800e120 <__retarget_lock_acquire_recursive>
 800dfd2:	bf00      	nop
 800dfd4:	20000be6 	.word	0x20000be6

0800dfd8 <__sinit_lock_release>:
 800dfd8:	4801      	ldr	r0, [pc, #4]	; (800dfe0 <__sinit_lock_release+0x8>)
 800dfda:	f000 b8a2 	b.w	800e122 <__retarget_lock_release_recursive>
 800dfde:	bf00      	nop
 800dfe0:	20000be6 	.word	0x20000be6

0800dfe4 <__sinit>:
 800dfe4:	b510      	push	{r4, lr}
 800dfe6:	4604      	mov	r4, r0
 800dfe8:	f7ff fff0 	bl	800dfcc <__sinit_lock_acquire>
 800dfec:	69a3      	ldr	r3, [r4, #24]
 800dfee:	b11b      	cbz	r3, 800dff8 <__sinit+0x14>
 800dff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dff4:	f7ff bff0 	b.w	800dfd8 <__sinit_lock_release>
 800dff8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800dffc:	6523      	str	r3, [r4, #80]	; 0x50
 800dffe:	4b13      	ldr	r3, [pc, #76]	; (800e04c <__sinit+0x68>)
 800e000:	4a13      	ldr	r2, [pc, #76]	; (800e050 <__sinit+0x6c>)
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	62a2      	str	r2, [r4, #40]	; 0x28
 800e006:	42a3      	cmp	r3, r4
 800e008:	bf04      	itt	eq
 800e00a:	2301      	moveq	r3, #1
 800e00c:	61a3      	streq	r3, [r4, #24]
 800e00e:	4620      	mov	r0, r4
 800e010:	f000 f820 	bl	800e054 <__sfp>
 800e014:	6060      	str	r0, [r4, #4]
 800e016:	4620      	mov	r0, r4
 800e018:	f000 f81c 	bl	800e054 <__sfp>
 800e01c:	60a0      	str	r0, [r4, #8]
 800e01e:	4620      	mov	r0, r4
 800e020:	f000 f818 	bl	800e054 <__sfp>
 800e024:	2200      	movs	r2, #0
 800e026:	60e0      	str	r0, [r4, #12]
 800e028:	2104      	movs	r1, #4
 800e02a:	6860      	ldr	r0, [r4, #4]
 800e02c:	f7ff ff82 	bl	800df34 <std>
 800e030:	68a0      	ldr	r0, [r4, #8]
 800e032:	2201      	movs	r2, #1
 800e034:	2109      	movs	r1, #9
 800e036:	f7ff ff7d 	bl	800df34 <std>
 800e03a:	68e0      	ldr	r0, [r4, #12]
 800e03c:	2202      	movs	r2, #2
 800e03e:	2112      	movs	r1, #18
 800e040:	f7ff ff78 	bl	800df34 <std>
 800e044:	2301      	movs	r3, #1
 800e046:	61a3      	str	r3, [r4, #24]
 800e048:	e7d2      	b.n	800dff0 <__sinit+0xc>
 800e04a:	bf00      	nop
 800e04c:	0800eea0 	.word	0x0800eea0
 800e050:	0800df7d 	.word	0x0800df7d

0800e054 <__sfp>:
 800e054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e056:	4607      	mov	r7, r0
 800e058:	f7ff ffac 	bl	800dfb4 <__sfp_lock_acquire>
 800e05c:	4b1e      	ldr	r3, [pc, #120]	; (800e0d8 <__sfp+0x84>)
 800e05e:	681e      	ldr	r6, [r3, #0]
 800e060:	69b3      	ldr	r3, [r6, #24]
 800e062:	b913      	cbnz	r3, 800e06a <__sfp+0x16>
 800e064:	4630      	mov	r0, r6
 800e066:	f7ff ffbd 	bl	800dfe4 <__sinit>
 800e06a:	3648      	adds	r6, #72	; 0x48
 800e06c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e070:	3b01      	subs	r3, #1
 800e072:	d503      	bpl.n	800e07c <__sfp+0x28>
 800e074:	6833      	ldr	r3, [r6, #0]
 800e076:	b30b      	cbz	r3, 800e0bc <__sfp+0x68>
 800e078:	6836      	ldr	r6, [r6, #0]
 800e07a:	e7f7      	b.n	800e06c <__sfp+0x18>
 800e07c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e080:	b9d5      	cbnz	r5, 800e0b8 <__sfp+0x64>
 800e082:	4b16      	ldr	r3, [pc, #88]	; (800e0dc <__sfp+0x88>)
 800e084:	60e3      	str	r3, [r4, #12]
 800e086:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e08a:	6665      	str	r5, [r4, #100]	; 0x64
 800e08c:	f000 f847 	bl	800e11e <__retarget_lock_init_recursive>
 800e090:	f7ff ff96 	bl	800dfc0 <__sfp_lock_release>
 800e094:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e098:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e09c:	6025      	str	r5, [r4, #0]
 800e09e:	61a5      	str	r5, [r4, #24]
 800e0a0:	2208      	movs	r2, #8
 800e0a2:	4629      	mov	r1, r5
 800e0a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e0a8:	f7fb fd20 	bl	8009aec <memset>
 800e0ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e0b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e0b4:	4620      	mov	r0, r4
 800e0b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0b8:	3468      	adds	r4, #104	; 0x68
 800e0ba:	e7d9      	b.n	800e070 <__sfp+0x1c>
 800e0bc:	2104      	movs	r1, #4
 800e0be:	4638      	mov	r0, r7
 800e0c0:	f7ff ff62 	bl	800df88 <__sfmoreglue>
 800e0c4:	4604      	mov	r4, r0
 800e0c6:	6030      	str	r0, [r6, #0]
 800e0c8:	2800      	cmp	r0, #0
 800e0ca:	d1d5      	bne.n	800e078 <__sfp+0x24>
 800e0cc:	f7ff ff78 	bl	800dfc0 <__sfp_lock_release>
 800e0d0:	230c      	movs	r3, #12
 800e0d2:	603b      	str	r3, [r7, #0]
 800e0d4:	e7ee      	b.n	800e0b4 <__sfp+0x60>
 800e0d6:	bf00      	nop
 800e0d8:	0800eea0 	.word	0x0800eea0
 800e0dc:	ffff0001 	.word	0xffff0001

0800e0e0 <_fwalk_reent>:
 800e0e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0e4:	4606      	mov	r6, r0
 800e0e6:	4688      	mov	r8, r1
 800e0e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e0ec:	2700      	movs	r7, #0
 800e0ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e0f2:	f1b9 0901 	subs.w	r9, r9, #1
 800e0f6:	d505      	bpl.n	800e104 <_fwalk_reent+0x24>
 800e0f8:	6824      	ldr	r4, [r4, #0]
 800e0fa:	2c00      	cmp	r4, #0
 800e0fc:	d1f7      	bne.n	800e0ee <_fwalk_reent+0xe>
 800e0fe:	4638      	mov	r0, r7
 800e100:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e104:	89ab      	ldrh	r3, [r5, #12]
 800e106:	2b01      	cmp	r3, #1
 800e108:	d907      	bls.n	800e11a <_fwalk_reent+0x3a>
 800e10a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e10e:	3301      	adds	r3, #1
 800e110:	d003      	beq.n	800e11a <_fwalk_reent+0x3a>
 800e112:	4629      	mov	r1, r5
 800e114:	4630      	mov	r0, r6
 800e116:	47c0      	blx	r8
 800e118:	4307      	orrs	r7, r0
 800e11a:	3568      	adds	r5, #104	; 0x68
 800e11c:	e7e9      	b.n	800e0f2 <_fwalk_reent+0x12>

0800e11e <__retarget_lock_init_recursive>:
 800e11e:	4770      	bx	lr

0800e120 <__retarget_lock_acquire_recursive>:
 800e120:	4770      	bx	lr

0800e122 <__retarget_lock_release_recursive>:
 800e122:	4770      	bx	lr

0800e124 <__swhatbuf_r>:
 800e124:	b570      	push	{r4, r5, r6, lr}
 800e126:	460e      	mov	r6, r1
 800e128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e12c:	2900      	cmp	r1, #0
 800e12e:	b096      	sub	sp, #88	; 0x58
 800e130:	4614      	mov	r4, r2
 800e132:	461d      	mov	r5, r3
 800e134:	da08      	bge.n	800e148 <__swhatbuf_r+0x24>
 800e136:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e13a:	2200      	movs	r2, #0
 800e13c:	602a      	str	r2, [r5, #0]
 800e13e:	061a      	lsls	r2, r3, #24
 800e140:	d410      	bmi.n	800e164 <__swhatbuf_r+0x40>
 800e142:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e146:	e00e      	b.n	800e166 <__swhatbuf_r+0x42>
 800e148:	466a      	mov	r2, sp
 800e14a:	f000 f903 	bl	800e354 <_fstat_r>
 800e14e:	2800      	cmp	r0, #0
 800e150:	dbf1      	blt.n	800e136 <__swhatbuf_r+0x12>
 800e152:	9a01      	ldr	r2, [sp, #4]
 800e154:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e158:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e15c:	425a      	negs	r2, r3
 800e15e:	415a      	adcs	r2, r3
 800e160:	602a      	str	r2, [r5, #0]
 800e162:	e7ee      	b.n	800e142 <__swhatbuf_r+0x1e>
 800e164:	2340      	movs	r3, #64	; 0x40
 800e166:	2000      	movs	r0, #0
 800e168:	6023      	str	r3, [r4, #0]
 800e16a:	b016      	add	sp, #88	; 0x58
 800e16c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e170 <__smakebuf_r>:
 800e170:	898b      	ldrh	r3, [r1, #12]
 800e172:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e174:	079d      	lsls	r5, r3, #30
 800e176:	4606      	mov	r6, r0
 800e178:	460c      	mov	r4, r1
 800e17a:	d507      	bpl.n	800e18c <__smakebuf_r+0x1c>
 800e17c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e180:	6023      	str	r3, [r4, #0]
 800e182:	6123      	str	r3, [r4, #16]
 800e184:	2301      	movs	r3, #1
 800e186:	6163      	str	r3, [r4, #20]
 800e188:	b002      	add	sp, #8
 800e18a:	bd70      	pop	{r4, r5, r6, pc}
 800e18c:	ab01      	add	r3, sp, #4
 800e18e:	466a      	mov	r2, sp
 800e190:	f7ff ffc8 	bl	800e124 <__swhatbuf_r>
 800e194:	9900      	ldr	r1, [sp, #0]
 800e196:	4605      	mov	r5, r0
 800e198:	4630      	mov	r0, r6
 800e19a:	f7ff f957 	bl	800d44c <_malloc_r>
 800e19e:	b948      	cbnz	r0, 800e1b4 <__smakebuf_r+0x44>
 800e1a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1a4:	059a      	lsls	r2, r3, #22
 800e1a6:	d4ef      	bmi.n	800e188 <__smakebuf_r+0x18>
 800e1a8:	f023 0303 	bic.w	r3, r3, #3
 800e1ac:	f043 0302 	orr.w	r3, r3, #2
 800e1b0:	81a3      	strh	r3, [r4, #12]
 800e1b2:	e7e3      	b.n	800e17c <__smakebuf_r+0xc>
 800e1b4:	4b0d      	ldr	r3, [pc, #52]	; (800e1ec <__smakebuf_r+0x7c>)
 800e1b6:	62b3      	str	r3, [r6, #40]	; 0x28
 800e1b8:	89a3      	ldrh	r3, [r4, #12]
 800e1ba:	6020      	str	r0, [r4, #0]
 800e1bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1c0:	81a3      	strh	r3, [r4, #12]
 800e1c2:	9b00      	ldr	r3, [sp, #0]
 800e1c4:	6163      	str	r3, [r4, #20]
 800e1c6:	9b01      	ldr	r3, [sp, #4]
 800e1c8:	6120      	str	r0, [r4, #16]
 800e1ca:	b15b      	cbz	r3, 800e1e4 <__smakebuf_r+0x74>
 800e1cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e1d0:	4630      	mov	r0, r6
 800e1d2:	f000 f8d1 	bl	800e378 <_isatty_r>
 800e1d6:	b128      	cbz	r0, 800e1e4 <__smakebuf_r+0x74>
 800e1d8:	89a3      	ldrh	r3, [r4, #12]
 800e1da:	f023 0303 	bic.w	r3, r3, #3
 800e1de:	f043 0301 	orr.w	r3, r3, #1
 800e1e2:	81a3      	strh	r3, [r4, #12]
 800e1e4:	89a0      	ldrh	r0, [r4, #12]
 800e1e6:	4305      	orrs	r5, r0
 800e1e8:	81a5      	strh	r5, [r4, #12]
 800e1ea:	e7cd      	b.n	800e188 <__smakebuf_r+0x18>
 800e1ec:	0800df7d 	.word	0x0800df7d

0800e1f0 <_malloc_usable_size_r>:
 800e1f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e1f4:	1f18      	subs	r0, r3, #4
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	bfbc      	itt	lt
 800e1fa:	580b      	ldrlt	r3, [r1, r0]
 800e1fc:	18c0      	addlt	r0, r0, r3
 800e1fe:	4770      	bx	lr

0800e200 <_raise_r>:
 800e200:	291f      	cmp	r1, #31
 800e202:	b538      	push	{r3, r4, r5, lr}
 800e204:	4604      	mov	r4, r0
 800e206:	460d      	mov	r5, r1
 800e208:	d904      	bls.n	800e214 <_raise_r+0x14>
 800e20a:	2316      	movs	r3, #22
 800e20c:	6003      	str	r3, [r0, #0]
 800e20e:	f04f 30ff 	mov.w	r0, #4294967295
 800e212:	bd38      	pop	{r3, r4, r5, pc}
 800e214:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e216:	b112      	cbz	r2, 800e21e <_raise_r+0x1e>
 800e218:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e21c:	b94b      	cbnz	r3, 800e232 <_raise_r+0x32>
 800e21e:	4620      	mov	r0, r4
 800e220:	f000 f830 	bl	800e284 <_getpid_r>
 800e224:	462a      	mov	r2, r5
 800e226:	4601      	mov	r1, r0
 800e228:	4620      	mov	r0, r4
 800e22a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e22e:	f000 b817 	b.w	800e260 <_kill_r>
 800e232:	2b01      	cmp	r3, #1
 800e234:	d00a      	beq.n	800e24c <_raise_r+0x4c>
 800e236:	1c59      	adds	r1, r3, #1
 800e238:	d103      	bne.n	800e242 <_raise_r+0x42>
 800e23a:	2316      	movs	r3, #22
 800e23c:	6003      	str	r3, [r0, #0]
 800e23e:	2001      	movs	r0, #1
 800e240:	e7e7      	b.n	800e212 <_raise_r+0x12>
 800e242:	2400      	movs	r4, #0
 800e244:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e248:	4628      	mov	r0, r5
 800e24a:	4798      	blx	r3
 800e24c:	2000      	movs	r0, #0
 800e24e:	e7e0      	b.n	800e212 <_raise_r+0x12>

0800e250 <raise>:
 800e250:	4b02      	ldr	r3, [pc, #8]	; (800e25c <raise+0xc>)
 800e252:	4601      	mov	r1, r0
 800e254:	6818      	ldr	r0, [r3, #0]
 800e256:	f7ff bfd3 	b.w	800e200 <_raise_r>
 800e25a:	bf00      	nop
 800e25c:	2000028c 	.word	0x2000028c

0800e260 <_kill_r>:
 800e260:	b538      	push	{r3, r4, r5, lr}
 800e262:	4d07      	ldr	r5, [pc, #28]	; (800e280 <_kill_r+0x20>)
 800e264:	2300      	movs	r3, #0
 800e266:	4604      	mov	r4, r0
 800e268:	4608      	mov	r0, r1
 800e26a:	4611      	mov	r1, r2
 800e26c:	602b      	str	r3, [r5, #0]
 800e26e:	f7f5 f8f9 	bl	8003464 <_kill>
 800e272:	1c43      	adds	r3, r0, #1
 800e274:	d102      	bne.n	800e27c <_kill_r+0x1c>
 800e276:	682b      	ldr	r3, [r5, #0]
 800e278:	b103      	cbz	r3, 800e27c <_kill_r+0x1c>
 800e27a:	6023      	str	r3, [r4, #0]
 800e27c:	bd38      	pop	{r3, r4, r5, pc}
 800e27e:	bf00      	nop
 800e280:	20000be0 	.word	0x20000be0

0800e284 <_getpid_r>:
 800e284:	f7f5 b8e6 	b.w	8003454 <_getpid>

0800e288 <__sread>:
 800e288:	b510      	push	{r4, lr}
 800e28a:	460c      	mov	r4, r1
 800e28c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e290:	f000 f894 	bl	800e3bc <_read_r>
 800e294:	2800      	cmp	r0, #0
 800e296:	bfab      	itete	ge
 800e298:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e29a:	89a3      	ldrhlt	r3, [r4, #12]
 800e29c:	181b      	addge	r3, r3, r0
 800e29e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e2a2:	bfac      	ite	ge
 800e2a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800e2a6:	81a3      	strhlt	r3, [r4, #12]
 800e2a8:	bd10      	pop	{r4, pc}

0800e2aa <__swrite>:
 800e2aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2ae:	461f      	mov	r7, r3
 800e2b0:	898b      	ldrh	r3, [r1, #12]
 800e2b2:	05db      	lsls	r3, r3, #23
 800e2b4:	4605      	mov	r5, r0
 800e2b6:	460c      	mov	r4, r1
 800e2b8:	4616      	mov	r6, r2
 800e2ba:	d505      	bpl.n	800e2c8 <__swrite+0x1e>
 800e2bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2c0:	2302      	movs	r3, #2
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	f000 f868 	bl	800e398 <_lseek_r>
 800e2c8:	89a3      	ldrh	r3, [r4, #12]
 800e2ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e2ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e2d2:	81a3      	strh	r3, [r4, #12]
 800e2d4:	4632      	mov	r2, r6
 800e2d6:	463b      	mov	r3, r7
 800e2d8:	4628      	mov	r0, r5
 800e2da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2de:	f000 b817 	b.w	800e310 <_write_r>

0800e2e2 <__sseek>:
 800e2e2:	b510      	push	{r4, lr}
 800e2e4:	460c      	mov	r4, r1
 800e2e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2ea:	f000 f855 	bl	800e398 <_lseek_r>
 800e2ee:	1c43      	adds	r3, r0, #1
 800e2f0:	89a3      	ldrh	r3, [r4, #12]
 800e2f2:	bf15      	itete	ne
 800e2f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800e2f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e2fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e2fe:	81a3      	strheq	r3, [r4, #12]
 800e300:	bf18      	it	ne
 800e302:	81a3      	strhne	r3, [r4, #12]
 800e304:	bd10      	pop	{r4, pc}

0800e306 <__sclose>:
 800e306:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e30a:	f000 b813 	b.w	800e334 <_close_r>
	...

0800e310 <_write_r>:
 800e310:	b538      	push	{r3, r4, r5, lr}
 800e312:	4d07      	ldr	r5, [pc, #28]	; (800e330 <_write_r+0x20>)
 800e314:	4604      	mov	r4, r0
 800e316:	4608      	mov	r0, r1
 800e318:	4611      	mov	r1, r2
 800e31a:	2200      	movs	r2, #0
 800e31c:	602a      	str	r2, [r5, #0]
 800e31e:	461a      	mov	r2, r3
 800e320:	f7f5 f8d7 	bl	80034d2 <_write>
 800e324:	1c43      	adds	r3, r0, #1
 800e326:	d102      	bne.n	800e32e <_write_r+0x1e>
 800e328:	682b      	ldr	r3, [r5, #0]
 800e32a:	b103      	cbz	r3, 800e32e <_write_r+0x1e>
 800e32c:	6023      	str	r3, [r4, #0]
 800e32e:	bd38      	pop	{r3, r4, r5, pc}
 800e330:	20000be0 	.word	0x20000be0

0800e334 <_close_r>:
 800e334:	b538      	push	{r3, r4, r5, lr}
 800e336:	4d06      	ldr	r5, [pc, #24]	; (800e350 <_close_r+0x1c>)
 800e338:	2300      	movs	r3, #0
 800e33a:	4604      	mov	r4, r0
 800e33c:	4608      	mov	r0, r1
 800e33e:	602b      	str	r3, [r5, #0]
 800e340:	f7f5 f8e3 	bl	800350a <_close>
 800e344:	1c43      	adds	r3, r0, #1
 800e346:	d102      	bne.n	800e34e <_close_r+0x1a>
 800e348:	682b      	ldr	r3, [r5, #0]
 800e34a:	b103      	cbz	r3, 800e34e <_close_r+0x1a>
 800e34c:	6023      	str	r3, [r4, #0]
 800e34e:	bd38      	pop	{r3, r4, r5, pc}
 800e350:	20000be0 	.word	0x20000be0

0800e354 <_fstat_r>:
 800e354:	b538      	push	{r3, r4, r5, lr}
 800e356:	4d07      	ldr	r5, [pc, #28]	; (800e374 <_fstat_r+0x20>)
 800e358:	2300      	movs	r3, #0
 800e35a:	4604      	mov	r4, r0
 800e35c:	4608      	mov	r0, r1
 800e35e:	4611      	mov	r1, r2
 800e360:	602b      	str	r3, [r5, #0]
 800e362:	f7f5 f8de 	bl	8003522 <_fstat>
 800e366:	1c43      	adds	r3, r0, #1
 800e368:	d102      	bne.n	800e370 <_fstat_r+0x1c>
 800e36a:	682b      	ldr	r3, [r5, #0]
 800e36c:	b103      	cbz	r3, 800e370 <_fstat_r+0x1c>
 800e36e:	6023      	str	r3, [r4, #0]
 800e370:	bd38      	pop	{r3, r4, r5, pc}
 800e372:	bf00      	nop
 800e374:	20000be0 	.word	0x20000be0

0800e378 <_isatty_r>:
 800e378:	b538      	push	{r3, r4, r5, lr}
 800e37a:	4d06      	ldr	r5, [pc, #24]	; (800e394 <_isatty_r+0x1c>)
 800e37c:	2300      	movs	r3, #0
 800e37e:	4604      	mov	r4, r0
 800e380:	4608      	mov	r0, r1
 800e382:	602b      	str	r3, [r5, #0]
 800e384:	f7f5 f8dd 	bl	8003542 <_isatty>
 800e388:	1c43      	adds	r3, r0, #1
 800e38a:	d102      	bne.n	800e392 <_isatty_r+0x1a>
 800e38c:	682b      	ldr	r3, [r5, #0]
 800e38e:	b103      	cbz	r3, 800e392 <_isatty_r+0x1a>
 800e390:	6023      	str	r3, [r4, #0]
 800e392:	bd38      	pop	{r3, r4, r5, pc}
 800e394:	20000be0 	.word	0x20000be0

0800e398 <_lseek_r>:
 800e398:	b538      	push	{r3, r4, r5, lr}
 800e39a:	4d07      	ldr	r5, [pc, #28]	; (800e3b8 <_lseek_r+0x20>)
 800e39c:	4604      	mov	r4, r0
 800e39e:	4608      	mov	r0, r1
 800e3a0:	4611      	mov	r1, r2
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	602a      	str	r2, [r5, #0]
 800e3a6:	461a      	mov	r2, r3
 800e3a8:	f7f5 f8d6 	bl	8003558 <_lseek>
 800e3ac:	1c43      	adds	r3, r0, #1
 800e3ae:	d102      	bne.n	800e3b6 <_lseek_r+0x1e>
 800e3b0:	682b      	ldr	r3, [r5, #0]
 800e3b2:	b103      	cbz	r3, 800e3b6 <_lseek_r+0x1e>
 800e3b4:	6023      	str	r3, [r4, #0]
 800e3b6:	bd38      	pop	{r3, r4, r5, pc}
 800e3b8:	20000be0 	.word	0x20000be0

0800e3bc <_read_r>:
 800e3bc:	b538      	push	{r3, r4, r5, lr}
 800e3be:	4d07      	ldr	r5, [pc, #28]	; (800e3dc <_read_r+0x20>)
 800e3c0:	4604      	mov	r4, r0
 800e3c2:	4608      	mov	r0, r1
 800e3c4:	4611      	mov	r1, r2
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	602a      	str	r2, [r5, #0]
 800e3ca:	461a      	mov	r2, r3
 800e3cc:	f7f5 f864 	bl	8003498 <_read>
 800e3d0:	1c43      	adds	r3, r0, #1
 800e3d2:	d102      	bne.n	800e3da <_read_r+0x1e>
 800e3d4:	682b      	ldr	r3, [r5, #0]
 800e3d6:	b103      	cbz	r3, 800e3da <_read_r+0x1e>
 800e3d8:	6023      	str	r3, [r4, #0]
 800e3da:	bd38      	pop	{r3, r4, r5, pc}
 800e3dc:	20000be0 	.word	0x20000be0

0800e3e0 <atan2>:
 800e3e0:	f000 b822 	b.w	800e428 <__ieee754_atan2>

0800e3e4 <atan2f>:
 800e3e4:	f000 b8ea 	b.w	800e5bc <__ieee754_atan2f>

0800e3e8 <sqrtf>:
 800e3e8:	b508      	push	{r3, lr}
 800e3ea:	ed2d 8b02 	vpush	{d8}
 800e3ee:	eeb0 8a40 	vmov.f32	s16, s0
 800e3f2:	f000 f983 	bl	800e6fc <__ieee754_sqrtf>
 800e3f6:	eeb4 8a48 	vcmp.f32	s16, s16
 800e3fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3fe:	d60c      	bvs.n	800e41a <sqrtf+0x32>
 800e400:	eddf 8a07 	vldr	s17, [pc, #28]	; 800e420 <sqrtf+0x38>
 800e404:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e40c:	d505      	bpl.n	800e41a <sqrtf+0x32>
 800e40e:	f7fb fb43 	bl	8009a98 <__errno>
 800e412:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800e416:	2321      	movs	r3, #33	; 0x21
 800e418:	6003      	str	r3, [r0, #0]
 800e41a:	ecbd 8b02 	vpop	{d8}
 800e41e:	bd08      	pop	{r3, pc}
	...

0800e428 <__ieee754_atan2>:
 800e428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e42c:	ec57 6b11 	vmov	r6, r7, d1
 800e430:	4273      	negs	r3, r6
 800e432:	f8df e184 	ldr.w	lr, [pc, #388]	; 800e5b8 <__ieee754_atan2+0x190>
 800e436:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800e43a:	4333      	orrs	r3, r6
 800e43c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800e440:	4573      	cmp	r3, lr
 800e442:	ec51 0b10 	vmov	r0, r1, d0
 800e446:	ee11 8a10 	vmov	r8, s2
 800e44a:	d80a      	bhi.n	800e462 <__ieee754_atan2+0x3a>
 800e44c:	4244      	negs	r4, r0
 800e44e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e452:	4304      	orrs	r4, r0
 800e454:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800e458:	4574      	cmp	r4, lr
 800e45a:	ee10 9a10 	vmov	r9, s0
 800e45e:	468c      	mov	ip, r1
 800e460:	d907      	bls.n	800e472 <__ieee754_atan2+0x4a>
 800e462:	4632      	mov	r2, r6
 800e464:	463b      	mov	r3, r7
 800e466:	f7f1 ff11 	bl	800028c <__adddf3>
 800e46a:	ec41 0b10 	vmov	d0, r0, r1
 800e46e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e472:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800e476:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e47a:	4334      	orrs	r4, r6
 800e47c:	d103      	bne.n	800e486 <__ieee754_atan2+0x5e>
 800e47e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e482:	f000 b941 	b.w	800e708 <atan>
 800e486:	17bc      	asrs	r4, r7, #30
 800e488:	f004 0402 	and.w	r4, r4, #2
 800e48c:	ea53 0909 	orrs.w	r9, r3, r9
 800e490:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800e494:	d107      	bne.n	800e4a6 <__ieee754_atan2+0x7e>
 800e496:	2c02      	cmp	r4, #2
 800e498:	d060      	beq.n	800e55c <__ieee754_atan2+0x134>
 800e49a:	2c03      	cmp	r4, #3
 800e49c:	d1e5      	bne.n	800e46a <__ieee754_atan2+0x42>
 800e49e:	a142      	add	r1, pc, #264	; (adr r1, 800e5a8 <__ieee754_atan2+0x180>)
 800e4a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4a4:	e7e1      	b.n	800e46a <__ieee754_atan2+0x42>
 800e4a6:	ea52 0808 	orrs.w	r8, r2, r8
 800e4aa:	d106      	bne.n	800e4ba <__ieee754_atan2+0x92>
 800e4ac:	f1bc 0f00 	cmp.w	ip, #0
 800e4b0:	da5f      	bge.n	800e572 <__ieee754_atan2+0x14a>
 800e4b2:	a13f      	add	r1, pc, #252	; (adr r1, 800e5b0 <__ieee754_atan2+0x188>)
 800e4b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4b8:	e7d7      	b.n	800e46a <__ieee754_atan2+0x42>
 800e4ba:	4572      	cmp	r2, lr
 800e4bc:	d10f      	bne.n	800e4de <__ieee754_atan2+0xb6>
 800e4be:	4293      	cmp	r3, r2
 800e4c0:	f104 34ff 	add.w	r4, r4, #4294967295
 800e4c4:	d107      	bne.n	800e4d6 <__ieee754_atan2+0xae>
 800e4c6:	2c02      	cmp	r4, #2
 800e4c8:	d84c      	bhi.n	800e564 <__ieee754_atan2+0x13c>
 800e4ca:	4b35      	ldr	r3, [pc, #212]	; (800e5a0 <__ieee754_atan2+0x178>)
 800e4cc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e4d0:	e9d4 0100 	ldrd	r0, r1, [r4]
 800e4d4:	e7c9      	b.n	800e46a <__ieee754_atan2+0x42>
 800e4d6:	2c02      	cmp	r4, #2
 800e4d8:	d848      	bhi.n	800e56c <__ieee754_atan2+0x144>
 800e4da:	4b32      	ldr	r3, [pc, #200]	; (800e5a4 <__ieee754_atan2+0x17c>)
 800e4dc:	e7f6      	b.n	800e4cc <__ieee754_atan2+0xa4>
 800e4de:	4573      	cmp	r3, lr
 800e4e0:	d0e4      	beq.n	800e4ac <__ieee754_atan2+0x84>
 800e4e2:	1a9b      	subs	r3, r3, r2
 800e4e4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800e4e8:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e4ec:	da1e      	bge.n	800e52c <__ieee754_atan2+0x104>
 800e4ee:	2f00      	cmp	r7, #0
 800e4f0:	da01      	bge.n	800e4f6 <__ieee754_atan2+0xce>
 800e4f2:	323c      	adds	r2, #60	; 0x3c
 800e4f4:	db1e      	blt.n	800e534 <__ieee754_atan2+0x10c>
 800e4f6:	4632      	mov	r2, r6
 800e4f8:	463b      	mov	r3, r7
 800e4fa:	f7f2 f9a7 	bl	800084c <__aeabi_ddiv>
 800e4fe:	ec41 0b10 	vmov	d0, r0, r1
 800e502:	f000 faa1 	bl	800ea48 <fabs>
 800e506:	f000 f8ff 	bl	800e708 <atan>
 800e50a:	ec51 0b10 	vmov	r0, r1, d0
 800e50e:	2c01      	cmp	r4, #1
 800e510:	d013      	beq.n	800e53a <__ieee754_atan2+0x112>
 800e512:	2c02      	cmp	r4, #2
 800e514:	d015      	beq.n	800e542 <__ieee754_atan2+0x11a>
 800e516:	2c00      	cmp	r4, #0
 800e518:	d0a7      	beq.n	800e46a <__ieee754_atan2+0x42>
 800e51a:	a319      	add	r3, pc, #100	; (adr r3, 800e580 <__ieee754_atan2+0x158>)
 800e51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e520:	f7f1 feb2 	bl	8000288 <__aeabi_dsub>
 800e524:	a318      	add	r3, pc, #96	; (adr r3, 800e588 <__ieee754_atan2+0x160>)
 800e526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e52a:	e014      	b.n	800e556 <__ieee754_atan2+0x12e>
 800e52c:	a118      	add	r1, pc, #96	; (adr r1, 800e590 <__ieee754_atan2+0x168>)
 800e52e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e532:	e7ec      	b.n	800e50e <__ieee754_atan2+0xe6>
 800e534:	2000      	movs	r0, #0
 800e536:	2100      	movs	r1, #0
 800e538:	e7e9      	b.n	800e50e <__ieee754_atan2+0xe6>
 800e53a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e53e:	4619      	mov	r1, r3
 800e540:	e793      	b.n	800e46a <__ieee754_atan2+0x42>
 800e542:	a30f      	add	r3, pc, #60	; (adr r3, 800e580 <__ieee754_atan2+0x158>)
 800e544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e548:	f7f1 fe9e 	bl	8000288 <__aeabi_dsub>
 800e54c:	4602      	mov	r2, r0
 800e54e:	460b      	mov	r3, r1
 800e550:	a10d      	add	r1, pc, #52	; (adr r1, 800e588 <__ieee754_atan2+0x160>)
 800e552:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e556:	f7f1 fe97 	bl	8000288 <__aeabi_dsub>
 800e55a:	e786      	b.n	800e46a <__ieee754_atan2+0x42>
 800e55c:	a10a      	add	r1, pc, #40	; (adr r1, 800e588 <__ieee754_atan2+0x160>)
 800e55e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e562:	e782      	b.n	800e46a <__ieee754_atan2+0x42>
 800e564:	a10c      	add	r1, pc, #48	; (adr r1, 800e598 <__ieee754_atan2+0x170>)
 800e566:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e56a:	e77e      	b.n	800e46a <__ieee754_atan2+0x42>
 800e56c:	2000      	movs	r0, #0
 800e56e:	2100      	movs	r1, #0
 800e570:	e77b      	b.n	800e46a <__ieee754_atan2+0x42>
 800e572:	a107      	add	r1, pc, #28	; (adr r1, 800e590 <__ieee754_atan2+0x168>)
 800e574:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e578:	e777      	b.n	800e46a <__ieee754_atan2+0x42>
 800e57a:	bf00      	nop
 800e57c:	f3af 8000 	nop.w
 800e580:	33145c07 	.word	0x33145c07
 800e584:	3ca1a626 	.word	0x3ca1a626
 800e588:	54442d18 	.word	0x54442d18
 800e58c:	400921fb 	.word	0x400921fb
 800e590:	54442d18 	.word	0x54442d18
 800e594:	3ff921fb 	.word	0x3ff921fb
 800e598:	54442d18 	.word	0x54442d18
 800e59c:	3fe921fb 	.word	0x3fe921fb
 800e5a0:	0800f348 	.word	0x0800f348
 800e5a4:	0800f360 	.word	0x0800f360
 800e5a8:	54442d18 	.word	0x54442d18
 800e5ac:	c00921fb 	.word	0xc00921fb
 800e5b0:	54442d18 	.word	0x54442d18
 800e5b4:	bff921fb 	.word	0xbff921fb
 800e5b8:	7ff00000 	.word	0x7ff00000

0800e5bc <__ieee754_atan2f>:
 800e5bc:	ee10 2a90 	vmov	r2, s1
 800e5c0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800e5c4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800e5c8:	b510      	push	{r4, lr}
 800e5ca:	eef0 7a40 	vmov.f32	s15, s0
 800e5ce:	dc06      	bgt.n	800e5de <__ieee754_atan2f+0x22>
 800e5d0:	ee10 0a10 	vmov	r0, s0
 800e5d4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800e5d8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e5dc:	dd04      	ble.n	800e5e8 <__ieee754_atan2f+0x2c>
 800e5de:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800e5e2:	eeb0 0a67 	vmov.f32	s0, s15
 800e5e6:	bd10      	pop	{r4, pc}
 800e5e8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800e5ec:	d103      	bne.n	800e5f6 <__ieee754_atan2f+0x3a>
 800e5ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5f2:	f000 ba33 	b.w	800ea5c <atanf>
 800e5f6:	1794      	asrs	r4, r2, #30
 800e5f8:	f004 0402 	and.w	r4, r4, #2
 800e5fc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800e600:	b943      	cbnz	r3, 800e614 <__ieee754_atan2f+0x58>
 800e602:	2c02      	cmp	r4, #2
 800e604:	d05e      	beq.n	800e6c4 <__ieee754_atan2f+0x108>
 800e606:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800e6d8 <__ieee754_atan2f+0x11c>
 800e60a:	2c03      	cmp	r4, #3
 800e60c:	bf08      	it	eq
 800e60e:	eef0 7a47 	vmoveq.f32	s15, s14
 800e612:	e7e6      	b.n	800e5e2 <__ieee754_atan2f+0x26>
 800e614:	b941      	cbnz	r1, 800e628 <__ieee754_atan2f+0x6c>
 800e616:	eddf 7a31 	vldr	s15, [pc, #196]	; 800e6dc <__ieee754_atan2f+0x120>
 800e61a:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800e6e0 <__ieee754_atan2f+0x124>
 800e61e:	2800      	cmp	r0, #0
 800e620:	bfb8      	it	lt
 800e622:	eef0 7a40 	vmovlt.f32	s15, s0
 800e626:	e7dc      	b.n	800e5e2 <__ieee754_atan2f+0x26>
 800e628:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800e62c:	d110      	bne.n	800e650 <__ieee754_atan2f+0x94>
 800e62e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e632:	f104 34ff 	add.w	r4, r4, #4294967295
 800e636:	d107      	bne.n	800e648 <__ieee754_atan2f+0x8c>
 800e638:	2c02      	cmp	r4, #2
 800e63a:	d846      	bhi.n	800e6ca <__ieee754_atan2f+0x10e>
 800e63c:	4b29      	ldr	r3, [pc, #164]	; (800e6e4 <__ieee754_atan2f+0x128>)
 800e63e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e642:	edd4 7a00 	vldr	s15, [r4]
 800e646:	e7cc      	b.n	800e5e2 <__ieee754_atan2f+0x26>
 800e648:	2c02      	cmp	r4, #2
 800e64a:	d841      	bhi.n	800e6d0 <__ieee754_atan2f+0x114>
 800e64c:	4b26      	ldr	r3, [pc, #152]	; (800e6e8 <__ieee754_atan2f+0x12c>)
 800e64e:	e7f6      	b.n	800e63e <__ieee754_atan2f+0x82>
 800e650:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e654:	d0df      	beq.n	800e616 <__ieee754_atan2f+0x5a>
 800e656:	1a5b      	subs	r3, r3, r1
 800e658:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800e65c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800e660:	da1a      	bge.n	800e698 <__ieee754_atan2f+0xdc>
 800e662:	2a00      	cmp	r2, #0
 800e664:	da01      	bge.n	800e66a <__ieee754_atan2f+0xae>
 800e666:	313c      	adds	r1, #60	; 0x3c
 800e668:	db19      	blt.n	800e69e <__ieee754_atan2f+0xe2>
 800e66a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800e66e:	f000 fac9 	bl	800ec04 <fabsf>
 800e672:	f000 f9f3 	bl	800ea5c <atanf>
 800e676:	eef0 7a40 	vmov.f32	s15, s0
 800e67a:	2c01      	cmp	r4, #1
 800e67c:	d012      	beq.n	800e6a4 <__ieee754_atan2f+0xe8>
 800e67e:	2c02      	cmp	r4, #2
 800e680:	d017      	beq.n	800e6b2 <__ieee754_atan2f+0xf6>
 800e682:	2c00      	cmp	r4, #0
 800e684:	d0ad      	beq.n	800e5e2 <__ieee754_atan2f+0x26>
 800e686:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800e6ec <__ieee754_atan2f+0x130>
 800e68a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800e68e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800e6f0 <__ieee754_atan2f+0x134>
 800e692:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800e696:	e7a4      	b.n	800e5e2 <__ieee754_atan2f+0x26>
 800e698:	eddf 7a10 	vldr	s15, [pc, #64]	; 800e6dc <__ieee754_atan2f+0x120>
 800e69c:	e7ed      	b.n	800e67a <__ieee754_atan2f+0xbe>
 800e69e:	eddf 7a15 	vldr	s15, [pc, #84]	; 800e6f4 <__ieee754_atan2f+0x138>
 800e6a2:	e7ea      	b.n	800e67a <__ieee754_atan2f+0xbe>
 800e6a4:	ee17 3a90 	vmov	r3, s15
 800e6a8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e6ac:	ee07 3a90 	vmov	s15, r3
 800e6b0:	e797      	b.n	800e5e2 <__ieee754_atan2f+0x26>
 800e6b2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800e6ec <__ieee754_atan2f+0x130>
 800e6b6:	ee77 7a80 	vadd.f32	s15, s15, s0
 800e6ba:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800e6f0 <__ieee754_atan2f+0x134>
 800e6be:	ee70 7a67 	vsub.f32	s15, s0, s15
 800e6c2:	e78e      	b.n	800e5e2 <__ieee754_atan2f+0x26>
 800e6c4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800e6f0 <__ieee754_atan2f+0x134>
 800e6c8:	e78b      	b.n	800e5e2 <__ieee754_atan2f+0x26>
 800e6ca:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800e6f8 <__ieee754_atan2f+0x13c>
 800e6ce:	e788      	b.n	800e5e2 <__ieee754_atan2f+0x26>
 800e6d0:	eddf 7a08 	vldr	s15, [pc, #32]	; 800e6f4 <__ieee754_atan2f+0x138>
 800e6d4:	e785      	b.n	800e5e2 <__ieee754_atan2f+0x26>
 800e6d6:	bf00      	nop
 800e6d8:	c0490fdb 	.word	0xc0490fdb
 800e6dc:	3fc90fdb 	.word	0x3fc90fdb
 800e6e0:	bfc90fdb 	.word	0xbfc90fdb
 800e6e4:	0800f378 	.word	0x0800f378
 800e6e8:	0800f384 	.word	0x0800f384
 800e6ec:	33bbbd2e 	.word	0x33bbbd2e
 800e6f0:	40490fdb 	.word	0x40490fdb
 800e6f4:	00000000 	.word	0x00000000
 800e6f8:	3f490fdb 	.word	0x3f490fdb

0800e6fc <__ieee754_sqrtf>:
 800e6fc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e700:	4770      	bx	lr
 800e702:	0000      	movs	r0, r0
 800e704:	0000      	movs	r0, r0
	...

0800e708 <atan>:
 800e708:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e70c:	ec55 4b10 	vmov	r4, r5, d0
 800e710:	4bc3      	ldr	r3, [pc, #780]	; (800ea20 <atan+0x318>)
 800e712:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e716:	429e      	cmp	r6, r3
 800e718:	46ab      	mov	fp, r5
 800e71a:	dd18      	ble.n	800e74e <atan+0x46>
 800e71c:	4bc1      	ldr	r3, [pc, #772]	; (800ea24 <atan+0x31c>)
 800e71e:	429e      	cmp	r6, r3
 800e720:	dc01      	bgt.n	800e726 <atan+0x1e>
 800e722:	d109      	bne.n	800e738 <atan+0x30>
 800e724:	b144      	cbz	r4, 800e738 <atan+0x30>
 800e726:	4622      	mov	r2, r4
 800e728:	462b      	mov	r3, r5
 800e72a:	4620      	mov	r0, r4
 800e72c:	4629      	mov	r1, r5
 800e72e:	f7f1 fdad 	bl	800028c <__adddf3>
 800e732:	4604      	mov	r4, r0
 800e734:	460d      	mov	r5, r1
 800e736:	e006      	b.n	800e746 <atan+0x3e>
 800e738:	f1bb 0f00 	cmp.w	fp, #0
 800e73c:	f300 8131 	bgt.w	800e9a2 <atan+0x29a>
 800e740:	a59b      	add	r5, pc, #620	; (adr r5, 800e9b0 <atan+0x2a8>)
 800e742:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e746:	ec45 4b10 	vmov	d0, r4, r5
 800e74a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e74e:	4bb6      	ldr	r3, [pc, #728]	; (800ea28 <atan+0x320>)
 800e750:	429e      	cmp	r6, r3
 800e752:	dc14      	bgt.n	800e77e <atan+0x76>
 800e754:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800e758:	429e      	cmp	r6, r3
 800e75a:	dc0d      	bgt.n	800e778 <atan+0x70>
 800e75c:	a396      	add	r3, pc, #600	; (adr r3, 800e9b8 <atan+0x2b0>)
 800e75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e762:	ee10 0a10 	vmov	r0, s0
 800e766:	4629      	mov	r1, r5
 800e768:	f7f1 fd90 	bl	800028c <__adddf3>
 800e76c:	4baf      	ldr	r3, [pc, #700]	; (800ea2c <atan+0x324>)
 800e76e:	2200      	movs	r2, #0
 800e770:	f7f2 f9d2 	bl	8000b18 <__aeabi_dcmpgt>
 800e774:	2800      	cmp	r0, #0
 800e776:	d1e6      	bne.n	800e746 <atan+0x3e>
 800e778:	f04f 3aff 	mov.w	sl, #4294967295
 800e77c:	e02b      	b.n	800e7d6 <atan+0xce>
 800e77e:	f000 f963 	bl	800ea48 <fabs>
 800e782:	4bab      	ldr	r3, [pc, #684]	; (800ea30 <atan+0x328>)
 800e784:	429e      	cmp	r6, r3
 800e786:	ec55 4b10 	vmov	r4, r5, d0
 800e78a:	f300 80bf 	bgt.w	800e90c <atan+0x204>
 800e78e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800e792:	429e      	cmp	r6, r3
 800e794:	f300 80a0 	bgt.w	800e8d8 <atan+0x1d0>
 800e798:	ee10 2a10 	vmov	r2, s0
 800e79c:	ee10 0a10 	vmov	r0, s0
 800e7a0:	462b      	mov	r3, r5
 800e7a2:	4629      	mov	r1, r5
 800e7a4:	f7f1 fd72 	bl	800028c <__adddf3>
 800e7a8:	4ba0      	ldr	r3, [pc, #640]	; (800ea2c <atan+0x324>)
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	f7f1 fd6c 	bl	8000288 <__aeabi_dsub>
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	4606      	mov	r6, r0
 800e7b4:	460f      	mov	r7, r1
 800e7b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e7ba:	4620      	mov	r0, r4
 800e7bc:	4629      	mov	r1, r5
 800e7be:	f7f1 fd65 	bl	800028c <__adddf3>
 800e7c2:	4602      	mov	r2, r0
 800e7c4:	460b      	mov	r3, r1
 800e7c6:	4630      	mov	r0, r6
 800e7c8:	4639      	mov	r1, r7
 800e7ca:	f7f2 f83f 	bl	800084c <__aeabi_ddiv>
 800e7ce:	f04f 0a00 	mov.w	sl, #0
 800e7d2:	4604      	mov	r4, r0
 800e7d4:	460d      	mov	r5, r1
 800e7d6:	4622      	mov	r2, r4
 800e7d8:	462b      	mov	r3, r5
 800e7da:	4620      	mov	r0, r4
 800e7dc:	4629      	mov	r1, r5
 800e7de:	f7f1 ff0b 	bl	80005f8 <__aeabi_dmul>
 800e7e2:	4602      	mov	r2, r0
 800e7e4:	460b      	mov	r3, r1
 800e7e6:	4680      	mov	r8, r0
 800e7e8:	4689      	mov	r9, r1
 800e7ea:	f7f1 ff05 	bl	80005f8 <__aeabi_dmul>
 800e7ee:	a374      	add	r3, pc, #464	; (adr r3, 800e9c0 <atan+0x2b8>)
 800e7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7f4:	4606      	mov	r6, r0
 800e7f6:	460f      	mov	r7, r1
 800e7f8:	f7f1 fefe 	bl	80005f8 <__aeabi_dmul>
 800e7fc:	a372      	add	r3, pc, #456	; (adr r3, 800e9c8 <atan+0x2c0>)
 800e7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e802:	f7f1 fd43 	bl	800028c <__adddf3>
 800e806:	4632      	mov	r2, r6
 800e808:	463b      	mov	r3, r7
 800e80a:	f7f1 fef5 	bl	80005f8 <__aeabi_dmul>
 800e80e:	a370      	add	r3, pc, #448	; (adr r3, 800e9d0 <atan+0x2c8>)
 800e810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e814:	f7f1 fd3a 	bl	800028c <__adddf3>
 800e818:	4632      	mov	r2, r6
 800e81a:	463b      	mov	r3, r7
 800e81c:	f7f1 feec 	bl	80005f8 <__aeabi_dmul>
 800e820:	a36d      	add	r3, pc, #436	; (adr r3, 800e9d8 <atan+0x2d0>)
 800e822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e826:	f7f1 fd31 	bl	800028c <__adddf3>
 800e82a:	4632      	mov	r2, r6
 800e82c:	463b      	mov	r3, r7
 800e82e:	f7f1 fee3 	bl	80005f8 <__aeabi_dmul>
 800e832:	a36b      	add	r3, pc, #428	; (adr r3, 800e9e0 <atan+0x2d8>)
 800e834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e838:	f7f1 fd28 	bl	800028c <__adddf3>
 800e83c:	4632      	mov	r2, r6
 800e83e:	463b      	mov	r3, r7
 800e840:	f7f1 feda 	bl	80005f8 <__aeabi_dmul>
 800e844:	a368      	add	r3, pc, #416	; (adr r3, 800e9e8 <atan+0x2e0>)
 800e846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e84a:	f7f1 fd1f 	bl	800028c <__adddf3>
 800e84e:	4642      	mov	r2, r8
 800e850:	464b      	mov	r3, r9
 800e852:	f7f1 fed1 	bl	80005f8 <__aeabi_dmul>
 800e856:	a366      	add	r3, pc, #408	; (adr r3, 800e9f0 <atan+0x2e8>)
 800e858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e85c:	4680      	mov	r8, r0
 800e85e:	4689      	mov	r9, r1
 800e860:	4630      	mov	r0, r6
 800e862:	4639      	mov	r1, r7
 800e864:	f7f1 fec8 	bl	80005f8 <__aeabi_dmul>
 800e868:	a363      	add	r3, pc, #396	; (adr r3, 800e9f8 <atan+0x2f0>)
 800e86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e86e:	f7f1 fd0b 	bl	8000288 <__aeabi_dsub>
 800e872:	4632      	mov	r2, r6
 800e874:	463b      	mov	r3, r7
 800e876:	f7f1 febf 	bl	80005f8 <__aeabi_dmul>
 800e87a:	a361      	add	r3, pc, #388	; (adr r3, 800ea00 <atan+0x2f8>)
 800e87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e880:	f7f1 fd02 	bl	8000288 <__aeabi_dsub>
 800e884:	4632      	mov	r2, r6
 800e886:	463b      	mov	r3, r7
 800e888:	f7f1 feb6 	bl	80005f8 <__aeabi_dmul>
 800e88c:	a35e      	add	r3, pc, #376	; (adr r3, 800ea08 <atan+0x300>)
 800e88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e892:	f7f1 fcf9 	bl	8000288 <__aeabi_dsub>
 800e896:	4632      	mov	r2, r6
 800e898:	463b      	mov	r3, r7
 800e89a:	f7f1 fead 	bl	80005f8 <__aeabi_dmul>
 800e89e:	a35c      	add	r3, pc, #368	; (adr r3, 800ea10 <atan+0x308>)
 800e8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8a4:	f7f1 fcf0 	bl	8000288 <__aeabi_dsub>
 800e8a8:	4632      	mov	r2, r6
 800e8aa:	463b      	mov	r3, r7
 800e8ac:	f7f1 fea4 	bl	80005f8 <__aeabi_dmul>
 800e8b0:	4602      	mov	r2, r0
 800e8b2:	460b      	mov	r3, r1
 800e8b4:	4640      	mov	r0, r8
 800e8b6:	4649      	mov	r1, r9
 800e8b8:	f7f1 fce8 	bl	800028c <__adddf3>
 800e8bc:	4622      	mov	r2, r4
 800e8be:	462b      	mov	r3, r5
 800e8c0:	f7f1 fe9a 	bl	80005f8 <__aeabi_dmul>
 800e8c4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800e8c8:	4602      	mov	r2, r0
 800e8ca:	460b      	mov	r3, r1
 800e8cc:	d14b      	bne.n	800e966 <atan+0x25e>
 800e8ce:	4620      	mov	r0, r4
 800e8d0:	4629      	mov	r1, r5
 800e8d2:	f7f1 fcd9 	bl	8000288 <__aeabi_dsub>
 800e8d6:	e72c      	b.n	800e732 <atan+0x2a>
 800e8d8:	ee10 0a10 	vmov	r0, s0
 800e8dc:	4b53      	ldr	r3, [pc, #332]	; (800ea2c <atan+0x324>)
 800e8de:	2200      	movs	r2, #0
 800e8e0:	4629      	mov	r1, r5
 800e8e2:	f7f1 fcd1 	bl	8000288 <__aeabi_dsub>
 800e8e6:	4b51      	ldr	r3, [pc, #324]	; (800ea2c <atan+0x324>)
 800e8e8:	4606      	mov	r6, r0
 800e8ea:	460f      	mov	r7, r1
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	4620      	mov	r0, r4
 800e8f0:	4629      	mov	r1, r5
 800e8f2:	f7f1 fccb 	bl	800028c <__adddf3>
 800e8f6:	4602      	mov	r2, r0
 800e8f8:	460b      	mov	r3, r1
 800e8fa:	4630      	mov	r0, r6
 800e8fc:	4639      	mov	r1, r7
 800e8fe:	f7f1 ffa5 	bl	800084c <__aeabi_ddiv>
 800e902:	f04f 0a01 	mov.w	sl, #1
 800e906:	4604      	mov	r4, r0
 800e908:	460d      	mov	r5, r1
 800e90a:	e764      	b.n	800e7d6 <atan+0xce>
 800e90c:	4b49      	ldr	r3, [pc, #292]	; (800ea34 <atan+0x32c>)
 800e90e:	429e      	cmp	r6, r3
 800e910:	da1d      	bge.n	800e94e <atan+0x246>
 800e912:	ee10 0a10 	vmov	r0, s0
 800e916:	4b48      	ldr	r3, [pc, #288]	; (800ea38 <atan+0x330>)
 800e918:	2200      	movs	r2, #0
 800e91a:	4629      	mov	r1, r5
 800e91c:	f7f1 fcb4 	bl	8000288 <__aeabi_dsub>
 800e920:	4b45      	ldr	r3, [pc, #276]	; (800ea38 <atan+0x330>)
 800e922:	4606      	mov	r6, r0
 800e924:	460f      	mov	r7, r1
 800e926:	2200      	movs	r2, #0
 800e928:	4620      	mov	r0, r4
 800e92a:	4629      	mov	r1, r5
 800e92c:	f7f1 fe64 	bl	80005f8 <__aeabi_dmul>
 800e930:	4b3e      	ldr	r3, [pc, #248]	; (800ea2c <atan+0x324>)
 800e932:	2200      	movs	r2, #0
 800e934:	f7f1 fcaa 	bl	800028c <__adddf3>
 800e938:	4602      	mov	r2, r0
 800e93a:	460b      	mov	r3, r1
 800e93c:	4630      	mov	r0, r6
 800e93e:	4639      	mov	r1, r7
 800e940:	f7f1 ff84 	bl	800084c <__aeabi_ddiv>
 800e944:	f04f 0a02 	mov.w	sl, #2
 800e948:	4604      	mov	r4, r0
 800e94a:	460d      	mov	r5, r1
 800e94c:	e743      	b.n	800e7d6 <atan+0xce>
 800e94e:	462b      	mov	r3, r5
 800e950:	ee10 2a10 	vmov	r2, s0
 800e954:	4939      	ldr	r1, [pc, #228]	; (800ea3c <atan+0x334>)
 800e956:	2000      	movs	r0, #0
 800e958:	f7f1 ff78 	bl	800084c <__aeabi_ddiv>
 800e95c:	f04f 0a03 	mov.w	sl, #3
 800e960:	4604      	mov	r4, r0
 800e962:	460d      	mov	r5, r1
 800e964:	e737      	b.n	800e7d6 <atan+0xce>
 800e966:	4b36      	ldr	r3, [pc, #216]	; (800ea40 <atan+0x338>)
 800e968:	4e36      	ldr	r6, [pc, #216]	; (800ea44 <atan+0x33c>)
 800e96a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800e96e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800e972:	e9da 2300 	ldrd	r2, r3, [sl]
 800e976:	f7f1 fc87 	bl	8000288 <__aeabi_dsub>
 800e97a:	4622      	mov	r2, r4
 800e97c:	462b      	mov	r3, r5
 800e97e:	f7f1 fc83 	bl	8000288 <__aeabi_dsub>
 800e982:	4602      	mov	r2, r0
 800e984:	460b      	mov	r3, r1
 800e986:	e9d6 0100 	ldrd	r0, r1, [r6]
 800e98a:	f7f1 fc7d 	bl	8000288 <__aeabi_dsub>
 800e98e:	f1bb 0f00 	cmp.w	fp, #0
 800e992:	4604      	mov	r4, r0
 800e994:	460d      	mov	r5, r1
 800e996:	f6bf aed6 	bge.w	800e746 <atan+0x3e>
 800e99a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e99e:	461d      	mov	r5, r3
 800e9a0:	e6d1      	b.n	800e746 <atan+0x3e>
 800e9a2:	a51d      	add	r5, pc, #116	; (adr r5, 800ea18 <atan+0x310>)
 800e9a4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e9a8:	e6cd      	b.n	800e746 <atan+0x3e>
 800e9aa:	bf00      	nop
 800e9ac:	f3af 8000 	nop.w
 800e9b0:	54442d18 	.word	0x54442d18
 800e9b4:	bff921fb 	.word	0xbff921fb
 800e9b8:	8800759c 	.word	0x8800759c
 800e9bc:	7e37e43c 	.word	0x7e37e43c
 800e9c0:	e322da11 	.word	0xe322da11
 800e9c4:	3f90ad3a 	.word	0x3f90ad3a
 800e9c8:	24760deb 	.word	0x24760deb
 800e9cc:	3fa97b4b 	.word	0x3fa97b4b
 800e9d0:	a0d03d51 	.word	0xa0d03d51
 800e9d4:	3fb10d66 	.word	0x3fb10d66
 800e9d8:	c54c206e 	.word	0xc54c206e
 800e9dc:	3fb745cd 	.word	0x3fb745cd
 800e9e0:	920083ff 	.word	0x920083ff
 800e9e4:	3fc24924 	.word	0x3fc24924
 800e9e8:	5555550d 	.word	0x5555550d
 800e9ec:	3fd55555 	.word	0x3fd55555
 800e9f0:	2c6a6c2f 	.word	0x2c6a6c2f
 800e9f4:	bfa2b444 	.word	0xbfa2b444
 800e9f8:	52defd9a 	.word	0x52defd9a
 800e9fc:	3fadde2d 	.word	0x3fadde2d
 800ea00:	af749a6d 	.word	0xaf749a6d
 800ea04:	3fb3b0f2 	.word	0x3fb3b0f2
 800ea08:	fe231671 	.word	0xfe231671
 800ea0c:	3fbc71c6 	.word	0x3fbc71c6
 800ea10:	9998ebc4 	.word	0x9998ebc4
 800ea14:	3fc99999 	.word	0x3fc99999
 800ea18:	54442d18 	.word	0x54442d18
 800ea1c:	3ff921fb 	.word	0x3ff921fb
 800ea20:	440fffff 	.word	0x440fffff
 800ea24:	7ff00000 	.word	0x7ff00000
 800ea28:	3fdbffff 	.word	0x3fdbffff
 800ea2c:	3ff00000 	.word	0x3ff00000
 800ea30:	3ff2ffff 	.word	0x3ff2ffff
 800ea34:	40038000 	.word	0x40038000
 800ea38:	3ff80000 	.word	0x3ff80000
 800ea3c:	bff00000 	.word	0xbff00000
 800ea40:	0800f3b0 	.word	0x0800f3b0
 800ea44:	0800f390 	.word	0x0800f390

0800ea48 <fabs>:
 800ea48:	ec51 0b10 	vmov	r0, r1, d0
 800ea4c:	ee10 2a10 	vmov	r2, s0
 800ea50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ea54:	ec43 2b10 	vmov	d0, r2, r3
 800ea58:	4770      	bx	lr
	...

0800ea5c <atanf>:
 800ea5c:	b538      	push	{r3, r4, r5, lr}
 800ea5e:	ee10 5a10 	vmov	r5, s0
 800ea62:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800ea66:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800ea6a:	eef0 7a40 	vmov.f32	s15, s0
 800ea6e:	db10      	blt.n	800ea92 <atanf+0x36>
 800ea70:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800ea74:	dd04      	ble.n	800ea80 <atanf+0x24>
 800ea76:	ee70 7a00 	vadd.f32	s15, s0, s0
 800ea7a:	eeb0 0a67 	vmov.f32	s0, s15
 800ea7e:	bd38      	pop	{r3, r4, r5, pc}
 800ea80:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800ebb8 <atanf+0x15c>
 800ea84:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800ebbc <atanf+0x160>
 800ea88:	2d00      	cmp	r5, #0
 800ea8a:	bfd8      	it	le
 800ea8c:	eef0 7a40 	vmovle.f32	s15, s0
 800ea90:	e7f3      	b.n	800ea7a <atanf+0x1e>
 800ea92:	4b4b      	ldr	r3, [pc, #300]	; (800ebc0 <atanf+0x164>)
 800ea94:	429c      	cmp	r4, r3
 800ea96:	dc10      	bgt.n	800eaba <atanf+0x5e>
 800ea98:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800ea9c:	da0a      	bge.n	800eab4 <atanf+0x58>
 800ea9e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800ebc4 <atanf+0x168>
 800eaa2:	ee30 7a07 	vadd.f32	s14, s0, s14
 800eaa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eaaa:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800eaae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eab2:	dce2      	bgt.n	800ea7a <atanf+0x1e>
 800eab4:	f04f 33ff 	mov.w	r3, #4294967295
 800eab8:	e013      	b.n	800eae2 <atanf+0x86>
 800eaba:	f000 f8a3 	bl	800ec04 <fabsf>
 800eabe:	4b42      	ldr	r3, [pc, #264]	; (800ebc8 <atanf+0x16c>)
 800eac0:	429c      	cmp	r4, r3
 800eac2:	dc4f      	bgt.n	800eb64 <atanf+0x108>
 800eac4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800eac8:	429c      	cmp	r4, r3
 800eaca:	dc41      	bgt.n	800eb50 <atanf+0xf4>
 800eacc:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800ead0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ead4:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ead8:	2300      	movs	r3, #0
 800eada:	ee30 0a27 	vadd.f32	s0, s0, s15
 800eade:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800eae2:	1c5a      	adds	r2, r3, #1
 800eae4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800eae8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800ebcc <atanf+0x170>
 800eaec:	eddf 5a38 	vldr	s11, [pc, #224]	; 800ebd0 <atanf+0x174>
 800eaf0:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800ebd4 <atanf+0x178>
 800eaf4:	ee66 6a06 	vmul.f32	s13, s12, s12
 800eaf8:	eee6 5a87 	vfma.f32	s11, s13, s14
 800eafc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800ebd8 <atanf+0x17c>
 800eb00:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800eb04:	eddf 5a35 	vldr	s11, [pc, #212]	; 800ebdc <atanf+0x180>
 800eb08:	eee7 5a26 	vfma.f32	s11, s14, s13
 800eb0c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800ebe0 <atanf+0x184>
 800eb10:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800eb14:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ebe4 <atanf+0x188>
 800eb18:	eee7 5a26 	vfma.f32	s11, s14, s13
 800eb1c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800ebe8 <atanf+0x18c>
 800eb20:	eea6 5a87 	vfma.f32	s10, s13, s14
 800eb24:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800ebec <atanf+0x190>
 800eb28:	eea5 7a26 	vfma.f32	s14, s10, s13
 800eb2c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800ebf0 <atanf+0x194>
 800eb30:	eea7 5a26 	vfma.f32	s10, s14, s13
 800eb34:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800ebf4 <atanf+0x198>
 800eb38:	eea5 7a26 	vfma.f32	s14, s10, s13
 800eb3c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800eb40:	eea5 7a86 	vfma.f32	s14, s11, s12
 800eb44:	ee27 7a87 	vmul.f32	s14, s15, s14
 800eb48:	d121      	bne.n	800eb8e <atanf+0x132>
 800eb4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eb4e:	e794      	b.n	800ea7a <atanf+0x1e>
 800eb50:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800eb54:	ee30 7a67 	vsub.f32	s14, s0, s15
 800eb58:	ee30 0a27 	vadd.f32	s0, s0, s15
 800eb5c:	2301      	movs	r3, #1
 800eb5e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800eb62:	e7be      	b.n	800eae2 <atanf+0x86>
 800eb64:	4b24      	ldr	r3, [pc, #144]	; (800ebf8 <atanf+0x19c>)
 800eb66:	429c      	cmp	r4, r3
 800eb68:	dc0b      	bgt.n	800eb82 <atanf+0x126>
 800eb6a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800eb6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800eb72:	eea0 7a27 	vfma.f32	s14, s0, s15
 800eb76:	2302      	movs	r3, #2
 800eb78:	ee70 6a67 	vsub.f32	s13, s0, s15
 800eb7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eb80:	e7af      	b.n	800eae2 <atanf+0x86>
 800eb82:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800eb86:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800eb8a:	2303      	movs	r3, #3
 800eb8c:	e7a9      	b.n	800eae2 <atanf+0x86>
 800eb8e:	4a1b      	ldr	r2, [pc, #108]	; (800ebfc <atanf+0x1a0>)
 800eb90:	491b      	ldr	r1, [pc, #108]	; (800ec00 <atanf+0x1a4>)
 800eb92:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800eb96:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800eb9a:	ed93 0a00 	vldr	s0, [r3]
 800eb9e:	ee37 7a40 	vsub.f32	s14, s14, s0
 800eba2:	ed92 0a00 	vldr	s0, [r2]
 800eba6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ebaa:	2d00      	cmp	r5, #0
 800ebac:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ebb0:	bfb8      	it	lt
 800ebb2:	eef1 7a67 	vneglt.f32	s15, s15
 800ebb6:	e760      	b.n	800ea7a <atanf+0x1e>
 800ebb8:	3fc90fdb 	.word	0x3fc90fdb
 800ebbc:	bfc90fdb 	.word	0xbfc90fdb
 800ebc0:	3edfffff 	.word	0x3edfffff
 800ebc4:	7149f2ca 	.word	0x7149f2ca
 800ebc8:	3f97ffff 	.word	0x3f97ffff
 800ebcc:	3c8569d7 	.word	0x3c8569d7
 800ebd0:	3d4bda59 	.word	0x3d4bda59
 800ebd4:	bd6ef16b 	.word	0xbd6ef16b
 800ebd8:	3d886b35 	.word	0x3d886b35
 800ebdc:	3dba2e6e 	.word	0x3dba2e6e
 800ebe0:	3e124925 	.word	0x3e124925
 800ebe4:	3eaaaaab 	.word	0x3eaaaaab
 800ebe8:	bd15a221 	.word	0xbd15a221
 800ebec:	bd9d8795 	.word	0xbd9d8795
 800ebf0:	bde38e38 	.word	0xbde38e38
 800ebf4:	be4ccccd 	.word	0xbe4ccccd
 800ebf8:	401bffff 	.word	0x401bffff
 800ebfc:	0800f3d0 	.word	0x0800f3d0
 800ec00:	0800f3e0 	.word	0x0800f3e0

0800ec04 <fabsf>:
 800ec04:	ee10 3a10 	vmov	r3, s0
 800ec08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ec0c:	ee00 3a10 	vmov	s0, r3
 800ec10:	4770      	bx	lr
	...

0800ec14 <_init>:
 800ec14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec16:	bf00      	nop
 800ec18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec1a:	bc08      	pop	{r3}
 800ec1c:	469e      	mov	lr, r3
 800ec1e:	4770      	bx	lr

0800ec20 <_fini>:
 800ec20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec22:	bf00      	nop
 800ec24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec26:	bc08      	pop	{r3}
 800ec28:	469e      	mov	lr, r3
 800ec2a:	4770      	bx	lr
