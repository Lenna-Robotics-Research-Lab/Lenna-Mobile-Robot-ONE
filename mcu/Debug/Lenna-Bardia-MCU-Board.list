
Lenna-Bardia-MCU-Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fc5c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b0  0800fdf0  0800fdf0  0001fdf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080105a0  080105a0  000302d0  2**0
                  CONTENTS
  4 .ARM          00000008  080105a0  080105a0  000205a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080105a8  080105a8  000302d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080105a8  080105a8  000205a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080105ac  080105ac  000205ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d0  20000000  080105b0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000302d0  2**0
                  CONTENTS
 10 .bss          00000860  200002d0  200002d0  000302d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b30  20000b30  000302d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000302d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d37c  00000000  00000000  00030300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003da5  00000000  00000000  0004d67c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016e8  00000000  00000000  00051428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001538  00000000  00000000  00052b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027abe  00000000  00000000  00054048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001eaa4  00000000  00000000  0007bb06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5c0b  00000000  00000000  0009a5aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001801b5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000075dc  00000000  00000000  00180208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d0 	.word	0x200002d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fdd4 	.word	0x0800fdd4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d4 	.word	0x200002d4
 80001cc:	0800fdd4 	.word	0x0800fdd4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ffe:	463b      	mov	r3, r7
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800100a:	4b21      	ldr	r3, [pc, #132]	; (8001090 <MX_ADC1_Init+0x98>)
 800100c:	4a21      	ldr	r2, [pc, #132]	; (8001094 <MX_ADC1_Init+0x9c>)
 800100e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001010:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <MX_ADC1_Init+0x98>)
 8001012:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001016:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001018:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <MX_ADC1_Init+0x98>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800101e:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <MX_ADC1_Init+0x98>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001024:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <MX_ADC1_Init+0x98>)
 8001026:	2200      	movs	r2, #0
 8001028:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800102a:	4b19      	ldr	r3, [pc, #100]	; (8001090 <MX_ADC1_Init+0x98>)
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001032:	4b17      	ldr	r3, [pc, #92]	; (8001090 <MX_ADC1_Init+0x98>)
 8001034:	2200      	movs	r2, #0
 8001036:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001038:	4b15      	ldr	r3, [pc, #84]	; (8001090 <MX_ADC1_Init+0x98>)
 800103a:	4a17      	ldr	r2, [pc, #92]	; (8001098 <MX_ADC1_Init+0xa0>)
 800103c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <MX_ADC1_Init+0x98>)
 8001040:	2200      	movs	r2, #0
 8001042:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <MX_ADC1_Init+0x98>)
 8001046:	2201      	movs	r2, #1
 8001048:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800104a:	4b11      	ldr	r3, [pc, #68]	; (8001090 <MX_ADC1_Init+0x98>)
 800104c:	2200      	movs	r2, #0
 800104e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001052:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <MX_ADC1_Init+0x98>)
 8001054:	2201      	movs	r2, #1
 8001056:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001058:	480d      	ldr	r0, [pc, #52]	; (8001090 <MX_ADC1_Init+0x98>)
 800105a:	f002 fd5d 	bl	8003b18 <HAL_ADC_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001064:	f001 faa0 	bl	80025a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001068:	2305      	movs	r3, #5
 800106a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800106c:	2301      	movs	r3, #1
 800106e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001070:	2300      	movs	r3, #0
 8001072:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001074:	463b      	mov	r3, r7
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_ADC1_Init+0x98>)
 800107a:	f002 fd91 	bl	8003ba0 <HAL_ADC_ConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001084:	f001 fa90 	bl	80025a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200002ec 	.word	0x200002ec
 8001094:	40012000 	.word	0x40012000
 8001098:	0f000001 	.word	0x0f000001

0800109c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a17      	ldr	r2, [pc, #92]	; (8001118 <HAL_ADC_MspInit+0x7c>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d127      	bne.n	800110e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b16      	ldr	r3, [pc, #88]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	4a15      	ldr	r2, [pc, #84]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010cc:	6453      	str	r3, [r2, #68]	; 0x44
 80010ce:	4b13      	ldr	r3, [pc, #76]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a0e      	ldr	r2, [pc, #56]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <HAL_ADC_MspInit+0x80>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = Battery_ADC_Pin;
 80010f6:	2320      	movs	r3, #32
 80010f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fa:	2303      	movs	r3, #3
 80010fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Battery_ADC_GPIO_Port, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	4805      	ldr	r0, [pc, #20]	; (8001120 <HAL_ADC_MspInit+0x84>)
 800110a:	f003 fc41 	bl	8004990 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800110e:	bf00      	nop
 8001110:	3728      	adds	r7, #40	; 0x28
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40012000 	.word	0x40012000
 800111c:	40023800 	.word	0x40023800
 8001120:	40020000 	.word	0x40020000

08001124 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001128:	4b1f      	ldr	r3, [pc, #124]	; (80011a8 <MX_ETH_Init+0x84>)
 800112a:	4a20      	ldr	r2, [pc, #128]	; (80011ac <MX_ETH_Init+0x88>)
 800112c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800112e:	4b20      	ldr	r3, [pc, #128]	; (80011b0 <MX_ETH_Init+0x8c>)
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001134:	4b1e      	ldr	r3, [pc, #120]	; (80011b0 <MX_ETH_Init+0x8c>)
 8001136:	2280      	movs	r2, #128	; 0x80
 8001138:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800113a:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <MX_ETH_Init+0x8c>)
 800113c:	22e1      	movs	r2, #225	; 0xe1
 800113e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001140:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <MX_ETH_Init+0x8c>)
 8001142:	2200      	movs	r2, #0
 8001144:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001146:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <MX_ETH_Init+0x8c>)
 8001148:	2200      	movs	r2, #0
 800114a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800114c:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <MX_ETH_Init+0x8c>)
 800114e:	2200      	movs	r2, #0
 8001150:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <MX_ETH_Init+0x84>)
 8001154:	4a16      	ldr	r2, [pc, #88]	; (80011b0 <MX_ETH_Init+0x8c>)
 8001156:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001158:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <MX_ETH_Init+0x84>)
 800115a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800115e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001160:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <MX_ETH_Init+0x84>)
 8001162:	4a14      	ldr	r2, [pc, #80]	; (80011b4 <MX_ETH_Init+0x90>)
 8001164:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <MX_ETH_Init+0x84>)
 8001168:	4a13      	ldr	r2, [pc, #76]	; (80011b8 <MX_ETH_Init+0x94>)
 800116a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800116c:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <MX_ETH_Init+0x84>)
 800116e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001172:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001174:	480c      	ldr	r0, [pc, #48]	; (80011a8 <MX_ETH_Init+0x84>)
 8001176:	f003 f8e3 	bl	8004340 <HAL_ETH_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001180:	f001 fa12 	bl	80025a8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001184:	2238      	movs	r2, #56	; 0x38
 8001186:	2100      	movs	r1, #0
 8001188:	480c      	ldr	r0, [pc, #48]	; (80011bc <MX_ETH_Init+0x98>)
 800118a:	f009 ff2f 	bl	800afec <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800118e:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <MX_ETH_Init+0x98>)
 8001190:	2221      	movs	r2, #33	; 0x21
 8001192:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001194:	4b09      	ldr	r3, [pc, #36]	; (80011bc <MX_ETH_Init+0x98>)
 8001196:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800119a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800119c:	4b07      	ldr	r3, [pc, #28]	; (80011bc <MX_ETH_Init+0x98>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200004ac 	.word	0x200004ac
 80011ac:	40028000 	.word	0x40028000
 80011b0:	2000055c 	.word	0x2000055c
 80011b4:	200003d4 	.word	0x200003d4
 80011b8:	20000334 	.word	0x20000334
 80011bc:	20000474 	.word	0x20000474

080011c0 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08e      	sub	sp, #56	; 0x38
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a46      	ldr	r2, [pc, #280]	; (80012f8 <HAL_ETH_MspInit+0x138>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	f040 8085 	bne.w	80012ee <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80011e4:	2300      	movs	r3, #0
 80011e6:	623b      	str	r3, [r7, #32]
 80011e8:	4b44      	ldr	r3, [pc, #272]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 80011ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ec:	4a43      	ldr	r2, [pc, #268]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 80011ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011f2:	6313      	str	r3, [r2, #48]	; 0x30
 80011f4:	4b41      	ldr	r3, [pc, #260]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 80011f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011fc:	623b      	str	r3, [r7, #32]
 80011fe:	6a3b      	ldr	r3, [r7, #32]
 8001200:	2300      	movs	r3, #0
 8001202:	61fb      	str	r3, [r7, #28]
 8001204:	4b3d      	ldr	r3, [pc, #244]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 8001206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001208:	4a3c      	ldr	r2, [pc, #240]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 800120a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800120e:	6313      	str	r3, [r2, #48]	; 0x30
 8001210:	4b3a      	ldr	r3, [pc, #232]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 8001212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001214:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001218:	61fb      	str	r3, [r7, #28]
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	2300      	movs	r3, #0
 800121e:	61bb      	str	r3, [r7, #24]
 8001220:	4b36      	ldr	r3, [pc, #216]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 8001222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001224:	4a35      	ldr	r2, [pc, #212]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 8001226:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800122a:	6313      	str	r3, [r2, #48]	; 0x30
 800122c:	4b33      	ldr	r3, [pc, #204]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 800122e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001234:	61bb      	str	r3, [r7, #24]
 8001236:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	4b2f      	ldr	r3, [pc, #188]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 800123e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001240:	4a2e      	ldr	r2, [pc, #184]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 8001242:	f043 0304 	orr.w	r3, r3, #4
 8001246:	6313      	str	r3, [r2, #48]	; 0x30
 8001248:	4b2c      	ldr	r3, [pc, #176]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 800124a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124c:	f003 0304 	and.w	r3, r3, #4
 8001250:	617b      	str	r3, [r7, #20]
 8001252:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001254:	2300      	movs	r3, #0
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	4b28      	ldr	r3, [pc, #160]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 800125a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125c:	4a27      	ldr	r2, [pc, #156]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	6313      	str	r3, [r2, #48]	; 0x30
 8001264:	4b25      	ldr	r3, [pc, #148]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 8001266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	613b      	str	r3, [r7, #16]
 800126e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	4b21      	ldr	r3, [pc, #132]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 8001276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001278:	4a20      	ldr	r2, [pc, #128]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 800127a:	f043 0302 	orr.w	r3, r3, #2
 800127e:	6313      	str	r3, [r2, #48]	; 0x30
 8001280:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <HAL_ETH_MspInit+0x13c>)
 8001282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800128c:	2332      	movs	r3, #50	; 0x32
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001298:	2303      	movs	r3, #3
 800129a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800129c:	230b      	movs	r3, #11
 800129e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a4:	4619      	mov	r1, r3
 80012a6:	4816      	ldr	r0, [pc, #88]	; (8001300 <HAL_ETH_MspInit+0x140>)
 80012a8:	f003 fb72 	bl	8004990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80012ac:	2386      	movs	r3, #134	; 0x86
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b8:	2303      	movs	r3, #3
 80012ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012bc:	230b      	movs	r3, #11
 80012be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c4:	4619      	mov	r1, r3
 80012c6:	480f      	ldr	r0, [pc, #60]	; (8001304 <HAL_ETH_MspInit+0x144>)
 80012c8:	f003 fb62 	bl	8004990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80012cc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012da:	2303      	movs	r3, #3
 80012dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012de:	230b      	movs	r3, #11
 80012e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e6:	4619      	mov	r1, r3
 80012e8:	4807      	ldr	r0, [pc, #28]	; (8001308 <HAL_ETH_MspInit+0x148>)
 80012ea:	f003 fb51 	bl	8004990 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80012ee:	bf00      	nop
 80012f0:	3738      	adds	r7, #56	; 0x38
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40028000 	.word	0x40028000
 80012fc:	40023800 	.word	0x40023800
 8001300:	40020800 	.word	0x40020800
 8001304:	40020000 	.word	0x40020000
 8001308:	40020400 	.word	0x40020400

0800130c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08c      	sub	sp, #48	; 0x30
 8001310:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001312:	f107 031c 	add.w	r3, r7, #28
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
 8001320:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	61bb      	str	r3, [r7, #24]
 8001326:	4b63      	ldr	r3, [pc, #396]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4a62      	ldr	r2, [pc, #392]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 800132c:	f043 0310 	orr.w	r3, r3, #16
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4b60      	ldr	r3, [pc, #384]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f003 0310 	and.w	r3, r3, #16
 800133a:	61bb      	str	r3, [r7, #24]
 800133c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]
 8001342:	4b5c      	ldr	r3, [pc, #368]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a5b      	ldr	r2, [pc, #364]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 8001348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b59      	ldr	r3, [pc, #356]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	4b55      	ldr	r3, [pc, #340]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a54      	ldr	r2, [pc, #336]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 8001364:	f043 0304 	orr.w	r3, r3, #4
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b52      	ldr	r3, [pc, #328]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0304 	and.w	r3, r3, #4
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	4b4e      	ldr	r3, [pc, #312]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a4d      	ldr	r2, [pc, #308]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b4b      	ldr	r3, [pc, #300]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	4b47      	ldr	r3, [pc, #284]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a46      	ldr	r2, [pc, #280]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b44      	ldr	r3, [pc, #272]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	4b40      	ldr	r3, [pc, #256]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a3f      	ldr	r2, [pc, #252]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 80013b8:	f043 0308 	orr.w	r3, r3, #8
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b3d      	ldr	r3, [pc, #244]	; (80014b4 <MX_GPIO_Init+0x1a8>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TRIG_HC_3_Pin|TRIG_HC_4_Pin|GPIO_PIN_7|GPIO_PIN_8
 80013ca:	2200      	movs	r2, #0
 80013cc:	f64f 719b 	movw	r1, #65435	; 0xff9b
 80013d0:	4839      	ldr	r0, [pc, #228]	; (80014b8 <MX_GPIO_Init+0x1ac>)
 80013d2:	f003 fc79 	bl	8004cc8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|TRIG_HC_1_Pin
                          |TRIG_HC_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Buzzer_Pin|GPIO_PIN_11, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	f44f 6101 	mov.w	r1, #2064	; 0x810
 80013dc:	4837      	ldr	r0, [pc, #220]	; (80014bc <MX_GPIO_Init+0x1b0>)
 80013de:	f003 fc73 	bl	8004cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80013e2:	2200      	movs	r2, #0
 80013e4:	f24c 0103 	movw	r1, #49155	; 0xc003
 80013e8:	4835      	ldr	r0, [pc, #212]	; (80014c0 <MX_GPIO_Init+0x1b4>)
 80013ea:	f003 fc6d 	bl	8004cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80013ee:	2200      	movs	r2, #0
 80013f0:	f643 711b 	movw	r1, #16155	; 0x3f1b
 80013f4:	4833      	ldr	r0, [pc, #204]	; (80014c4 <MX_GPIO_Init+0x1b8>)
 80013f6:	f003 fc67 	bl	8004cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PE7 PE8
                           PE9 PE10 PE11 PE12
                           PE13 PE14 PE15 PEPin
                           PEPin */
  GPIO_InitStruct.Pin = TRIG_HC_3_Pin|TRIG_HC_4_Pin|GPIO_PIN_7|GPIO_PIN_8
 80013fa:	f64f 739b 	movw	r3, #65435	; 0xff9b
 80013fe:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|TRIG_HC_1_Pin
                          |TRIG_HC_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001400:	2301      	movs	r3, #1
 8001402:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	2300      	movs	r3, #0
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800140c:	f107 031c 	add.w	r3, r7, #28
 8001410:	4619      	mov	r1, r3
 8001412:	4829      	ldr	r0, [pc, #164]	; (80014b8 <MX_GPIO_Init+0x1ac>)
 8001414:	f003 fabc 	bl	8004990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8001418:	2310      	movs	r3, #16
 800141a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141c:	2301      	movs	r3, #1
 800141e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001420:	2302      	movs	r3, #2
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001424:	2300      	movs	r3, #0
 8001426:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001428:	f107 031c 	add.w	r3, r7, #28
 800142c:	4619      	mov	r1, r3
 800142e:	4823      	ldr	r0, [pc, #140]	; (80014bc <MX_GPIO_Init+0x1b0>)
 8001430:	f003 faae 	bl	8004990 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_15;
 8001434:	f24c 0303 	movw	r3, #49155	; 0xc003
 8001438:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143a:	2301      	movs	r3, #1
 800143c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	2300      	movs	r3, #0
 8001444:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001446:	f107 031c 	add.w	r3, r7, #28
 800144a:	4619      	mov	r1, r3
 800144c:	481c      	ldr	r0, [pc, #112]	; (80014c0 <MX_GPIO_Init+0x1b4>)
 800144e:	f003 fa9f 	bl	8004990 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001452:	f643 731b 	movw	r3, #16155	; 0x3f1b
 8001456:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|MOTOR2_B_Pin|MOTOR2_A_Pin
                          |MOTOR1_B_Pin|MOTOR1_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001458:	2301      	movs	r3, #1
 800145a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2300      	movs	r3, #0
 8001462:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001464:	f107 031c 	add.w	r3, r7, #28
 8001468:	4619      	mov	r1, r3
 800146a:	4816      	ldr	r0, [pc, #88]	; (80014c4 <MX_GPIO_Init+0x1b8>)
 800146c:	f003 fa90 	bl	8004990 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001470:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001474:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001476:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800147a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001480:	f107 031c 	add.w	r3, r7, #28
 8001484:	4619      	mov	r1, r3
 8001486:	480f      	ldr	r0, [pc, #60]	; (80014c4 <MX_GPIO_Init+0x1b8>)
 8001488:	f003 fa82 	bl	8004990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800148c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001492:	2301      	movs	r3, #1
 8001494:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2300      	movs	r3, #0
 800149c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149e:	f107 031c 	add.w	r3, r7, #28
 80014a2:	4619      	mov	r1, r3
 80014a4:	4805      	ldr	r0, [pc, #20]	; (80014bc <MX_GPIO_Init+0x1b0>)
 80014a6:	f003 fa73 	bl	8004990 <HAL_GPIO_Init>

}
 80014aa:	bf00      	nop
 80014ac:	3730      	adds	r7, #48	; 0x30
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40020000 	.word	0x40020000
 80014c0:	40020400 	.word	0x40020400
 80014c4:	40020c00 	.word	0x40020c00

080014c8 <LRL_HMC5883L_Set_Declination>:
uint8_t _reg;

float heading;

float LRL_HMC5883L_Set_Declination(int16_t declination_degs , int16_t declination_mins, char declination_dir)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	80fb      	strh	r3, [r7, #6]
 80014d2:	460b      	mov	r3, r1
 80014d4:	80bb      	strh	r3, [r7, #4]
 80014d6:	4613      	mov	r3, r2
 80014d8:	70fb      	strb	r3, [r7, #3]
	int8_t _dir = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	73fb      	strb	r3, [r7, #15]

	if (declination_dir == 'E' || declination_dir == 'e' || declination_dir == 1)
 80014de:	78fb      	ldrb	r3, [r7, #3]
 80014e0:	2b45      	cmp	r3, #69	; 0x45
 80014e2:	d005      	beq.n	80014f0 <LRL_HMC5883L_Set_Declination+0x28>
 80014e4:	78fb      	ldrb	r3, [r7, #3]
 80014e6:	2b65      	cmp	r3, #101	; 0x65
 80014e8:	d002      	beq.n	80014f0 <LRL_HMC5883L_Set_Declination+0x28>
 80014ea:	78fb      	ldrb	r3, [r7, #3]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d102      	bne.n	80014f6 <LRL_HMC5883L_Set_Declination+0x2e>
	{
		_dir = 1;
 80014f0:	2301      	movs	r3, #1
 80014f2:	73fb      	strb	r3, [r7, #15]
 80014f4:	e007      	b.n	8001506 <LRL_HMC5883L_Set_Declination+0x3e>
	}
	else if (declination_dir == 'W' || declination_dir == 'w' || declination_dir == -1)
 80014f6:	78fb      	ldrb	r3, [r7, #3]
 80014f8:	2b57      	cmp	r3, #87	; 0x57
 80014fa:	d002      	beq.n	8001502 <LRL_HMC5883L_Set_Declination+0x3a>
 80014fc:	78fb      	ldrb	r3, [r7, #3]
 80014fe:	2b77      	cmp	r3, #119	; 0x77
 8001500:	d101      	bne.n	8001506 <LRL_HMC5883L_Set_Declination+0x3e>
	{
		_dir = -1;
 8001502:	23ff      	movs	r3, #255	; 0xff
 8001504:	73fb      	strb	r3, [r7, #15]
	}

	return ((_dir)* ( declination_degs + (1/60 * declination_mins)) * (M_PI / 180));
 8001506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800150a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800150e:	fb02 f303 	mul.w	r3, r2, r3
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff f806 	bl	8000524 <__aeabi_i2d>
 8001518:	a309      	add	r3, pc, #36	; (adr r3, 8001540 <LRL_HMC5883L_Set_Declination+0x78>)
 800151a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151e:	f7ff f86b 	bl	80005f8 <__aeabi_dmul>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4610      	mov	r0, r2
 8001528:	4619      	mov	r1, r3
 800152a:	f7ff fb5d 	bl	8000be8 <__aeabi_d2f>
 800152e:	4603      	mov	r3, r0
 8001530:	ee07 3a90 	vmov	s15, r3
}
 8001534:	eeb0 0a67 	vmov.f32	s0, s15
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	a2529d39 	.word	0xa2529d39
 8001544:	3f91df46 	.word	0x3f91df46

08001548 <LRL_HMC5883L_Init>:

void LRL_HMC5883L_Init(I2C_HandleTypeDef *hi2c)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af04      	add	r7, sp, #16
 800154e:	6078      	str	r0, [r7, #4]
    _hi2c = hi2c;
 8001550:	4a31      	ldr	r2, [pc, #196]	; (8001618 <LRL_HMC5883L_Init+0xd0>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6013      	str	r3, [r2, #0]

    // write CONFIG_A register
    _reg = 0x3C;
 8001556:	4b31      	ldr	r3, [pc, #196]	; (800161c <LRL_HMC5883L_Init+0xd4>)
 8001558:	223c      	movs	r2, #60	; 0x3c
 800155a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(_hi2c, HMC5883L_ADDRESS, &_reg, 1, DELAY_TIMEOUT);
 800155c:	4b2e      	ldr	r3, [pc, #184]	; (8001618 <LRL_HMC5883L_Init+0xd0>)
 800155e:	6818      	ldr	r0, [r3, #0]
 8001560:	f04f 33ff 	mov.w	r3, #4294967295
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	2301      	movs	r3, #1
 8001568:	4a2c      	ldr	r2, [pc, #176]	; (800161c <LRL_HMC5883L_Init+0xd4>)
 800156a:	213c      	movs	r1, #60	; 0x3c
 800156c:	f003 fd0a 	bl	8004f84 <HAL_I2C_Master_Transmit>
	_reg = 0x10;
 8001570:	4b2a      	ldr	r3, [pc, #168]	; (800161c <LRL_HMC5883L_Init+0xd4>)
 8001572:	2210      	movs	r2, #16
 8001574:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(_hi2c, HMC5883L_ADDRESS, HMC5883L_RA_CONFIG_A, 1, &_reg, 1, DELAY_TIMEOUT);
 8001576:	4b28      	ldr	r3, [pc, #160]	; (8001618 <LRL_HMC5883L_Init+0xd0>)
 8001578:	6818      	ldr	r0, [r3, #0]
 800157a:	f04f 33ff 	mov.w	r3, #4294967295
 800157e:	9302      	str	r3, [sp, #8]
 8001580:	2301      	movs	r3, #1
 8001582:	9301      	str	r3, [sp, #4]
 8001584:	4b25      	ldr	r3, [pc, #148]	; (800161c <LRL_HMC5883L_Init+0xd4>)
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	2301      	movs	r3, #1
 800158a:	2200      	movs	r2, #0
 800158c:	213c      	movs	r1, #60	; 0x3c
 800158e:	f003 fdf7 	bl	8005180 <HAL_I2C_Mem_Write>

	// write CONFIG_B register
	_reg = 0x3C;
 8001592:	4b22      	ldr	r3, [pc, #136]	; (800161c <LRL_HMC5883L_Init+0xd4>)
 8001594:	223c      	movs	r2, #60	; 0x3c
 8001596:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(_hi2c, HMC5883L_ADDRESS, &_reg, 1, DELAY_TIMEOUT);
 8001598:	4b1f      	ldr	r3, [pc, #124]	; (8001618 <LRL_HMC5883L_Init+0xd0>)
 800159a:	6818      	ldr	r0, [r3, #0]
 800159c:	f04f 33ff 	mov.w	r3, #4294967295
 80015a0:	9300      	str	r3, [sp, #0]
 80015a2:	2301      	movs	r3, #1
 80015a4:	4a1d      	ldr	r2, [pc, #116]	; (800161c <LRL_HMC5883L_Init+0xd4>)
 80015a6:	213c      	movs	r1, #60	; 0x3c
 80015a8:	f003 fcec 	bl	8004f84 <HAL_I2C_Master_Transmit>
	_reg = 0xE0;
 80015ac:	4b1b      	ldr	r3, [pc, #108]	; (800161c <LRL_HMC5883L_Init+0xd4>)
 80015ae:	22e0      	movs	r2, #224	; 0xe0
 80015b0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(_hi2c, HMC5883L_ADDRESS, HMC5883L_RA_CONFIG_B, 1, &_reg, 1, DELAY_TIMEOUT);
 80015b2:	4b19      	ldr	r3, [pc, #100]	; (8001618 <LRL_HMC5883L_Init+0xd0>)
 80015b4:	6818      	ldr	r0, [r3, #0]
 80015b6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ba:	9302      	str	r3, [sp, #8]
 80015bc:	2301      	movs	r3, #1
 80015be:	9301      	str	r3, [sp, #4]
 80015c0:	4b16      	ldr	r3, [pc, #88]	; (800161c <LRL_HMC5883L_Init+0xd4>)
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	2301      	movs	r3, #1
 80015c6:	2201      	movs	r2, #1
 80015c8:	213c      	movs	r1, #60	; 0x3c
 80015ca:	f003 fdd9 	bl	8005180 <HAL_I2C_Mem_Write>

	// write MODE register
	_reg = 0x3C;
 80015ce:	4b13      	ldr	r3, [pc, #76]	; (800161c <LRL_HMC5883L_Init+0xd4>)
 80015d0:	223c      	movs	r2, #60	; 0x3c
 80015d2:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(_hi2c, HMC5883L_ADDRESS, &_reg, 1, DELAY_TIMEOUT);
 80015d4:	4b10      	ldr	r3, [pc, #64]	; (8001618 <LRL_HMC5883L_Init+0xd0>)
 80015d6:	6818      	ldr	r0, [r3, #0]
 80015d8:	f04f 33ff 	mov.w	r3, #4294967295
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	2301      	movs	r3, #1
 80015e0:	4a0e      	ldr	r2, [pc, #56]	; (800161c <LRL_HMC5883L_Init+0xd4>)
 80015e2:	213c      	movs	r1, #60	; 0x3c
 80015e4:	f003 fcce 	bl	8004f84 <HAL_I2C_Master_Transmit>
	_reg = 0x01;
 80015e8:	4b0c      	ldr	r3, [pc, #48]	; (800161c <LRL_HMC5883L_Init+0xd4>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(_hi2c, HMC5883L_ADDRESS, 0x02, 1, &_reg, 1, DELAY_TIMEOUT);
 80015ee:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <LRL_HMC5883L_Init+0xd0>)
 80015f0:	6818      	ldr	r0, [r3, #0]
 80015f2:	f04f 33ff 	mov.w	r3, #4294967295
 80015f6:	9302      	str	r3, [sp, #8]
 80015f8:	2301      	movs	r3, #1
 80015fa:	9301      	str	r3, [sp, #4]
 80015fc:	4b07      	ldr	r3, [pc, #28]	; (800161c <LRL_HMC5883L_Init+0xd4>)
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	2301      	movs	r3, #1
 8001602:	2202      	movs	r2, #2
 8001604:	213c      	movs	r1, #60	; 0x3c
 8001606:	f003 fdbb 	bl	8005180 <HAL_I2C_Mem_Write>

	HAL_Delay(6);
 800160a:	2006      	movs	r0, #6
 800160c:	f002 fa60 	bl	8003ad0 <HAL_Delay>
}
 8001610:	bf00      	nop
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20000564 	.word	0x20000564
 800161c:	2000056e 	.word	0x2000056e

08001620 <LRL_HMC5883L_ReadHeading>:

void LRL_HMC5883L_ReadHeading(int16_t *x, int16_t *y, int16_t *z, float *headingDegrees)
{
 8001620:	b5b0      	push	{r4, r5, r7, lr}
 8001622:	b088      	sub	sp, #32
 8001624:	af04      	add	r7, sp, #16
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
 800162c:	603b      	str	r3, [r7, #0]

	// write MODE register
	_reg = 0x3C;
 800162e:	4b76      	ldr	r3, [pc, #472]	; (8001808 <LRL_HMC5883L_ReadHeading+0x1e8>)
 8001630:	223c      	movs	r2, #60	; 0x3c
 8001632:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(_hi2c, HMC5883L_ADDRESS, &_reg, 1, DELAY_TIMEOUT);
 8001634:	4b75      	ldr	r3, [pc, #468]	; (800180c <LRL_HMC5883L_ReadHeading+0x1ec>)
 8001636:	6818      	ldr	r0, [r3, #0]
 8001638:	f04f 33ff 	mov.w	r3, #4294967295
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	2301      	movs	r3, #1
 8001640:	4a71      	ldr	r2, [pc, #452]	; (8001808 <LRL_HMC5883L_ReadHeading+0x1e8>)
 8001642:	213c      	movs	r1, #60	; 0x3c
 8001644:	f003 fc9e 	bl	8004f84 <HAL_I2C_Master_Transmit>
	_reg = 0x01;
 8001648:	4b6f      	ldr	r3, [pc, #444]	; (8001808 <LRL_HMC5883L_ReadHeading+0x1e8>)
 800164a:	2201      	movs	r2, #1
 800164c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(_hi2c, HMC5883L_ADDRESS, 0x02, 1, &_reg, 1, DELAY_TIMEOUT);
 800164e:	4b6f      	ldr	r3, [pc, #444]	; (800180c <LRL_HMC5883L_ReadHeading+0x1ec>)
 8001650:	6818      	ldr	r0, [r3, #0]
 8001652:	f04f 33ff 	mov.w	r3, #4294967295
 8001656:	9302      	str	r3, [sp, #8]
 8001658:	2301      	movs	r3, #1
 800165a:	9301      	str	r3, [sp, #4]
 800165c:	4b6a      	ldr	r3, [pc, #424]	; (8001808 <LRL_HMC5883L_ReadHeading+0x1e8>)
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	2301      	movs	r3, #1
 8001662:	2202      	movs	r2, #2
 8001664:	213c      	movs	r1, #60	; 0x3c
 8001666:	f003 fd8b 	bl	8005180 <HAL_I2C_Mem_Write>
	HAL_Delay(6);
 800166a:	2006      	movs	r0, #6
 800166c:	f002 fa30 	bl	8003ad0 <HAL_Delay>

	_reg = 0x3D;
 8001670:	4b65      	ldr	r3, [pc, #404]	; (8001808 <LRL_HMC5883L_ReadHeading+0x1e8>)
 8001672:	223d      	movs	r2, #61	; 0x3d
 8001674:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(_hi2c, HMC5883L_ADDRESS, &_reg, 1, DELAY_TIMEOUT);
 8001676:	4b65      	ldr	r3, [pc, #404]	; (800180c <LRL_HMC5883L_ReadHeading+0x1ec>)
 8001678:	6818      	ldr	r0, [r3, #0]
 800167a:	f04f 33ff 	mov.w	r3, #4294967295
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	2301      	movs	r3, #1
 8001682:	4a61      	ldr	r2, [pc, #388]	; (8001808 <LRL_HMC5883L_ReadHeading+0x1e8>)
 8001684:	213c      	movs	r1, #60	; 0x3c
 8001686:	f003 fc7d 	bl	8004f84 <HAL_I2C_Master_Transmit>
	HAL_I2C_Mem_Read(_hi2c, HMC5883L_ADDRESS, 0x03, 1, (uint8_t *)&_buffer, 6, DELAY_TIMEOUT);
 800168a:	4b60      	ldr	r3, [pc, #384]	; (800180c <LRL_HMC5883L_ReadHeading+0x1ec>)
 800168c:	6818      	ldr	r0, [r3, #0]
 800168e:	f04f 33ff 	mov.w	r3, #4294967295
 8001692:	9302      	str	r3, [sp, #8]
 8001694:	2306      	movs	r3, #6
 8001696:	9301      	str	r3, [sp, #4]
 8001698:	4b5d      	ldr	r3, [pc, #372]	; (8001810 <LRL_HMC5883L_ReadHeading+0x1f0>)
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	2301      	movs	r3, #1
 800169e:	2203      	movs	r2, #3
 80016a0:	213c      	movs	r1, #60	; 0x3c
 80016a2:	f003 fe67 	bl	8005374 <HAL_I2C_Mem_Read>

	*x = (int16_t)((_buffer[0] << 8) | _buffer[1]);
 80016a6:	4b5a      	ldr	r3, [pc, #360]	; (8001810 <LRL_HMC5883L_ReadHeading+0x1f0>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	021b      	lsls	r3, r3, #8
 80016ac:	b21a      	sxth	r2, r3
 80016ae:	4b58      	ldr	r3, [pc, #352]	; (8001810 <LRL_HMC5883L_ReadHeading+0x1f0>)
 80016b0:	785b      	ldrb	r3, [r3, #1]
 80016b2:	b21b      	sxth	r3, r3
 80016b4:	4313      	orrs	r3, r2
 80016b6:	b21a      	sxth	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	801a      	strh	r2, [r3, #0]
	*y = (int16_t)((_buffer[4] << 8) | _buffer[5]);
 80016bc:	4b54      	ldr	r3, [pc, #336]	; (8001810 <LRL_HMC5883L_ReadHeading+0x1f0>)
 80016be:	791b      	ldrb	r3, [r3, #4]
 80016c0:	021b      	lsls	r3, r3, #8
 80016c2:	b21a      	sxth	r2, r3
 80016c4:	4b52      	ldr	r3, [pc, #328]	; (8001810 <LRL_HMC5883L_ReadHeading+0x1f0>)
 80016c6:	795b      	ldrb	r3, [r3, #5]
 80016c8:	b21b      	sxth	r3, r3
 80016ca:	4313      	orrs	r3, r2
 80016cc:	b21a      	sxth	r2, r3
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	801a      	strh	r2, [r3, #0]
	*z = (int16_t)((_buffer[2] << 8) | _buffer[3]);
 80016d2:	4b4f      	ldr	r3, [pc, #316]	; (8001810 <LRL_HMC5883L_ReadHeading+0x1f0>)
 80016d4:	789b      	ldrb	r3, [r3, #2]
 80016d6:	021b      	lsls	r3, r3, #8
 80016d8:	b21a      	sxth	r2, r3
 80016da:	4b4d      	ldr	r3, [pc, #308]	; (8001810 <LRL_HMC5883L_ReadHeading+0x1f0>)
 80016dc:	78db      	ldrb	r3, [r3, #3]
 80016de:	b21b      	sxth	r3, r3
 80016e0:	4313      	orrs	r3, r2
 80016e2:	b21a      	sxth	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	801a      	strh	r2, [r3, #0]

	heading = atan2(*x, *y);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7fe ff18 	bl	8000524 <__aeabi_i2d>
 80016f4:	4604      	mov	r4, r0
 80016f6:	460d      	mov	r5, r1
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7fe ff10 	bl	8000524 <__aeabi_i2d>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	ec43 2b11 	vmov	d1, r2, r3
 800170c:	ec45 4b10 	vmov	d0, r4, r5
 8001710:	f00e f8e6 	bl	800f8e0 <atan2>
 8001714:	ec53 2b10 	vmov	r2, r3, d0
 8001718:	4610      	mov	r0, r2
 800171a:	4619      	mov	r1, r3
 800171c:	f7ff fa64 	bl	8000be8 <__aeabi_d2f>
 8001720:	4603      	mov	r3, r0
 8001722:	4a3c      	ldr	r2, [pc, #240]	; (8001814 <LRL_HMC5883L_ReadHeading+0x1f4>)
 8001724:	6013      	str	r3, [r2, #0]

	heading += LRL_HMC5883L_Set_Declination(5, 3, 'E');
 8001726:	2245      	movs	r2, #69	; 0x45
 8001728:	2103      	movs	r1, #3
 800172a:	2005      	movs	r0, #5
 800172c:	f7ff fecc 	bl	80014c8 <LRL_HMC5883L_Set_Declination>
 8001730:	eeb0 7a40 	vmov.f32	s14, s0
 8001734:	4b37      	ldr	r3, [pc, #220]	; (8001814 <LRL_HMC5883L_ReadHeading+0x1f4>)
 8001736:	edd3 7a00 	vldr	s15, [r3]
 800173a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800173e:	4b35      	ldr	r3, [pc, #212]	; (8001814 <LRL_HMC5883L_ReadHeading+0x1f4>)
 8001740:	edc3 7a00 	vstr	s15, [r3]

	// Correct for when signs are reversed.
    if(heading < 0)
 8001744:	4b33      	ldr	r3, [pc, #204]	; (8001814 <LRL_HMC5883L_ReadHeading+0x1f4>)
 8001746:	edd3 7a00 	vldr	s15, [r3]
 800174a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800174e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001752:	d512      	bpl.n	800177a <LRL_HMC5883L_ReadHeading+0x15a>
    	heading += 2*M_PI;
 8001754:	4b2f      	ldr	r3, [pc, #188]	; (8001814 <LRL_HMC5883L_ReadHeading+0x1f4>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f7fe fef5 	bl	8000548 <__aeabi_f2d>
 800175e:	a326      	add	r3, pc, #152	; (adr r3, 80017f8 <LRL_HMC5883L_ReadHeading+0x1d8>)
 8001760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001764:	f7fe fd92 	bl	800028c <__adddf3>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4610      	mov	r0, r2
 800176e:	4619      	mov	r1, r3
 8001770:	f7ff fa3a 	bl	8000be8 <__aeabi_d2f>
 8001774:	4603      	mov	r3, r0
 8001776:	4a27      	ldr	r2, [pc, #156]	; (8001814 <LRL_HMC5883L_ReadHeading+0x1f4>)
 8001778:	6013      	str	r3, [r2, #0]

    // Check for wrap due to addition of declination.
    if(heading > 2*M_PI)
 800177a:	4b26      	ldr	r3, [pc, #152]	; (8001814 <LRL_HMC5883L_ReadHeading+0x1f4>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe fee2 	bl	8000548 <__aeabi_f2d>
 8001784:	a31c      	add	r3, pc, #112	; (adr r3, 80017f8 <LRL_HMC5883L_ReadHeading+0x1d8>)
 8001786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178a:	f7ff f9c5 	bl	8000b18 <__aeabi_dcmpgt>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d012      	beq.n	80017ba <LRL_HMC5883L_ReadHeading+0x19a>
    	heading -= 2*M_PI;
 8001794:	4b1f      	ldr	r3, [pc, #124]	; (8001814 <LRL_HMC5883L_ReadHeading+0x1f4>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f7fe fed5 	bl	8000548 <__aeabi_f2d>
 800179e:	a316      	add	r3, pc, #88	; (adr r3, 80017f8 <LRL_HMC5883L_ReadHeading+0x1d8>)
 80017a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a4:	f7fe fd70 	bl	8000288 <__aeabi_dsub>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4610      	mov	r0, r2
 80017ae:	4619      	mov	r1, r3
 80017b0:	f7ff fa1a 	bl	8000be8 <__aeabi_d2f>
 80017b4:	4603      	mov	r3, r0
 80017b6:	4a17      	ldr	r2, [pc, #92]	; (8001814 <LRL_HMC5883L_ReadHeading+0x1f4>)
 80017b8:	6013      	str	r3, [r2, #0]

    // Convert radians to degrees for readability.
    *headingDegrees = heading * 180/M_PI;
 80017ba:	4b16      	ldr	r3, [pc, #88]	; (8001814 <LRL_HMC5883L_ReadHeading+0x1f4>)
 80017bc:	edd3 7a00 	vldr	s15, [r3]
 80017c0:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001818 <LRL_HMC5883L_ReadHeading+0x1f8>
 80017c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017c8:	ee17 0a90 	vmov	r0, s15
 80017cc:	f7fe febc 	bl	8000548 <__aeabi_f2d>
 80017d0:	a30b      	add	r3, pc, #44	; (adr r3, 8001800 <LRL_HMC5883L_ReadHeading+0x1e0>)
 80017d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d6:	f7ff f839 	bl	800084c <__aeabi_ddiv>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4610      	mov	r0, r2
 80017e0:	4619      	mov	r1, r3
 80017e2:	f7ff fa01 	bl	8000be8 <__aeabi_d2f>
 80017e6:	4602      	mov	r2, r0
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	601a      	str	r2, [r3, #0]
}
 80017ec:	bf00      	nop
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bdb0      	pop	{r4, r5, r7, pc}
 80017f4:	f3af 8000 	nop.w
 80017f8:	54442d18 	.word	0x54442d18
 80017fc:	401921fb 	.word	0x401921fb
 8001800:	54442d18 	.word	0x54442d18
 8001804:	400921fb 	.word	0x400921fb
 8001808:	2000056e 	.word	0x2000056e
 800180c:	20000564 	.word	0x20000564
 8001810:	20000568 	.word	0x20000568
 8001814:	20000570 	.word	0x20000570
 8001818:	43340000 	.word	0x43340000

0800181c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001820:	4b12      	ldr	r3, [pc, #72]	; (800186c <MX_I2C1_Init+0x50>)
 8001822:	4a13      	ldr	r2, [pc, #76]	; (8001870 <MX_I2C1_Init+0x54>)
 8001824:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001826:	4b11      	ldr	r3, [pc, #68]	; (800186c <MX_I2C1_Init+0x50>)
 8001828:	4a12      	ldr	r2, [pc, #72]	; (8001874 <MX_I2C1_Init+0x58>)
 800182a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800182c:	4b0f      	ldr	r3, [pc, #60]	; (800186c <MX_I2C1_Init+0x50>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001832:	4b0e      	ldr	r3, [pc, #56]	; (800186c <MX_I2C1_Init+0x50>)
 8001834:	2200      	movs	r2, #0
 8001836:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001838:	4b0c      	ldr	r3, [pc, #48]	; (800186c <MX_I2C1_Init+0x50>)
 800183a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800183e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001840:	4b0a      	ldr	r3, [pc, #40]	; (800186c <MX_I2C1_Init+0x50>)
 8001842:	2200      	movs	r2, #0
 8001844:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001846:	4b09      	ldr	r3, [pc, #36]	; (800186c <MX_I2C1_Init+0x50>)
 8001848:	2200      	movs	r2, #0
 800184a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800184c:	4b07      	ldr	r3, [pc, #28]	; (800186c <MX_I2C1_Init+0x50>)
 800184e:	2200      	movs	r2, #0
 8001850:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001852:	4b06      	ldr	r3, [pc, #24]	; (800186c <MX_I2C1_Init+0x50>)
 8001854:	2200      	movs	r2, #0
 8001856:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001858:	4804      	ldr	r0, [pc, #16]	; (800186c <MX_I2C1_Init+0x50>)
 800185a:	f003 fa4f 	bl	8004cfc <HAL_I2C_Init>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001864:	f000 fea0 	bl	80025a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000574 	.word	0x20000574
 8001870:	40005400 	.word	0x40005400
 8001874:	000186a0 	.word	0x000186a0

08001878 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800187c:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <MX_I2C3_Init+0x50>)
 800187e:	4a13      	ldr	r2, [pc, #76]	; (80018cc <MX_I2C3_Init+0x54>)
 8001880:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001882:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <MX_I2C3_Init+0x50>)
 8001884:	4a12      	ldr	r2, [pc, #72]	; (80018d0 <MX_I2C3_Init+0x58>)
 8001886:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001888:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <MX_I2C3_Init+0x50>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800188e:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <MX_I2C3_Init+0x50>)
 8001890:	2200      	movs	r2, #0
 8001892:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <MX_I2C3_Init+0x50>)
 8001896:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800189a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800189c:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <MX_I2C3_Init+0x50>)
 800189e:	2200      	movs	r2, #0
 80018a0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80018a2:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <MX_I2C3_Init+0x50>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018a8:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <MX_I2C3_Init+0x50>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018ae:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <MX_I2C3_Init+0x50>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80018b4:	4804      	ldr	r0, [pc, #16]	; (80018c8 <MX_I2C3_Init+0x50>)
 80018b6:	f003 fa21 	bl	8004cfc <HAL_I2C_Init>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80018c0:	f000 fe72 	bl	80025a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	200005c8 	.word	0x200005c8
 80018cc:	40005c00 	.word	0x40005c00
 80018d0:	000186a0 	.word	0x000186a0

080018d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08c      	sub	sp, #48	; 0x30
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018dc:	f107 031c 	add.w	r3, r7, #28
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a4a      	ldr	r2, [pc, #296]	; (8001a1c <HAL_I2C_MspInit+0x148>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d12c      	bne.n	8001950 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	61bb      	str	r3, [r7, #24]
 80018fa:	4b49      	ldr	r3, [pc, #292]	; (8001a20 <HAL_I2C_MspInit+0x14c>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	4a48      	ldr	r2, [pc, #288]	; (8001a20 <HAL_I2C_MspInit+0x14c>)
 8001900:	f043 0302 	orr.w	r3, r3, #2
 8001904:	6313      	str	r3, [r2, #48]	; 0x30
 8001906:	4b46      	ldr	r3, [pc, #280]	; (8001a20 <HAL_I2C_MspInit+0x14c>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	61bb      	str	r3, [r7, #24]
 8001910:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = JET_I2C_SCL_Pin|JET_I2C_SDA_Pin;
 8001912:	23c0      	movs	r3, #192	; 0xc0
 8001914:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001916:	2312      	movs	r3, #18
 8001918:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191e:	2303      	movs	r3, #3
 8001920:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001922:	2304      	movs	r3, #4
 8001924:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001926:	f107 031c 	add.w	r3, r7, #28
 800192a:	4619      	mov	r1, r3
 800192c:	483d      	ldr	r0, [pc, #244]	; (8001a24 <HAL_I2C_MspInit+0x150>)
 800192e:	f003 f82f 	bl	8004990 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	617b      	str	r3, [r7, #20]
 8001936:	4b3a      	ldr	r3, [pc, #232]	; (8001a20 <HAL_I2C_MspInit+0x14c>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	4a39      	ldr	r2, [pc, #228]	; (8001a20 <HAL_I2C_MspInit+0x14c>)
 800193c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001940:	6413      	str	r3, [r2, #64]	; 0x40
 8001942:	4b37      	ldr	r3, [pc, #220]	; (8001a20 <HAL_I2C_MspInit+0x14c>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800194e:	e060      	b.n	8001a12 <HAL_I2C_MspInit+0x13e>
  else if(i2cHandle->Instance==I2C3)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a34      	ldr	r2, [pc, #208]	; (8001a28 <HAL_I2C_MspInit+0x154>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d15b      	bne.n	8001a12 <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	4b30      	ldr	r3, [pc, #192]	; (8001a20 <HAL_I2C_MspInit+0x14c>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a2f      	ldr	r2, [pc, #188]	; (8001a20 <HAL_I2C_MspInit+0x14c>)
 8001964:	f043 0304 	orr.w	r3, r3, #4
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b2d      	ldr	r3, [pc, #180]	; (8001a20 <HAL_I2C_MspInit+0x14c>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0304 	and.w	r3, r3, #4
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	4b29      	ldr	r3, [pc, #164]	; (8001a20 <HAL_I2C_MspInit+0x14c>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a28      	ldr	r2, [pc, #160]	; (8001a20 <HAL_I2C_MspInit+0x14c>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b26      	ldr	r3, [pc, #152]	; (8001a20 <HAL_I2C_MspInit+0x14c>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUS_SDA_Pin;
 8001992:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001998:	2312      	movs	r3, #18
 800199a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a0:	2303      	movs	r3, #3
 80019a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80019a4:	2304      	movs	r3, #4
 80019a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BUS_SDA_GPIO_Port, &GPIO_InitStruct);
 80019a8:	f107 031c 	add.w	r3, r7, #28
 80019ac:	4619      	mov	r1, r3
 80019ae:	481f      	ldr	r0, [pc, #124]	; (8001a2c <HAL_I2C_MspInit+0x158>)
 80019b0:	f002 ffee 	bl	8004990 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BUS_SCL_Pin;
 80019b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019ba:	2312      	movs	r3, #18
 80019bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c2:	2303      	movs	r3, #3
 80019c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80019c6:	2304      	movs	r3, #4
 80019c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BUS_SCL_GPIO_Port, &GPIO_InitStruct);
 80019ca:	f107 031c 	add.w	r3, r7, #28
 80019ce:	4619      	mov	r1, r3
 80019d0:	4817      	ldr	r0, [pc, #92]	; (8001a30 <HAL_I2C_MspInit+0x15c>)
 80019d2:	f002 ffdd 	bl	8004990 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <HAL_I2C_MspInit+0x14c>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	4a10      	ldr	r2, [pc, #64]	; (8001a20 <HAL_I2C_MspInit+0x14c>)
 80019e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019e4:	6413      	str	r3, [r2, #64]	; 0x40
 80019e6:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <HAL_I2C_MspInit+0x14c>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019ee:	60bb      	str	r3, [r7, #8]
 80019f0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2100      	movs	r1, #0
 80019f6:	2048      	movs	r0, #72	; 0x48
 80019f8:	f002 fbcb 	bl	8004192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80019fc:	2048      	movs	r0, #72	; 0x48
 80019fe:	f002 fbe4 	bl	80041ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2100      	movs	r1, #0
 8001a06:	2049      	movs	r0, #73	; 0x49
 8001a08:	f002 fbc3 	bl	8004192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8001a0c:	2049      	movs	r0, #73	; 0x49
 8001a0e:	f002 fbdc 	bl	80041ca <HAL_NVIC_EnableIRQ>
}
 8001a12:	bf00      	nop
 8001a14:	3730      	adds	r7, #48	; 0x30
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40005400 	.word	0x40005400
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40020400 	.word	0x40020400
 8001a28:	40005c00 	.word	0x40005c00
 8001a2c:	40020800 	.word	0x40020800
 8001a30:	40020000 	.word	0x40020000

08001a34 <LRL_MPU_Init>:
#include "usart.h"

const double Accel_Z_corrector = 14418.0;

void LRL_MPU_Init(imu_cfgType *imu)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b088      	sub	sp, #32
 8001a38:	af04      	add	r7, sp, #16
 8001a3a:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check WHO_AM_I Reg to see the address being correct

    HAL_I2C_Mem_Read(imu->hi2c, MPU_ADDR, WHO_AM_I, 1, &check, 1, 10);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6818      	ldr	r0, [r3, #0]
 8001a40:	230a      	movs	r3, #10
 8001a42:	9302      	str	r3, [sp, #8]
 8001a44:	2301      	movs	r3, #1
 8001a46:	9301      	str	r3, [sp, #4]
 8001a48:	f107 030f 	add.w	r3, r7, #15
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	2301      	movs	r3, #1
 8001a50:	2275      	movs	r2, #117	; 0x75
 8001a52:	21d0      	movs	r1, #208	; 0xd0
 8001a54:	f003 fc8e 	bl	8005374 <HAL_I2C_Mem_Read>

    if (check == 0x68) // 0x68 will be returned by the sensor if everything goes well
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
 8001a5a:	2b68      	cmp	r3, #104	; 0x68
 8001a5c:	d145      	bne.n	8001aea <LRL_MPU_Init+0xb6>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0x00;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(imu->hi2c, MPU_ADDR, PWR_MGMT_1, 1, &Data, 1, 10);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6818      	ldr	r0, [r3, #0]
 8001a66:	230a      	movs	r3, #10
 8001a68:	9302      	str	r3, [sp, #8]
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	9301      	str	r3, [sp, #4]
 8001a6e:	f107 030e 	add.w	r3, r7, #14
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	2301      	movs	r3, #1
 8001a76:	226b      	movs	r2, #107	; 0x6b
 8001a78:	21d0      	movs	r1, #208	; 0xd0
 8001a7a:	f003 fb81 	bl	8005180 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001a7e:	2307      	movs	r3, #7
 8001a80:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(imu->hi2c, MPU_ADDR, SMPLRT_DIV, 1, &Data, 1, 10);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6818      	ldr	r0, [r3, #0]
 8001a86:	230a      	movs	r3, #10
 8001a88:	9302      	str	r3, [sp, #8]
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	9301      	str	r3, [sp, #4]
 8001a8e:	f107 030e 	add.w	r3, r7, #14
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	2301      	movs	r3, #1
 8001a96:	2219      	movs	r2, #25
 8001a98:	21d0      	movs	r1, #208	; 0xd0
 8001a9a:	f003 fb71 	bl	8005180 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(imu->hi2c, MPU_ADDR, ACCEL_CONFIG, 1, &Data, 1, 10);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6818      	ldr	r0, [r3, #0]
 8001aa6:	230a      	movs	r3, #10
 8001aa8:	9302      	str	r3, [sp, #8]
 8001aaa:	2301      	movs	r3, #1
 8001aac:	9301      	str	r3, [sp, #4]
 8001aae:	f107 030e 	add.w	r3, r7, #14
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	221c      	movs	r2, #28
 8001ab8:	21d0      	movs	r1, #208	; 0xd0
 8001aba:	f003 fb61 	bl	8005180 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(imu->hi2c, MPU_ADDR, GYRO_CONFIG, 1, &Data, 1, 10);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6818      	ldr	r0, [r3, #0]
 8001ac6:	230a      	movs	r3, #10
 8001ac8:	9302      	str	r3, [sp, #8]
 8001aca:	2301      	movs	r3, #1
 8001acc:	9301      	str	r3, [sp, #4]
 8001ace:	f107 030e 	add.w	r3, r7, #14
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	221b      	movs	r2, #27
 8001ad8:	21d0      	movs	r1, #208	; 0xd0
 8001ada:	f003 fb51 	bl	8005180 <HAL_I2C_Mem_Write>

        HAL_GPIO_WritePin(BLINK_LED_PORT, BLINK_LED_PIN, 1);
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ae4:	4803      	ldr	r0, [pc, #12]	; (8001af4 <LRL_MPU_Init+0xc0>)
 8001ae6:	f003 f8ef 	bl	8004cc8 <HAL_GPIO_WritePin>
    }
}
 8001aea:	bf00      	nop
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40020c00 	.word	0x40020c00

08001af8 <LRL_Read_Accel>:


void LRL_Read_Accel(imu_cfgType *imu)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08a      	sub	sp, #40	; 0x28
 8001afc:	af04      	add	r7, sp, #16
 8001afe:	6078      	str	r0, [r7, #4]
    uint8_t data[6];
    int16_t accel_data_raw[3];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(imu->hi2c, MPU_ADDR, ACCEL_XOUT_H, 1, data, 6,10);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6818      	ldr	r0, [r3, #0]
 8001b04:	230a      	movs	r3, #10
 8001b06:	9302      	str	r3, [sp, #8]
 8001b08:	2306      	movs	r3, #6
 8001b0a:	9301      	str	r3, [sp, #4]
 8001b0c:	f107 0310 	add.w	r3, r7, #16
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	2301      	movs	r3, #1
 8001b14:	223b      	movs	r2, #59	; 0x3b
 8001b16:	21d0      	movs	r1, #208	; 0xd0
 8001b18:	f003 fc2c 	bl	8005374 <HAL_I2C_Mem_Read>

    accel_data_raw[0] = (int16_t)(data[0] << 8 | data[1]);
 8001b1c:	7c3b      	ldrb	r3, [r7, #16]
 8001b1e:	021b      	lsls	r3, r3, #8
 8001b20:	b21a      	sxth	r2, r3
 8001b22:	7c7b      	ldrb	r3, [r7, #17]
 8001b24:	b21b      	sxth	r3, r3
 8001b26:	4313      	orrs	r3, r2
 8001b28:	b21b      	sxth	r3, r3
 8001b2a:	813b      	strh	r3, [r7, #8]
    accel_data_raw[1] = (int16_t)(data[2] << 8 | data[3]);
 8001b2c:	7cbb      	ldrb	r3, [r7, #18]
 8001b2e:	021b      	lsls	r3, r3, #8
 8001b30:	b21a      	sxth	r2, r3
 8001b32:	7cfb      	ldrb	r3, [r7, #19]
 8001b34:	b21b      	sxth	r3, r3
 8001b36:	4313      	orrs	r3, r2
 8001b38:	b21b      	sxth	r3, r3
 8001b3a:	817b      	strh	r3, [r7, #10]
    accel_data_raw[2] = (int16_t)(data[4] << 8 | data[5]);
 8001b3c:	7d3b      	ldrb	r3, [r7, #20]
 8001b3e:	021b      	lsls	r3, r3, #8
 8001b40:	b21a      	sxth	r2, r3
 8001b42:	7d7b      	ldrb	r3, [r7, #21]
 8001b44:	b21b      	sxth	r3, r3
 8001b46:	4313      	orrs	r3, r2
 8001b48:	b21b      	sxth	r3, r3
 8001b4a:	81bb      	strh	r3, [r7, #12]
    /*** convert the RAW values into acceleration in 'g'
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 16384.0
         for more details check ACCEL_CONFIG Register              ****/

    imu->final_accel_x = accel_data_raw[0] / 16384.0;
 8001b4c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7fe fce7 	bl	8000524 <__aeabi_i2d>
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <LRL_Read_Accel+0xc0>)
 8001b5c:	f7fe fe76 	bl	800084c <__aeabi_ddiv>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	6879      	ldr	r1, [r7, #4]
 8001b66:	e9c1 2304 	strd	r2, r3, [r1, #16]
    imu->final_accel_y = accel_data_raw[1] / 16384.0;
 8001b6a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7fe fcd8 	bl	8000524 <__aeabi_i2d>
 8001b74:	f04f 0200 	mov.w	r2, #0
 8001b78:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <LRL_Read_Accel+0xc0>)
 8001b7a:	f7fe fe67 	bl	800084c <__aeabi_ddiv>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	e9c1 2306 	strd	r2, r3, [r1, #24]
    imu->final_accel_z = accel_data_raw[2] / Accel_Z_corrector;
 8001b88:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7fe fcc9 	bl	8000524 <__aeabi_i2d>
 8001b92:	a307      	add	r3, pc, #28	; (adr r3, 8001bb0 <LRL_Read_Accel+0xb8>)
 8001b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b98:	f7fe fe58 	bl	800084c <__aeabi_ddiv>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	6879      	ldr	r1, [r7, #4]
 8001ba2:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 8001ba6:	bf00      	nop
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	00000000 	.word	0x00000000
 8001bb4:	40cc2900 	.word	0x40cc2900
 8001bb8:	40d00000 	.word	0x40d00000
 8001bbc:	00000000 	.word	0x00000000

08001bc0 <LRL_Read_Gyro>:

void LRL_Read_Gyro(imu_cfgType *imu)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08a      	sub	sp, #40	; 0x28
 8001bc4:	af04      	add	r7, sp, #16
 8001bc6:	6078      	str	r0, [r7, #4]
	uint8_t data[6];
	int16_t gyro_data_raw[3];

	HAL_I2C_Mem_Read(imu->hi2c, MPU_ADDR, GYRO_XOUT_H, 1, data, 6,100);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6818      	ldr	r0, [r3, #0]
 8001bcc:	2364      	movs	r3, #100	; 0x64
 8001bce:	9302      	str	r3, [sp, #8]
 8001bd0:	2306      	movs	r3, #6
 8001bd2:	9301      	str	r3, [sp, #4]
 8001bd4:	f107 0310 	add.w	r3, r7, #16
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	2301      	movs	r3, #1
 8001bdc:	2243      	movs	r2, #67	; 0x43
 8001bde:	21d0      	movs	r1, #208	; 0xd0
 8001be0:	f003 fbc8 	bl	8005374 <HAL_I2C_Mem_Read>

	gyro_data_raw[0] = (int16_t)(data[0] << 8 | data[1]);
 8001be4:	7c3b      	ldrb	r3, [r7, #16]
 8001be6:	021b      	lsls	r3, r3, #8
 8001be8:	b21a      	sxth	r2, r3
 8001bea:	7c7b      	ldrb	r3, [r7, #17]
 8001bec:	b21b      	sxth	r3, r3
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	b21b      	sxth	r3, r3
 8001bf2:	813b      	strh	r3, [r7, #8]
	gyro_data_raw[1] = (int16_t)(data[2] << 8 | data[3]);
 8001bf4:	7cbb      	ldrb	r3, [r7, #18]
 8001bf6:	021b      	lsls	r3, r3, #8
 8001bf8:	b21a      	sxth	r2, r3
 8001bfa:	7cfb      	ldrb	r3, [r7, #19]
 8001bfc:	b21b      	sxth	r3, r3
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	b21b      	sxth	r3, r3
 8001c02:	817b      	strh	r3, [r7, #10]
	gyro_data_raw[2] = (int16_t)(data[4] << 8 | data[5]);
 8001c04:	7d3b      	ldrb	r3, [r7, #20]
 8001c06:	021b      	lsls	r3, r3, #8
 8001c08:	b21a      	sxth	r2, r3
 8001c0a:	7d7b      	ldrb	r3, [r7, #21]
 8001c0c:	b21b      	sxth	r3, r3
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	b21b      	sxth	r3, r3
 8001c12:	81bb      	strh	r3, [r7, #12]

	imu->final_gyro_x = gyro_data_raw[0] / 131.0;
 8001c14:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7fe fc83 	bl	8000524 <__aeabi_i2d>
 8001c1e:	a31c      	add	r3, pc, #112	; (adr r3, 8001c90 <LRL_Read_Gyro+0xd0>)
 8001c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c24:	f7fe fe12 	bl	800084c <__aeabi_ddiv>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4610      	mov	r0, r2
 8001c2e:	4619      	mov	r1, r3
 8001c30:	f7fe ffda 	bl	8000be8 <__aeabi_d2f>
 8001c34:	4602      	mov	r2, r0
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	63da      	str	r2, [r3, #60]	; 0x3c
	imu->final_gyro_y = gyro_data_raw[1] / 131.0;
 8001c3a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe fc70 	bl	8000524 <__aeabi_i2d>
 8001c44:	a312      	add	r3, pc, #72	; (adr r3, 8001c90 <LRL_Read_Gyro+0xd0>)
 8001c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4a:	f7fe fdff 	bl	800084c <__aeabi_ddiv>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	4610      	mov	r0, r2
 8001c54:	4619      	mov	r1, r3
 8001c56:	f7fe ffc7 	bl	8000be8 <__aeabi_d2f>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	641a      	str	r2, [r3, #64]	; 0x40
	imu->final_gyro_z = gyro_data_raw[2] / 131.0;
 8001c60:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7fe fc5d 	bl	8000524 <__aeabi_i2d>
 8001c6a:	a309      	add	r3, pc, #36	; (adr r3, 8001c90 <LRL_Read_Gyro+0xd0>)
 8001c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c70:	f7fe fdec 	bl	800084c <__aeabi_ddiv>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	4610      	mov	r0, r2
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	f7fe ffb4 	bl	8000be8 <__aeabi_d2f>
 8001c80:	4602      	mov	r2, r0
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	645a      	str	r2, [r3, #68]	; 0x44
}
 8001c86:	bf00      	nop
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	00000000 	.word	0x00000000
 8001c94:	40606000 	.word	0x40606000

08001c98 <LRL_MPU_Read_All>:

void LRL_MPU_Read_All(imu_cfgType *imu)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
	LRL_Read_Accel(imu);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff ff29 	bl	8001af8 <LRL_Read_Accel>
	LRL_Read_Gyro(imu);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7ff ff8a 	bl	8001bc0 <LRL_Read_Gyro>
}
 8001cac:	bf00      	nop
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <LRL_MPU_Bypass_Enable>:

void LRL_MPU_Bypass_Enable(imu_cfgType *imu, uint8_t EN)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b088      	sub	sp, #32
 8001cb8:	af04      	add	r7, sp, #16
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	70fb      	strb	r3, [r7, #3]
    uint8_t Data;

	Data = 0x00;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(imu->hi2c, MPU_ADDR, USER_CTRL, 1, &Data, 1, 10);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6818      	ldr	r0, [r3, #0]
 8001cc8:	230a      	movs	r3, #10
 8001cca:	9302      	str	r3, [sp, #8]
 8001ccc:	2301      	movs	r3, #1
 8001cce:	9301      	str	r3, [sp, #4]
 8001cd0:	f107 030f 	add.w	r3, r7, #15
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	226a      	movs	r2, #106	; 0x6a
 8001cda:	21d0      	movs	r1, #208	; 0xd0
 8001cdc:	f003 fa50 	bl	8005180 <HAL_I2C_Mem_Write>
	Data = 0x02 * EN;
 8001ce0:	78fb      	ldrb	r3, [r7, #3]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(imu->hi2c, MPU_ADDR, INT_PIN_CFG, 1, &Data, 1, 10);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6818      	ldr	r0, [r3, #0]
 8001cec:	230a      	movs	r3, #10
 8001cee:	9302      	str	r3, [sp, #8]
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	9301      	str	r3, [sp, #4]
 8001cf4:	f107 030f 	add.w	r3, r7, #15
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	2237      	movs	r2, #55	; 0x37
 8001cfe:	21d0      	movs	r1, #208	; 0xd0
 8001d00:	f003 fa3e 	bl	8005180 <HAL_I2C_Mem_Write>
	Data = 0x00;
 8001d04:	2300      	movs	r3, #0
 8001d06:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(imu->hi2c, MPU_ADDR, PWR_MGMT_1, 1, &Data, 1, 10);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6818      	ldr	r0, [r3, #0]
 8001d0c:	230a      	movs	r3, #10
 8001d0e:	9302      	str	r3, [sp, #8]
 8001d10:	2301      	movs	r3, #1
 8001d12:	9301      	str	r3, [sp, #4]
 8001d14:	f107 030f 	add.w	r3, r7, #15
 8001d18:	9300      	str	r3, [sp, #0]
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	226b      	movs	r2, #107	; 0x6b
 8001d1e:	21d0      	movs	r1, #208	; 0xd0
 8001d20:	f003 fa2e 	bl	8005180 <HAL_I2C_Mem_Write>
}
 8001d24:	bf00      	nop
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <__io_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// ####################   UART Tx -> printf   ####################
PUTCHAR_PROTOTYPE
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001d34:	1d39      	adds	r1, r7, #4
 8001d36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	4803      	ldr	r0, [pc, #12]	; (8001d4c <__io_putchar+0x20>)
 8001d3e:	f008 f81a 	bl	8009d76 <HAL_UART_Transmit>

  return ch;
 8001d42:	687b      	ldr	r3, [r7, #4]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20000a94 	.word	0x20000a94

08001d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d52:	b095      	sub	sp, #84	; 0x54
 8001d54:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d56:	f001 fe49 	bl	80039ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d5a:	f000 fb4d 	bl	80023f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d5e:	f7ff fad5 	bl	800130c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001d62:	f7ff f949 	bl	8000ff8 <MX_ADC1_Init>
  MX_ETH_Init();
 8001d66:	f7ff f9dd 	bl	8001124 <MX_ETH_Init>
  MX_I2C1_Init();
 8001d6a:	f7ff fd57 	bl	800181c <MX_I2C1_Init>
  MX_I2C3_Init();
 8001d6e:	f7ff fd83 	bl	8001878 <MX_I2C3_Init>
  MX_SPI2_Init();
 8001d72:	f000 fddf 	bl	8002934 <MX_SPI2_Init>
  MX_SPI3_Init();
 8001d76:	f000 fe13 	bl	80029a0 <MX_SPI3_Init>
  MX_TIM2_Init();
 8001d7a:	f001 f89b 	bl	8002eb4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001d7e:	f001 f8ed 	bl	8002f5c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001d82:	f001 f93f 	bl	8003004 <MX_TIM4_Init>
  MX_TIM8_Init();
 8001d86:	f001 fa07 	bl	8003198 <MX_TIM8_Init>
  MX_TIM9_Init();
 8001d8a:	f001 fab1 	bl	80032f0 <MX_TIM9_Init>
  MX_USART1_UART_Init();
 8001d8e:	f001 fcc7 	bl	8003720 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001d92:	f001 fcef 	bl	8003774 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001d96:	f001 f83d 	bl	8002e14 <MX_TIM1_Init>
  MX_TIM5_Init();
 8001d9a:	f001 f9af 	bl	80030fc <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  LRL_Delay_Init();			// TIMER Initialization for Delay us
 8001d9e:	f001 fda1 	bl	80038e4 <LRL_Delay_Init>
  LRL_US_Init(us_front); 	// TIMER Initialization for Ultrasonics
 8001da2:	4b8c      	ldr	r3, [pc, #560]	; (8001fd4 <main+0x284>)
 8001da4:	466c      	mov	r4, sp
 8001da6:	f103 0210 	add.w	r2, r3, #16
 8001daa:	ca07      	ldmia	r2, {r0, r1, r2}
 8001dac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001db0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001db2:	f001 fc9d 	bl	80036f0 <LRL_US_Init>

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001db6:	2100      	movs	r1, #0
 8001db8:	4887      	ldr	r0, [pc, #540]	; (8001fd8 <main+0x288>)
 8001dba:	f006 fba9 	bl	8008510 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001dbe:	2104      	movs	r1, #4
 8001dc0:	4885      	ldr	r0, [pc, #532]	; (8001fd8 <main+0x288>)
 8001dc2:	f006 fba5 	bl	8008510 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001dc6:	213c      	movs	r1, #60	; 0x3c
 8001dc8:	4884      	ldr	r0, [pc, #528]	; (8001fdc <main+0x28c>)
 8001dca:	f006 fe87 	bl	8008adc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001dce:	213c      	movs	r1, #60	; 0x3c
 8001dd0:	4883      	ldr	r0, [pc, #524]	; (8001fe0 <main+0x290>)
 8001dd2:	f006 fe83 	bl	8008adc <HAL_TIM_Encoder_Start>
//  HAL_TIM_Base_Init(&htim5);
  HAL_TIM_Base_Start_IT(&htim5);
 8001dd6:	4883      	ldr	r0, [pc, #524]	; (8001fe4 <main+0x294>)
 8001dd8:	f006 fad0 	bl	800837c <HAL_TIM_Base_Start_IT>
  HAL_I2C_Init(&hi2c3);
 8001ddc:	4882      	ldr	r0, [pc, #520]	; (8001fe8 <main+0x298>)
 8001dde:	f002 ff8d 	bl	8004cfc <HAL_I2C_Init>

//  printf("Lenna Robotics Research Lab. \r\n");
//  HAL_Delay(1000);

// ####################   Encoder Initialization   ####################
  TIM2->CNT = 0;
 8001de2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001de6:	2200      	movs	r2, #0
 8001de8:	625a      	str	r2, [r3, #36]	; 0x24
  TIM3->CNT = 0;
 8001dea:	4b80      	ldr	r3, [pc, #512]	; (8001fec <main+0x29c>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	625a      	str	r2, [r3, #36]	; 0x24
  encoder_tick[0] = (TIM2->CNT);
 8001df0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	4b7d      	ldr	r3, [pc, #500]	; (8001ff0 <main+0x2a0>)
 8001dfa:	801a      	strh	r2, [r3, #0]
  encoder_tick[1] = (TIM3->CNT);
 8001dfc:	4b7b      	ldr	r3, [pc, #492]	; (8001fec <main+0x29c>)
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	4b7b      	ldr	r3, [pc, #492]	; (8001ff0 <main+0x2a0>)
 8001e04:	805a      	strh	r2, [r3, #2]

  LRL_PID_Init(&pid_motor_left,  1);
 8001e06:	2101      	movs	r1, #1
 8001e08:	487a      	ldr	r0, [pc, #488]	; (8001ff4 <main+0x2a4>)
 8001e0a:	f000 fc5a 	bl	80026c2 <LRL_PID_Init>
  LRL_PID_Init(&pid_motor_right, 1);
 8001e0e:	2101      	movs	r1, #1
 8001e10:	4879      	ldr	r0, [pc, #484]	; (8001ff8 <main+0x2a8>)
 8001e12:	f000 fc56 	bl	80026c2 <LRL_PID_Init>
  LRL_MPU_Bypass_Enable(&imu, 0);
 8001e16:	2100      	movs	r1, #0
 8001e18:	4878      	ldr	r0, [pc, #480]	; (8001ffc <main+0x2ac>)
 8001e1a:	f7ff ff4b 	bl	8001cb4 <LRL_MPU_Bypass_Enable>
  LRL_MPU_Init(&imu);
 8001e1e:	4877      	ldr	r0, [pc, #476]	; (8001ffc <main+0x2ac>)
 8001e20:	f7ff fe08 	bl	8001a34 <LRL_MPU_Init>

  LRL_MPU_Bypass_Enable(&imu,1);
 8001e24:	2101      	movs	r1, #1
 8001e26:	4875      	ldr	r0, [pc, #468]	; (8001ffc <main+0x2ac>)
 8001e28:	f7ff ff44 	bl	8001cb4 <LRL_MPU_Bypass_Enable>
  LRL_HMC5883L_Init(&hi2c3);
 8001e2c:	486e      	ldr	r0, [pc, #440]	; (8001fe8 <main+0x298>)
 8001e2e:	f7ff fb8b 	bl	8001548 <LRL_HMC5883L_Init>


  HAL_UART_Transmit(&huart1, msgBuffer, 32, 100);
 8001e32:	2364      	movs	r3, #100	; 0x64
 8001e34:	2220      	movs	r2, #32
 8001e36:	4972      	ldr	r1, [pc, #456]	; (8002000 <main+0x2b0>)
 8001e38:	4872      	ldr	r0, [pc, #456]	; (8002004 <main+0x2b4>)
 8001e3a:	f007 ff9c 	bl	8009d76 <HAL_UART_Transmit>
  HAL_Delay(1000);
 8001e3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e42:	f001 fe45 	bl	8003ad0 <HAL_Delay>

  HAL_UART_Receive_IT(&huart2, rxBuffer, min_len_packet);
 8001e46:	4b70      	ldr	r3, [pc, #448]	; (8002008 <main+0x2b8>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	496f      	ldr	r1, [pc, #444]	; (800200c <main+0x2bc>)
 8001e50:	486f      	ldr	r0, [pc, #444]	; (8002010 <main+0x2c0>)
 8001e52:	f008 f909 	bl	800a068 <HAL_UART_Receive_IT>

  txBuffer[0] = 0xFF;
 8001e56:	4b6f      	ldr	r3, [pc, #444]	; (8002014 <main+0x2c4>)
 8001e58:	22ff      	movs	r2, #255	; 0xff
 8001e5a:	701a      	strb	r2, [r3, #0]
  txBuffer[1] = 0xFF;
 8001e5c:	4b6d      	ldr	r3, [pc, #436]	; (8002014 <main+0x2c4>)
 8001e5e:	22ff      	movs	r2, #255	; 0xff
 8001e60:	705a      	strb	r2, [r3, #1]
  // ####################   memory allocation    ####################
  float motor_speed_right = 0;
 8001e62:	f04f 0300 	mov.w	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]
  float motor_speed_left = 0;
 8001e68:	f04f 0300 	mov.w	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		if(flag_uart_cb)
 8001e6e:	4b6a      	ldr	r3, [pc, #424]	; (8002018 <main+0x2c8>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d05b      	beq.n	8001f2e <main+0x1de>
		{
			flag_uart_cb = 0;
 8001e76:	4b68      	ldr	r3, [pc, #416]	; (8002018 <main+0x2c8>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	701a      	strb	r2, [r3, #0]

			total_pkt_length = rxBuffer[2] + 3;
 8001e7c:	4b63      	ldr	r3, [pc, #396]	; (800200c <main+0x2bc>)
 8001e7e:	789b      	ldrb	r3, [r3, #2]
 8001e80:	3303      	adds	r3, #3
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	4b65      	ldr	r3, [pc, #404]	; (800201c <main+0x2cc>)
 8001e86:	701a      	strb	r2, [r3, #0]
			remain_pkt_length = total_pkt_length - min_len_packet;
 8001e88:	4b64      	ldr	r3, [pc, #400]	; (800201c <main+0x2cc>)
 8001e8a:	781a      	ldrb	r2, [r3, #0]
 8001e8c:	4b5e      	ldr	r3, [pc, #376]	; (8002008 <main+0x2b8>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	4b62      	ldr	r3, [pc, #392]	; (8002020 <main+0x2d0>)
 8001e96:	701a      	strb	r2, [r3, #0]

			if(remain_pkt_length)
 8001e98:	4b61      	ldr	r3, [pc, #388]	; (8002020 <main+0x2d0>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d007      	beq.n	8001eb0 <main+0x160>
			{
				HAL_UART_Receive(&huart2, &rxBuffer[8], remain_pkt_length, 1);
 8001ea0:	4b5f      	ldr	r3, [pc, #380]	; (8002020 <main+0x2d0>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	495e      	ldr	r1, [pc, #376]	; (8002024 <main+0x2d4>)
 8001eaa:	4859      	ldr	r0, [pc, #356]	; (8002010 <main+0x2c0>)
 8001eac:	f007 fff5 	bl	8009e9a <HAL_UART_Receive>
			}

			temp_crc = updateCRC(0, &rxBuffer, total_pkt_length-2);
 8001eb0:	4b5a      	ldr	r3, [pc, #360]	; (800201c <main+0x2cc>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	3b02      	subs	r3, #2
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	461a      	mov	r2, r3
 8001ebc:	4953      	ldr	r1, [pc, #332]	; (800200c <main+0x2bc>)
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f000 fb04 	bl	80024cc <updateCRC>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	4b57      	ldr	r3, [pc, #348]	; (8002028 <main+0x2d8>)
 8001eca:	801a      	strh	r2, [r3, #0]

			if (rxBuffer[3] == 0x01)
 8001ecc:	4b4f      	ldr	r3, [pc, #316]	; (800200c <main+0x2bc>)
 8001ece:	78db      	ldrb	r3, [r3, #3]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d11d      	bne.n	8001f10 <main+0x1c0>
			{

				motor_speed_left = (int16_t)((rxBuffer[4] << 8) | rxBuffer[5]);
 8001ed4:	4b4d      	ldr	r3, [pc, #308]	; (800200c <main+0x2bc>)
 8001ed6:	791b      	ldrb	r3, [r3, #4]
 8001ed8:	021b      	lsls	r3, r3, #8
 8001eda:	b21a      	sxth	r2, r3
 8001edc:	4b4b      	ldr	r3, [pc, #300]	; (800200c <main+0x2bc>)
 8001ede:	795b      	ldrb	r3, [r3, #5]
 8001ee0:	b21b      	sxth	r3, r3
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	b21b      	sxth	r3, r3
 8001ee6:	ee07 3a90 	vmov	s15, r3
 8001eea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eee:	edc7 7a04 	vstr	s15, [r7, #16]
				motor_speed_right = (int16_t)((rxBuffer[6] << 8) | rxBuffer[7]);
 8001ef2:	4b46      	ldr	r3, [pc, #280]	; (800200c <main+0x2bc>)
 8001ef4:	799b      	ldrb	r3, [r3, #6]
 8001ef6:	021b      	lsls	r3, r3, #8
 8001ef8:	b21a      	sxth	r2, r3
 8001efa:	4b44      	ldr	r3, [pc, #272]	; (800200c <main+0x2bc>)
 8001efc:	79db      	ldrb	r3, [r3, #7]
 8001efe:	b21b      	sxth	r3, r3
 8001f00:	4313      	orrs	r3, r2
 8001f02:	b21b      	sxth	r3, r3
 8001f04:	ee07 3a90 	vmov	s15, r3
 8001f08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f0c:	edc7 7a05 	vstr	s15, [r7, #20]

//			HAL_UART_Transmit(&huart1, rxBuffer, total_pkt_length, 0xFF);

//			HAL_UART_Transmit_IT(&huart2, txBuffer, 8);

			memset(rxBuffer, 0, max_len_packet*sizeof(rxBuffer[0]));
 8001f10:	4b46      	ldr	r3, [pc, #280]	; (800202c <main+0x2dc>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	461a      	mov	r2, r3
 8001f16:	2100      	movs	r1, #0
 8001f18:	483c      	ldr	r0, [pc, #240]	; (800200c <main+0x2bc>)
 8001f1a:	f009 f867 	bl	800afec <memset>
			HAL_UART_Receive_IT(&huart2, rxBuffer, min_len_packet);
 8001f1e:	4b3a      	ldr	r3, [pc, #232]	; (8002008 <main+0x2b8>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	461a      	mov	r2, r3
 8001f26:	4939      	ldr	r1, [pc, #228]	; (800200c <main+0x2bc>)
 8001f28:	4839      	ldr	r0, [pc, #228]	; (8002010 <main+0x2c0>)
 8001f2a:	f008 f89d 	bl	800a068 <HAL_UART_Receive_IT>
		}


		if(pid_tim_flag == 1)
 8001f2e:	4b40      	ldr	r3, [pc, #256]	; (8002030 <main+0x2e0>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d19b      	bne.n	8001e6e <main+0x11e>
		{
		  encoder_tick[0] = (TIM2->CNT); 	// Left Motor Encoder
 8001f36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	4b2c      	ldr	r3, [pc, #176]	; (8001ff0 <main+0x2a0>)
 8001f40:	801a      	strh	r2, [r3, #0]
		  encoder_tick[1] = (TIM3->CNT); 	// Right Motor Encoder
 8001f42:	4b2a      	ldr	r3, [pc, #168]	; (8001fec <main+0x29c>)
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	4b29      	ldr	r3, [pc, #164]	; (8001ff0 <main+0x2a0>)
 8001f4a:	805a      	strh	r2, [r3, #2]

		  if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3) == 0)
 8001f4c:	4b23      	ldr	r3, [pc, #140]	; (8001fdc <main+0x28c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0310 	and.w	r3, r3, #16
 8001f56:	2b10      	cmp	r3, #16
 8001f58:	d027      	beq.n	8001faa <main+0x25a>
		  {
			  if(encoder_tick[1] - right_enc_temp >= 0)
 8001f5a:	4b25      	ldr	r3, [pc, #148]	; (8001ff0 <main+0x2a0>)
 8001f5c:	885b      	ldrh	r3, [r3, #2]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	4b34      	ldr	r3, [pc, #208]	; (8002034 <main+0x2e4>)
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	db0b      	blt.n	8001f82 <main+0x232>
			  {
				  right_enc_diff = encoder_tick[1] - right_enc_temp;
 8001f6a:	4b21      	ldr	r3, [pc, #132]	; (8001ff0 <main+0x2a0>)
 8001f6c:	885a      	ldrh	r2, [r3, #2]
 8001f6e:	4b31      	ldr	r3, [pc, #196]	; (8002034 <main+0x2e4>)
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	4b30      	ldr	r3, [pc, #192]	; (8002038 <main+0x2e8>)
 8001f78:	801a      	strh	r2, [r3, #0]
				  dir_right = 1;
 8001f7a:	4b30      	ldr	r3, [pc, #192]	; (800203c <main+0x2ec>)
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	701a      	strb	r2, [r3, #0]
 8001f80:	e00e      	b.n	8001fa0 <main+0x250>
			  }
			  else
			  {
				  right_enc_diff = (48960 - right_enc_temp) + encoder_tick[1];
 8001f82:	4b1b      	ldr	r3, [pc, #108]	; (8001ff0 <main+0x2a0>)
 8001f84:	885a      	ldrh	r2, [r3, #2]
 8001f86:	4b2b      	ldr	r3, [pc, #172]	; (8002034 <main+0x2e4>)
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	f5a3 4381 	sub.w	r3, r3, #16512	; 0x4080
 8001f92:	3b40      	subs	r3, #64	; 0x40
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	4b28      	ldr	r3, [pc, #160]	; (8002038 <main+0x2e8>)
 8001f98:	801a      	strh	r2, [r3, #0]
				  dir_right = 1;
 8001f9a:	4b28      	ldr	r3, [pc, #160]	; (800203c <main+0x2ec>)
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	701a      	strb	r2, [r3, #0]
			  }
			  right_enc_temp = encoder_tick[1];
 8001fa0:	4b13      	ldr	r3, [pc, #76]	; (8001ff0 <main+0x2a0>)
 8001fa2:	885a      	ldrh	r2, [r3, #2]
 8001fa4:	4b23      	ldr	r3, [pc, #140]	; (8002034 <main+0x2e4>)
 8001fa6:	801a      	strh	r2, [r3, #0]
 8001fa8:	e05d      	b.n	8002066 <main+0x316>
		  }
		  else
		  {
			  if(right_enc_temp - encoder_tick[1] >= 0)
 8001faa:	4b22      	ldr	r3, [pc, #136]	; (8002034 <main+0x2e4>)
 8001fac:	881b      	ldrh	r3, [r3, #0]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ff0 <main+0x2a0>)
 8001fb2:	885b      	ldrh	r3, [r3, #2]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	db42      	blt.n	8002040 <main+0x2f0>
			  {
				  right_enc_diff = -(encoder_tick[1] - right_enc_temp);
 8001fba:	4b1e      	ldr	r3, [pc, #120]	; (8002034 <main+0x2e4>)
 8001fbc:	881a      	ldrh	r2, [r3, #0]
 8001fbe:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <main+0x2a0>)
 8001fc0:	885b      	ldrh	r3, [r3, #2]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	4b1c      	ldr	r3, [pc, #112]	; (8002038 <main+0x2e8>)
 8001fc8:	801a      	strh	r2, [r3, #0]
				  dir_right = -1;
 8001fca:	4b1c      	ldr	r3, [pc, #112]	; (800203c <main+0x2ec>)
 8001fcc:	22ff      	movs	r2, #255	; 0xff
 8001fce:	701a      	strb	r2, [r3, #0]
 8001fd0:	e045      	b.n	800205e <main+0x30e>
 8001fd2:	bf00      	nop
 8001fd4:	0800fe54 	.word	0x0800fe54
 8001fd8:	20000a04 	.word	0x20000a04
 8001fdc:	2000092c 	.word	0x2000092c
 8001fe0:	200008e4 	.word	0x200008e4
 8001fe4:	200009bc 	.word	0x200009bc
 8001fe8:	200005c8 	.word	0x200005c8
 8001fec:	40000400 	.word	0x40000400
 8001ff0:	200007d0 	.word	0x200007d0
 8001ff4:	20000024 	.word	0x20000024
 8001ff8:	20000054 	.word	0x20000054
 8001ffc:	20000088 	.word	0x20000088
 8002000:	20000000 	.word	0x20000000
 8002004:	20000a94 	.word	0x20000a94
 8002008:	20000020 	.word	0x20000020
 800200c:	2000061c 	.word	0x2000061c
 8002010:	20000ad8 	.word	0x20000ad8
 8002014:	200006ac 	.word	0x200006ac
 8002018:	2000073c 	.word	0x2000073c
 800201c:	2000073d 	.word	0x2000073d
 8002020:	2000073e 	.word	0x2000073e
 8002024:	20000624 	.word	0x20000624
 8002028:	20000740 	.word	0x20000740
 800202c:	20000021 	.word	0x20000021
 8002030:	200007dc 	.word	0x200007dc
 8002034:	200007c6 	.word	0x200007c6
 8002038:	200007c8 	.word	0x200007c8
 800203c:	200007cc 	.word	0x200007cc
			  }
			  else
			  {
				  right_enc_diff = (48960 - encoder_tick[1]) + right_enc_temp;
 8002040:	4b2a      	ldr	r3, [pc, #168]	; (80020ec <main+0x39c>)
 8002042:	881a      	ldrh	r2, [r3, #0]
 8002044:	4b2a      	ldr	r3, [pc, #168]	; (80020f0 <main+0x3a0>)
 8002046:	885b      	ldrh	r3, [r3, #2]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	b29b      	uxth	r3, r3
 800204c:	f5a3 4381 	sub.w	r3, r3, #16512	; 0x4080
 8002050:	3b40      	subs	r3, #64	; 0x40
 8002052:	b29a      	uxth	r2, r3
 8002054:	4b27      	ldr	r3, [pc, #156]	; (80020f4 <main+0x3a4>)
 8002056:	801a      	strh	r2, [r3, #0]
				  dir_right = -1;
 8002058:	4b27      	ldr	r3, [pc, #156]	; (80020f8 <main+0x3a8>)
 800205a:	22ff      	movs	r2, #255	; 0xff
 800205c:	701a      	strb	r2, [r3, #0]
			  }
			  right_enc_temp = encoder_tick[1];
 800205e:	4b24      	ldr	r3, [pc, #144]	; (80020f0 <main+0x3a0>)
 8002060:	885a      	ldrh	r2, [r3, #2]
 8002062:	4b22      	ldr	r3, [pc, #136]	; (80020ec <main+0x39c>)
 8002064:	801a      	strh	r2, [r3, #0]
		  }


		// Reading the Encoder for the left Motor
		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2) == 0)
 8002066:	4b25      	ldr	r3, [pc, #148]	; (80020fc <main+0x3ac>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0310 	and.w	r3, r3, #16
 8002070:	2b10      	cmp	r3, #16
 8002072:	d027      	beq.n	80020c4 <main+0x374>
		{
		  if(encoder_tick[0] - left_enc_temp >= 0)
 8002074:	4b1e      	ldr	r3, [pc, #120]	; (80020f0 <main+0x3a0>)
 8002076:	881b      	ldrh	r3, [r3, #0]
 8002078:	461a      	mov	r2, r3
 800207a:	4b21      	ldr	r3, [pc, #132]	; (8002100 <main+0x3b0>)
 800207c:	881b      	ldrh	r3, [r3, #0]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b00      	cmp	r3, #0
 8002082:	db0b      	blt.n	800209c <main+0x34c>
		  {
			  left_enc_diff = encoder_tick[0] - left_enc_temp;
 8002084:	4b1a      	ldr	r3, [pc, #104]	; (80020f0 <main+0x3a0>)
 8002086:	881a      	ldrh	r2, [r3, #0]
 8002088:	4b1d      	ldr	r3, [pc, #116]	; (8002100 <main+0x3b0>)
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	b29a      	uxth	r2, r3
 8002090:	4b1c      	ldr	r3, [pc, #112]	; (8002104 <main+0x3b4>)
 8002092:	801a      	strh	r2, [r3, #0]
			  dir_left = 1;
 8002094:	4b1c      	ldr	r3, [pc, #112]	; (8002108 <main+0x3b8>)
 8002096:	2201      	movs	r2, #1
 8002098:	701a      	strb	r2, [r3, #0]
 800209a:	e00e      	b.n	80020ba <main+0x36a>
		  }
		  else
		  {
			  left_enc_diff = (48960 - left_enc_temp) + encoder_tick[0];
 800209c:	4b14      	ldr	r3, [pc, #80]	; (80020f0 <main+0x3a0>)
 800209e:	881a      	ldrh	r2, [r3, #0]
 80020a0:	4b17      	ldr	r3, [pc, #92]	; (8002100 <main+0x3b0>)
 80020a2:	881b      	ldrh	r3, [r3, #0]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	f5a3 4381 	sub.w	r3, r3, #16512	; 0x4080
 80020ac:	3b40      	subs	r3, #64	; 0x40
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	4b14      	ldr	r3, [pc, #80]	; (8002104 <main+0x3b4>)
 80020b2:	801a      	strh	r2, [r3, #0]
			  dir_left = 1;
 80020b4:	4b14      	ldr	r3, [pc, #80]	; (8002108 <main+0x3b8>)
 80020b6:	2201      	movs	r2, #1
 80020b8:	701a      	strb	r2, [r3, #0]
		  }
		  left_enc_temp = encoder_tick[0];
 80020ba:	4b0d      	ldr	r3, [pc, #52]	; (80020f0 <main+0x3a0>)
 80020bc:	881a      	ldrh	r2, [r3, #0]
 80020be:	4b10      	ldr	r3, [pc, #64]	; (8002100 <main+0x3b0>)
 80020c0:	801a      	strh	r2, [r3, #0]
 80020c2:	e036      	b.n	8002132 <main+0x3e2>
		}
		else
		{
		  if(left_enc_temp - encoder_tick[0] >= 0)
 80020c4:	4b0e      	ldr	r3, [pc, #56]	; (8002100 <main+0x3b0>)
 80020c6:	881b      	ldrh	r3, [r3, #0]
 80020c8:	461a      	mov	r2, r3
 80020ca:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <main+0x3a0>)
 80020cc:	881b      	ldrh	r3, [r3, #0]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	db1b      	blt.n	800210c <main+0x3bc>
		  {
			  left_enc_diff = -(encoder_tick[0] - left_enc_temp);
 80020d4:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <main+0x3b0>)
 80020d6:	881a      	ldrh	r2, [r3, #0]
 80020d8:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <main+0x3a0>)
 80020da:	881b      	ldrh	r3, [r3, #0]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	b29a      	uxth	r2, r3
 80020e0:	4b08      	ldr	r3, [pc, #32]	; (8002104 <main+0x3b4>)
 80020e2:	801a      	strh	r2, [r3, #0]
			  dir_left = -1;
 80020e4:	4b08      	ldr	r3, [pc, #32]	; (8002108 <main+0x3b8>)
 80020e6:	22ff      	movs	r2, #255	; 0xff
 80020e8:	701a      	strb	r2, [r3, #0]
 80020ea:	e01e      	b.n	800212a <main+0x3da>
 80020ec:	200007c6 	.word	0x200007c6
 80020f0:	200007d0 	.word	0x200007d0
 80020f4:	200007c8 	.word	0x200007c8
 80020f8:	200007cc 	.word	0x200007cc
 80020fc:	200008e4 	.word	0x200008e4
 8002100:	200007c4 	.word	0x200007c4
 8002104:	200007ca 	.word	0x200007ca
 8002108:	200007cd 	.word	0x200007cd
		  }
		  else
		  {
			  left_enc_diff = (48960 - encoder_tick[0]) + left_enc_temp;
 800210c:	4ba2      	ldr	r3, [pc, #648]	; (8002398 <main+0x648>)
 800210e:	881a      	ldrh	r2, [r3, #0]
 8002110:	4ba2      	ldr	r3, [pc, #648]	; (800239c <main+0x64c>)
 8002112:	881b      	ldrh	r3, [r3, #0]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	b29b      	uxth	r3, r3
 8002118:	f5a3 4381 	sub.w	r3, r3, #16512	; 0x4080
 800211c:	3b40      	subs	r3, #64	; 0x40
 800211e:	b29a      	uxth	r2, r3
 8002120:	4b9f      	ldr	r3, [pc, #636]	; (80023a0 <main+0x650>)
 8002122:	801a      	strh	r2, [r3, #0]
			  dir_left = -1;
 8002124:	4b9f      	ldr	r3, [pc, #636]	; (80023a4 <main+0x654>)
 8002126:	22ff      	movs	r2, #255	; 0xff
 8002128:	701a      	strb	r2, [r3, #0]
		  }
		  left_enc_temp = encoder_tick[0];
 800212a:	4b9c      	ldr	r3, [pc, #624]	; (800239c <main+0x64c>)
 800212c:	881a      	ldrh	r2, [r3, #0]
 800212e:	4b9a      	ldr	r3, [pc, #616]	; (8002398 <main+0x648>)
 8002130:	801a      	strh	r2, [r3, #0]
		}


		// PID
		  angular_speed_left = dir_left*left_enc_diff * Tick2RMP_Rate ;
 8002132:	4b9c      	ldr	r3, [pc, #624]	; (80023a4 <main+0x654>)
 8002134:	f993 3000 	ldrsb.w	r3, [r3]
 8002138:	461a      	mov	r2, r3
 800213a:	4b99      	ldr	r3, [pc, #612]	; (80023a0 <main+0x650>)
 800213c:	881b      	ldrh	r3, [r3, #0]
 800213e:	fb02 f303 	mul.w	r3, r2, r3
 8002142:	f241 7270 	movw	r2, #6000	; 0x1770
 8002146:	fb02 f303 	mul.w	r3, r2, r3
 800214a:	4a97      	ldr	r2, [pc, #604]	; (80023a8 <main+0x658>)
 800214c:	fb82 1203 	smull	r1, r2, r2, r3
 8002150:	1352      	asrs	r2, r2, #13
 8002152:	17db      	asrs	r3, r3, #31
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	ee07 3a90 	vmov	s15, r3
 800215a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800215e:	4b93      	ldr	r3, [pc, #588]	; (80023ac <main+0x65c>)
 8002160:	edc3 7a00 	vstr	s15, [r3]
		  angular_speed_right = dir_right*right_enc_diff * Tick2RMP_Rate;
 8002164:	4b92      	ldr	r3, [pc, #584]	; (80023b0 <main+0x660>)
 8002166:	f993 3000 	ldrsb.w	r3, [r3]
 800216a:	461a      	mov	r2, r3
 800216c:	4b91      	ldr	r3, [pc, #580]	; (80023b4 <main+0x664>)
 800216e:	881b      	ldrh	r3, [r3, #0]
 8002170:	fb02 f303 	mul.w	r3, r2, r3
 8002174:	f241 7270 	movw	r2, #6000	; 0x1770
 8002178:	fb02 f303 	mul.w	r3, r2, r3
 800217c:	4a8a      	ldr	r2, [pc, #552]	; (80023a8 <main+0x658>)
 800217e:	fb82 1203 	smull	r1, r2, r2, r3
 8002182:	1352      	asrs	r2, r2, #13
 8002184:	17db      	asrs	r3, r3, #31
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	ee07 3a90 	vmov	s15, r3
 800218c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002190:	4b89      	ldr	r3, [pc, #548]	; (80023b8 <main+0x668>)
 8002192:	edc3 7a00 	vstr	s15, [r3]

		  LRL_PID_Update(&pid_motor_left, angular_speed_left, motor_speed_left);
 8002196:	4b85      	ldr	r3, [pc, #532]	; (80023ac <main+0x65c>)
 8002198:	edd3 7a00 	vldr	s15, [r3]
 800219c:	edd7 0a04 	vldr	s1, [r7, #16]
 80021a0:	eeb0 0a67 	vmov.f32	s0, s15
 80021a4:	4885      	ldr	r0, [pc, #532]	; (80023bc <main+0x66c>)
 80021a6:	f000 faad 	bl	8002704 <LRL_PID_Update>
		  LRL_PID_Update(&pid_motor_right, angular_speed_right, motor_speed_right);
 80021aa:	4b83      	ldr	r3, [pc, #524]	; (80023b8 <main+0x668>)
 80021ac:	edd3 7a00 	vldr	s15, [r3]
 80021b0:	edd7 0a05 	vldr	s1, [r7, #20]
 80021b4:	eeb0 0a67 	vmov.f32	s0, s15
 80021b8:	4881      	ldr	r0, [pc, #516]	; (80023c0 <main+0x670>)
 80021ba:	f000 faa3 	bl	8002704 <LRL_PID_Update>

		  LRL_Motion_Control(diff_robot, pid_motor_left.Control_Signal, pid_motor_right.Control_Signal);
 80021be:	4b7f      	ldr	r3, [pc, #508]	; (80023bc <main+0x66c>)
 80021c0:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 80021c4:	4a7e      	ldr	r2, [pc, #504]	; (80023c0 <main+0x670>)
 80021c6:	f992 2024 	ldrsb.w	r2, [r2, #36]	; 0x24
 80021ca:	4e7e      	ldr	r6, [pc, #504]	; (80023c4 <main+0x674>)
 80021cc:	920c      	str	r2, [sp, #48]	; 0x30
 80021ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80021d0:	466d      	mov	r5, sp
 80021d2:	f106 0410 	add.w	r4, r6, #16
 80021d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021de:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80021e2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80021e6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80021ea:	f000 fa3d 	bl	8002668 <LRL_Motion_Control>
//		  motor_speed_right = (float*)realloc(motor_speed_right,sizeof(float));
//		  motor_speed_left = (float*)realloc(motor_speed_left,sizeof(float));

		  pid_tim_flag = 0;
 80021ee:	4b76      	ldr	r3, [pc, #472]	; (80023c8 <main+0x678>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	701a      	strb	r2, [r3, #0]

		  LRL_MPU_Bypass_Enable(&imu , 0);
 80021f4:	2100      	movs	r1, #0
 80021f6:	4875      	ldr	r0, [pc, #468]	; (80023cc <main+0x67c>)
 80021f8:	f7ff fd5c 	bl	8001cb4 <LRL_MPU_Bypass_Enable>

		  LRL_MPU_Read_All(&imu);
 80021fc:	4873      	ldr	r0, [pc, #460]	; (80023cc <main+0x67c>)
 80021fe:	f7ff fd4b 	bl	8001c98 <LRL_MPU_Read_All>

		  LRL_MPU_Bypass_Enable(&imu , 1);
 8002202:	2101      	movs	r1, #1
 8002204:	4871      	ldr	r0, [pc, #452]	; (80023cc <main+0x67c>)
 8002206:	f7ff fd55 	bl	8001cb4 <LRL_MPU_Bypass_Enable>
		  LRL_HMC5883L_ReadHeading(&val_x, &val_y, &val_z, &val_heading);
 800220a:	4b71      	ldr	r3, [pc, #452]	; (80023d0 <main+0x680>)
 800220c:	4a71      	ldr	r2, [pc, #452]	; (80023d4 <main+0x684>)
 800220e:	4972      	ldr	r1, [pc, #456]	; (80023d8 <main+0x688>)
 8002210:	4872      	ldr	r0, [pc, #456]	; (80023dc <main+0x68c>)
 8002212:	f7ff fa05 	bl	8001620 <LRL_HMC5883L_ReadHeading>

		  uint16_t tmp_heading = (uint16_t)val_heading;
 8002216:	4b6e      	ldr	r3, [pc, #440]	; (80023d0 <main+0x680>)
 8002218:	edd3 7a00 	vldr	s15, [r3]
 800221c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002220:	ee17 3a90 	vmov	r3, s15
 8002224:	81fb      	strh	r3, [r7, #14]
		  uint16_t tmp_angular_left = (uint16_t) angular_speed_left;
 8002226:	4b61      	ldr	r3, [pc, #388]	; (80023ac <main+0x65c>)
 8002228:	edd3 7a00 	vldr	s15, [r3]
 800222c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002230:	ee17 3a90 	vmov	r3, s15
 8002234:	81bb      	strh	r3, [r7, #12]
		  uint16_t tmp_angular_right = (uint16_t) angular_speed_right;
 8002236:	4b60      	ldr	r3, [pc, #384]	; (80023b8 <main+0x668>)
 8002238:	edd3 7a00 	vldr	s15, [r3]
 800223c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002240:	ee17 3a90 	vmov	r3, s15
 8002244:	817b      	strh	r3, [r7, #10]
		  uint16_t tmp_acc_x = (uint16_t)(imu.final_accel_x * 10000);
 8002246:	4b61      	ldr	r3, [pc, #388]	; (80023cc <main+0x67c>)
 8002248:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800224c:	a350      	add	r3, pc, #320	; (adr r3, 8002390 <main+0x640>)
 800224e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002252:	f7fe f9d1 	bl	80005f8 <__aeabi_dmul>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4610      	mov	r0, r2
 800225c:	4619      	mov	r1, r3
 800225e:	f7fe fca3 	bl	8000ba8 <__aeabi_d2uiz>
 8002262:	4603      	mov	r3, r0
 8002264:	813b      	strh	r3, [r7, #8]
		  uint16_t tmp_acc_y = (uint16_t)(imu.final_accel_y * 10000);
 8002266:	4b59      	ldr	r3, [pc, #356]	; (80023cc <main+0x67c>)
 8002268:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800226c:	a348      	add	r3, pc, #288	; (adr r3, 8002390 <main+0x640>)
 800226e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002272:	f7fe f9c1 	bl	80005f8 <__aeabi_dmul>
 8002276:	4602      	mov	r2, r0
 8002278:	460b      	mov	r3, r1
 800227a:	4610      	mov	r0, r2
 800227c:	4619      	mov	r1, r3
 800227e:	f7fe fc93 	bl	8000ba8 <__aeabi_d2uiz>
 8002282:	4603      	mov	r3, r0
 8002284:	80fb      	strh	r3, [r7, #6]
		  int16_t tmp_gyr_x = (int16_t)(imu.final_gyro_x * 100);
 8002286:	4b51      	ldr	r3, [pc, #324]	; (80023cc <main+0x67c>)
 8002288:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800228c:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80023e0 <main+0x690>
 8002290:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002294:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002298:	ee17 3a90 	vmov	r3, s15
 800229c:	80bb      	strh	r3, [r7, #4]
		  uint16_t tmp_CRC;

		  txBuffer[2] = (uint8_t)(tmp_heading >> 8);
 800229e:	89fb      	ldrh	r3, [r7, #14]
 80022a0:	0a1b      	lsrs	r3, r3, #8
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	4b4f      	ldr	r3, [pc, #316]	; (80023e4 <main+0x694>)
 80022a8:	709a      	strb	r2, [r3, #2]
		  txBuffer[3] = (uint8_t)(tmp_heading & 0x00FF);
 80022aa:	89fb      	ldrh	r3, [r7, #14]
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	4b4d      	ldr	r3, [pc, #308]	; (80023e4 <main+0x694>)
 80022b0:	70da      	strb	r2, [r3, #3]

		  txBuffer[4] = (uint8_t)(tmp_angular_left >> 8);
 80022b2:	89bb      	ldrh	r3, [r7, #12]
 80022b4:	0a1b      	lsrs	r3, r3, #8
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	4b4a      	ldr	r3, [pc, #296]	; (80023e4 <main+0x694>)
 80022bc:	711a      	strb	r2, [r3, #4]
		  txBuffer[5] = (uint8_t)(tmp_angular_left & 0x00FF);
 80022be:	89bb      	ldrh	r3, [r7, #12]
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	4b48      	ldr	r3, [pc, #288]	; (80023e4 <main+0x694>)
 80022c4:	715a      	strb	r2, [r3, #5]

		  txBuffer[6] = (uint8_t)(tmp_angular_right >> 8);
 80022c6:	897b      	ldrh	r3, [r7, #10]
 80022c8:	0a1b      	lsrs	r3, r3, #8
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	4b45      	ldr	r3, [pc, #276]	; (80023e4 <main+0x694>)
 80022d0:	719a      	strb	r2, [r3, #6]
		  txBuffer[7] = (uint8_t)(tmp_angular_right & 0x00FF);
 80022d2:	897b      	ldrh	r3, [r7, #10]
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	4b43      	ldr	r3, [pc, #268]	; (80023e4 <main+0x694>)
 80022d8:	71da      	strb	r2, [r3, #7]

		  txBuffer[8] = (uint8_t)(tmp_acc_x>> 8);
 80022da:	893b      	ldrh	r3, [r7, #8]
 80022dc:	0a1b      	lsrs	r3, r3, #8
 80022de:	b29b      	uxth	r3, r3
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	4b40      	ldr	r3, [pc, #256]	; (80023e4 <main+0x694>)
 80022e4:	721a      	strb	r2, [r3, #8]
		  txBuffer[9] = (uint8_t)(tmp_acc_x & 0x00FF);
 80022e6:	893b      	ldrh	r3, [r7, #8]
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	4b3e      	ldr	r3, [pc, #248]	; (80023e4 <main+0x694>)
 80022ec:	725a      	strb	r2, [r3, #9]

		  txBuffer[10] = (uint8_t)(tmp_acc_y>> 8);
 80022ee:	88fb      	ldrh	r3, [r7, #6]
 80022f0:	0a1b      	lsrs	r3, r3, #8
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	4b3b      	ldr	r3, [pc, #236]	; (80023e4 <main+0x694>)
 80022f8:	729a      	strb	r2, [r3, #10]
		  txBuffer[11] = (uint8_t)(tmp_acc_y & 0x00FF);
 80022fa:	88fb      	ldrh	r3, [r7, #6]
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	4b39      	ldr	r3, [pc, #228]	; (80023e4 <main+0x694>)
 8002300:	72da      	strb	r2, [r3, #11]

		  txBuffer[12] = (uint8_t)(tmp_gyr_x>> 8);
 8002302:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002306:	121b      	asrs	r3, r3, #8
 8002308:	b21b      	sxth	r3, r3
 800230a:	b2da      	uxtb	r2, r3
 800230c:	4b35      	ldr	r3, [pc, #212]	; (80023e4 <main+0x694>)
 800230e:	731a      	strb	r2, [r3, #12]
		  txBuffer[13] = (uint8_t)(tmp_gyr_x & 0x00FF);
 8002310:	88bb      	ldrh	r3, [r7, #4]
 8002312:	b2da      	uxtb	r2, r3
 8002314:	4b33      	ldr	r3, [pc, #204]	; (80023e4 <main+0x694>)
 8002316:	735a      	strb	r2, [r3, #13]

		  tmp_CRC = updateCRC(0, &txBuffer, 14);
 8002318:	220e      	movs	r2, #14
 800231a:	4932      	ldr	r1, [pc, #200]	; (80023e4 <main+0x694>)
 800231c:	2000      	movs	r0, #0
 800231e:	f000 f8d5 	bl	80024cc <updateCRC>
 8002322:	4603      	mov	r3, r0
 8002324:	807b      	strh	r3, [r7, #2]

		  txBuffer[14] = (uint8_t)(tmp_CRC >> 8);
 8002326:	887b      	ldrh	r3, [r7, #2]
 8002328:	0a1b      	lsrs	r3, r3, #8
 800232a:	b29b      	uxth	r3, r3
 800232c:	b2da      	uxtb	r2, r3
 800232e:	4b2d      	ldr	r3, [pc, #180]	; (80023e4 <main+0x694>)
 8002330:	739a      	strb	r2, [r3, #14]
		  txBuffer[15] = (uint8_t)(tmp_CRC & 0x00FF);
 8002332:	887b      	ldrh	r3, [r7, #2]
 8002334:	b2da      	uxtb	r2, r3
 8002336:	4b2b      	ldr	r3, [pc, #172]	; (80023e4 <main+0x694>)
 8002338:	73da      	strb	r2, [r3, #15]

		  HAL_UART_Transmit_IT(&huart2, txBuffer, 16);
 800233a:	2210      	movs	r2, #16
 800233c:	4929      	ldr	r1, [pc, #164]	; (80023e4 <main+0x694>)
 800233e:	482a      	ldr	r0, [pc, #168]	; (80023e8 <main+0x698>)
 8002340:	f007 fe4d 	bl	8009fde <HAL_UART_Transmit_IT>


//		  sprintf(MSG,"something is :%d %d\t %d\t %d\t %d\t %d\t %d\t\n\r", tmp_heading, tmp_angular_left,tmp_angular_right,tmp_acc_x,tmp_acc_y,tmp_gyr_x);
		  sprintf(MSG,"something is :%5.1f \t%5.1f\t%d \t %d \n\r", angular_speed_left,angular_speed_right,dir_left,dir_right);
 8002344:	4b19      	ldr	r3, [pc, #100]	; (80023ac <main+0x65c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f7fe f8fd 	bl	8000548 <__aeabi_f2d>
 800234e:	4604      	mov	r4, r0
 8002350:	460d      	mov	r5, r1
 8002352:	4b19      	ldr	r3, [pc, #100]	; (80023b8 <main+0x668>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe f8f6 	bl	8000548 <__aeabi_f2d>
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	4910      	ldr	r1, [pc, #64]	; (80023a4 <main+0x654>)
 8002362:	f991 1000 	ldrsb.w	r1, [r1]
 8002366:	4608      	mov	r0, r1
 8002368:	4911      	ldr	r1, [pc, #68]	; (80023b0 <main+0x660>)
 800236a:	f991 1000 	ldrsb.w	r1, [r1]
 800236e:	9103      	str	r1, [sp, #12]
 8002370:	9002      	str	r0, [sp, #8]
 8002372:	e9cd 2300 	strd	r2, r3, [sp]
 8002376:	4622      	mov	r2, r4
 8002378:	462b      	mov	r3, r5
 800237a:	491c      	ldr	r1, [pc, #112]	; (80023ec <main+0x69c>)
 800237c:	481c      	ldr	r0, [pc, #112]	; (80023f0 <main+0x6a0>)
 800237e:	f009 fcbd 	bl	800bcfc <siprintf>
		  HAL_UART_Transmit(&huart1, MSG, sizeof(MSG), 5);
 8002382:	2305      	movs	r3, #5
 8002384:	2280      	movs	r2, #128	; 0x80
 8002386:	491a      	ldr	r1, [pc, #104]	; (80023f0 <main+0x6a0>)
 8002388:	481a      	ldr	r0, [pc, #104]	; (80023f4 <main+0x6a4>)
 800238a:	f007 fcf4 	bl	8009d76 <HAL_UART_Transmit>
		if(flag_uart_cb)
 800238e:	e56e      	b.n	8001e6e <main+0x11e>
 8002390:	00000000 	.word	0x00000000
 8002394:	40c38800 	.word	0x40c38800
 8002398:	200007c4 	.word	0x200007c4
 800239c:	200007d0 	.word	0x200007d0
 80023a0:	200007ca 	.word	0x200007ca
 80023a4:	200007cd 	.word	0x200007cd
 80023a8:	2ad5802b 	.word	0x2ad5802b
 80023ac:	200007d4 	.word	0x200007d4
 80023b0:	200007cc 	.word	0x200007cc
 80023b4:	200007c8 	.word	0x200007c8
 80023b8:	200007d8 	.word	0x200007d8
 80023bc:	20000024 	.word	0x20000024
 80023c0:	20000054 	.word	0x20000054
 80023c4:	0800fe18 	.word	0x0800fe18
 80023c8:	200007dc 	.word	0x200007dc
 80023cc:	20000088 	.word	0x20000088
 80023d0:	200007e4 	.word	0x200007e4
 80023d4:	200007e2 	.word	0x200007e2
 80023d8:	200007e0 	.word	0x200007e0
 80023dc:	200007de 	.word	0x200007de
 80023e0:	42c80000 	.word	0x42c80000
 80023e4:	200006ac 	.word	0x200006ac
 80023e8:	20000ad8 	.word	0x20000ad8
 80023ec:	0800fdf0 	.word	0x0800fdf0
 80023f0:	20000744 	.word	0x20000744
 80023f4:	20000a94 	.word	0x20000a94

080023f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b094      	sub	sp, #80	; 0x50
 80023fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023fe:	f107 0320 	add.w	r3, r7, #32
 8002402:	2230      	movs	r2, #48	; 0x30
 8002404:	2100      	movs	r1, #0
 8002406:	4618      	mov	r0, r3
 8002408:	f008 fdf0 	bl	800afec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800240c:	f107 030c 	add.w	r3, r7, #12
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	60da      	str	r2, [r3, #12]
 800241a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800241c:	2300      	movs	r3, #0
 800241e:	60bb      	str	r3, [r7, #8]
 8002420:	4b28      	ldr	r3, [pc, #160]	; (80024c4 <SystemClock_Config+0xcc>)
 8002422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002424:	4a27      	ldr	r2, [pc, #156]	; (80024c4 <SystemClock_Config+0xcc>)
 8002426:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800242a:	6413      	str	r3, [r2, #64]	; 0x40
 800242c:	4b25      	ldr	r3, [pc, #148]	; (80024c4 <SystemClock_Config+0xcc>)
 800242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002434:	60bb      	str	r3, [r7, #8]
 8002436:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002438:	2300      	movs	r3, #0
 800243a:	607b      	str	r3, [r7, #4]
 800243c:	4b22      	ldr	r3, [pc, #136]	; (80024c8 <SystemClock_Config+0xd0>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a21      	ldr	r2, [pc, #132]	; (80024c8 <SystemClock_Config+0xd0>)
 8002442:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002446:	6013      	str	r3, [r2, #0]
 8002448:	4b1f      	ldr	r3, [pc, #124]	; (80024c8 <SystemClock_Config+0xd0>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002450:	607b      	str	r3, [r7, #4]
 8002452:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002454:	2301      	movs	r3, #1
 8002456:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002458:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800245c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800245e:	2302      	movs	r3, #2
 8002460:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002462:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002466:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002468:	2319      	movs	r3, #25
 800246a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800246c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002470:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002472:	2302      	movs	r3, #2
 8002474:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002476:	2304      	movs	r3, #4
 8002478:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800247a:	f107 0320 	add.w	r3, r7, #32
 800247e:	4618      	mov	r0, r3
 8002480:	f005 fa4c 	bl	800791c <HAL_RCC_OscConfig>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800248a:	f000 f88d 	bl	80025a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800248e:	230f      	movs	r3, #15
 8002490:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002492:	2302      	movs	r3, #2
 8002494:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800249a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800249e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80024a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80024a6:	f107 030c 	add.w	r3, r7, #12
 80024aa:	2105      	movs	r1, #5
 80024ac:	4618      	mov	r0, r3
 80024ae:	f005 fcad 	bl	8007e0c <HAL_RCC_ClockConfig>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80024b8:	f000 f876 	bl	80025a8 <Error_Handler>
  }
}
 80024bc:	bf00      	nop
 80024be:	3750      	adds	r7, #80	; 0x50
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40023800 	.word	0x40023800
 80024c8:	40007000 	.word	0x40007000

080024cc <updateCRC>:

/* USER CODE BEGIN 4 */

// CRC
unsigned short updateCRC(uint16_t crc_accum, uint8_t *data_blk_ptr, uint16_t data_blk_size)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	6039      	str	r1, [r7, #0]
 80024d6:	80fb      	strh	r3, [r7, #6]
 80024d8:	4613      	mov	r3, r2
 80024da:	80bb      	strh	r3, [r7, #4]
    0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264,
    0x8261, 0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E,
    0x0234, 0x8231, 0x8213, 0x0216, 0x021C, 0x8219, 0x0208,
    0x820D, 0x8207, 0x0202 };

  for (j = 0; j < data_blk_size; j++)
 80024dc:	2300      	movs	r3, #0
 80024de:	81fb      	strh	r3, [r7, #14]
 80024e0:	e019      	b.n	8002516 <updateCRC+0x4a>
  {
    i = ((uint16_t)(crc_accum >> 8) ^ *data_blk_ptr++) & 0xFF;
 80024e2:	88fb      	ldrh	r3, [r7, #6]
 80024e4:	0a1b      	lsrs	r3, r3, #8
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	1c59      	adds	r1, r3, #1
 80024ec:	6039      	str	r1, [r7, #0]
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	4053      	eors	r3, r2
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	81bb      	strh	r3, [r7, #12]
    crc_accum = (crc_accum << 8) ^ crc_table[i];
 80024fa:	88fb      	ldrh	r3, [r7, #6]
 80024fc:	021b      	lsls	r3, r3, #8
 80024fe:	b21a      	sxth	r2, r3
 8002500:	89bb      	ldrh	r3, [r7, #12]
 8002502:	490a      	ldr	r1, [pc, #40]	; (800252c <updateCRC+0x60>)
 8002504:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002508:	b21b      	sxth	r3, r3
 800250a:	4053      	eors	r3, r2
 800250c:	b21b      	sxth	r3, r3
 800250e:	80fb      	strh	r3, [r7, #6]
  for (j = 0; j < data_blk_size; j++)
 8002510:	89fb      	ldrh	r3, [r7, #14]
 8002512:	3301      	adds	r3, #1
 8002514:	81fb      	strh	r3, [r7, #14]
 8002516:	89fa      	ldrh	r2, [r7, #14]
 8002518:	88bb      	ldrh	r3, [r7, #4]
 800251a:	429a      	cmp	r2, r3
 800251c:	d3e1      	bcc.n	80024e2 <updateCRC+0x16>
  }

  return crc_accum;
 800251e:	88fb      	ldrh	r3, [r7, #6]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	0800fe70 	.word	0x0800fe70

08002530 <HAL_UART_RxCpltCallback>:
//	LRL_US_TMR_IC_ISR(htim, us_front);
//}

// ####################   UART Receive Callback   ####################

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
//	if (huart == &huart2)
//	{
		flag_uart_cb = 1;
 8002538:	4b04      	ldr	r3, [pc, #16]	; (800254c <HAL_UART_RxCpltCallback+0x1c>)
 800253a:	2201      	movs	r2, #1
 800253c:	701a      	strb	r2, [r3, #0]
//	{
//		HAL_UART_Receive_IT(&huart1,&input_speed, 1);
//		flag_tx = 1;
//	}

}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	2000073c 	.word	0x2000073c

08002550 <HAL_TIM_PeriodElapsedCallback>:

// ####################   Timer To Creat 0.01 Delay Callback   ####################

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a06      	ldr	r2, [pc, #24]	; (8002574 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d102      	bne.n	8002566 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		pid_tim_flag = 1;
 8002560:	4b05      	ldr	r3, [pc, #20]	; (8002578 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002562:	2201      	movs	r2, #1
 8002564:	701a      	strb	r2, [r3, #0]
	}

}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	200009bc 	.word	0x200009bc
 8002578:	200007dc 	.word	0x200007dc

0800257c <HAL_I2C_MemRxCpltCallback>:

// ####################   I2C Callback   ####################

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
if(hi2c == &hi2c3)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a06      	ldr	r2, [pc, #24]	; (80025a0 <HAL_I2C_MemRxCpltCallback+0x24>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d105      	bne.n	8002598 <HAL_I2C_MemRxCpltCallback+0x1c>
	{
////		LRL_IMU_Read(&imu);
		HAL_GPIO_WritePin(BLINK_LED_PORT, BLINK_LED_PIN, 1);
 800258c:	2201      	movs	r2, #1
 800258e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002592:	4804      	ldr	r0, [pc, #16]	; (80025a4 <HAL_I2C_MemRxCpltCallback+0x28>)
 8002594:	f002 fb98 	bl	8004cc8 <HAL_GPIO_WritePin>
//	LRL_GYRO_Read(&imu);
	}
}
 8002598:	bf00      	nop
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	200005c8 	.word	0x200005c8
 80025a4:	40020c00 	.word	0x40020c00

080025a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025ac:	b672      	cpsid	i
}
 80025ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025b0:	e7fe      	b.n	80025b0 <Error_Handler+0x8>
	...

080025b4 <LRL_Motor_Speed>:
//	HAL_TIM_Encoder_Start(motor_left.TIM_ENC_Handle, TIM_CHANNEL_ALL);
//	HAL_TIM_Encoder_Start(motor_right.TIM_ENC_Handle, TIM_CHANNEL_ALL);
//}

void LRL_Motor_Speed(motor_cfgType motor, int8_t duty_cycle)
{
 80025b4:	b084      	sub	sp, #16
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b082      	sub	sp, #8
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	f107 0c10 	add.w	ip, r7, #16
 80025c0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	bool dir;
	uint32_t motor_pwm;

	dir = (duty_cycle >> 7) & 0x01;	// if MSB is 1 -> neg
 80025c4:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 80025c8:	11db      	asrs	r3, r3, #7
 80025ca:	b25b      	sxtb	r3, r3
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	bf14      	ite	ne
 80025d6:	2301      	movne	r3, #1
 80025d8:	2300      	moveq	r3, #0
 80025da:	71fb      	strb	r3, [r7, #7]
	duty_cycle = abs(duty_cycle);
 80025dc:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	bfb8      	it	lt
 80025e4:	425b      	neglt	r3, r3
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	motor_pwm = (uint32_t) ((motor.MAX_ARR * duty_cycle) / 100);
 80025ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ee:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 80025f2:	fb02 f303 	mul.w	r3, r2, r3
 80025f6:	4a1b      	ldr	r2, [pc, #108]	; (8002664 <LRL_Motor_Speed+0xb0>)
 80025f8:	fba2 2303 	umull	r2, r3, r2, r3
 80025fc:	095b      	lsrs	r3, r3, #5
 80025fe:	603b      	str	r3, [r7, #0]

    HAL_GPIO_WritePin(motor.MOTOR_1_GPIO, motor.MOTOR_1_PIN, !dir);
 8002600:	6938      	ldr	r0, [r7, #16]
 8002602:	8ab9      	ldrh	r1, [r7, #20]
 8002604:	79fb      	ldrb	r3, [r7, #7]
 8002606:	f083 0301 	eor.w	r3, r3, #1
 800260a:	b2db      	uxtb	r3, r3
 800260c:	461a      	mov	r2, r3
 800260e:	f002 fb5b 	bl	8004cc8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(motor.MOTOR_2_GPIO, motor.MOTOR_2_PIN, dir);
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	8bb9      	ldrh	r1, [r7, #28]
 8002616:	79fa      	ldrb	r2, [r7, #7]
 8002618:	4618      	mov	r0, r3
 800261a:	f002 fb55 	bl	8004cc8 <HAL_GPIO_WritePin>

    if (motor.TIM_PWM_Channel == TIM_CHANNEL_1)
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	2b00      	cmp	r3, #0
 8002622:	d104      	bne.n	800262e <LRL_Motor_Speed+0x7a>
    	motor.TIM_PWM_Handle->Instance->CCR1 = motor_pwm;
 8002624:	6a3b      	ldr	r3, [r7, #32]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	635a      	str	r2, [r3, #52]	; 0x34
    	motor.TIM_PWM_Handle->Instance->CCR2 = motor_pwm;
    else if (motor.TIM_PWM_Channel == TIM_CHANNEL_3)
    	motor.TIM_PWM_Handle->Instance->CCR3 = motor_pwm;
    else
    	motor.TIM_PWM_Handle->Instance->CCR4 = motor_pwm;
}
 800262c:	e013      	b.n	8002656 <LRL_Motor_Speed+0xa2>
    else if (motor.TIM_PWM_Channel == TIM_CHANNEL_2)
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	2b04      	cmp	r3, #4
 8002632:	d104      	bne.n	800263e <LRL_Motor_Speed+0x8a>
    	motor.TIM_PWM_Handle->Instance->CCR2 = motor_pwm;
 8002634:	6a3b      	ldr	r3, [r7, #32]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800263c:	e00b      	b.n	8002656 <LRL_Motor_Speed+0xa2>
    else if (motor.TIM_PWM_Channel == TIM_CHANNEL_3)
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	2b08      	cmp	r3, #8
 8002642:	d104      	bne.n	800264e <LRL_Motor_Speed+0x9a>
    	motor.TIM_PWM_Handle->Instance->CCR3 = motor_pwm;
 8002644:	6a3b      	ldr	r3, [r7, #32]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800264c:	e003      	b.n	8002656 <LRL_Motor_Speed+0xa2>
    	motor.TIM_PWM_Handle->Instance->CCR4 = motor_pwm;
 800264e:	6a3b      	ldr	r3, [r7, #32]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002656:	bf00      	nop
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002660:	b004      	add	sp, #16
 8002662:	4770      	bx	lr
 8002664:	51eb851f 	.word	0x51eb851f

08002668 <LRL_Motion_Control>:

void LRL_Motion_Control(diffDrive_cfgType diffRobot, int8_t duty_cycle_left, int8_t duty_cycle_right)
{
 8002668:	b084      	sub	sp, #16
 800266a:	b590      	push	{r4, r7, lr}
 800266c:	b085      	sub	sp, #20
 800266e:	af04      	add	r7, sp, #16
 8002670:	f107 0410 	add.w	r4, r7, #16
 8002674:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LRL_Motor_Speed(diffRobot.MOTOR_LEFT, duty_cycle_left);
 8002678:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800267c:	9303      	str	r3, [sp, #12]
 800267e:	466c      	mov	r4, sp
 8002680:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002684:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002688:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800268c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002690:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002692:	f7ff ff8f 	bl	80025b4 <LRL_Motor_Speed>
	LRL_Motor_Speed(diffRobot.MOTOR_RIGHT, duty_cycle_right);
 8002696:	f997 3050 	ldrsb.w	r3, [r7, #80]	; 0x50
 800269a:	9303      	str	r3, [sp, #12]
 800269c:	466c      	mov	r4, sp
 800269e:	f107 0320 	add.w	r3, r7, #32
 80026a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80026a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80026aa:	f107 0310 	add.w	r3, r7, #16
 80026ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026b0:	f7ff ff80 	bl	80025b4 <LRL_Motor_Speed>
}
 80026b4:	bf00      	nop
 80026b6:	3704      	adds	r7, #4
 80026b8:	46bd      	mov	sp, r7
 80026ba:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80026be:	b004      	add	sp, #16
 80026c0:	4770      	bx	lr

080026c2 <LRL_PID_Init>:
#include "main.h"
#include "mcu_layout.h"


void LRL_PID_Init(pid_cfgType *pid_cfg,uint8_t AntiWindup)
	{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
 80026ca:	460b      	mov	r3, r1
 80026cc:	70fb      	strb	r3, [r7, #3]
	// Resetting the PID parameters
	pid_cfg->Anti_windup_EN = AntiWindup;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	78fa      	ldrb	r2, [r7, #3]
 80026d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pid_cfg->Prev_Measurement = 0.0f;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f04f 0200 	mov.w	r2, #0
 80026dc:	61da      	str	r2, [r3, #28]
	pid_cfg->Integrator_Amount = 0;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f04f 0200 	mov.w	r2, #0
 80026e4:	615a      	str	r2, [r3, #20]
	pid_cfg->Prev_Error = 0.0f;// initial error you can change it if by default you have an error
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f04f 0200 	mov.w	r2, #0
 80026ec:	621a      	str	r2, [r3, #32]
	pid_cfg->Control_Signal = 0;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
	...

08002704 <LRL_PID_Update>:

void LRL_PID_Update(pid_cfgType *pid_cfg, float measurement, float set_point)
	{
 8002704:	b480      	push	{r7}
 8002706:	b087      	sub	sp, #28
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002710:	edc7 0a01 	vstr	s1, [r7, #4]
	int8_t dir;
	if(measurement >= 0){
 8002714:	edd7 7a02 	vldr	s15, [r7, #8]
 8002718:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800271c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002720:	db02      	blt.n	8002728 <LRL_PID_Update+0x24>
		dir = 1;
 8002722:	2301      	movs	r3, #1
 8002724:	75fb      	strb	r3, [r7, #23]
 8002726:	e001      	b.n	800272c <LRL_PID_Update+0x28>
	}
	else
	{
		dir = -1;
 8002728:	23ff      	movs	r3, #255	; 0xff
 800272a:	75fb      	strb	r3, [r7, #23]
	}
	pid_cfg->Error = set_point - measurement;
 800272c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002730:	edd7 7a02 	vldr	s15, [r7, #8]
 8002734:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	pid_cfg->Error = pid_cfg->Error * Speed2PWM_Rate;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002744:	ed9f 7a79 	vldr	s14, [pc, #484]	; 800292c <LRL_PID_Update+0x228>
 8002748:	ee27 7a87 	vmul.f32	s14, s15, s14
 800274c:	eddf 6a78 	vldr	s13, [pc, #480]	; 8002930 <LRL_PID_Update+0x22c>
 8002750:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	// Setting Values
//	float P = pid_cfg->Kp * pid_cfg->Error;
	pid_cfg->Integrator_Amount += (pid_cfg->Ts*(pid_cfg->Ki * (pid_cfg->Error + pid_cfg->Prev_Error)));
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	ed93 7a05 	vldr	s14, [r3, #20]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	edd3 6a03 	vldr	s13, [r3, #12]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	ed93 6a01 	vldr	s12, [r3, #4]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	edd3 5a0b 	vldr	s11, [r3, #44]	; 0x2c
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	edd3 7a08 	vldr	s15, [r3, #32]
 8002778:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800277c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002780:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002784:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	edc3 7a05 	vstr	s15, [r3, #20]
//	float I = pid_cfg->Integrator_Amount;
	pid_cfg->Differentiator_Amount = 0;//pid_cfg->Kd * (measurement - pid_cfg->Prev_Measurement)/(pid_cfg->Ts);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	619a      	str	r2, [r3, #24]
                        + (2.0f * pid->tau - pid->T) * pid->differentiator)
                        / (2.0f * pid->tau + pid->T);
     */


	pid_cfg->Control_Signal = (int8_t)((pid_cfg->Kp * pid_cfg->Error) + pid_cfg->Integrator_Amount + pid_cfg->Differentiator_Amount);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	ed93 7a00 	vldr	s14, [r3]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80027a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	edd3 7a05 	vldr	s15, [r3, #20]
 80027ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	edd3 7a06 	vldr	s15, [r3, #24]
 80027b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027be:	edc7 7a00 	vstr	s15, [r7]
 80027c2:	783b      	ldrb	r3, [r7, #0]
 80027c4:	b25a      	sxtb	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if(pid_cfg->Anti_windup_EN == 1)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d159      	bne.n	800288a <LRL_PID_Update+0x186>
	{
		if(dir > 0)
 80027d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	dd2a      	ble.n	8002834 <LRL_PID_Update+0x130>
		{
			if(pid_cfg->Control_Signal <= Upper_Saturation_Limit && pid_cfg->Control_Signal >= Lower_Saturation_Limit)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 80027e4:	2b64      	cmp	r3, #100	; 0x64
 80027e6:	dc09      	bgt.n	80027fc <LRL_PID_Update+0xf8>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	db04      	blt.n	80027fc <LRL_PID_Update+0xf8>
				{
				//pid_cfg->Integrator_Amount += (pid_cfg->Ts*(pid_cfg->Ki * (pid_cfg->Error + pid_cfg->Prev_Error)));
				pid_cfg->Wind_Up_Amount = pid_cfg->Integrator_Amount;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	695a      	ldr	r2, [r3, #20]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	629a      	str	r2, [r3, #40]	; 0x28
 80027fa:	e046      	b.n	800288a <LRL_PID_Update+0x186>
				}
			else
				{
				pid_cfg->Control_Signal = (pid_cfg->Kp * pid_cfg->Error) + pid_cfg->Wind_Up_Amount + pid_cfg->Differentiator_Amount;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	ed93 7a00 	vldr	s14, [r3]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002808:	ee27 7a27 	vmul.f32	s14, s14, s15
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002812:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	edd3 7a06 	vldr	s15, [r3, #24]
 800281c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002820:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002824:	edc7 7a00 	vstr	s15, [r7]
 8002828:	783b      	ldrb	r3, [r7, #0]
 800282a:	b25a      	sxtb	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002832:	e02a      	b.n	800288a <LRL_PID_Update+0x186>
				}
		}
		else
		{
			if(pid_cfg->Control_Signal >= -Upper_Saturation_Limit && pid_cfg->Control_Signal <= Lower_Saturation_Limit)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 800283a:	f113 0f64 	cmn.w	r3, #100	; 0x64
 800283e:	db09      	blt.n	8002854 <LRL_PID_Update+0x150>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 8002846:	2b00      	cmp	r3, #0
 8002848:	dc04      	bgt.n	8002854 <LRL_PID_Update+0x150>
			{
				pid_cfg->Wind_Up_Amount = pid_cfg->Integrator_Amount;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	695a      	ldr	r2, [r3, #20]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	629a      	str	r2, [r3, #40]	; 0x28
 8002852:	e01a      	b.n	800288a <LRL_PID_Update+0x186>
			}
			else
			{
				pid_cfg->Control_Signal = (pid_cfg->Kp * pid_cfg->Error) + pid_cfg->Wind_Up_Amount + pid_cfg->Differentiator_Amount;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	ed93 7a00 	vldr	s14, [r3]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002860:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800286a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	edd3 7a06 	vldr	s15, [r3, #24]
 8002874:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002878:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800287c:	edc7 7a00 	vstr	s15, [r7]
 8002880:	783b      	ldrb	r3, [r7, #0]
 8002882:	b25a      	sxtb	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
	}


	//pid_cfg->Control_Signal = (pid_cfg->Kp * pid_cfg->Error) + pid_cfg->Integrator_Amount + pid_cfg->Differentiator_Amount;
	if(dir>0)
 800288a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800288e:	2b00      	cmp	r3, #0
 8002890:	dd1d      	ble.n	80028ce <LRL_PID_Update+0x1ca>
	{
		if(pid_cfg->Control_Signal > pid_cfg->Upper_Limit_Saturation)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f993 2024 	ldrsb.w	r2, [r3, #36]	; 0x24
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f993 3011 	ldrsb.w	r3, [r3, #17]
 800289e:	429a      	cmp	r2, r3
 80028a0:	dd06      	ble.n	80028b0 <LRL_PID_Update+0x1ac>
		  {
			pid_cfg->Control_Signal = pid_cfg->Upper_Limit_Saturation;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f993 2011 	ldrsb.w	r2, [r3, #17]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80028ae:	e02f      	b.n	8002910 <LRL_PID_Update+0x20c>
		  }
		else if(pid_cfg->Control_Signal < pid_cfg->Lower_Limit_Saturation)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f993 2024 	ldrsb.w	r2, [r3, #36]	; 0x24
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80028bc:	429a      	cmp	r2, r3
 80028be:	da27      	bge.n	8002910 <LRL_PID_Update+0x20c>
		  {
			pid_cfg->Control_Signal = pid_cfg->Lower_Limit_Saturation;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f993 2010 	ldrsb.w	r2, [r3, #16]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80028cc:	e020      	b.n	8002910 <LRL_PID_Update+0x20c>
		  }
	}
	else
	{
		if(pid_cfg->Control_Signal < pid_cfg->Upper_Limit_Saturation)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f993 2024 	ldrsb.w	r2, [r3, #36]	; 0x24
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80028da:	429a      	cmp	r2, r3
 80028dc:	da0a      	bge.n	80028f4 <LRL_PID_Update+0x1f0>
		  {
			pid_cfg->Control_Signal = -pid_cfg->Upper_Limit_Saturation;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	425b      	negs	r3, r3
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	b25a      	sxtb	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80028f2:	e00d      	b.n	8002910 <LRL_PID_Update+0x20c>
		  }
		else if(pid_cfg->Control_Signal > pid_cfg->Lower_Limit_Saturation)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f993 2024 	ldrsb.w	r2, [r3, #36]	; 0x24
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8002900:	429a      	cmp	r2, r3
 8002902:	dd05      	ble.n	8002910 <LRL_PID_Update+0x20c>
		  {
			pid_cfg->Control_Signal = pid_cfg->Lower_Limit_Saturation;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f993 2010 	ldrsb.w	r2, [r3, #16]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		  }
	}

	pid_cfg->Prev_Measurement = measurement;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	68ba      	ldr	r2, [r7, #8]
 8002914:	61da      	str	r2, [r3, #28]
	pid_cfg->Prev_Error = pid_cfg->Error;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	621a      	str	r2, [r3, #32]


	}
 800291e:	bf00      	nop
 8002920:	371c      	adds	r7, #28
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	42960000 	.word	0x42960000
 8002930:	435a0000 	.word	0x435a0000

08002934 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002938:	4b17      	ldr	r3, [pc, #92]	; (8002998 <MX_SPI2_Init+0x64>)
 800293a:	4a18      	ldr	r2, [pc, #96]	; (800299c <MX_SPI2_Init+0x68>)
 800293c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800293e:	4b16      	ldr	r3, [pc, #88]	; (8002998 <MX_SPI2_Init+0x64>)
 8002940:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002944:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002946:	4b14      	ldr	r3, [pc, #80]	; (8002998 <MX_SPI2_Init+0x64>)
 8002948:	2200      	movs	r2, #0
 800294a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800294c:	4b12      	ldr	r3, [pc, #72]	; (8002998 <MX_SPI2_Init+0x64>)
 800294e:	2200      	movs	r2, #0
 8002950:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002952:	4b11      	ldr	r3, [pc, #68]	; (8002998 <MX_SPI2_Init+0x64>)
 8002954:	2200      	movs	r2, #0
 8002956:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002958:	4b0f      	ldr	r3, [pc, #60]	; (8002998 <MX_SPI2_Init+0x64>)
 800295a:	2200      	movs	r2, #0
 800295c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800295e:	4b0e      	ldr	r3, [pc, #56]	; (8002998 <MX_SPI2_Init+0x64>)
 8002960:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002964:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002966:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <MX_SPI2_Init+0x64>)
 8002968:	2200      	movs	r2, #0
 800296a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800296c:	4b0a      	ldr	r3, [pc, #40]	; (8002998 <MX_SPI2_Init+0x64>)
 800296e:	2200      	movs	r2, #0
 8002970:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002972:	4b09      	ldr	r3, [pc, #36]	; (8002998 <MX_SPI2_Init+0x64>)
 8002974:	2200      	movs	r2, #0
 8002976:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002978:	4b07      	ldr	r3, [pc, #28]	; (8002998 <MX_SPI2_Init+0x64>)
 800297a:	2200      	movs	r2, #0
 800297c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800297e:	4b06      	ldr	r3, [pc, #24]	; (8002998 <MX_SPI2_Init+0x64>)
 8002980:	220a      	movs	r2, #10
 8002982:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002984:	4804      	ldr	r0, [pc, #16]	; (8002998 <MX_SPI2_Init+0x64>)
 8002986:	f005 fc21 	bl	80081cc <HAL_SPI_Init>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002990:	f7ff fe0a 	bl	80025a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002994:	bf00      	nop
 8002996:	bd80      	pop	{r7, pc}
 8002998:	200007e8 	.word	0x200007e8
 800299c:	40003800 	.word	0x40003800

080029a0 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80029a4:	4b17      	ldr	r3, [pc, #92]	; (8002a04 <MX_SPI3_Init+0x64>)
 80029a6:	4a18      	ldr	r2, [pc, #96]	; (8002a08 <MX_SPI3_Init+0x68>)
 80029a8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80029aa:	4b16      	ldr	r3, [pc, #88]	; (8002a04 <MX_SPI3_Init+0x64>)
 80029ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80029b0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80029b2:	4b14      	ldr	r3, [pc, #80]	; (8002a04 <MX_SPI3_Init+0x64>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80029b8:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <MX_SPI3_Init+0x64>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029be:	4b11      	ldr	r3, [pc, #68]	; (8002a04 <MX_SPI3_Init+0x64>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029c4:	4b0f      	ldr	r3, [pc, #60]	; (8002a04 <MX_SPI3_Init+0x64>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80029ca:	4b0e      	ldr	r3, [pc, #56]	; (8002a04 <MX_SPI3_Init+0x64>)
 80029cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029d0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029d2:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <MX_SPI3_Init+0x64>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029d8:	4b0a      	ldr	r3, [pc, #40]	; (8002a04 <MX_SPI3_Init+0x64>)
 80029da:	2200      	movs	r2, #0
 80029dc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80029de:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <MX_SPI3_Init+0x64>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029e4:	4b07      	ldr	r3, [pc, #28]	; (8002a04 <MX_SPI3_Init+0x64>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80029ea:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <MX_SPI3_Init+0x64>)
 80029ec:	220a      	movs	r2, #10
 80029ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80029f0:	4804      	ldr	r0, [pc, #16]	; (8002a04 <MX_SPI3_Init+0x64>)
 80029f2:	f005 fbeb 	bl	80081cc <HAL_SPI_Init>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80029fc:	f7ff fdd4 	bl	80025a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002a00:	bf00      	nop
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	20000840 	.word	0x20000840
 8002a08:	40003c00 	.word	0x40003c00

08002a0c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b08c      	sub	sp, #48	; 0x30
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a14:	f107 031c 	add.w	r3, r7, #28
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	605a      	str	r2, [r3, #4]
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	60da      	str	r2, [r3, #12]
 8002a22:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a42      	ldr	r2, [pc, #264]	; (8002b34 <HAL_SPI_MspInit+0x128>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d14b      	bne.n	8002ac6 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61bb      	str	r3, [r7, #24]
 8002a32:	4b41      	ldr	r3, [pc, #260]	; (8002b38 <HAL_SPI_MspInit+0x12c>)
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	4a40      	ldr	r2, [pc, #256]	; (8002b38 <HAL_SPI_MspInit+0x12c>)
 8002a38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a3e:	4b3e      	ldr	r3, [pc, #248]	; (8002b38 <HAL_SPI_MspInit+0x12c>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a46:	61bb      	str	r3, [r7, #24]
 8002a48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	617b      	str	r3, [r7, #20]
 8002a4e:	4b3a      	ldr	r3, [pc, #232]	; (8002b38 <HAL_SPI_MspInit+0x12c>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	4a39      	ldr	r2, [pc, #228]	; (8002b38 <HAL_SPI_MspInit+0x12c>)
 8002a54:	f043 0304 	orr.w	r3, r3, #4
 8002a58:	6313      	str	r3, [r2, #48]	; 0x30
 8002a5a:	4b37      	ldr	r3, [pc, #220]	; (8002b38 <HAL_SPI_MspInit+0x12c>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	f003 0304 	and.w	r3, r3, #4
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a66:	2300      	movs	r3, #0
 8002a68:	613b      	str	r3, [r7, #16]
 8002a6a:	4b33      	ldr	r3, [pc, #204]	; (8002b38 <HAL_SPI_MspInit+0x12c>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	4a32      	ldr	r2, [pc, #200]	; (8002b38 <HAL_SPI_MspInit+0x12c>)
 8002a70:	f043 0302 	orr.w	r3, r3, #2
 8002a74:	6313      	str	r3, [r2, #48]	; 0x30
 8002a76:	4b30      	ldr	r3, [pc, #192]	; (8002b38 <HAL_SPI_MspInit+0x12c>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	613b      	str	r3, [r7, #16]
 8002a80:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = JET_SPI_MISO_Pin|JET_SPI_MOSI_Pin;
 8002a82:	230c      	movs	r3, #12
 8002a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a86:	2302      	movs	r3, #2
 8002a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a92:	2305      	movs	r3, #5
 8002a94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a96:	f107 031c 	add.w	r3, r7, #28
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4827      	ldr	r0, [pc, #156]	; (8002b3c <HAL_SPI_MspInit+0x130>)
 8002a9e:	f001 ff77 	bl	8004990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = JET_SPI_SCK_Pin;
 8002aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ab4:	2305      	movs	r3, #5
 8002ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(JET_SPI_SCK_GPIO_Port, &GPIO_InitStruct);
 8002ab8:	f107 031c 	add.w	r3, r7, #28
 8002abc:	4619      	mov	r1, r3
 8002abe:	4820      	ldr	r0, [pc, #128]	; (8002b40 <HAL_SPI_MspInit+0x134>)
 8002ac0:	f001 ff66 	bl	8004990 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002ac4:	e031      	b.n	8002b2a <HAL_SPI_MspInit+0x11e>
  else if(spiHandle->Instance==SPI3)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a1e      	ldr	r2, [pc, #120]	; (8002b44 <HAL_SPI_MspInit+0x138>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d12c      	bne.n	8002b2a <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	4b18      	ldr	r3, [pc, #96]	; (8002b38 <HAL_SPI_MspInit+0x12c>)
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad8:	4a17      	ldr	r2, [pc, #92]	; (8002b38 <HAL_SPI_MspInit+0x12c>)
 8002ada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ade:	6413      	str	r3, [r2, #64]	; 0x40
 8002ae0:	4b15      	ldr	r3, [pc, #84]	; (8002b38 <HAL_SPI_MspInit+0x12c>)
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ae8:	60fb      	str	r3, [r7, #12]
 8002aea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aec:	2300      	movs	r3, #0
 8002aee:	60bb      	str	r3, [r7, #8]
 8002af0:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <HAL_SPI_MspInit+0x12c>)
 8002af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af4:	4a10      	ldr	r2, [pc, #64]	; (8002b38 <HAL_SPI_MspInit+0x12c>)
 8002af6:	f043 0304 	orr.w	r3, r3, #4
 8002afa:	6313      	str	r3, [r2, #48]	; 0x30
 8002afc:	4b0e      	ldr	r3, [pc, #56]	; (8002b38 <HAL_SPI_MspInit+0x12c>)
 8002afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	60bb      	str	r3, [r7, #8]
 8002b06:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002b08:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002b0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0e:	2302      	movs	r3, #2
 8002b10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b16:	2303      	movs	r3, #3
 8002b18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002b1a:	2306      	movs	r3, #6
 8002b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b1e:	f107 031c 	add.w	r3, r7, #28
 8002b22:	4619      	mov	r1, r3
 8002b24:	4805      	ldr	r0, [pc, #20]	; (8002b3c <HAL_SPI_MspInit+0x130>)
 8002b26:	f001 ff33 	bl	8004990 <HAL_GPIO_Init>
}
 8002b2a:	bf00      	nop
 8002b2c:	3730      	adds	r7, #48	; 0x30
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40003800 	.word	0x40003800
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	40020800 	.word	0x40020800
 8002b40:	40020400 	.word	0x40020400
 8002b44:	40003c00 	.word	0x40003c00

08002b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b4e:	2300      	movs	r3, #0
 8002b50:	607b      	str	r3, [r7, #4]
 8002b52:	4b10      	ldr	r3, [pc, #64]	; (8002b94 <HAL_MspInit+0x4c>)
 8002b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b56:	4a0f      	ldr	r2, [pc, #60]	; (8002b94 <HAL_MspInit+0x4c>)
 8002b58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b5e:	4b0d      	ldr	r3, [pc, #52]	; (8002b94 <HAL_MspInit+0x4c>)
 8002b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b66:	607b      	str	r3, [r7, #4]
 8002b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	603b      	str	r3, [r7, #0]
 8002b6e:	4b09      	ldr	r3, [pc, #36]	; (8002b94 <HAL_MspInit+0x4c>)
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	4a08      	ldr	r2, [pc, #32]	; (8002b94 <HAL_MspInit+0x4c>)
 8002b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b78:	6413      	str	r3, [r2, #64]	; 0x40
 8002b7a:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <HAL_MspInit+0x4c>)
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b82:	603b      	str	r3, [r7, #0]
 8002b84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	40023800 	.word	0x40023800

08002b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b9c:	e7fe      	b.n	8002b9c <NMI_Handler+0x4>

08002b9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ba2:	e7fe      	b.n	8002ba2 <HardFault_Handler+0x4>

08002ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ba8:	e7fe      	b.n	8002ba8 <MemManage_Handler+0x4>

08002baa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002baa:	b480      	push	{r7}
 8002bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bae:	e7fe      	b.n	8002bae <BusFault_Handler+0x4>

08002bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bb4:	e7fe      	b.n	8002bb4 <UsageFault_Handler+0x4>

08002bb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bc8:	bf00      	nop
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bd6:	bf00      	nop
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002be4:	f000 ff54 	bl	8003a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002be8:	bf00      	nop
 8002bea:	bd80      	pop	{r7, pc}

08002bec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002bf0:	4802      	ldr	r0, [pc, #8]	; (8002bfc <TIM4_IRQHandler+0x10>)
 8002bf2:	f006 f801 	bl	8008bf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002bf6:	bf00      	nop
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	20000974 	.word	0x20000974

08002c00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c04:	4802      	ldr	r0, [pc, #8]	; (8002c10 <USART1_IRQHandler+0x10>)
 8002c06:	f007 fa5f 	bl	800a0c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c0a:	bf00      	nop
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	20000a94 	.word	0x20000a94

08002c14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002c18:	4802      	ldr	r0, [pc, #8]	; (8002c24 <USART2_IRQHandler+0x10>)
 8002c1a:	f007 fa55 	bl	800a0c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002c1e:	bf00      	nop
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	20000ad8 	.word	0x20000ad8

08002c28 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002c2c:	4802      	ldr	r0, [pc, #8]	; (8002c38 <TIM5_IRQHandler+0x10>)
 8002c2e:	f005 ffe3 	bl	8008bf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002c32:	bf00      	nop
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	200009bc 	.word	0x200009bc

08002c3c <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8002c40:	4802      	ldr	r0, [pc, #8]	; (8002c4c <I2C3_EV_IRQHandler+0x10>)
 8002c42:	f002 fdbd 	bl	80057c0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	200005c8 	.word	0x200005c8

08002c50 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8002c54:	4802      	ldr	r0, [pc, #8]	; (8002c60 <I2C3_ER_IRQHandler+0x10>)
 8002c56:	f002 ff24 	bl	8005aa2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	200005c8 	.word	0x200005c8

08002c64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
	return 1;
 8002c68:	2301      	movs	r3, #1
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <_kill>:

int _kill(int pid, int sig)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c7e:	f008 f98b 	bl	800af98 <__errno>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2216      	movs	r2, #22
 8002c86:	601a      	str	r2, [r3, #0]
	return -1;
 8002c88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <_exit>:

void _exit (int status)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f7ff ffe7 	bl	8002c74 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002ca6:	e7fe      	b.n	8002ca6 <_exit+0x12>

08002ca8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	e00a      	b.n	8002cd0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002cba:	f3af 8000 	nop.w
 8002cbe:	4601      	mov	r1, r0
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	1c5a      	adds	r2, r3, #1
 8002cc4:	60ba      	str	r2, [r7, #8]
 8002cc6:	b2ca      	uxtb	r2, r1
 8002cc8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	dbf0      	blt.n	8002cba <_read+0x12>
	}

return len;
 8002cd8:	687b      	ldr	r3, [r7, #4]
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3718      	adds	r7, #24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b086      	sub	sp, #24
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	60f8      	str	r0, [r7, #12]
 8002cea:	60b9      	str	r1, [r7, #8]
 8002cec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cee:	2300      	movs	r3, #0
 8002cf0:	617b      	str	r3, [r7, #20]
 8002cf2:	e009      	b.n	8002d08 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	1c5a      	adds	r2, r3, #1
 8002cf8:	60ba      	str	r2, [r7, #8]
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff f815 	bl	8001d2c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	3301      	adds	r3, #1
 8002d06:	617b      	str	r3, [r7, #20]
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	dbf1      	blt.n	8002cf4 <_write+0x12>
	}
	return len;
 8002d10:	687b      	ldr	r3, [r7, #4]
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3718      	adds	r7, #24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <_close>:

int _close(int file)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
	return -1;
 8002d22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
 8002d3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d42:	605a      	str	r2, [r3, #4]
	return 0;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <_isatty>:

int _isatty(int file)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
	return 1;
 8002d5a:	2301      	movs	r3, #1
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
	return 0;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
	...

08002d84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d8c:	4a14      	ldr	r2, [pc, #80]	; (8002de0 <_sbrk+0x5c>)
 8002d8e:	4b15      	ldr	r3, [pc, #84]	; (8002de4 <_sbrk+0x60>)
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d98:	4b13      	ldr	r3, [pc, #76]	; (8002de8 <_sbrk+0x64>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d102      	bne.n	8002da6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002da0:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <_sbrk+0x64>)
 8002da2:	4a12      	ldr	r2, [pc, #72]	; (8002dec <_sbrk+0x68>)
 8002da4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002da6:	4b10      	ldr	r3, [pc, #64]	; (8002de8 <_sbrk+0x64>)
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4413      	add	r3, r2
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d207      	bcs.n	8002dc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002db4:	f008 f8f0 	bl	800af98 <__errno>
 8002db8:	4603      	mov	r3, r0
 8002dba:	220c      	movs	r2, #12
 8002dbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc2:	e009      	b.n	8002dd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dc4:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <_sbrk+0x64>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dca:	4b07      	ldr	r3, [pc, #28]	; (8002de8 <_sbrk+0x64>)
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	4a05      	ldr	r2, [pc, #20]	; (8002de8 <_sbrk+0x64>)
 8002dd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	20020000 	.word	0x20020000
 8002de4:	00000400 	.word	0x00000400
 8002de8:	20000898 	.word	0x20000898
 8002dec:	20000b30 	.word	0x20000b30

08002df0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002df4:	4b06      	ldr	r3, [pc, #24]	; (8002e10 <SystemInit+0x20>)
 8002df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfa:	4a05      	ldr	r2, [pc, #20]	; (8002e10 <SystemInit+0x20>)
 8002dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e04:	bf00      	nop
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	e000ed00 	.word	0xe000ed00

08002e14 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e1a:	f107 0308 	add.w	r3, r7, #8
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	605a      	str	r2, [r3, #4]
 8002e24:	609a      	str	r2, [r3, #8]
 8002e26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e28:	463b      	mov	r3, r7
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002e30:	4b1e      	ldr	r3, [pc, #120]	; (8002eac <MX_TIM1_Init+0x98>)
 8002e32:	4a1f      	ldr	r2, [pc, #124]	; (8002eb0 <MX_TIM1_Init+0x9c>)
 8002e34:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 8002e36:	4b1d      	ldr	r3, [pc, #116]	; (8002eac <MX_TIM1_Init+0x98>)
 8002e38:	22a7      	movs	r2, #167	; 0xa7
 8002e3a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e3c:	4b1b      	ldr	r3, [pc, #108]	; (8002eac <MX_TIM1_Init+0x98>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002e42:	4b1a      	ldr	r3, [pc, #104]	; (8002eac <MX_TIM1_Init+0x98>)
 8002e44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e48:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e4a:	4b18      	ldr	r3, [pc, #96]	; (8002eac <MX_TIM1_Init+0x98>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002e50:	4b16      	ldr	r3, [pc, #88]	; (8002eac <MX_TIM1_Init+0x98>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e56:	4b15      	ldr	r3, [pc, #84]	; (8002eac <MX_TIM1_Init+0x98>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002e5c:	4813      	ldr	r0, [pc, #76]	; (8002eac <MX_TIM1_Init+0x98>)
 8002e5e:	f005 fa3e 	bl	80082de <HAL_TIM_Base_Init>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002e68:	f7ff fb9e 	bl	80025a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002e72:	f107 0308 	add.w	r3, r7, #8
 8002e76:	4619      	mov	r1, r3
 8002e78:	480c      	ldr	r0, [pc, #48]	; (8002eac <MX_TIM1_Init+0x98>)
 8002e7a:	f006 f923 	bl	80090c4 <HAL_TIM_ConfigClockSource>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002e84:	f7ff fb90 	bl	80025a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002e90:	463b      	mov	r3, r7
 8002e92:	4619      	mov	r1, r3
 8002e94:	4805      	ldr	r0, [pc, #20]	; (8002eac <MX_TIM1_Init+0x98>)
 8002e96:	f006 fe3f 	bl	8009b18 <HAL_TIMEx_MasterConfigSynchronization>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002ea0:	f7ff fb82 	bl	80025a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002ea4:	bf00      	nop
 8002ea6:	3718      	adds	r7, #24
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	2000089c 	.word	0x2000089c
 8002eb0:	40010000 	.word	0x40010000

08002eb4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b08c      	sub	sp, #48	; 0x30
 8002eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002eba:	f107 030c 	add.w	r3, r7, #12
 8002ebe:	2224      	movs	r2, #36	; 0x24
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f008 f892 	bl	800afec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ec8:	1d3b      	adds	r3, r7, #4
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ed0:	4b21      	ldr	r3, [pc, #132]	; (8002f58 <MX_TIM2_Init+0xa4>)
 8002ed2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ed6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002ed8:	4b1f      	ldr	r3, [pc, #124]	; (8002f58 <MX_TIM2_Init+0xa4>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ede:	4b1e      	ldr	r3, [pc, #120]	; (8002f58 <MX_TIM2_Init+0xa4>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 48960;
 8002ee4:	4b1c      	ldr	r3, [pc, #112]	; (8002f58 <MX_TIM2_Init+0xa4>)
 8002ee6:	f64b 7240 	movw	r2, #48960	; 0xbf40
 8002eea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eec:	4b1a      	ldr	r3, [pc, #104]	; (8002f58 <MX_TIM2_Init+0xa4>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ef2:	4b19      	ldr	r3, [pc, #100]	; (8002f58 <MX_TIM2_Init+0xa4>)
 8002ef4:	2280      	movs	r2, #128	; 0x80
 8002ef6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002efc:	2302      	movs	r3, #2
 8002efe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002f00:	2301      	movs	r3, #1
 8002f02:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002f04:	2300      	movs	r3, #0
 8002f06:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002f08:	230a      	movs	r3, #10
 8002f0a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002f10:	2301      	movs	r3, #1
 8002f12:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002f14:	2300      	movs	r3, #0
 8002f16:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8002f18:	230a      	movs	r3, #10
 8002f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002f1c:	f107 030c 	add.w	r3, r7, #12
 8002f20:	4619      	mov	r1, r3
 8002f22:	480d      	ldr	r0, [pc, #52]	; (8002f58 <MX_TIM2_Init+0xa4>)
 8002f24:	f005 fd34 	bl	8008990 <HAL_TIM_Encoder_Init>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002f2e:	f7ff fb3b 	bl	80025a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f32:	2300      	movs	r3, #0
 8002f34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f36:	2300      	movs	r3, #0
 8002f38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f3a:	1d3b      	adds	r3, r7, #4
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4806      	ldr	r0, [pc, #24]	; (8002f58 <MX_TIM2_Init+0xa4>)
 8002f40:	f006 fdea 	bl	8009b18 <HAL_TIMEx_MasterConfigSynchronization>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002f4a:	f7ff fb2d 	bl	80025a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002f4e:	bf00      	nop
 8002f50:	3730      	adds	r7, #48	; 0x30
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	200008e4 	.word	0x200008e4

08002f5c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b08c      	sub	sp, #48	; 0x30
 8002f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002f62:	f107 030c 	add.w	r3, r7, #12
 8002f66:	2224      	movs	r2, #36	; 0x24
 8002f68:	2100      	movs	r1, #0
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f008 f83e 	bl	800afec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f70:	1d3b      	adds	r3, r7, #4
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]
 8002f76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002f78:	4b20      	ldr	r3, [pc, #128]	; (8002ffc <MX_TIM3_Init+0xa0>)
 8002f7a:	4a21      	ldr	r2, [pc, #132]	; (8003000 <MX_TIM3_Init+0xa4>)
 8002f7c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002f7e:	4b1f      	ldr	r3, [pc, #124]	; (8002ffc <MX_TIM3_Init+0xa0>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f84:	4b1d      	ldr	r3, [pc, #116]	; (8002ffc <MX_TIM3_Init+0xa0>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 48960;
 8002f8a:	4b1c      	ldr	r3, [pc, #112]	; (8002ffc <MX_TIM3_Init+0xa0>)
 8002f8c:	f64b 7240 	movw	r2, #48960	; 0xbf40
 8002f90:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f92:	4b1a      	ldr	r3, [pc, #104]	; (8002ffc <MX_TIM3_Init+0xa0>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f98:	4b18      	ldr	r3, [pc, #96]	; (8002ffc <MX_TIM3_Init+0xa0>)
 8002f9a:	2280      	movs	r2, #128	; 0x80
 8002f9c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002faa:	2300      	movs	r3, #0
 8002fac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002fae:	230a      	movs	r3, #10
 8002fb0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8002fbe:	230a      	movs	r3, #10
 8002fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002fc2:	f107 030c 	add.w	r3, r7, #12
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	480c      	ldr	r0, [pc, #48]	; (8002ffc <MX_TIM3_Init+0xa0>)
 8002fca:	f005 fce1 	bl	8008990 <HAL_TIM_Encoder_Init>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002fd4:	f7ff fae8 	bl	80025a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002fe0:	1d3b      	adds	r3, r7, #4
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	4805      	ldr	r0, [pc, #20]	; (8002ffc <MX_TIM3_Init+0xa0>)
 8002fe6:	f006 fd97 	bl	8009b18 <HAL_TIMEx_MasterConfigSynchronization>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002ff0:	f7ff fada 	bl	80025a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002ff4:	bf00      	nop
 8002ff6:	3730      	adds	r7, #48	; 0x30
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	2000092c 	.word	0x2000092c
 8003000:	40000400 	.word	0x40000400

08003004 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b08a      	sub	sp, #40	; 0x28
 8003008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800300a:	f107 0318 	add.w	r3, r7, #24
 800300e:	2200      	movs	r2, #0
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	605a      	str	r2, [r3, #4]
 8003014:	609a      	str	r2, [r3, #8]
 8003016:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003018:	f107 0310 	add.w	r3, r7, #16
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003022:	463b      	mov	r3, r7
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	605a      	str	r2, [r3, #4]
 800302a:	609a      	str	r2, [r3, #8]
 800302c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800302e:	4b31      	ldr	r3, [pc, #196]	; (80030f4 <MX_TIM4_Init+0xf0>)
 8003030:	4a31      	ldr	r2, [pc, #196]	; (80030f8 <MX_TIM4_Init+0xf4>)
 8003032:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003034:	4b2f      	ldr	r3, [pc, #188]	; (80030f4 <MX_TIM4_Init+0xf0>)
 8003036:	2200      	movs	r2, #0
 8003038:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800303a:	4b2e      	ldr	r3, [pc, #184]	; (80030f4 <MX_TIM4_Init+0xf0>)
 800303c:	2200      	movs	r2, #0
 800303e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003040:	4b2c      	ldr	r3, [pc, #176]	; (80030f4 <MX_TIM4_Init+0xf0>)
 8003042:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003046:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003048:	4b2a      	ldr	r3, [pc, #168]	; (80030f4 <MX_TIM4_Init+0xf0>)
 800304a:	2200      	movs	r2, #0
 800304c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800304e:	4b29      	ldr	r3, [pc, #164]	; (80030f4 <MX_TIM4_Init+0xf0>)
 8003050:	2200      	movs	r2, #0
 8003052:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003054:	4827      	ldr	r0, [pc, #156]	; (80030f4 <MX_TIM4_Init+0xf0>)
 8003056:	f005 f942 	bl	80082de <HAL_TIM_Base_Init>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8003060:	f7ff faa2 	bl	80025a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003064:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003068:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800306a:	f107 0318 	add.w	r3, r7, #24
 800306e:	4619      	mov	r1, r3
 8003070:	4820      	ldr	r0, [pc, #128]	; (80030f4 <MX_TIM4_Init+0xf0>)
 8003072:	f006 f827 	bl	80090c4 <HAL_TIM_ConfigClockSource>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800307c:	f7ff fa94 	bl	80025a8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8003080:	481c      	ldr	r0, [pc, #112]	; (80030f4 <MX_TIM4_Init+0xf0>)
 8003082:	f005 fb0d 	bl	80086a0 <HAL_TIM_IC_Init>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800308c:	f7ff fa8c 	bl	80025a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003090:	2300      	movs	r3, #0
 8003092:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003094:	2300      	movs	r3, #0
 8003096:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003098:	f107 0310 	add.w	r3, r7, #16
 800309c:	4619      	mov	r1, r3
 800309e:	4815      	ldr	r0, [pc, #84]	; (80030f4 <MX_TIM4_Init+0xf0>)
 80030a0:	f006 fd3a 	bl	8009b18 <HAL_TIMEx_MasterConfigSynchronization>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 80030aa:	f7ff fa7d 	bl	80025a8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80030ae:	2300      	movs	r3, #0
 80030b0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80030b2:	2301      	movs	r3, #1
 80030b4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80030b6:	2300      	movs	r3, #0
 80030b8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80030ba:	2300      	movs	r3, #0
 80030bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80030be:	463b      	mov	r3, r7
 80030c0:	2208      	movs	r2, #8
 80030c2:	4619      	mov	r1, r3
 80030c4:	480b      	ldr	r0, [pc, #44]	; (80030f4 <MX_TIM4_Init+0xf0>)
 80030c6:	f005 fe9f 	bl	8008e08 <HAL_TIM_IC_ConfigChannel>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 80030d0:	f7ff fa6a 	bl	80025a8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80030d4:	463b      	mov	r3, r7
 80030d6:	220c      	movs	r2, #12
 80030d8:	4619      	mov	r1, r3
 80030da:	4806      	ldr	r0, [pc, #24]	; (80030f4 <MX_TIM4_Init+0xf0>)
 80030dc:	f005 fe94 	bl	8008e08 <HAL_TIM_IC_ConfigChannel>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <MX_TIM4_Init+0xe6>
  {
    Error_Handler();
 80030e6:	f7ff fa5f 	bl	80025a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80030ea:	bf00      	nop
 80030ec:	3728      	adds	r7, #40	; 0x28
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	20000974 	.word	0x20000974
 80030f8:	40000800 	.word	0x40000800

080030fc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003102:	f107 0308 	add.w	r3, r7, #8
 8003106:	2200      	movs	r2, #0
 8003108:	601a      	str	r2, [r3, #0]
 800310a:	605a      	str	r2, [r3, #4]
 800310c:	609a      	str	r2, [r3, #8]
 800310e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003110:	463b      	mov	r3, r7
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003118:	4b1d      	ldr	r3, [pc, #116]	; (8003190 <MX_TIM5_Init+0x94>)
 800311a:	4a1e      	ldr	r2, [pc, #120]	; (8003194 <MX_TIM5_Init+0x98>)
 800311c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 10000;
 800311e:	4b1c      	ldr	r3, [pc, #112]	; (8003190 <MX_TIM5_Init+0x94>)
 8003120:	f242 7210 	movw	r2, #10000	; 0x2710
 8003124:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003126:	4b1a      	ldr	r3, [pc, #104]	; (8003190 <MX_TIM5_Init+0x94>)
 8003128:	2200      	movs	r2, #0
 800312a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 83;
 800312c:	4b18      	ldr	r3, [pc, #96]	; (8003190 <MX_TIM5_Init+0x94>)
 800312e:	2253      	movs	r2, #83	; 0x53
 8003130:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003132:	4b17      	ldr	r3, [pc, #92]	; (8003190 <MX_TIM5_Init+0x94>)
 8003134:	2200      	movs	r2, #0
 8003136:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003138:	4b15      	ldr	r3, [pc, #84]	; (8003190 <MX_TIM5_Init+0x94>)
 800313a:	2200      	movs	r2, #0
 800313c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800313e:	4814      	ldr	r0, [pc, #80]	; (8003190 <MX_TIM5_Init+0x94>)
 8003140:	f005 f8cd 	bl	80082de <HAL_TIM_Base_Init>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800314a:	f7ff fa2d 	bl	80025a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800314e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003152:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003154:	f107 0308 	add.w	r3, r7, #8
 8003158:	4619      	mov	r1, r3
 800315a:	480d      	ldr	r0, [pc, #52]	; (8003190 <MX_TIM5_Init+0x94>)
 800315c:	f005 ffb2 	bl	80090c4 <HAL_TIM_ConfigClockSource>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8003166:	f7ff fa1f 	bl	80025a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800316a:	2300      	movs	r3, #0
 800316c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800316e:	2300      	movs	r3, #0
 8003170:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003172:	463b      	mov	r3, r7
 8003174:	4619      	mov	r1, r3
 8003176:	4806      	ldr	r0, [pc, #24]	; (8003190 <MX_TIM5_Init+0x94>)
 8003178:	f006 fcce 	bl	8009b18 <HAL_TIMEx_MasterConfigSynchronization>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8003182:	f7ff fa11 	bl	80025a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003186:	bf00      	nop
 8003188:	3718      	adds	r7, #24
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	200009bc 	.word	0x200009bc
 8003194:	40000c00 	.word	0x40000c00

08003198 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b096      	sub	sp, #88	; 0x58
 800319c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800319e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	605a      	str	r2, [r3, #4]
 80031a8:	609a      	str	r2, [r3, #8]
 80031aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031ba:	2200      	movs	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	605a      	str	r2, [r3, #4]
 80031c0:	609a      	str	r2, [r3, #8]
 80031c2:	60da      	str	r2, [r3, #12]
 80031c4:	611a      	str	r2, [r3, #16]
 80031c6:	615a      	str	r2, [r3, #20]
 80031c8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80031ca:	1d3b      	adds	r3, r7, #4
 80031cc:	2220      	movs	r2, #32
 80031ce:	2100      	movs	r1, #0
 80031d0:	4618      	mov	r0, r3
 80031d2:	f007 ff0b 	bl	800afec <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80031d6:	4b44      	ldr	r3, [pc, #272]	; (80032e8 <MX_TIM8_Init+0x150>)
 80031d8:	4a44      	ldr	r2, [pc, #272]	; (80032ec <MX_TIM8_Init+0x154>)
 80031da:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 8-1;
 80031dc:	4b42      	ldr	r3, [pc, #264]	; (80032e8 <MX_TIM8_Init+0x150>)
 80031de:	2207      	movs	r2, #7
 80031e0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031e2:	4b41      	ldr	r3, [pc, #260]	; (80032e8 <MX_TIM8_Init+0x150>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000;
 80031e8:	4b3f      	ldr	r3, [pc, #252]	; (80032e8 <MX_TIM8_Init+0x150>)
 80031ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80031ee:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031f0:	4b3d      	ldr	r3, [pc, #244]	; (80032e8 <MX_TIM8_Init+0x150>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80031f6:	4b3c      	ldr	r3, [pc, #240]	; (80032e8 <MX_TIM8_Init+0x150>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80031fc:	4b3a      	ldr	r3, [pc, #232]	; (80032e8 <MX_TIM8_Init+0x150>)
 80031fe:	2280      	movs	r2, #128	; 0x80
 8003200:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003202:	4839      	ldr	r0, [pc, #228]	; (80032e8 <MX_TIM8_Init+0x150>)
 8003204:	f005 f86b 	bl	80082de <HAL_TIM_Base_Init>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800320e:	f7ff f9cb 	bl	80025a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003212:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003216:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003218:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800321c:	4619      	mov	r1, r3
 800321e:	4832      	ldr	r0, [pc, #200]	; (80032e8 <MX_TIM8_Init+0x150>)
 8003220:	f005 ff50 	bl	80090c4 <HAL_TIM_ConfigClockSource>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800322a:	f7ff f9bd 	bl	80025a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800322e:	482e      	ldr	r0, [pc, #184]	; (80032e8 <MX_TIM8_Init+0x150>)
 8003230:	f005 f914 	bl	800845c <HAL_TIM_PWM_Init>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800323a:	f7ff f9b5 	bl	80025a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800323e:	2300      	movs	r3, #0
 8003240:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003242:	2300      	movs	r3, #0
 8003244:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003246:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800324a:	4619      	mov	r1, r3
 800324c:	4826      	ldr	r0, [pc, #152]	; (80032e8 <MX_TIM8_Init+0x150>)
 800324e:	f006 fc63 	bl	8009b18 <HAL_TIMEx_MasterConfigSynchronization>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8003258:	f7ff f9a6 	bl	80025a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800325c:	2360      	movs	r3, #96	; 0x60
 800325e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003260:	2300      	movs	r3, #0
 8003262:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003264:	2300      	movs	r3, #0
 8003266:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003268:	2300      	movs	r3, #0
 800326a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800326c:	2300      	movs	r3, #0
 800326e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003270:	2300      	movs	r3, #0
 8003272:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003274:	2300      	movs	r3, #0
 8003276:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003278:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800327c:	2200      	movs	r2, #0
 800327e:	4619      	mov	r1, r3
 8003280:	4819      	ldr	r0, [pc, #100]	; (80032e8 <MX_TIM8_Init+0x150>)
 8003282:	f005 fe5d 	bl	8008f40 <HAL_TIM_PWM_ConfigChannel>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 800328c:	f7ff f98c 	bl	80025a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003294:	2204      	movs	r2, #4
 8003296:	4619      	mov	r1, r3
 8003298:	4813      	ldr	r0, [pc, #76]	; (80032e8 <MX_TIM8_Init+0x150>)
 800329a:	f005 fe51 	bl	8008f40 <HAL_TIM_PWM_ConfigChannel>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80032a4:	f7ff f980 	bl	80025a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80032a8:	2300      	movs	r3, #0
 80032aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80032ac:	2300      	movs	r3, #0
 80032ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80032b0:	2300      	movs	r3, #0
 80032b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80032b4:	2300      	movs	r3, #0
 80032b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80032b8:	2300      	movs	r3, #0
 80032ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80032bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80032c2:	2300      	movs	r3, #0
 80032c4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80032c6:	1d3b      	adds	r3, r7, #4
 80032c8:	4619      	mov	r1, r3
 80032ca:	4807      	ldr	r0, [pc, #28]	; (80032e8 <MX_TIM8_Init+0x150>)
 80032cc:	f006 fca0 	bl	8009c10 <HAL_TIMEx_ConfigBreakDeadTime>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80032d6:	f7ff f967 	bl	80025a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80032da:	4803      	ldr	r0, [pc, #12]	; (80032e8 <MX_TIM8_Init+0x150>)
 80032dc:	f000 f9ce 	bl	800367c <HAL_TIM_MspPostInit>

}
 80032e0:	bf00      	nop
 80032e2:	3758      	adds	r7, #88	; 0x58
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	20000a04 	.word	0x20000a04
 80032ec:	40010400 	.word	0x40010400

080032f0 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 80032f6:	463b      	mov	r3, r7
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	605a      	str	r2, [r3, #4]
 80032fe:	609a      	str	r2, [r3, #8]
 8003300:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003302:	4b1e      	ldr	r3, [pc, #120]	; (800337c <MX_TIM9_Init+0x8c>)
 8003304:	4a1e      	ldr	r2, [pc, #120]	; (8003380 <MX_TIM9_Init+0x90>)
 8003306:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8003308:	4b1c      	ldr	r3, [pc, #112]	; (800337c <MX_TIM9_Init+0x8c>)
 800330a:	2200      	movs	r2, #0
 800330c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800330e:	4b1b      	ldr	r3, [pc, #108]	; (800337c <MX_TIM9_Init+0x8c>)
 8003310:	2200      	movs	r2, #0
 8003312:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8003314:	4b19      	ldr	r3, [pc, #100]	; (800337c <MX_TIM9_Init+0x8c>)
 8003316:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800331a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800331c:	4b17      	ldr	r3, [pc, #92]	; (800337c <MX_TIM9_Init+0x8c>)
 800331e:	2200      	movs	r2, #0
 8003320:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003322:	4b16      	ldr	r3, [pc, #88]	; (800337c <MX_TIM9_Init+0x8c>)
 8003324:	2200      	movs	r2, #0
 8003326:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim9) != HAL_OK)
 8003328:	4814      	ldr	r0, [pc, #80]	; (800337c <MX_TIM9_Init+0x8c>)
 800332a:	f005 f9b9 	bl	80086a0 <HAL_TIM_IC_Init>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8003334:	f7ff f938 	bl	80025a8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003338:	2300      	movs	r3, #0
 800333a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800333c:	2301      	movs	r3, #1
 800333e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003340:	2300      	movs	r3, #0
 8003342:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003344:	2300      	movs	r3, #0
 8003346:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003348:	463b      	mov	r3, r7
 800334a:	2200      	movs	r2, #0
 800334c:	4619      	mov	r1, r3
 800334e:	480b      	ldr	r0, [pc, #44]	; (800337c <MX_TIM9_Init+0x8c>)
 8003350:	f005 fd5a 	bl	8008e08 <HAL_TIM_IC_ConfigChannel>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <MX_TIM9_Init+0x6e>
  {
    Error_Handler();
 800335a:	f7ff f925 	bl	80025a8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim9, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800335e:	463b      	mov	r3, r7
 8003360:	2204      	movs	r2, #4
 8003362:	4619      	mov	r1, r3
 8003364:	4805      	ldr	r0, [pc, #20]	; (800337c <MX_TIM9_Init+0x8c>)
 8003366:	f005 fd4f 	bl	8008e08 <HAL_TIM_IC_ConfigChannel>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <MX_TIM9_Init+0x84>
  {
    Error_Handler();
 8003370:	f7ff f91a 	bl	80025a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8003374:	bf00      	nop
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	20000a4c 	.word	0x20000a4c
 8003380:	40014000 	.word	0x40014000

08003384 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b08c      	sub	sp, #48	; 0x30
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800338c:	f107 031c 	add.w	r3, r7, #28
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	605a      	str	r2, [r3, #4]
 8003396:	609a      	str	r2, [r3, #8]
 8003398:	60da      	str	r2, [r3, #12]
 800339a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a3f      	ldr	r2, [pc, #252]	; (80034a0 <HAL_TIM_Base_MspInit+0x11c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d10e      	bne.n	80033c4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033a6:	2300      	movs	r3, #0
 80033a8:	61bb      	str	r3, [r7, #24]
 80033aa:	4b3e      	ldr	r3, [pc, #248]	; (80034a4 <HAL_TIM_Base_MspInit+0x120>)
 80033ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ae:	4a3d      	ldr	r2, [pc, #244]	; (80034a4 <HAL_TIM_Base_MspInit+0x120>)
 80033b0:	f043 0301 	orr.w	r3, r3, #1
 80033b4:	6453      	str	r3, [r2, #68]	; 0x44
 80033b6:	4b3b      	ldr	r3, [pc, #236]	; (80034a4 <HAL_TIM_Base_MspInit+0x120>)
 80033b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	61bb      	str	r3, [r7, #24]
 80033c0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80033c2:	e069      	b.n	8003498 <HAL_TIM_Base_MspInit+0x114>
  else if(tim_baseHandle->Instance==TIM4)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a37      	ldr	r2, [pc, #220]	; (80034a8 <HAL_TIM_Base_MspInit+0x124>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d135      	bne.n	800343a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80033ce:	2300      	movs	r3, #0
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	4b34      	ldr	r3, [pc, #208]	; (80034a4 <HAL_TIM_Base_MspInit+0x120>)
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	4a33      	ldr	r2, [pc, #204]	; (80034a4 <HAL_TIM_Base_MspInit+0x120>)
 80033d8:	f043 0304 	orr.w	r3, r3, #4
 80033dc:	6413      	str	r3, [r2, #64]	; 0x40
 80033de:	4b31      	ldr	r3, [pc, #196]	; (80034a4 <HAL_TIM_Base_MspInit+0x120>)
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	f003 0304 	and.w	r3, r3, #4
 80033e6:	617b      	str	r3, [r7, #20]
 80033e8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ea:	2300      	movs	r3, #0
 80033ec:	613b      	str	r3, [r7, #16]
 80033ee:	4b2d      	ldr	r3, [pc, #180]	; (80034a4 <HAL_TIM_Base_MspInit+0x120>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	4a2c      	ldr	r2, [pc, #176]	; (80034a4 <HAL_TIM_Base_MspInit+0x120>)
 80033f4:	f043 0302 	orr.w	r3, r3, #2
 80033f8:	6313      	str	r3, [r2, #48]	; 0x30
 80033fa:	4b2a      	ldr	r3, [pc, #168]	; (80034a4 <HAL_TIM_Base_MspInit+0x120>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	613b      	str	r3, [r7, #16]
 8003404:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ECHO_HC_1_Pin|ECHO_HC_2_Pin;
 8003406:	f44f 7340 	mov.w	r3, #768	; 0x300
 800340a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800340c:	2302      	movs	r3, #2
 800340e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003410:	2300      	movs	r3, #0
 8003412:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003414:	2300      	movs	r3, #0
 8003416:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003418:	2302      	movs	r3, #2
 800341a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800341c:	f107 031c 	add.w	r3, r7, #28
 8003420:	4619      	mov	r1, r3
 8003422:	4822      	ldr	r0, [pc, #136]	; (80034ac <HAL_TIM_Base_MspInit+0x128>)
 8003424:	f001 fab4 	bl	8004990 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003428:	2200      	movs	r2, #0
 800342a:	2100      	movs	r1, #0
 800342c:	201e      	movs	r0, #30
 800342e:	f000 feb0 	bl	8004192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003432:	201e      	movs	r0, #30
 8003434:	f000 fec9 	bl	80041ca <HAL_NVIC_EnableIRQ>
}
 8003438:	e02e      	b.n	8003498 <HAL_TIM_Base_MspInit+0x114>
  else if(tim_baseHandle->Instance==TIM5)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a1c      	ldr	r2, [pc, #112]	; (80034b0 <HAL_TIM_Base_MspInit+0x12c>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d116      	bne.n	8003472 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003444:	2300      	movs	r3, #0
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	4b16      	ldr	r3, [pc, #88]	; (80034a4 <HAL_TIM_Base_MspInit+0x120>)
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	4a15      	ldr	r2, [pc, #84]	; (80034a4 <HAL_TIM_Base_MspInit+0x120>)
 800344e:	f043 0308 	orr.w	r3, r3, #8
 8003452:	6413      	str	r3, [r2, #64]	; 0x40
 8003454:	4b13      	ldr	r3, [pc, #76]	; (80034a4 <HAL_TIM_Base_MspInit+0x120>)
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003458:	f003 0308 	and.w	r3, r3, #8
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003460:	2200      	movs	r2, #0
 8003462:	2100      	movs	r1, #0
 8003464:	2032      	movs	r0, #50	; 0x32
 8003466:	f000 fe94 	bl	8004192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800346a:	2032      	movs	r0, #50	; 0x32
 800346c:	f000 fead 	bl	80041ca <HAL_NVIC_EnableIRQ>
}
 8003470:	e012      	b.n	8003498 <HAL_TIM_Base_MspInit+0x114>
  else if(tim_baseHandle->Instance==TIM8)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a0f      	ldr	r2, [pc, #60]	; (80034b4 <HAL_TIM_Base_MspInit+0x130>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d10d      	bne.n	8003498 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800347c:	2300      	movs	r3, #0
 800347e:	60bb      	str	r3, [r7, #8]
 8003480:	4b08      	ldr	r3, [pc, #32]	; (80034a4 <HAL_TIM_Base_MspInit+0x120>)
 8003482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003484:	4a07      	ldr	r2, [pc, #28]	; (80034a4 <HAL_TIM_Base_MspInit+0x120>)
 8003486:	f043 0302 	orr.w	r3, r3, #2
 800348a:	6453      	str	r3, [r2, #68]	; 0x44
 800348c:	4b05      	ldr	r3, [pc, #20]	; (80034a4 <HAL_TIM_Base_MspInit+0x120>)
 800348e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	60bb      	str	r3, [r7, #8]
 8003496:	68bb      	ldr	r3, [r7, #8]
}
 8003498:	bf00      	nop
 800349a:	3730      	adds	r7, #48	; 0x30
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40010000 	.word	0x40010000
 80034a4:	40023800 	.word	0x40023800
 80034a8:	40000800 	.word	0x40000800
 80034ac:	40020400 	.word	0x40020400
 80034b0:	40000c00 	.word	0x40000c00
 80034b4:	40010400 	.word	0x40010400

080034b8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b08c      	sub	sp, #48	; 0x30
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c0:	f107 031c 	add.w	r3, r7, #28
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	605a      	str	r2, [r3, #4]
 80034ca:	609a      	str	r2, [r3, #8]
 80034cc:	60da      	str	r2, [r3, #12]
 80034ce:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034d8:	d14b      	bne.n	8003572 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034da:	2300      	movs	r3, #0
 80034dc:	61bb      	str	r3, [r7, #24]
 80034de:	4b3f      	ldr	r3, [pc, #252]	; (80035dc <HAL_TIM_Encoder_MspInit+0x124>)
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	4a3e      	ldr	r2, [pc, #248]	; (80035dc <HAL_TIM_Encoder_MspInit+0x124>)
 80034e4:	f043 0301 	orr.w	r3, r3, #1
 80034e8:	6413      	str	r3, [r2, #64]	; 0x40
 80034ea:	4b3c      	ldr	r3, [pc, #240]	; (80035dc <HAL_TIM_Encoder_MspInit+0x124>)
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	61bb      	str	r3, [r7, #24]
 80034f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034f6:	2300      	movs	r3, #0
 80034f8:	617b      	str	r3, [r7, #20]
 80034fa:	4b38      	ldr	r3, [pc, #224]	; (80035dc <HAL_TIM_Encoder_MspInit+0x124>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	4a37      	ldr	r2, [pc, #220]	; (80035dc <HAL_TIM_Encoder_MspInit+0x124>)
 8003500:	f043 0301 	orr.w	r3, r3, #1
 8003504:	6313      	str	r3, [r2, #48]	; 0x30
 8003506:	4b35      	ldr	r3, [pc, #212]	; (80035dc <HAL_TIM_Encoder_MspInit+0x124>)
 8003508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	617b      	str	r3, [r7, #20]
 8003510:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003512:	2300      	movs	r3, #0
 8003514:	613b      	str	r3, [r7, #16]
 8003516:	4b31      	ldr	r3, [pc, #196]	; (80035dc <HAL_TIM_Encoder_MspInit+0x124>)
 8003518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351a:	4a30      	ldr	r2, [pc, #192]	; (80035dc <HAL_TIM_Encoder_MspInit+0x124>)
 800351c:	f043 0302 	orr.w	r3, r3, #2
 8003520:	6313      	str	r3, [r2, #48]	; 0x30
 8003522:	4b2e      	ldr	r3, [pc, #184]	; (80035dc <HAL_TIM_Encoder_MspInit+0x124>)
 8003524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	613b      	str	r3, [r7, #16]
 800352c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER2_A_Pin;
 800352e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003534:	2302      	movs	r3, #2
 8003536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003538:	2300      	movs	r3, #0
 800353a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800353c:	2300      	movs	r3, #0
 800353e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003540:	2301      	movs	r3, #1
 8003542:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENCODER2_A_GPIO_Port, &GPIO_InitStruct);
 8003544:	f107 031c 	add.w	r3, r7, #28
 8003548:	4619      	mov	r1, r3
 800354a:	4825      	ldr	r0, [pc, #148]	; (80035e0 <HAL_TIM_Encoder_MspInit+0x128>)
 800354c:	f001 fa20 	bl	8004990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENCODER2_B_Pin;
 8003550:	2308      	movs	r3, #8
 8003552:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003554:	2302      	movs	r3, #2
 8003556:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003558:	2300      	movs	r3, #0
 800355a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800355c:	2300      	movs	r3, #0
 800355e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003560:	2301      	movs	r3, #1
 8003562:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ENCODER2_B_GPIO_Port, &GPIO_InitStruct);
 8003564:	f107 031c 	add.w	r3, r7, #28
 8003568:	4619      	mov	r1, r3
 800356a:	481e      	ldr	r0, [pc, #120]	; (80035e4 <HAL_TIM_Encoder_MspInit+0x12c>)
 800356c:	f001 fa10 	bl	8004990 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003570:	e030      	b.n	80035d4 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(tim_encoderHandle->Instance==TIM3)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a1c      	ldr	r2, [pc, #112]	; (80035e8 <HAL_TIM_Encoder_MspInit+0x130>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d12b      	bne.n	80035d4 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800357c:	2300      	movs	r3, #0
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	4b16      	ldr	r3, [pc, #88]	; (80035dc <HAL_TIM_Encoder_MspInit+0x124>)
 8003582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003584:	4a15      	ldr	r2, [pc, #84]	; (80035dc <HAL_TIM_Encoder_MspInit+0x124>)
 8003586:	f043 0302 	orr.w	r3, r3, #2
 800358a:	6413      	str	r3, [r2, #64]	; 0x40
 800358c:	4b13      	ldr	r3, [pc, #76]	; (80035dc <HAL_TIM_Encoder_MspInit+0x124>)
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003598:	2300      	movs	r3, #0
 800359a:	60bb      	str	r3, [r7, #8]
 800359c:	4b0f      	ldr	r3, [pc, #60]	; (80035dc <HAL_TIM_Encoder_MspInit+0x124>)
 800359e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a0:	4a0e      	ldr	r2, [pc, #56]	; (80035dc <HAL_TIM_Encoder_MspInit+0x124>)
 80035a2:	f043 0302 	orr.w	r3, r3, #2
 80035a6:	6313      	str	r3, [r2, #48]	; 0x30
 80035a8:	4b0c      	ldr	r3, [pc, #48]	; (80035dc <HAL_TIM_Encoder_MspInit+0x124>)
 80035aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	60bb      	str	r3, [r7, #8]
 80035b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER1_A_Pin|ENCODER1_B_Pin;
 80035b4:	2330      	movs	r3, #48	; 0x30
 80035b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b8:	2302      	movs	r3, #2
 80035ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035bc:	2300      	movs	r3, #0
 80035be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035c0:	2300      	movs	r3, #0
 80035c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80035c4:	2302      	movs	r3, #2
 80035c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035c8:	f107 031c 	add.w	r3, r7, #28
 80035cc:	4619      	mov	r1, r3
 80035ce:	4805      	ldr	r0, [pc, #20]	; (80035e4 <HAL_TIM_Encoder_MspInit+0x12c>)
 80035d0:	f001 f9de 	bl	8004990 <HAL_GPIO_Init>
}
 80035d4:	bf00      	nop
 80035d6:	3730      	adds	r7, #48	; 0x30
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40023800 	.word	0x40023800
 80035e0:	40020000 	.word	0x40020000
 80035e4:	40020400 	.word	0x40020400
 80035e8:	40000400 	.word	0x40000400

080035ec <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b08a      	sub	sp, #40	; 0x28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035f4:	f107 0314 	add.w	r3, r7, #20
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	605a      	str	r2, [r3, #4]
 80035fe:	609a      	str	r2, [r3, #8]
 8003600:	60da      	str	r2, [r3, #12]
 8003602:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM9)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a19      	ldr	r2, [pc, #100]	; (8003670 <HAL_TIM_IC_MspInit+0x84>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d12b      	bne.n	8003666 <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 800360e:	2300      	movs	r3, #0
 8003610:	613b      	str	r3, [r7, #16]
 8003612:	4b18      	ldr	r3, [pc, #96]	; (8003674 <HAL_TIM_IC_MspInit+0x88>)
 8003614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003616:	4a17      	ldr	r2, [pc, #92]	; (8003674 <HAL_TIM_IC_MspInit+0x88>)
 8003618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800361c:	6453      	str	r3, [r2, #68]	; 0x44
 800361e:	4b15      	ldr	r3, [pc, #84]	; (8003674 <HAL_TIM_IC_MspInit+0x88>)
 8003620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003626:	613b      	str	r3, [r7, #16]
 8003628:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800362a:	2300      	movs	r3, #0
 800362c:	60fb      	str	r3, [r7, #12]
 800362e:	4b11      	ldr	r3, [pc, #68]	; (8003674 <HAL_TIM_IC_MspInit+0x88>)
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	4a10      	ldr	r2, [pc, #64]	; (8003674 <HAL_TIM_IC_MspInit+0x88>)
 8003634:	f043 0310 	orr.w	r3, r3, #16
 8003638:	6313      	str	r3, [r2, #48]	; 0x30
 800363a:	4b0e      	ldr	r3, [pc, #56]	; (8003674 <HAL_TIM_IC_MspInit+0x88>)
 800363c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363e:	f003 0310 	and.w	r3, r3, #16
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	68fb      	ldr	r3, [r7, #12]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    PE6     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = ECHO_HC_3_Pin|ECHO_HC_4_Pin;
 8003646:	2360      	movs	r3, #96	; 0x60
 8003648:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800364a:	2302      	movs	r3, #2
 800364c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364e:	2300      	movs	r3, #0
 8003650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003652:	2300      	movs	r3, #0
 8003654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8003656:	2303      	movs	r3, #3
 8003658:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800365a:	f107 0314 	add.w	r3, r7, #20
 800365e:	4619      	mov	r1, r3
 8003660:	4805      	ldr	r0, [pc, #20]	; (8003678 <HAL_TIM_IC_MspInit+0x8c>)
 8003662:	f001 f995 	bl	8004990 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8003666:	bf00      	nop
 8003668:	3728      	adds	r7, #40	; 0x28
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	40014000 	.word	0x40014000
 8003674:	40023800 	.word	0x40023800
 8003678:	40021000 	.word	0x40021000

0800367c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b088      	sub	sp, #32
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003684:	f107 030c 	add.w	r3, r7, #12
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	605a      	str	r2, [r3, #4]
 800368e:	609a      	str	r2, [r3, #8]
 8003690:	60da      	str	r2, [r3, #12]
 8003692:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a12      	ldr	r2, [pc, #72]	; (80036e4 <HAL_TIM_MspPostInit+0x68>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d11d      	bne.n	80036da <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800369e:	2300      	movs	r3, #0
 80036a0:	60bb      	str	r3, [r7, #8]
 80036a2:	4b11      	ldr	r3, [pc, #68]	; (80036e8 <HAL_TIM_MspPostInit+0x6c>)
 80036a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a6:	4a10      	ldr	r2, [pc, #64]	; (80036e8 <HAL_TIM_MspPostInit+0x6c>)
 80036a8:	f043 0304 	orr.w	r3, r3, #4
 80036ac:	6313      	str	r3, [r2, #48]	; 0x30
 80036ae:	4b0e      	ldr	r3, [pc, #56]	; (80036e8 <HAL_TIM_MspPostInit+0x6c>)
 80036b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b2:	f003 0304 	and.w	r3, r3, #4
 80036b6:	60bb      	str	r3, [r7, #8]
 80036b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = MOTOR1_PWM_Pin|MOTOR2_PWM_Pin;
 80036ba:	23c0      	movs	r3, #192	; 0xc0
 80036bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036be:	2302      	movs	r3, #2
 80036c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c2:	2300      	movs	r3, #0
 80036c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036c6:	2300      	movs	r3, #0
 80036c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80036ca:	2303      	movs	r3, #3
 80036cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036ce:	f107 030c 	add.w	r3, r7, #12
 80036d2:	4619      	mov	r1, r3
 80036d4:	4805      	ldr	r0, [pc, #20]	; (80036ec <HAL_TIM_MspPostInit+0x70>)
 80036d6:	f001 f95b 	bl	8004990 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80036da:	bf00      	nop
 80036dc:	3720      	adds	r7, #32
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	40010400 	.word	0x40010400
 80036e8:	40023800 	.word	0x40023800
 80036ec:	40020800 	.word	0x40020800

080036f0 <LRL_US_Init>:

static ultrasonic_info us_info = {0};

/* LRL Ultrasonics Functions --------------------------------------------------*/
void LRL_US_Init(ultrasonic_cfgType us)
{
 80036f0:	b084      	sub	sp, #16
 80036f2:	b580      	push	{r7, lr}
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	f107 0c08 	add.w	ip, r7, #8
 80036fa:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	 * WARNING:
	 * Always Remember to Start the Timer in Interrupt Mode!
	 */

	// Start the TIM generation
	HAL_TIM_Base_Start_IT(us.TIM_Handle);
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	4618      	mov	r0, r3
 8003702:	f004 fe3b 	bl	800837c <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(us.TIM_Handle, us.IC_TIM_CH);
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	4611      	mov	r1, r2
 800370c:	4618      	mov	r0, r3
 800370e:	f005 f817 	bl	8008740 <HAL_TIM_IC_Start_IT>
}
 8003712:	bf00      	nop
 8003714:	46bd      	mov	sp, r7
 8003716:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800371a:	b004      	add	sp, #16
 800371c:	4770      	bx	lr
	...

08003720 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003724:	4b11      	ldr	r3, [pc, #68]	; (800376c <MX_USART1_UART_Init+0x4c>)
 8003726:	4a12      	ldr	r2, [pc, #72]	; (8003770 <MX_USART1_UART_Init+0x50>)
 8003728:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800372a:	4b10      	ldr	r3, [pc, #64]	; (800376c <MX_USART1_UART_Init+0x4c>)
 800372c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003730:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003732:	4b0e      	ldr	r3, [pc, #56]	; (800376c <MX_USART1_UART_Init+0x4c>)
 8003734:	2200      	movs	r2, #0
 8003736:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003738:	4b0c      	ldr	r3, [pc, #48]	; (800376c <MX_USART1_UART_Init+0x4c>)
 800373a:	2200      	movs	r2, #0
 800373c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800373e:	4b0b      	ldr	r3, [pc, #44]	; (800376c <MX_USART1_UART_Init+0x4c>)
 8003740:	2200      	movs	r2, #0
 8003742:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003744:	4b09      	ldr	r3, [pc, #36]	; (800376c <MX_USART1_UART_Init+0x4c>)
 8003746:	220c      	movs	r2, #12
 8003748:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800374a:	4b08      	ldr	r3, [pc, #32]	; (800376c <MX_USART1_UART_Init+0x4c>)
 800374c:	2200      	movs	r2, #0
 800374e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003750:	4b06      	ldr	r3, [pc, #24]	; (800376c <MX_USART1_UART_Init+0x4c>)
 8003752:	2200      	movs	r2, #0
 8003754:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003756:	4805      	ldr	r0, [pc, #20]	; (800376c <MX_USART1_UART_Init+0x4c>)
 8003758:	f006 fac0 	bl	8009cdc <HAL_UART_Init>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003762:	f7fe ff21 	bl	80025a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003766:	bf00      	nop
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	20000a94 	.word	0x20000a94
 8003770:	40011000 	.word	0x40011000

08003774 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003778:	4b11      	ldr	r3, [pc, #68]	; (80037c0 <MX_USART2_UART_Init+0x4c>)
 800377a:	4a12      	ldr	r2, [pc, #72]	; (80037c4 <MX_USART2_UART_Init+0x50>)
 800377c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800377e:	4b10      	ldr	r3, [pc, #64]	; (80037c0 <MX_USART2_UART_Init+0x4c>)
 8003780:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003784:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003786:	4b0e      	ldr	r3, [pc, #56]	; (80037c0 <MX_USART2_UART_Init+0x4c>)
 8003788:	2200      	movs	r2, #0
 800378a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800378c:	4b0c      	ldr	r3, [pc, #48]	; (80037c0 <MX_USART2_UART_Init+0x4c>)
 800378e:	2200      	movs	r2, #0
 8003790:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003792:	4b0b      	ldr	r3, [pc, #44]	; (80037c0 <MX_USART2_UART_Init+0x4c>)
 8003794:	2200      	movs	r2, #0
 8003796:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003798:	4b09      	ldr	r3, [pc, #36]	; (80037c0 <MX_USART2_UART_Init+0x4c>)
 800379a:	220c      	movs	r2, #12
 800379c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800379e:	4b08      	ldr	r3, [pc, #32]	; (80037c0 <MX_USART2_UART_Init+0x4c>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80037a4:	4b06      	ldr	r3, [pc, #24]	; (80037c0 <MX_USART2_UART_Init+0x4c>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80037aa:	4805      	ldr	r0, [pc, #20]	; (80037c0 <MX_USART2_UART_Init+0x4c>)
 80037ac:	f006 fa96 	bl	8009cdc <HAL_UART_Init>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80037b6:	f7fe fef7 	bl	80025a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80037ba:	bf00      	nop
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	20000ad8 	.word	0x20000ad8
 80037c4:	40004400 	.word	0x40004400

080037c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b08c      	sub	sp, #48	; 0x30
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037d0:	f107 031c 	add.w	r3, r7, #28
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	605a      	str	r2, [r3, #4]
 80037da:	609a      	str	r2, [r3, #8]
 80037dc:	60da      	str	r2, [r3, #12]
 80037de:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a3a      	ldr	r2, [pc, #232]	; (80038d0 <HAL_UART_MspInit+0x108>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d135      	bne.n	8003856 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80037ea:	2300      	movs	r3, #0
 80037ec:	61bb      	str	r3, [r7, #24]
 80037ee:	4b39      	ldr	r3, [pc, #228]	; (80038d4 <HAL_UART_MspInit+0x10c>)
 80037f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f2:	4a38      	ldr	r2, [pc, #224]	; (80038d4 <HAL_UART_MspInit+0x10c>)
 80037f4:	f043 0310 	orr.w	r3, r3, #16
 80037f8:	6453      	str	r3, [r2, #68]	; 0x44
 80037fa:	4b36      	ldr	r3, [pc, #216]	; (80038d4 <HAL_UART_MspInit+0x10c>)
 80037fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fe:	f003 0310 	and.w	r3, r3, #16
 8003802:	61bb      	str	r3, [r7, #24]
 8003804:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003806:	2300      	movs	r3, #0
 8003808:	617b      	str	r3, [r7, #20]
 800380a:	4b32      	ldr	r3, [pc, #200]	; (80038d4 <HAL_UART_MspInit+0x10c>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	4a31      	ldr	r2, [pc, #196]	; (80038d4 <HAL_UART_MspInit+0x10c>)
 8003810:	f043 0301 	orr.w	r3, r3, #1
 8003814:	6313      	str	r3, [r2, #48]	; 0x30
 8003816:	4b2f      	ldr	r3, [pc, #188]	; (80038d4 <HAL_UART_MspInit+0x10c>)
 8003818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USB2Serial_TX_Pin|USB2Serial_RX_Pin;
 8003822:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003828:	2302      	movs	r3, #2
 800382a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800382c:	2300      	movs	r3, #0
 800382e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003830:	2303      	movs	r3, #3
 8003832:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003834:	2307      	movs	r3, #7
 8003836:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003838:	f107 031c 	add.w	r3, r7, #28
 800383c:	4619      	mov	r1, r3
 800383e:	4826      	ldr	r0, [pc, #152]	; (80038d8 <HAL_UART_MspInit+0x110>)
 8003840:	f001 f8a6 	bl	8004990 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003844:	2200      	movs	r2, #0
 8003846:	2100      	movs	r1, #0
 8003848:	2025      	movs	r0, #37	; 0x25
 800384a:	f000 fca2 	bl	8004192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800384e:	2025      	movs	r0, #37	; 0x25
 8003850:	f000 fcbb 	bl	80041ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003854:	e038      	b.n	80038c8 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a20      	ldr	r2, [pc, #128]	; (80038dc <HAL_UART_MspInit+0x114>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d133      	bne.n	80038c8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003860:	2300      	movs	r3, #0
 8003862:	613b      	str	r3, [r7, #16]
 8003864:	4b1b      	ldr	r3, [pc, #108]	; (80038d4 <HAL_UART_MspInit+0x10c>)
 8003866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003868:	4a1a      	ldr	r2, [pc, #104]	; (80038d4 <HAL_UART_MspInit+0x10c>)
 800386a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800386e:	6413      	str	r3, [r2, #64]	; 0x40
 8003870:	4b18      	ldr	r3, [pc, #96]	; (80038d4 <HAL_UART_MspInit+0x10c>)
 8003872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003878:	613b      	str	r3, [r7, #16]
 800387a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800387c:	2300      	movs	r3, #0
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	4b14      	ldr	r3, [pc, #80]	; (80038d4 <HAL_UART_MspInit+0x10c>)
 8003882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003884:	4a13      	ldr	r2, [pc, #76]	; (80038d4 <HAL_UART_MspInit+0x10c>)
 8003886:	f043 0308 	orr.w	r3, r3, #8
 800388a:	6313      	str	r3, [r2, #48]	; 0x30
 800388c:	4b11      	ldr	r3, [pc, #68]	; (80038d4 <HAL_UART_MspInit+0x10c>)
 800388e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003890:	f003 0308 	and.w	r3, r3, #8
 8003894:	60fb      	str	r3, [r7, #12]
 8003896:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003898:	2360      	movs	r3, #96	; 0x60
 800389a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800389c:	2302      	movs	r3, #2
 800389e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a0:	2300      	movs	r3, #0
 80038a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038a4:	2303      	movs	r3, #3
 80038a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80038a8:	2307      	movs	r3, #7
 80038aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038ac:	f107 031c 	add.w	r3, r7, #28
 80038b0:	4619      	mov	r1, r3
 80038b2:	480b      	ldr	r0, [pc, #44]	; (80038e0 <HAL_UART_MspInit+0x118>)
 80038b4:	f001 f86c 	bl	8004990 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80038b8:	2200      	movs	r2, #0
 80038ba:	2100      	movs	r1, #0
 80038bc:	2026      	movs	r0, #38	; 0x26
 80038be:	f000 fc68 	bl	8004192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80038c2:	2026      	movs	r0, #38	; 0x26
 80038c4:	f000 fc81 	bl	80041ca <HAL_NVIC_EnableIRQ>
}
 80038c8:	bf00      	nop
 80038ca:	3730      	adds	r7, #48	; 0x30
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40011000 	.word	0x40011000
 80038d4:	40023800 	.word	0x40023800
 80038d8:	40020000 	.word	0x40020000
 80038dc:	40004400 	.word	0x40004400
 80038e0:	40020c00 	.word	0x40020c00

080038e4 <LRL_Delay_Init>:
#include "utilities.h"
#include "stdlib.h"
#include "stdio.h"

void LRL_Delay_Init()
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038ea:	f107 0308 	add.w	r3, r7, #8
 80038ee:	2200      	movs	r2, #0
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	605a      	str	r2, [r3, #4]
 80038f4:	609a      	str	r2, [r3, #8]
 80038f6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038f8:	463b      	mov	r3, r7
 80038fa:	2200      	movs	r2, #0
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	DELAY_TIM_HANDLE.Instance = DELAY_TIM_INISTANCE;
 8003900:	4b22      	ldr	r3, [pc, #136]	; (800398c <LRL_Delay_Init+0xa8>)
 8003902:	4a23      	ldr	r2, [pc, #140]	; (8003990 <LRL_Delay_Init+0xac>)
 8003904:	601a      	str	r2, [r3, #0]
	DELAY_TIM_HANDLE.Init.Prescaler = (HAL_RCC_GetHCLKFreq() / 1000000)-1;
 8003906:	f004 fc2d 	bl	8008164 <HAL_RCC_GetHCLKFreq>
 800390a:	4603      	mov	r3, r0
 800390c:	4a21      	ldr	r2, [pc, #132]	; (8003994 <LRL_Delay_Init+0xb0>)
 800390e:	fba2 2303 	umull	r2, r3, r2, r3
 8003912:	0c9b      	lsrs	r3, r3, #18
 8003914:	3b01      	subs	r3, #1
 8003916:	4a1d      	ldr	r2, [pc, #116]	; (800398c <LRL_Delay_Init+0xa8>)
 8003918:	6053      	str	r3, [r2, #4]
	DELAY_TIM_HANDLE.Init.CounterMode = TIM_COUNTERMODE_UP;
 800391a:	4b1c      	ldr	r3, [pc, #112]	; (800398c <LRL_Delay_Init+0xa8>)
 800391c:	2200      	movs	r2, #0
 800391e:	609a      	str	r2, [r3, #8]
	DELAY_TIM_HANDLE.Init.Period = 65535;
 8003920:	4b1a      	ldr	r3, [pc, #104]	; (800398c <LRL_Delay_Init+0xa8>)
 8003922:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003926:	60da      	str	r2, [r3, #12]
	DELAY_TIM_HANDLE.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003928:	4b18      	ldr	r3, [pc, #96]	; (800398c <LRL_Delay_Init+0xa8>)
 800392a:	2200      	movs	r2, #0
 800392c:	611a      	str	r2, [r3, #16]
	DELAY_TIM_HANDLE.Init.RepetitionCounter = 0;
 800392e:	4b17      	ldr	r3, [pc, #92]	; (800398c <LRL_Delay_Init+0xa8>)
 8003930:	2200      	movs	r2, #0
 8003932:	615a      	str	r2, [r3, #20]
	DELAY_TIM_HANDLE.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003934:	4b15      	ldr	r3, [pc, #84]	; (800398c <LRL_Delay_Init+0xa8>)
 8003936:	2200      	movs	r2, #0
 8003938:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&DELAY_TIM_HANDLE) != HAL_OK)
 800393a:	4814      	ldr	r0, [pc, #80]	; (800398c <LRL_Delay_Init+0xa8>)
 800393c:	f004 fccf 	bl	80082de <HAL_TIM_Base_Init>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <LRL_Delay_Init+0x66>
	{
		Error_Handler();
 8003946:	f7fe fe2f 	bl	80025a8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800394a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800394e:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&DELAY_TIM_HANDLE, &sClockSourceConfig) != HAL_OK)
 8003950:	f107 0308 	add.w	r3, r7, #8
 8003954:	4619      	mov	r1, r3
 8003956:	480d      	ldr	r0, [pc, #52]	; (800398c <LRL_Delay_Init+0xa8>)
 8003958:	f005 fbb4 	bl	80090c4 <HAL_TIM_ConfigClockSource>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <LRL_Delay_Init+0x82>
	{
		Error_Handler();
 8003962:	f7fe fe21 	bl	80025a8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003966:	2300      	movs	r3, #0
 8003968:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800396a:	2300      	movs	r3, #0
 800396c:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&DELAY_TIM_HANDLE, &sMasterConfig) != HAL_OK)
 800396e:	463b      	mov	r3, r7
 8003970:	4619      	mov	r1, r3
 8003972:	4806      	ldr	r0, [pc, #24]	; (800398c <LRL_Delay_Init+0xa8>)
 8003974:	f006 f8d0 	bl	8009b18 <HAL_TIMEx_MasterConfigSynchronization>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <LRL_Delay_Init+0x9e>
	{
		Error_Handler();
 800397e:	f7fe fe13 	bl	80025a8 <Error_Handler>
	}
}
 8003982:	bf00      	nop
 8003984:	3718      	adds	r7, #24
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	2000089c 	.word	0x2000089c
 8003990:	40010000 	.word	0x40010000
 8003994:	431bde83 	.word	0x431bde83

08003998 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003998:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800399c:	480d      	ldr	r0, [pc, #52]	; (80039d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800399e:	490e      	ldr	r1, [pc, #56]	; (80039d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80039a0:	4a0e      	ldr	r2, [pc, #56]	; (80039dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80039a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039a4:	e002      	b.n	80039ac <LoopCopyDataInit>

080039a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039aa:	3304      	adds	r3, #4

080039ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039b0:	d3f9      	bcc.n	80039a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039b2:	4a0b      	ldr	r2, [pc, #44]	; (80039e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80039b4:	4c0b      	ldr	r4, [pc, #44]	; (80039e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80039b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039b8:	e001      	b.n	80039be <LoopFillZerobss>

080039ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039bc:	3204      	adds	r2, #4

080039be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039c0:	d3fb      	bcc.n	80039ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80039c2:	f7ff fa15 	bl	8002df0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039c6:	f007 faed 	bl	800afa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039ca:	f7fe f9c1 	bl	8001d50 <main>
  bx  lr    
 80039ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80039d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80039d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039d8:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 80039dc:	080105b0 	.word	0x080105b0
  ldr r2, =_sbss
 80039e0:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 80039e4:	20000b30 	.word	0x20000b30

080039e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039e8:	e7fe      	b.n	80039e8 <ADC_IRQHandler>
	...

080039ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039f0:	4b0e      	ldr	r3, [pc, #56]	; (8003a2c <HAL_Init+0x40>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a0d      	ldr	r2, [pc, #52]	; (8003a2c <HAL_Init+0x40>)
 80039f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80039fc:	4b0b      	ldr	r3, [pc, #44]	; (8003a2c <HAL_Init+0x40>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a0a      	ldr	r2, [pc, #40]	; (8003a2c <HAL_Init+0x40>)
 8003a02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a08:	4b08      	ldr	r3, [pc, #32]	; (8003a2c <HAL_Init+0x40>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a07      	ldr	r2, [pc, #28]	; (8003a2c <HAL_Init+0x40>)
 8003a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a14:	2003      	movs	r0, #3
 8003a16:	f000 fbb1 	bl	800417c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a1a:	200f      	movs	r0, #15
 8003a1c:	f000 f808 	bl	8003a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a20:	f7ff f892 	bl	8002b48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40023c00 	.word	0x40023c00

08003a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a38:	4b12      	ldr	r3, [pc, #72]	; (8003a84 <HAL_InitTick+0x54>)
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	4b12      	ldr	r3, [pc, #72]	; (8003a88 <HAL_InitTick+0x58>)
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	4619      	mov	r1, r3
 8003a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 fbc9 	bl	80041e6 <HAL_SYSTICK_Config>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e00e      	b.n	8003a7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b0f      	cmp	r3, #15
 8003a62:	d80a      	bhi.n	8003a7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a64:	2200      	movs	r2, #0
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	f04f 30ff 	mov.w	r0, #4294967295
 8003a6c:	f000 fb91 	bl	8004192 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a70:	4a06      	ldr	r2, [pc, #24]	; (8003a8c <HAL_InitTick+0x5c>)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
 8003a78:	e000      	b.n	8003a7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	200000f0 	.word	0x200000f0
 8003a88:	200000f8 	.word	0x200000f8
 8003a8c:	200000f4 	.word	0x200000f4

08003a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a94:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <HAL_IncTick+0x20>)
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	461a      	mov	r2, r3
 8003a9a:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <HAL_IncTick+0x24>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	4a04      	ldr	r2, [pc, #16]	; (8003ab4 <HAL_IncTick+0x24>)
 8003aa2:	6013      	str	r3, [r2, #0]
}
 8003aa4:	bf00      	nop
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	200000f8 	.word	0x200000f8
 8003ab4:	20000b1c 	.word	0x20000b1c

08003ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
  return uwTick;
 8003abc:	4b03      	ldr	r3, [pc, #12]	; (8003acc <HAL_GetTick+0x14>)
 8003abe:	681b      	ldr	r3, [r3, #0]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	20000b1c 	.word	0x20000b1c

08003ad0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ad8:	f7ff ffee 	bl	8003ab8 <HAL_GetTick>
 8003adc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae8:	d005      	beq.n	8003af6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003aea:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <HAL_Delay+0x44>)
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	461a      	mov	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4413      	add	r3, r2
 8003af4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003af6:	bf00      	nop
 8003af8:	f7ff ffde 	bl	8003ab8 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d8f7      	bhi.n	8003af8 <HAL_Delay+0x28>
  {
  }
}
 8003b08:	bf00      	nop
 8003b0a:	bf00      	nop
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	200000f8 	.word	0x200000f8

08003b18 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b20:	2300      	movs	r3, #0
 8003b22:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e033      	b.n	8003b96 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d109      	bne.n	8003b4a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7fd fab0 	bl	800109c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	f003 0310 	and.w	r3, r3, #16
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d118      	bne.n	8003b88 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003b5e:	f023 0302 	bic.w	r3, r3, #2
 8003b62:	f043 0202 	orr.w	r2, r3, #2
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f93a 	bl	8003de4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	f023 0303 	bic.w	r3, r3, #3
 8003b7e:	f043 0201 	orr.w	r2, r3, #1
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	641a      	str	r2, [r3, #64]	; 0x40
 8003b86:	e001      	b.n	8003b8c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
	...

08003ba0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003baa:	2300      	movs	r3, #0
 8003bac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d101      	bne.n	8003bbc <HAL_ADC_ConfigChannel+0x1c>
 8003bb8:	2302      	movs	r3, #2
 8003bba:	e105      	b.n	8003dc8 <HAL_ADC_ConfigChannel+0x228>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2b09      	cmp	r3, #9
 8003bca:	d925      	bls.n	8003c18 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68d9      	ldr	r1, [r3, #12]
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	461a      	mov	r2, r3
 8003bda:	4613      	mov	r3, r2
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	4413      	add	r3, r2
 8003be0:	3b1e      	subs	r3, #30
 8003be2:	2207      	movs	r2, #7
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	43da      	mvns	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	400a      	ands	r2, r1
 8003bf0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68d9      	ldr	r1, [r3, #12]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	4618      	mov	r0, r3
 8003c04:	4603      	mov	r3, r0
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	4403      	add	r3, r0
 8003c0a:	3b1e      	subs	r3, #30
 8003c0c:	409a      	lsls	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	60da      	str	r2, [r3, #12]
 8003c16:	e022      	b.n	8003c5e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6919      	ldr	r1, [r3, #16]
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	461a      	mov	r2, r3
 8003c26:	4613      	mov	r3, r2
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	4413      	add	r3, r2
 8003c2c:	2207      	movs	r2, #7
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	43da      	mvns	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	400a      	ands	r2, r1
 8003c3a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6919      	ldr	r1, [r3, #16]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	4603      	mov	r3, r0
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	4403      	add	r3, r0
 8003c54:	409a      	lsls	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	2b06      	cmp	r3, #6
 8003c64:	d824      	bhi.n	8003cb0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	4613      	mov	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	4413      	add	r3, r2
 8003c76:	3b05      	subs	r3, #5
 8003c78:	221f      	movs	r2, #31
 8003c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7e:	43da      	mvns	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	400a      	ands	r2, r1
 8003c86:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	4618      	mov	r0, r3
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685a      	ldr	r2, [r3, #4]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	4413      	add	r3, r2
 8003ca0:	3b05      	subs	r3, #5
 8003ca2:	fa00 f203 	lsl.w	r2, r0, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	635a      	str	r2, [r3, #52]	; 0x34
 8003cae:	e04c      	b.n	8003d4a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	2b0c      	cmp	r3, #12
 8003cb6:	d824      	bhi.n	8003d02 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	4413      	add	r3, r2
 8003cc8:	3b23      	subs	r3, #35	; 0x23
 8003cca:	221f      	movs	r2, #31
 8003ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd0:	43da      	mvns	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	400a      	ands	r2, r1
 8003cd8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	4613      	mov	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4413      	add	r3, r2
 8003cf2:	3b23      	subs	r3, #35	; 0x23
 8003cf4:	fa00 f203 	lsl.w	r2, r0, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	631a      	str	r2, [r3, #48]	; 0x30
 8003d00:	e023      	b.n	8003d4a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4413      	add	r3, r2
 8003d12:	3b41      	subs	r3, #65	; 0x41
 8003d14:	221f      	movs	r2, #31
 8003d16:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1a:	43da      	mvns	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	400a      	ands	r2, r1
 8003d22:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	4618      	mov	r0, r3
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	4613      	mov	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4413      	add	r3, r2
 8003d3c:	3b41      	subs	r3, #65	; 0x41
 8003d3e:	fa00 f203 	lsl.w	r2, r0, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d4a:	4b22      	ldr	r3, [pc, #136]	; (8003dd4 <HAL_ADC_ConfigChannel+0x234>)
 8003d4c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a21      	ldr	r2, [pc, #132]	; (8003dd8 <HAL_ADC_ConfigChannel+0x238>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d109      	bne.n	8003d6c <HAL_ADC_ConfigChannel+0x1cc>
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b12      	cmp	r3, #18
 8003d5e:	d105      	bne.n	8003d6c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a19      	ldr	r2, [pc, #100]	; (8003dd8 <HAL_ADC_ConfigChannel+0x238>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d123      	bne.n	8003dbe <HAL_ADC_ConfigChannel+0x21e>
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2b10      	cmp	r3, #16
 8003d7c:	d003      	beq.n	8003d86 <HAL_ADC_ConfigChannel+0x1e6>
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2b11      	cmp	r3, #17
 8003d84:	d11b      	bne.n	8003dbe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2b10      	cmp	r3, #16
 8003d98:	d111      	bne.n	8003dbe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003d9a:	4b10      	ldr	r3, [pc, #64]	; (8003ddc <HAL_ADC_ConfigChannel+0x23c>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a10      	ldr	r2, [pc, #64]	; (8003de0 <HAL_ADC_ConfigChannel+0x240>)
 8003da0:	fba2 2303 	umull	r2, r3, r2, r3
 8003da4:	0c9a      	lsrs	r2, r3, #18
 8003da6:	4613      	mov	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4413      	add	r3, r2
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003db0:	e002      	b.n	8003db8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	3b01      	subs	r3, #1
 8003db6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1f9      	bne.n	8003db2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr
 8003dd4:	40012300 	.word	0x40012300
 8003dd8:	40012000 	.word	0x40012000
 8003ddc:	200000f0 	.word	0x200000f0
 8003de0:	431bde83 	.word	0x431bde83

08003de4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003dec:	4b79      	ldr	r3, [pc, #484]	; (8003fd4 <ADC_Init+0x1f0>)
 8003dee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	431a      	orrs	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	685a      	ldr	r2, [r3, #4]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	6859      	ldr	r1, [r3, #4]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	021a      	lsls	r2, r3, #8
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	685a      	ldr	r2, [r3, #4]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003e3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	6859      	ldr	r1, [r3, #4]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689a      	ldr	r2, [r3, #8]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689a      	ldr	r2, [r3, #8]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6899      	ldr	r1, [r3, #8]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e76:	4a58      	ldr	r2, [pc, #352]	; (8003fd8 <ADC_Init+0x1f4>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d022      	beq.n	8003ec2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689a      	ldr	r2, [r3, #8]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e8a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6899      	ldr	r1, [r3, #8]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003eac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6899      	ldr	r1, [r3, #8]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	609a      	str	r2, [r3, #8]
 8003ec0:	e00f      	b.n	8003ee2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ed0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ee0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	689a      	ldr	r2, [r3, #8]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 0202 	bic.w	r2, r2, #2
 8003ef0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	6899      	ldr	r1, [r3, #8]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	7e1b      	ldrb	r3, [r3, #24]
 8003efc:	005a      	lsls	r2, r3, #1
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d01b      	beq.n	8003f48 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f1e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003f2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6859      	ldr	r1, [r3, #4]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	035a      	lsls	r2, r3, #13
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	430a      	orrs	r2, r1
 8003f44:	605a      	str	r2, [r3, #4]
 8003f46:	e007      	b.n	8003f58 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f56:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003f66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	3b01      	subs	r3, #1
 8003f74:	051a      	lsls	r2, r3, #20
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	689a      	ldr	r2, [r3, #8]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003f8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	6899      	ldr	r1, [r3, #8]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f9a:	025a      	lsls	r2, r3, #9
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689a      	ldr	r2, [r3, #8]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6899      	ldr	r1, [r3, #8]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	029a      	lsls	r2, r3, #10
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	609a      	str	r2, [r3, #8]
}
 8003fc8:	bf00      	nop
 8003fca:	3714      	adds	r7, #20
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr
 8003fd4:	40012300 	.word	0x40012300
 8003fd8:	0f000001 	.word	0x0f000001

08003fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f003 0307 	and.w	r3, r3, #7
 8003fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fec:	4b0c      	ldr	r3, [pc, #48]	; (8004020 <__NVIC_SetPriorityGrouping+0x44>)
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ff2:	68ba      	ldr	r2, [r7, #8]
 8003ff4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004004:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800400c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800400e:	4a04      	ldr	r2, [pc, #16]	; (8004020 <__NVIC_SetPriorityGrouping+0x44>)
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	60d3      	str	r3, [r2, #12]
}
 8004014:	bf00      	nop
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	e000ed00 	.word	0xe000ed00

08004024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004024:	b480      	push	{r7}
 8004026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004028:	4b04      	ldr	r3, [pc, #16]	; (800403c <__NVIC_GetPriorityGrouping+0x18>)
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	0a1b      	lsrs	r3, r3, #8
 800402e:	f003 0307 	and.w	r3, r3, #7
}
 8004032:	4618      	mov	r0, r3
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr
 800403c:	e000ed00 	.word	0xe000ed00

08004040 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	4603      	mov	r3, r0
 8004048:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800404a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800404e:	2b00      	cmp	r3, #0
 8004050:	db0b      	blt.n	800406a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004052:	79fb      	ldrb	r3, [r7, #7]
 8004054:	f003 021f 	and.w	r2, r3, #31
 8004058:	4907      	ldr	r1, [pc, #28]	; (8004078 <__NVIC_EnableIRQ+0x38>)
 800405a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800405e:	095b      	lsrs	r3, r3, #5
 8004060:	2001      	movs	r0, #1
 8004062:	fa00 f202 	lsl.w	r2, r0, r2
 8004066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800406a:	bf00      	nop
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	e000e100 	.word	0xe000e100

0800407c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	4603      	mov	r3, r0
 8004084:	6039      	str	r1, [r7, #0]
 8004086:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800408c:	2b00      	cmp	r3, #0
 800408e:	db0a      	blt.n	80040a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	b2da      	uxtb	r2, r3
 8004094:	490c      	ldr	r1, [pc, #48]	; (80040c8 <__NVIC_SetPriority+0x4c>)
 8004096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800409a:	0112      	lsls	r2, r2, #4
 800409c:	b2d2      	uxtb	r2, r2
 800409e:	440b      	add	r3, r1
 80040a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040a4:	e00a      	b.n	80040bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	b2da      	uxtb	r2, r3
 80040aa:	4908      	ldr	r1, [pc, #32]	; (80040cc <__NVIC_SetPriority+0x50>)
 80040ac:	79fb      	ldrb	r3, [r7, #7]
 80040ae:	f003 030f 	and.w	r3, r3, #15
 80040b2:	3b04      	subs	r3, #4
 80040b4:	0112      	lsls	r2, r2, #4
 80040b6:	b2d2      	uxtb	r2, r2
 80040b8:	440b      	add	r3, r1
 80040ba:	761a      	strb	r2, [r3, #24]
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr
 80040c8:	e000e100 	.word	0xe000e100
 80040cc:	e000ed00 	.word	0xe000ed00

080040d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b089      	sub	sp, #36	; 0x24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f003 0307 	and.w	r3, r3, #7
 80040e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	f1c3 0307 	rsb	r3, r3, #7
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	bf28      	it	cs
 80040ee:	2304      	movcs	r3, #4
 80040f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	3304      	adds	r3, #4
 80040f6:	2b06      	cmp	r3, #6
 80040f8:	d902      	bls.n	8004100 <NVIC_EncodePriority+0x30>
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	3b03      	subs	r3, #3
 80040fe:	e000      	b.n	8004102 <NVIC_EncodePriority+0x32>
 8004100:	2300      	movs	r3, #0
 8004102:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004104:	f04f 32ff 	mov.w	r2, #4294967295
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	fa02 f303 	lsl.w	r3, r2, r3
 800410e:	43da      	mvns	r2, r3
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	401a      	ands	r2, r3
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004118:	f04f 31ff 	mov.w	r1, #4294967295
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	fa01 f303 	lsl.w	r3, r1, r3
 8004122:	43d9      	mvns	r1, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004128:	4313      	orrs	r3, r2
         );
}
 800412a:	4618      	mov	r0, r3
 800412c:	3724      	adds	r7, #36	; 0x24
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
	...

08004138 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3b01      	subs	r3, #1
 8004144:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004148:	d301      	bcc.n	800414e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800414a:	2301      	movs	r3, #1
 800414c:	e00f      	b.n	800416e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800414e:	4a0a      	ldr	r2, [pc, #40]	; (8004178 <SysTick_Config+0x40>)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	3b01      	subs	r3, #1
 8004154:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004156:	210f      	movs	r1, #15
 8004158:	f04f 30ff 	mov.w	r0, #4294967295
 800415c:	f7ff ff8e 	bl	800407c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004160:	4b05      	ldr	r3, [pc, #20]	; (8004178 <SysTick_Config+0x40>)
 8004162:	2200      	movs	r2, #0
 8004164:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004166:	4b04      	ldr	r3, [pc, #16]	; (8004178 <SysTick_Config+0x40>)
 8004168:	2207      	movs	r2, #7
 800416a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	e000e010 	.word	0xe000e010

0800417c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f7ff ff29 	bl	8003fdc <__NVIC_SetPriorityGrouping>
}
 800418a:	bf00      	nop
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004192:	b580      	push	{r7, lr}
 8004194:	b086      	sub	sp, #24
 8004196:	af00      	add	r7, sp, #0
 8004198:	4603      	mov	r3, r0
 800419a:	60b9      	str	r1, [r7, #8]
 800419c:	607a      	str	r2, [r7, #4]
 800419e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80041a0:	2300      	movs	r3, #0
 80041a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041a4:	f7ff ff3e 	bl	8004024 <__NVIC_GetPriorityGrouping>
 80041a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	68b9      	ldr	r1, [r7, #8]
 80041ae:	6978      	ldr	r0, [r7, #20]
 80041b0:	f7ff ff8e 	bl	80040d0 <NVIC_EncodePriority>
 80041b4:	4602      	mov	r2, r0
 80041b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041ba:	4611      	mov	r1, r2
 80041bc:	4618      	mov	r0, r3
 80041be:	f7ff ff5d 	bl	800407c <__NVIC_SetPriority>
}
 80041c2:	bf00      	nop
 80041c4:	3718      	adds	r7, #24
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b082      	sub	sp, #8
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	4603      	mov	r3, r0
 80041d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d8:	4618      	mov	r0, r3
 80041da:	f7ff ff31 	bl	8004040 <__NVIC_EnableIRQ>
}
 80041de:	bf00      	nop
 80041e0:	3708      	adds	r7, #8
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b082      	sub	sp, #8
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7ff ffa2 	bl	8004138 <SysTick_Config>
 80041f4:	4603      	mov	r3, r0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b084      	sub	sp, #16
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800420a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800420c:	f7ff fc54 	bl	8003ab8 <HAL_GetTick>
 8004210:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d008      	beq.n	8004230 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2280      	movs	r2, #128	; 0x80
 8004222:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e052      	b.n	80042d6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 0216 	bic.w	r2, r2, #22
 800423e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	695a      	ldr	r2, [r3, #20]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800424e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004254:	2b00      	cmp	r3, #0
 8004256:	d103      	bne.n	8004260 <HAL_DMA_Abort+0x62>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800425c:	2b00      	cmp	r3, #0
 800425e:	d007      	beq.n	8004270 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 0208 	bic.w	r2, r2, #8
 800426e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 0201 	bic.w	r2, r2, #1
 800427e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004280:	e013      	b.n	80042aa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004282:	f7ff fc19 	bl	8003ab8 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b05      	cmp	r3, #5
 800428e:	d90c      	bls.n	80042aa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2220      	movs	r2, #32
 8004294:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2203      	movs	r2, #3
 800429a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e015      	b.n	80042d6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1e4      	bne.n	8004282 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042bc:	223f      	movs	r2, #63	; 0x3f
 80042be:	409a      	lsls	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042de:	b480      	push	{r7}
 80042e0:	b083      	sub	sp, #12
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d004      	beq.n	80042fc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2280      	movs	r2, #128	; 0x80
 80042f6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e00c      	b.n	8004316 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2205      	movs	r2, #5
 8004300:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 0201 	bic.w	r2, r2, #1
 8004312:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004322:	b480      	push	{r7}
 8004324:	b083      	sub	sp, #12
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004330:	b2db      	uxtb	r3, r3
}
 8004332:	4618      	mov	r0, r3
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
	...

08004340 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e06c      	b.n	800442c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004358:	2b00      	cmp	r3, #0
 800435a:	d106      	bne.n	800436a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2223      	movs	r2, #35	; 0x23
 8004360:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f7fc ff2b 	bl	80011c0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800436a:	2300      	movs	r3, #0
 800436c:	60bb      	str	r3, [r7, #8]
 800436e:	4b31      	ldr	r3, [pc, #196]	; (8004434 <HAL_ETH_Init+0xf4>)
 8004370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004372:	4a30      	ldr	r2, [pc, #192]	; (8004434 <HAL_ETH_Init+0xf4>)
 8004374:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004378:	6453      	str	r3, [r2, #68]	; 0x44
 800437a:	4b2e      	ldr	r3, [pc, #184]	; (8004434 <HAL_ETH_Init+0xf4>)
 800437c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004382:	60bb      	str	r3, [r7, #8]
 8004384:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004386:	4b2c      	ldr	r3, [pc, #176]	; (8004438 <HAL_ETH_Init+0xf8>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	4a2b      	ldr	r2, [pc, #172]	; (8004438 <HAL_ETH_Init+0xf8>)
 800438c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004390:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004392:	4b29      	ldr	r3, [pc, #164]	; (8004438 <HAL_ETH_Init+0xf8>)
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	4927      	ldr	r1, [pc, #156]	; (8004438 <HAL_ETH_Init+0xf8>)
 800439c:	4313      	orrs	r3, r2
 800439e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80043a0:	4b25      	ldr	r3, [pc, #148]	; (8004438 <HAL_ETH_Init+0xf8>)
 80043a2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	6812      	ldr	r2, [r2, #0]
 80043b2:	f043 0301 	orr.w	r3, r3, #1
 80043b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043bc:	f7ff fb7c 	bl	8003ab8 <HAL_GetTick>
 80043c0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80043c2:	e011      	b.n	80043e8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80043c4:	f7ff fb78 	bl	8003ab8 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80043d2:	d909      	bls.n	80043e8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2204      	movs	r2, #4
 80043d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	22e0      	movs	r2, #224	; 0xe0
 80043e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e021      	b.n	800442c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1e4      	bne.n	80043c4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f958 	bl	80046b0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 f9ff 	bl	8004804 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 fa55 	bl	80048b6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	461a      	mov	r2, r3
 8004412:	2100      	movs	r1, #0
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 f9bd 	bl	8004794 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2210      	movs	r2, #16
 8004426:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3710      	adds	r7, #16
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	40023800 	.word	0x40023800
 8004438:	40013800 	.word	0x40013800

0800443c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	4b51      	ldr	r3, [pc, #324]	; (8004598 <ETH_SetMACConfig+0x15c>)
 8004452:	4013      	ands	r3, r2
 8004454:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	7c1b      	ldrb	r3, [r3, #16]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d102      	bne.n	8004464 <ETH_SetMACConfig+0x28>
 800445e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004462:	e000      	b.n	8004466 <ETH_SetMACConfig+0x2a>
 8004464:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	7c5b      	ldrb	r3, [r3, #17]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d102      	bne.n	8004474 <ETH_SetMACConfig+0x38>
 800446e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004472:	e000      	b.n	8004476 <ETH_SetMACConfig+0x3a>
 8004474:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004476:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800447c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	7fdb      	ldrb	r3, [r3, #31]
 8004482:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004484:	431a      	orrs	r2, r3
                        macconf->Speed |
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800448a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	7f92      	ldrb	r2, [r2, #30]
 8004490:	2a00      	cmp	r2, #0
 8004492:	d102      	bne.n	800449a <ETH_SetMACConfig+0x5e>
 8004494:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004498:	e000      	b.n	800449c <ETH_SetMACConfig+0x60>
 800449a:	2200      	movs	r2, #0
                        macconf->Speed |
 800449c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	7f1b      	ldrb	r3, [r3, #28]
 80044a2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80044a4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80044aa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	791b      	ldrb	r3, [r3, #4]
 80044b0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80044b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80044b4:	683a      	ldr	r2, [r7, #0]
 80044b6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80044ba:	2a00      	cmp	r2, #0
 80044bc:	d102      	bne.n	80044c4 <ETH_SetMACConfig+0x88>
 80044be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044c2:	e000      	b.n	80044c6 <ETH_SetMACConfig+0x8a>
 80044c4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80044c6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	7bdb      	ldrb	r3, [r3, #15]
 80044cc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80044ce:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80044d4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044dc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80044de:	4313      	orrs	r3, r2
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80044f6:	2001      	movs	r0, #1
 80044f8:	f7ff faea 	bl	8003ad0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004512:	4013      	ands	r3, r2
 8004514:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800451a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004522:	2a00      	cmp	r2, #0
 8004524:	d101      	bne.n	800452a <ETH_SetMACConfig+0xee>
 8004526:	2280      	movs	r2, #128	; 0x80
 8004528:	e000      	b.n	800452c <ETH_SetMACConfig+0xf0>
 800452a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800452c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004532:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004534:	683a      	ldr	r2, [r7, #0]
 8004536:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800453a:	2a01      	cmp	r2, #1
 800453c:	d101      	bne.n	8004542 <ETH_SetMACConfig+0x106>
 800453e:	2208      	movs	r2, #8
 8004540:	e000      	b.n	8004544 <ETH_SetMACConfig+0x108>
 8004542:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004544:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800454c:	2a01      	cmp	r2, #1
 800454e:	d101      	bne.n	8004554 <ETH_SetMACConfig+0x118>
 8004550:	2204      	movs	r2, #4
 8004552:	e000      	b.n	8004556 <ETH_SetMACConfig+0x11a>
 8004554:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004556:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004558:	683a      	ldr	r2, [r7, #0]
 800455a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800455e:	2a01      	cmp	r2, #1
 8004560:	d101      	bne.n	8004566 <ETH_SetMACConfig+0x12a>
 8004562:	2202      	movs	r2, #2
 8004564:	e000      	b.n	8004568 <ETH_SetMACConfig+0x12c>
 8004566:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004568:	4313      	orrs	r3, r2
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	4313      	orrs	r3, r2
 800456e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004580:	2001      	movs	r0, #1
 8004582:	f7ff faa5 	bl	8003ad0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	619a      	str	r2, [r3, #24]
}
 800458e:	bf00      	nop
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	ff20810f 	.word	0xff20810f

0800459c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	4b3d      	ldr	r3, [pc, #244]	; (80046ac <ETH_SetDMAConfig+0x110>)
 80045b6:	4013      	ands	r3, r2
 80045b8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	7b1b      	ldrb	r3, [r3, #12]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d102      	bne.n	80045c8 <ETH_SetDMAConfig+0x2c>
 80045c2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80045c6:	e000      	b.n	80045ca <ETH_SetDMAConfig+0x2e>
 80045c8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	7b5b      	ldrb	r3, [r3, #13]
 80045ce:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80045d0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	7f52      	ldrb	r2, [r2, #29]
 80045d6:	2a00      	cmp	r2, #0
 80045d8:	d102      	bne.n	80045e0 <ETH_SetDMAConfig+0x44>
 80045da:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80045de:	e000      	b.n	80045e2 <ETH_SetDMAConfig+0x46>
 80045e0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80045e2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	7b9b      	ldrb	r3, [r3, #14]
 80045e8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80045ea:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80045f0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	7f1b      	ldrb	r3, [r3, #28]
 80045f6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80045f8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	7f9b      	ldrb	r3, [r3, #30]
 80045fe:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004600:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004606:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800460e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004610:	4313      	orrs	r3, r2
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	4313      	orrs	r3, r2
 8004616:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004620:	461a      	mov	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004632:	2001      	movs	r0, #1
 8004634:	f7ff fa4c 	bl	8003ad0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004640:	461a      	mov	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	791b      	ldrb	r3, [r3, #4]
 800464a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004650:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004656:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800465c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004664:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004666:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800466e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004674:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	6812      	ldr	r2, [r2, #0]
 800467a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800467e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004682:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004690:	2001      	movs	r0, #1
 8004692:	f7ff fa1d 	bl	8003ad0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800469e:	461a      	mov	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6013      	str	r3, [r2, #0]
}
 80046a4:	bf00      	nop
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	f8de3f23 	.word	0xf8de3f23

080046b0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b0a6      	sub	sp, #152	; 0x98
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80046b8:	2301      	movs	r3, #1
 80046ba:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80046be:	2301      	movs	r3, #1
 80046c0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80046c4:	2300      	movs	r3, #0
 80046c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80046c8:	2300      	movs	r3, #0
 80046ca:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80046ce:	2301      	movs	r3, #1
 80046d0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80046d4:	2300      	movs	r3, #0
 80046d6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80046da:	2301      	movs	r3, #1
 80046dc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80046e0:	2300      	movs	r3, #0
 80046e2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80046e6:	2300      	movs	r3, #0
 80046e8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80046ec:	2300      	movs	r3, #0
 80046ee:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80046f0:	2300      	movs	r3, #0
 80046f2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80046f6:	2300      	movs	r3, #0
 80046f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80046fa:	2300      	movs	r3, #0
 80046fc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004700:	2300      	movs	r3, #0
 8004702:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004706:	2300      	movs	r3, #0
 8004708:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800470c:	2300      	movs	r3, #0
 800470e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004712:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004716:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004718:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800471c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800471e:	2300      	movs	r3, #0
 8004720:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004724:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004728:	4619      	mov	r1, r3
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f7ff fe86 	bl	800443c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004730:	2301      	movs	r3, #1
 8004732:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004734:	2301      	movs	r3, #1
 8004736:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004738:	2301      	movs	r3, #1
 800473a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800473e:	2301      	movs	r3, #1
 8004740:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004742:	2300      	movs	r3, #0
 8004744:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004746:	2300      	movs	r3, #0
 8004748:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800474c:	2300      	movs	r3, #0
 800474e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004752:	2300      	movs	r3, #0
 8004754:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004756:	2301      	movs	r3, #1
 8004758:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800475c:	2301      	movs	r3, #1
 800475e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004760:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004764:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004766:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800476a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800476c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004770:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004772:	2301      	movs	r3, #1
 8004774:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004778:	2300      	movs	r3, #0
 800477a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800477c:	2300      	movs	r3, #0
 800477e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004780:	f107 0308 	add.w	r3, r7, #8
 8004784:	4619      	mov	r1, r3
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f7ff ff08 	bl	800459c <ETH_SetDMAConfig>
}
 800478c:	bf00      	nop
 800478e:	3798      	adds	r7, #152	; 0x98
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004794:	b480      	push	{r7}
 8004796:	b087      	sub	sp, #28
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	3305      	adds	r3, #5
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	021b      	lsls	r3, r3, #8
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	3204      	adds	r2, #4
 80047ac:	7812      	ldrb	r2, [r2, #0]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	4b11      	ldr	r3, [pc, #68]	; (80047fc <ETH_MACAddressConfig+0x68>)
 80047b6:	4413      	add	r3, r2
 80047b8:	461a      	mov	r2, r3
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	3303      	adds	r3, #3
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	061a      	lsls	r2, r3, #24
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	3302      	adds	r3, #2
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	041b      	lsls	r3, r3, #16
 80047ce:	431a      	orrs	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	3301      	adds	r3, #1
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	021b      	lsls	r3, r3, #8
 80047d8:	4313      	orrs	r3, r2
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	7812      	ldrb	r2, [r2, #0]
 80047de:	4313      	orrs	r3, r2
 80047e0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	4b06      	ldr	r3, [pc, #24]	; (8004800 <ETH_MACAddressConfig+0x6c>)
 80047e6:	4413      	add	r3, r2
 80047e8:	461a      	mov	r2, r3
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	6013      	str	r3, [r2, #0]
}
 80047ee:	bf00      	nop
 80047f0:	371c      	adds	r7, #28
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	40028040 	.word	0x40028040
 8004800:	40028044 	.word	0x40028044

08004804 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800480c:	2300      	movs	r3, #0
 800480e:	60fb      	str	r3, [r7, #12]
 8004810:	e03e      	b.n	8004890 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	68d9      	ldr	r1, [r3, #12]
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	4613      	mov	r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	00db      	lsls	r3, r3, #3
 8004820:	440b      	add	r3, r1
 8004822:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	2200      	movs	r2, #0
 8004828:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	2200      	movs	r2, #0
 800482e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	2200      	movs	r2, #0
 8004834:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	2200      	movs	r2, #0
 800483a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800483c:	68b9      	ldr	r1, [r7, #8]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	3206      	adds	r2, #6
 8004844:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2b02      	cmp	r3, #2
 8004858:	d80c      	bhi.n	8004874 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68d9      	ldr	r1, [r3, #12]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	1c5a      	adds	r2, r3, #1
 8004862:	4613      	mov	r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	4413      	add	r3, r2
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	440b      	add	r3, r1
 800486c:	461a      	mov	r2, r3
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	60da      	str	r2, [r3, #12]
 8004872:	e004      	b.n	800487e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	461a      	mov	r2, r3
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	3301      	adds	r3, #1
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2b03      	cmp	r3, #3
 8004894:	d9bd      	bls.n	8004812 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	68da      	ldr	r2, [r3, #12]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048a8:	611a      	str	r2, [r3, #16]
}
 80048aa:	bf00      	nop
 80048ac:	3714      	adds	r7, #20
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b085      	sub	sp, #20
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80048be:	2300      	movs	r3, #0
 80048c0:	60fb      	str	r3, [r7, #12]
 80048c2:	e046      	b.n	8004952 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6919      	ldr	r1, [r3, #16]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	4613      	mov	r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4413      	add	r3, r2
 80048d0:	00db      	lsls	r3, r3, #3
 80048d2:	440b      	add	r3, r1
 80048d4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	2200      	movs	r2, #0
 80048da:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	2200      	movs	r2, #0
 80048e0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	2200      	movs	r2, #0
 80048e6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	2200      	movs	r2, #0
 80048ec:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	2200      	movs	r2, #0
 80048f2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	2200      	movs	r2, #0
 80048f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004900:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8004908:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004916:	68b9      	ldr	r1, [r7, #8]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	3212      	adds	r2, #18
 800491e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2b02      	cmp	r3, #2
 8004926:	d80c      	bhi.n	8004942 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6919      	ldr	r1, [r3, #16]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	1c5a      	adds	r2, r3, #1
 8004930:	4613      	mov	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	00db      	lsls	r3, r3, #3
 8004938:	440b      	add	r3, r1
 800493a:	461a      	mov	r2, r3
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	60da      	str	r2, [r3, #12]
 8004940:	e004      	b.n	800494c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	461a      	mov	r2, r3
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	3301      	adds	r3, #1
 8004950:	60fb      	str	r3, [r7, #12]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2b03      	cmp	r3, #3
 8004956:	d9b5      	bls.n	80048c4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691a      	ldr	r2, [r3, #16]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004982:	60da      	str	r2, [r3, #12]
}
 8004984:	bf00      	nop
 8004986:	3714      	adds	r7, #20
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004990:	b480      	push	{r7}
 8004992:	b089      	sub	sp, #36	; 0x24
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800499a:	2300      	movs	r3, #0
 800499c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800499e:	2300      	movs	r3, #0
 80049a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80049a2:	2300      	movs	r3, #0
 80049a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049a6:	2300      	movs	r3, #0
 80049a8:	61fb      	str	r3, [r7, #28]
 80049aa:	e16b      	b.n	8004c84 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80049ac:	2201      	movs	r2, #1
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	fa02 f303 	lsl.w	r3, r2, r3
 80049b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	4013      	ands	r3, r2
 80049be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	f040 815a 	bne.w	8004c7e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f003 0303 	and.w	r3, r3, #3
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d005      	beq.n	80049e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d130      	bne.n	8004a44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	005b      	lsls	r3, r3, #1
 80049ec:	2203      	movs	r2, #3
 80049ee:	fa02 f303 	lsl.w	r3, r2, r3
 80049f2:	43db      	mvns	r3, r3
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	4013      	ands	r3, r2
 80049f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	68da      	ldr	r2, [r3, #12]
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	fa02 f303 	lsl.w	r3, r2, r3
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a18:	2201      	movs	r2, #1
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a20:	43db      	mvns	r3, r3
 8004a22:	69ba      	ldr	r2, [r7, #24]
 8004a24:	4013      	ands	r3, r2
 8004a26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	091b      	lsrs	r3, r3, #4
 8004a2e:	f003 0201 	and.w	r2, r3, #1
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	fa02 f303 	lsl.w	r3, r2, r3
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f003 0303 	and.w	r3, r3, #3
 8004a4c:	2b03      	cmp	r3, #3
 8004a4e:	d017      	beq.n	8004a80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	005b      	lsls	r3, r3, #1
 8004a5a:	2203      	movs	r2, #3
 8004a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a60:	43db      	mvns	r3, r3
 8004a62:	69ba      	ldr	r2, [r7, #24]
 8004a64:	4013      	ands	r3, r2
 8004a66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	005b      	lsls	r3, r3, #1
 8004a70:	fa02 f303 	lsl.w	r3, r2, r3
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f003 0303 	and.w	r3, r3, #3
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d123      	bne.n	8004ad4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	08da      	lsrs	r2, r3, #3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	3208      	adds	r2, #8
 8004a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	f003 0307 	and.w	r3, r3, #7
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	220f      	movs	r2, #15
 8004aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa8:	43db      	mvns	r3, r3
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	4013      	ands	r3, r2
 8004aae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	691a      	ldr	r2, [r3, #16]
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	f003 0307 	and.w	r3, r3, #7
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	08da      	lsrs	r2, r3, #3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	3208      	adds	r2, #8
 8004ace:	69b9      	ldr	r1, [r7, #24]
 8004ad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	005b      	lsls	r3, r3, #1
 8004ade:	2203      	movs	r2, #3
 8004ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae4:	43db      	mvns	r3, r3
 8004ae6:	69ba      	ldr	r2, [r7, #24]
 8004ae8:	4013      	ands	r3, r2
 8004aea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f003 0203 	and.w	r2, r3, #3
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	fa02 f303 	lsl.w	r3, r2, r3
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f000 80b4 	beq.w	8004c7e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b16:	2300      	movs	r3, #0
 8004b18:	60fb      	str	r3, [r7, #12]
 8004b1a:	4b60      	ldr	r3, [pc, #384]	; (8004c9c <HAL_GPIO_Init+0x30c>)
 8004b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b1e:	4a5f      	ldr	r2, [pc, #380]	; (8004c9c <HAL_GPIO_Init+0x30c>)
 8004b20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b24:	6453      	str	r3, [r2, #68]	; 0x44
 8004b26:	4b5d      	ldr	r3, [pc, #372]	; (8004c9c <HAL_GPIO_Init+0x30c>)
 8004b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b2e:	60fb      	str	r3, [r7, #12]
 8004b30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b32:	4a5b      	ldr	r2, [pc, #364]	; (8004ca0 <HAL_GPIO_Init+0x310>)
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	089b      	lsrs	r3, r3, #2
 8004b38:	3302      	adds	r3, #2
 8004b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	f003 0303 	and.w	r3, r3, #3
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	220f      	movs	r2, #15
 8004b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4e:	43db      	mvns	r3, r3
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	4013      	ands	r3, r2
 8004b54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a52      	ldr	r2, [pc, #328]	; (8004ca4 <HAL_GPIO_Init+0x314>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d02b      	beq.n	8004bb6 <HAL_GPIO_Init+0x226>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a51      	ldr	r2, [pc, #324]	; (8004ca8 <HAL_GPIO_Init+0x318>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d025      	beq.n	8004bb2 <HAL_GPIO_Init+0x222>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a50      	ldr	r2, [pc, #320]	; (8004cac <HAL_GPIO_Init+0x31c>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d01f      	beq.n	8004bae <HAL_GPIO_Init+0x21e>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a4f      	ldr	r2, [pc, #316]	; (8004cb0 <HAL_GPIO_Init+0x320>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d019      	beq.n	8004baa <HAL_GPIO_Init+0x21a>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a4e      	ldr	r2, [pc, #312]	; (8004cb4 <HAL_GPIO_Init+0x324>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d013      	beq.n	8004ba6 <HAL_GPIO_Init+0x216>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a4d      	ldr	r2, [pc, #308]	; (8004cb8 <HAL_GPIO_Init+0x328>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d00d      	beq.n	8004ba2 <HAL_GPIO_Init+0x212>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a4c      	ldr	r2, [pc, #304]	; (8004cbc <HAL_GPIO_Init+0x32c>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d007      	beq.n	8004b9e <HAL_GPIO_Init+0x20e>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a4b      	ldr	r2, [pc, #300]	; (8004cc0 <HAL_GPIO_Init+0x330>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d101      	bne.n	8004b9a <HAL_GPIO_Init+0x20a>
 8004b96:	2307      	movs	r3, #7
 8004b98:	e00e      	b.n	8004bb8 <HAL_GPIO_Init+0x228>
 8004b9a:	2308      	movs	r3, #8
 8004b9c:	e00c      	b.n	8004bb8 <HAL_GPIO_Init+0x228>
 8004b9e:	2306      	movs	r3, #6
 8004ba0:	e00a      	b.n	8004bb8 <HAL_GPIO_Init+0x228>
 8004ba2:	2305      	movs	r3, #5
 8004ba4:	e008      	b.n	8004bb8 <HAL_GPIO_Init+0x228>
 8004ba6:	2304      	movs	r3, #4
 8004ba8:	e006      	b.n	8004bb8 <HAL_GPIO_Init+0x228>
 8004baa:	2303      	movs	r3, #3
 8004bac:	e004      	b.n	8004bb8 <HAL_GPIO_Init+0x228>
 8004bae:	2302      	movs	r3, #2
 8004bb0:	e002      	b.n	8004bb8 <HAL_GPIO_Init+0x228>
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e000      	b.n	8004bb8 <HAL_GPIO_Init+0x228>
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	69fa      	ldr	r2, [r7, #28]
 8004bba:	f002 0203 	and.w	r2, r2, #3
 8004bbe:	0092      	lsls	r2, r2, #2
 8004bc0:	4093      	lsls	r3, r2
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004bc8:	4935      	ldr	r1, [pc, #212]	; (8004ca0 <HAL_GPIO_Init+0x310>)
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	089b      	lsrs	r3, r3, #2
 8004bce:	3302      	adds	r3, #2
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004bd6:	4b3b      	ldr	r3, [pc, #236]	; (8004cc4 <HAL_GPIO_Init+0x334>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	43db      	mvns	r3, r3
 8004be0:	69ba      	ldr	r2, [r7, #24]
 8004be2:	4013      	ands	r3, r2
 8004be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d003      	beq.n	8004bfa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004bf2:	69ba      	ldr	r2, [r7, #24]
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004bfa:	4a32      	ldr	r2, [pc, #200]	; (8004cc4 <HAL_GPIO_Init+0x334>)
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c00:	4b30      	ldr	r3, [pc, #192]	; (8004cc4 <HAL_GPIO_Init+0x334>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	43db      	mvns	r3, r3
 8004c0a:	69ba      	ldr	r2, [r7, #24]
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004c1c:	69ba      	ldr	r2, [r7, #24]
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c24:	4a27      	ldr	r2, [pc, #156]	; (8004cc4 <HAL_GPIO_Init+0x334>)
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004c2a:	4b26      	ldr	r3, [pc, #152]	; (8004cc4 <HAL_GPIO_Init+0x334>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	43db      	mvns	r3, r3
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	4013      	ands	r3, r2
 8004c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d003      	beq.n	8004c4e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004c46:	69ba      	ldr	r2, [r7, #24]
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c4e:	4a1d      	ldr	r2, [pc, #116]	; (8004cc4 <HAL_GPIO_Init+0x334>)
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c54:	4b1b      	ldr	r3, [pc, #108]	; (8004cc4 <HAL_GPIO_Init+0x334>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	43db      	mvns	r3, r3
 8004c5e:	69ba      	ldr	r2, [r7, #24]
 8004c60:	4013      	ands	r3, r2
 8004c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d003      	beq.n	8004c78 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004c70:	69ba      	ldr	r2, [r7, #24]
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c78:	4a12      	ldr	r2, [pc, #72]	; (8004cc4 <HAL_GPIO_Init+0x334>)
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	3301      	adds	r3, #1
 8004c82:	61fb      	str	r3, [r7, #28]
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	2b0f      	cmp	r3, #15
 8004c88:	f67f ae90 	bls.w	80049ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c8c:	bf00      	nop
 8004c8e:	bf00      	nop
 8004c90:	3724      	adds	r7, #36	; 0x24
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	40023800 	.word	0x40023800
 8004ca0:	40013800 	.word	0x40013800
 8004ca4:	40020000 	.word	0x40020000
 8004ca8:	40020400 	.word	0x40020400
 8004cac:	40020800 	.word	0x40020800
 8004cb0:	40020c00 	.word	0x40020c00
 8004cb4:	40021000 	.word	0x40021000
 8004cb8:	40021400 	.word	0x40021400
 8004cbc:	40021800 	.word	0x40021800
 8004cc0:	40021c00 	.word	0x40021c00
 8004cc4:	40013c00 	.word	0x40013c00

08004cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	807b      	strh	r3, [r7, #2]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004cd8:	787b      	ldrb	r3, [r7, #1]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d003      	beq.n	8004ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cde:	887a      	ldrh	r2, [r7, #2]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004ce4:	e003      	b.n	8004cee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004ce6:	887b      	ldrh	r3, [r7, #2]
 8004ce8:	041a      	lsls	r2, r3, #16
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	619a      	str	r2, [r3, #24]
}
 8004cee:	bf00      	nop
 8004cf0:	370c      	adds	r7, #12
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
	...

08004cfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e12b      	b.n	8004f66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d106      	bne.n	8004d28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f7fc fdd6 	bl	80018d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2224      	movs	r2, #36	; 0x24
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f022 0201 	bic.w	r2, r2, #1
 8004d3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004d60:	f003 fa0c 	bl	800817c <HAL_RCC_GetPCLK1Freq>
 8004d64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	4a81      	ldr	r2, [pc, #516]	; (8004f70 <HAL_I2C_Init+0x274>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d807      	bhi.n	8004d80 <HAL_I2C_Init+0x84>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4a80      	ldr	r2, [pc, #512]	; (8004f74 <HAL_I2C_Init+0x278>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	bf94      	ite	ls
 8004d78:	2301      	movls	r3, #1
 8004d7a:	2300      	movhi	r3, #0
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	e006      	b.n	8004d8e <HAL_I2C_Init+0x92>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	4a7d      	ldr	r2, [pc, #500]	; (8004f78 <HAL_I2C_Init+0x27c>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	bf94      	ite	ls
 8004d88:	2301      	movls	r3, #1
 8004d8a:	2300      	movhi	r3, #0
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d001      	beq.n	8004d96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e0e7      	b.n	8004f66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	4a78      	ldr	r2, [pc, #480]	; (8004f7c <HAL_I2C_Init+0x280>)
 8004d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9e:	0c9b      	lsrs	r3, r3, #18
 8004da0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	6a1b      	ldr	r3, [r3, #32]
 8004dbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	4a6a      	ldr	r2, [pc, #424]	; (8004f70 <HAL_I2C_Init+0x274>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d802      	bhi.n	8004dd0 <HAL_I2C_Init+0xd4>
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	e009      	b.n	8004de4 <HAL_I2C_Init+0xe8>
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004dd6:	fb02 f303 	mul.w	r3, r2, r3
 8004dda:	4a69      	ldr	r2, [pc, #420]	; (8004f80 <HAL_I2C_Init+0x284>)
 8004ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8004de0:	099b      	lsrs	r3, r3, #6
 8004de2:	3301      	adds	r3, #1
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	6812      	ldr	r2, [r2, #0]
 8004de8:	430b      	orrs	r3, r1
 8004dea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	69db      	ldr	r3, [r3, #28]
 8004df2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004df6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	495c      	ldr	r1, [pc, #368]	; (8004f70 <HAL_I2C_Init+0x274>)
 8004e00:	428b      	cmp	r3, r1
 8004e02:	d819      	bhi.n	8004e38 <HAL_I2C_Init+0x13c>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	1e59      	subs	r1, r3, #1
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	005b      	lsls	r3, r3, #1
 8004e0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e12:	1c59      	adds	r1, r3, #1
 8004e14:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004e18:	400b      	ands	r3, r1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00a      	beq.n	8004e34 <HAL_I2C_Init+0x138>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	1e59      	subs	r1, r3, #1
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	005b      	lsls	r3, r3, #1
 8004e28:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e32:	e051      	b.n	8004ed8 <HAL_I2C_Init+0x1dc>
 8004e34:	2304      	movs	r3, #4
 8004e36:	e04f      	b.n	8004ed8 <HAL_I2C_Init+0x1dc>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d111      	bne.n	8004e64 <HAL_I2C_Init+0x168>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	1e58      	subs	r0, r3, #1
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6859      	ldr	r1, [r3, #4]
 8004e48:	460b      	mov	r3, r1
 8004e4a:	005b      	lsls	r3, r3, #1
 8004e4c:	440b      	add	r3, r1
 8004e4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e52:	3301      	adds	r3, #1
 8004e54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	bf0c      	ite	eq
 8004e5c:	2301      	moveq	r3, #1
 8004e5e:	2300      	movne	r3, #0
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	e012      	b.n	8004e8a <HAL_I2C_Init+0x18e>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	1e58      	subs	r0, r3, #1
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6859      	ldr	r1, [r3, #4]
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	440b      	add	r3, r1
 8004e72:	0099      	lsls	r1, r3, #2
 8004e74:	440b      	add	r3, r1
 8004e76:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	bf0c      	ite	eq
 8004e84:	2301      	moveq	r3, #1
 8004e86:	2300      	movne	r3, #0
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d001      	beq.n	8004e92 <HAL_I2C_Init+0x196>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e022      	b.n	8004ed8 <HAL_I2C_Init+0x1dc>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10e      	bne.n	8004eb8 <HAL_I2C_Init+0x1bc>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	1e58      	subs	r0, r3, #1
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6859      	ldr	r1, [r3, #4]
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	005b      	lsls	r3, r3, #1
 8004ea6:	440b      	add	r3, r1
 8004ea8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004eac:	3301      	adds	r3, #1
 8004eae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eb6:	e00f      	b.n	8004ed8 <HAL_I2C_Init+0x1dc>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	1e58      	subs	r0, r3, #1
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6859      	ldr	r1, [r3, #4]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	440b      	add	r3, r1
 8004ec6:	0099      	lsls	r1, r3, #2
 8004ec8:	440b      	add	r3, r1
 8004eca:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ece:	3301      	adds	r3, #1
 8004ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ed4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ed8:	6879      	ldr	r1, [r7, #4]
 8004eda:	6809      	ldr	r1, [r1, #0]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	69da      	ldr	r2, [r3, #28]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004f06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	6911      	ldr	r1, [r2, #16]
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	68d2      	ldr	r2, [r2, #12]
 8004f12:	4311      	orrs	r1, r2
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	6812      	ldr	r2, [r2, #0]
 8004f18:	430b      	orrs	r3, r1
 8004f1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	695a      	ldr	r2, [r3, #20]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	431a      	orrs	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	430a      	orrs	r2, r1
 8004f36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f042 0201 	orr.w	r2, r2, #1
 8004f46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2220      	movs	r2, #32
 8004f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	000186a0 	.word	0x000186a0
 8004f74:	001e847f 	.word	0x001e847f
 8004f78:	003d08ff 	.word	0x003d08ff
 8004f7c:	431bde83 	.word	0x431bde83
 8004f80:	10624dd3 	.word	0x10624dd3

08004f84 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b088      	sub	sp, #32
 8004f88:	af02      	add	r7, sp, #8
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	607a      	str	r2, [r7, #4]
 8004f8e:	461a      	mov	r2, r3
 8004f90:	460b      	mov	r3, r1
 8004f92:	817b      	strh	r3, [r7, #10]
 8004f94:	4613      	mov	r3, r2
 8004f96:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f98:	f7fe fd8e 	bl	8003ab8 <HAL_GetTick>
 8004f9c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b20      	cmp	r3, #32
 8004fa8:	f040 80e0 	bne.w	800516c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	9300      	str	r3, [sp, #0]
 8004fb0:	2319      	movs	r3, #25
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	4970      	ldr	r1, [pc, #448]	; (8005178 <HAL_I2C_Master_Transmit+0x1f4>)
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f002 fa86 	bl	80074c8 <I2C_WaitOnFlagUntilTimeout>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d001      	beq.n	8004fc6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	e0d3      	b.n	800516e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d101      	bne.n	8004fd4 <HAL_I2C_Master_Transmit+0x50>
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	e0cc      	b.n	800516e <HAL_I2C_Master_Transmit+0x1ea>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d007      	beq.n	8004ffa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f042 0201 	orr.w	r2, r2, #1
 8004ff8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005008:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2221      	movs	r2, #33	; 0x21
 800500e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2210      	movs	r2, #16
 8005016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	893a      	ldrh	r2, [r7, #8]
 800502a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005030:	b29a      	uxth	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	4a50      	ldr	r2, [pc, #320]	; (800517c <HAL_I2C_Master_Transmit+0x1f8>)
 800503a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800503c:	8979      	ldrh	r1, [r7, #10]
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	6a3a      	ldr	r2, [r7, #32]
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f001 ff98 	bl	8006f78 <I2C_MasterRequestWrite>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e08d      	b.n	800516e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005052:	2300      	movs	r3, #0
 8005054:	613b      	str	r3, [r7, #16]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	613b      	str	r3, [r7, #16]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	613b      	str	r3, [r7, #16]
 8005066:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005068:	e066      	b.n	8005138 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	6a39      	ldr	r1, [r7, #32]
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	f002 fb00 	bl	8007674 <I2C_WaitOnTXEFlagUntilTimeout>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00d      	beq.n	8005096 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507e:	2b04      	cmp	r3, #4
 8005080:	d107      	bne.n	8005092 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005090:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e06b      	b.n	800516e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509a:	781a      	ldrb	r2, [r3, #0]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a6:	1c5a      	adds	r2, r3, #1
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	3b01      	subs	r3, #1
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050be:	3b01      	subs	r3, #1
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	f003 0304 	and.w	r3, r3, #4
 80050d0:	2b04      	cmp	r3, #4
 80050d2:	d11b      	bne.n	800510c <HAL_I2C_Master_Transmit+0x188>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d017      	beq.n	800510c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e0:	781a      	ldrb	r2, [r3, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ec:	1c5a      	adds	r2, r3, #1
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	3b01      	subs	r3, #1
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005104:	3b01      	subs	r3, #1
 8005106:	b29a      	uxth	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	6a39      	ldr	r1, [r7, #32]
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f002 faf0 	bl	80076f6 <I2C_WaitOnBTFFlagUntilTimeout>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00d      	beq.n	8005138 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005120:	2b04      	cmp	r3, #4
 8005122:	d107      	bne.n	8005134 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005132:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e01a      	b.n	800516e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800513c:	2b00      	cmp	r3, #0
 800513e:	d194      	bne.n	800506a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800514e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2220      	movs	r2, #32
 8005154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005168:	2300      	movs	r3, #0
 800516a:	e000      	b.n	800516e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800516c:	2302      	movs	r3, #2
  }
}
 800516e:	4618      	mov	r0, r3
 8005170:	3718      	adds	r7, #24
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	00100002 	.word	0x00100002
 800517c:	ffff0000 	.word	0xffff0000

08005180 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b088      	sub	sp, #32
 8005184:	af02      	add	r7, sp, #8
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	4608      	mov	r0, r1
 800518a:	4611      	mov	r1, r2
 800518c:	461a      	mov	r2, r3
 800518e:	4603      	mov	r3, r0
 8005190:	817b      	strh	r3, [r7, #10]
 8005192:	460b      	mov	r3, r1
 8005194:	813b      	strh	r3, [r7, #8]
 8005196:	4613      	mov	r3, r2
 8005198:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800519a:	f7fe fc8d 	bl	8003ab8 <HAL_GetTick>
 800519e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b20      	cmp	r3, #32
 80051aa:	f040 80d9 	bne.w	8005360 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	9300      	str	r3, [sp, #0]
 80051b2:	2319      	movs	r3, #25
 80051b4:	2201      	movs	r2, #1
 80051b6:	496d      	ldr	r1, [pc, #436]	; (800536c <HAL_I2C_Mem_Write+0x1ec>)
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f002 f985 	bl	80074c8 <I2C_WaitOnFlagUntilTimeout>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d001      	beq.n	80051c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80051c4:	2302      	movs	r3, #2
 80051c6:	e0cc      	b.n	8005362 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d101      	bne.n	80051d6 <HAL_I2C_Mem_Write+0x56>
 80051d2:	2302      	movs	r3, #2
 80051d4:	e0c5      	b.n	8005362 <HAL_I2C_Mem_Write+0x1e2>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0301 	and.w	r3, r3, #1
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d007      	beq.n	80051fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f042 0201 	orr.w	r2, r2, #1
 80051fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800520a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2221      	movs	r2, #33	; 0x21
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2240      	movs	r2, #64	; 0x40
 8005218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6a3a      	ldr	r2, [r7, #32]
 8005226:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800522c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005232:	b29a      	uxth	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	4a4d      	ldr	r2, [pc, #308]	; (8005370 <HAL_I2C_Mem_Write+0x1f0>)
 800523c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800523e:	88f8      	ldrh	r0, [r7, #6]
 8005240:	893a      	ldrh	r2, [r7, #8]
 8005242:	8979      	ldrh	r1, [r7, #10]
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	9301      	str	r3, [sp, #4]
 8005248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	4603      	mov	r3, r0
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f001 ff14 	bl	800707c <I2C_RequestMemoryWrite>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d052      	beq.n	8005300 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e081      	b.n	8005362 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f002 fa06 	bl	8007674 <I2C_WaitOnTXEFlagUntilTimeout>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00d      	beq.n	800528a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005272:	2b04      	cmp	r3, #4
 8005274:	d107      	bne.n	8005286 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005284:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e06b      	b.n	8005362 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	781a      	ldrb	r2, [r3, #0]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529a:	1c5a      	adds	r2, r3, #1
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a4:	3b01      	subs	r3, #1
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	3b01      	subs	r3, #1
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	695b      	ldr	r3, [r3, #20]
 80052c0:	f003 0304 	and.w	r3, r3, #4
 80052c4:	2b04      	cmp	r3, #4
 80052c6:	d11b      	bne.n	8005300 <HAL_I2C_Mem_Write+0x180>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d017      	beq.n	8005300 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d4:	781a      	ldrb	r2, [r3, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e0:	1c5a      	adds	r2, r3, #1
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ea:	3b01      	subs	r3, #1
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	3b01      	subs	r3, #1
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1aa      	bne.n	800525e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f002 f9f2 	bl	80076f6 <I2C_WaitOnBTFFlagUntilTimeout>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00d      	beq.n	8005334 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531c:	2b04      	cmp	r3, #4
 800531e:	d107      	bne.n	8005330 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800532e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e016      	b.n	8005362 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005342:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2220      	movs	r2, #32
 8005348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800535c:	2300      	movs	r3, #0
 800535e:	e000      	b.n	8005362 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005360:	2302      	movs	r3, #2
  }
}
 8005362:	4618      	mov	r0, r3
 8005364:	3718      	adds	r7, #24
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	00100002 	.word	0x00100002
 8005370:	ffff0000 	.word	0xffff0000

08005374 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b08c      	sub	sp, #48	; 0x30
 8005378:	af02      	add	r7, sp, #8
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	4608      	mov	r0, r1
 800537e:	4611      	mov	r1, r2
 8005380:	461a      	mov	r2, r3
 8005382:	4603      	mov	r3, r0
 8005384:	817b      	strh	r3, [r7, #10]
 8005386:	460b      	mov	r3, r1
 8005388:	813b      	strh	r3, [r7, #8]
 800538a:	4613      	mov	r3, r2
 800538c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800538e:	f7fe fb93 	bl	8003ab8 <HAL_GetTick>
 8005392:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800539a:	b2db      	uxtb	r3, r3
 800539c:	2b20      	cmp	r3, #32
 800539e:	f040 8208 	bne.w	80057b2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	2319      	movs	r3, #25
 80053a8:	2201      	movs	r2, #1
 80053aa:	497b      	ldr	r1, [pc, #492]	; (8005598 <HAL_I2C_Mem_Read+0x224>)
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f002 f88b 	bl	80074c8 <I2C_WaitOnFlagUntilTimeout>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d001      	beq.n	80053bc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80053b8:	2302      	movs	r3, #2
 80053ba:	e1fb      	b.n	80057b4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d101      	bne.n	80053ca <HAL_I2C_Mem_Read+0x56>
 80053c6:	2302      	movs	r3, #2
 80053c8:	e1f4      	b.n	80057b4 <HAL_I2C_Mem_Read+0x440>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0301 	and.w	r3, r3, #1
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d007      	beq.n	80053f0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f042 0201 	orr.w	r2, r2, #1
 80053ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2222      	movs	r2, #34	; 0x22
 8005404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2240      	movs	r2, #64	; 0x40
 800540c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800541a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005420:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005426:	b29a      	uxth	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	4a5b      	ldr	r2, [pc, #364]	; (800559c <HAL_I2C_Mem_Read+0x228>)
 8005430:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005432:	88f8      	ldrh	r0, [r7, #6]
 8005434:	893a      	ldrh	r2, [r7, #8]
 8005436:	8979      	ldrh	r1, [r7, #10]
 8005438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543a:	9301      	str	r3, [sp, #4]
 800543c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543e:	9300      	str	r3, [sp, #0]
 8005440:	4603      	mov	r3, r0
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f001 feb0 	bl	80071a8 <I2C_RequestMemoryRead>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d001      	beq.n	8005452 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e1b0      	b.n	80057b4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005456:	2b00      	cmp	r3, #0
 8005458:	d113      	bne.n	8005482 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800545a:	2300      	movs	r3, #0
 800545c:	623b      	str	r3, [r7, #32]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	623b      	str	r3, [r7, #32]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	623b      	str	r3, [r7, #32]
 800546e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800547e:	601a      	str	r2, [r3, #0]
 8005480:	e184      	b.n	800578c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005486:	2b01      	cmp	r3, #1
 8005488:	d11b      	bne.n	80054c2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005498:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800549a:	2300      	movs	r3, #0
 800549c:	61fb      	str	r3, [r7, #28]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	695b      	ldr	r3, [r3, #20]
 80054a4:	61fb      	str	r3, [r7, #28]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	61fb      	str	r3, [r7, #28]
 80054ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054be:	601a      	str	r2, [r3, #0]
 80054c0:	e164      	b.n	800578c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d11b      	bne.n	8005502 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054d8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054ea:	2300      	movs	r3, #0
 80054ec:	61bb      	str	r3, [r7, #24]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	61bb      	str	r3, [r7, #24]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	61bb      	str	r3, [r7, #24]
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	e144      	b.n	800578c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005502:	2300      	movs	r3, #0
 8005504:	617b      	str	r3, [r7, #20]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	695b      	ldr	r3, [r3, #20]
 800550c:	617b      	str	r3, [r7, #20]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	617b      	str	r3, [r7, #20]
 8005516:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005518:	e138      	b.n	800578c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800551e:	2b03      	cmp	r3, #3
 8005520:	f200 80f1 	bhi.w	8005706 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005528:	2b01      	cmp	r3, #1
 800552a:	d123      	bne.n	8005574 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800552c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800552e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f002 f953 	bl	80077dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d001      	beq.n	8005540 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e139      	b.n	80057b4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	691a      	ldr	r2, [r3, #16]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554a:	b2d2      	uxtb	r2, r2
 800554c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005552:	1c5a      	adds	r2, r3, #1
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800555c:	3b01      	subs	r3, #1
 800555e:	b29a      	uxth	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005568:	b29b      	uxth	r3, r3
 800556a:	3b01      	subs	r3, #1
 800556c:	b29a      	uxth	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005572:	e10b      	b.n	800578c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005578:	2b02      	cmp	r3, #2
 800557a:	d14e      	bne.n	800561a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800557c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557e:	9300      	str	r3, [sp, #0]
 8005580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005582:	2200      	movs	r2, #0
 8005584:	4906      	ldr	r1, [pc, #24]	; (80055a0 <HAL_I2C_Mem_Read+0x22c>)
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f001 ff9e 	bl	80074c8 <I2C_WaitOnFlagUntilTimeout>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d008      	beq.n	80055a4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e10e      	b.n	80057b4 <HAL_I2C_Mem_Read+0x440>
 8005596:	bf00      	nop
 8005598:	00100002 	.word	0x00100002
 800559c:	ffff0000 	.word	0xffff0000
 80055a0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	691a      	ldr	r2, [r3, #16]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055be:	b2d2      	uxtb	r2, r2
 80055c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c6:	1c5a      	adds	r2, r3, #1
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055d0:	3b01      	subs	r3, #1
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055dc:	b29b      	uxth	r3, r3
 80055de:	3b01      	subs	r3, #1
 80055e0:	b29a      	uxth	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	691a      	ldr	r2, [r3, #16]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f0:	b2d2      	uxtb	r2, r2
 80055f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f8:	1c5a      	adds	r2, r3, #1
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005602:	3b01      	subs	r3, #1
 8005604:	b29a      	uxth	r2, r3
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800560e:	b29b      	uxth	r3, r3
 8005610:	3b01      	subs	r3, #1
 8005612:	b29a      	uxth	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005618:	e0b8      	b.n	800578c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800561a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561c:	9300      	str	r3, [sp, #0]
 800561e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005620:	2200      	movs	r2, #0
 8005622:	4966      	ldr	r1, [pc, #408]	; (80057bc <HAL_I2C_Mem_Read+0x448>)
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f001 ff4f 	bl	80074c8 <I2C_WaitOnFlagUntilTimeout>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d001      	beq.n	8005634 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e0bf      	b.n	80057b4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005642:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	691a      	ldr	r2, [r3, #16]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564e:	b2d2      	uxtb	r2, r2
 8005650:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005656:	1c5a      	adds	r2, r3, #1
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005660:	3b01      	subs	r3, #1
 8005662:	b29a      	uxth	r2, r3
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800566c:	b29b      	uxth	r3, r3
 800566e:	3b01      	subs	r3, #1
 8005670:	b29a      	uxth	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567c:	2200      	movs	r2, #0
 800567e:	494f      	ldr	r1, [pc, #316]	; (80057bc <HAL_I2C_Mem_Read+0x448>)
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f001 ff21 	bl	80074c8 <I2C_WaitOnFlagUntilTimeout>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d001      	beq.n	8005690 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e091      	b.n	80057b4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800569e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	691a      	ldr	r2, [r3, #16]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056aa:	b2d2      	uxtb	r2, r2
 80056ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b2:	1c5a      	adds	r2, r3, #1
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056bc:	3b01      	subs	r3, #1
 80056be:	b29a      	uxth	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	3b01      	subs	r3, #1
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	691a      	ldr	r2, [r3, #16]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056dc:	b2d2      	uxtb	r2, r2
 80056de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e4:	1c5a      	adds	r2, r3, #1
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ee:	3b01      	subs	r3, #1
 80056f0:	b29a      	uxth	r2, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	3b01      	subs	r3, #1
 80056fe:	b29a      	uxth	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005704:	e042      	b.n	800578c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005708:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f002 f866 	bl	80077dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d001      	beq.n	800571a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e04c      	b.n	80057b4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	691a      	ldr	r2, [r3, #16]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005724:	b2d2      	uxtb	r2, r2
 8005726:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572c:	1c5a      	adds	r2, r3, #1
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005736:	3b01      	subs	r3, #1
 8005738:	b29a      	uxth	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005742:	b29b      	uxth	r3, r3
 8005744:	3b01      	subs	r3, #1
 8005746:	b29a      	uxth	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	f003 0304 	and.w	r3, r3, #4
 8005756:	2b04      	cmp	r3, #4
 8005758:	d118      	bne.n	800578c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	691a      	ldr	r2, [r3, #16]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005764:	b2d2      	uxtb	r2, r2
 8005766:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576c:	1c5a      	adds	r2, r3, #1
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005776:	3b01      	subs	r3, #1
 8005778:	b29a      	uxth	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005782:	b29b      	uxth	r3, r3
 8005784:	3b01      	subs	r3, #1
 8005786:	b29a      	uxth	r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005790:	2b00      	cmp	r3, #0
 8005792:	f47f aec2 	bne.w	800551a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2220      	movs	r2, #32
 800579a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80057ae:	2300      	movs	r3, #0
 80057b0:	e000      	b.n	80057b4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80057b2:	2302      	movs	r3, #2
  }
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3728      	adds	r7, #40	; 0x28
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	00010004 	.word	0x00010004

080057c0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b088      	sub	sp, #32
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80057c8:	2300      	movs	r3, #0
 80057ca:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057e0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057e8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80057ea:	7bfb      	ldrb	r3, [r7, #15]
 80057ec:	2b10      	cmp	r3, #16
 80057ee:	d003      	beq.n	80057f8 <HAL_I2C_EV_IRQHandler+0x38>
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
 80057f2:	2b40      	cmp	r3, #64	; 0x40
 80057f4:	f040 80c1 	bne.w	800597a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10d      	bne.n	800582e <HAL_I2C_EV_IRQHandler+0x6e>
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005818:	d003      	beq.n	8005822 <HAL_I2C_EV_IRQHandler+0x62>
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005820:	d101      	bne.n	8005826 <HAL_I2C_EV_IRQHandler+0x66>
 8005822:	2301      	movs	r3, #1
 8005824:	e000      	b.n	8005828 <HAL_I2C_EV_IRQHandler+0x68>
 8005826:	2300      	movs	r3, #0
 8005828:	2b01      	cmp	r3, #1
 800582a:	f000 8132 	beq.w	8005a92 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	f003 0301 	and.w	r3, r3, #1
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00c      	beq.n	8005852 <HAL_I2C_EV_IRQHandler+0x92>
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	0a5b      	lsrs	r3, r3, #9
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	2b00      	cmp	r3, #0
 8005842:	d006      	beq.n	8005852 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f002 f84e 	bl	80078e6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 fd79 	bl	8006342 <I2C_Master_SB>
 8005850:	e092      	b.n	8005978 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	08db      	lsrs	r3, r3, #3
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	2b00      	cmp	r3, #0
 800585c:	d009      	beq.n	8005872 <HAL_I2C_EV_IRQHandler+0xb2>
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	0a5b      	lsrs	r3, r3, #9
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	2b00      	cmp	r3, #0
 8005868:	d003      	beq.n	8005872 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 fdef 	bl	800644e <I2C_Master_ADD10>
 8005870:	e082      	b.n	8005978 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	085b      	lsrs	r3, r3, #1
 8005876:	f003 0301 	and.w	r3, r3, #1
 800587a:	2b00      	cmp	r3, #0
 800587c:	d009      	beq.n	8005892 <HAL_I2C_EV_IRQHandler+0xd2>
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	0a5b      	lsrs	r3, r3, #9
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	2b00      	cmp	r3, #0
 8005888:	d003      	beq.n	8005892 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 fe09 	bl	80064a2 <I2C_Master_ADDR>
 8005890:	e072      	b.n	8005978 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	089b      	lsrs	r3, r3, #2
 8005896:	f003 0301 	and.w	r3, r3, #1
 800589a:	2b00      	cmp	r3, #0
 800589c:	d03b      	beq.n	8005916 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058ac:	f000 80f3 	beq.w	8005a96 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	09db      	lsrs	r3, r3, #7
 80058b4:	f003 0301 	and.w	r3, r3, #1
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00f      	beq.n	80058dc <HAL_I2C_EV_IRQHandler+0x11c>
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	0a9b      	lsrs	r3, r3, #10
 80058c0:	f003 0301 	and.w	r3, r3, #1
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d009      	beq.n	80058dc <HAL_I2C_EV_IRQHandler+0x11c>
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	089b      	lsrs	r3, r3, #2
 80058cc:	f003 0301 	and.w	r3, r3, #1
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d103      	bne.n	80058dc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 f9e9 	bl	8005cac <I2C_MasterTransmit_TXE>
 80058da:	e04d      	b.n	8005978 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	089b      	lsrs	r3, r3, #2
 80058e0:	f003 0301 	and.w	r3, r3, #1
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f000 80d6 	beq.w	8005a96 <HAL_I2C_EV_IRQHandler+0x2d6>
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	0a5b      	lsrs	r3, r3, #9
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f000 80cf 	beq.w	8005a96 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80058f8:	7bbb      	ldrb	r3, [r7, #14]
 80058fa:	2b21      	cmp	r3, #33	; 0x21
 80058fc:	d103      	bne.n	8005906 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 fa70 	bl	8005de4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005904:	e0c7      	b.n	8005a96 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005906:	7bfb      	ldrb	r3, [r7, #15]
 8005908:	2b40      	cmp	r3, #64	; 0x40
 800590a:	f040 80c4 	bne.w	8005a96 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 fade 	bl	8005ed0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005914:	e0bf      	b.n	8005a96 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005920:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005924:	f000 80b7 	beq.w	8005a96 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	099b      	lsrs	r3, r3, #6
 800592c:	f003 0301 	and.w	r3, r3, #1
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00f      	beq.n	8005954 <HAL_I2C_EV_IRQHandler+0x194>
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	0a9b      	lsrs	r3, r3, #10
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	2b00      	cmp	r3, #0
 800593e:	d009      	beq.n	8005954 <HAL_I2C_EV_IRQHandler+0x194>
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	089b      	lsrs	r3, r3, #2
 8005944:	f003 0301 	and.w	r3, r3, #1
 8005948:	2b00      	cmp	r3, #0
 800594a:	d103      	bne.n	8005954 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 fb53 	bl	8005ff8 <I2C_MasterReceive_RXNE>
 8005952:	e011      	b.n	8005978 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	089b      	lsrs	r3, r3, #2
 8005958:	f003 0301 	and.w	r3, r3, #1
 800595c:	2b00      	cmp	r3, #0
 800595e:	f000 809a 	beq.w	8005a96 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	0a5b      	lsrs	r3, r3, #9
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	2b00      	cmp	r3, #0
 800596c:	f000 8093 	beq.w	8005a96 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 fbfc 	bl	800616e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005976:	e08e      	b.n	8005a96 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005978:	e08d      	b.n	8005a96 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597e:	2b00      	cmp	r3, #0
 8005980:	d004      	beq.n	800598c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	695b      	ldr	r3, [r3, #20]
 8005988:	61fb      	str	r3, [r7, #28]
 800598a:	e007      	b.n	800599c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	085b      	lsrs	r3, r3, #1
 80059a0:	f003 0301 	and.w	r3, r3, #1
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d012      	beq.n	80059ce <HAL_I2C_EV_IRQHandler+0x20e>
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	0a5b      	lsrs	r3, r3, #9
 80059ac:	f003 0301 	and.w	r3, r3, #1
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00c      	beq.n	80059ce <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d003      	beq.n	80059c4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80059c4:	69b9      	ldr	r1, [r7, #24]
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 ffba 	bl	8006940 <I2C_Slave_ADDR>
 80059cc:	e066      	b.n	8005a9c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	091b      	lsrs	r3, r3, #4
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d009      	beq.n	80059ee <HAL_I2C_EV_IRQHandler+0x22e>
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	0a5b      	lsrs	r3, r3, #9
 80059de:	f003 0301 	and.w	r3, r3, #1
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d003      	beq.n	80059ee <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 fff4 	bl	80069d4 <I2C_Slave_STOPF>
 80059ec:	e056      	b.n	8005a9c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80059ee:	7bbb      	ldrb	r3, [r7, #14]
 80059f0:	2b21      	cmp	r3, #33	; 0x21
 80059f2:	d002      	beq.n	80059fa <HAL_I2C_EV_IRQHandler+0x23a>
 80059f4:	7bbb      	ldrb	r3, [r7, #14]
 80059f6:	2b29      	cmp	r3, #41	; 0x29
 80059f8:	d125      	bne.n	8005a46 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	09db      	lsrs	r3, r3, #7
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00f      	beq.n	8005a26 <HAL_I2C_EV_IRQHandler+0x266>
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	0a9b      	lsrs	r3, r3, #10
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d009      	beq.n	8005a26 <HAL_I2C_EV_IRQHandler+0x266>
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	089b      	lsrs	r3, r3, #2
 8005a16:	f003 0301 	and.w	r3, r3, #1
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d103      	bne.n	8005a26 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 fed0 	bl	80067c4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005a24:	e039      	b.n	8005a9a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	089b      	lsrs	r3, r3, #2
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d033      	beq.n	8005a9a <HAL_I2C_EV_IRQHandler+0x2da>
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	0a5b      	lsrs	r3, r3, #9
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d02d      	beq.n	8005a9a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 fefd 	bl	800683e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005a44:	e029      	b.n	8005a9a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	099b      	lsrs	r3, r3, #6
 8005a4a:	f003 0301 	and.w	r3, r3, #1
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00f      	beq.n	8005a72 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	0a9b      	lsrs	r3, r3, #10
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d009      	beq.n	8005a72 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	089b      	lsrs	r3, r3, #2
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d103      	bne.n	8005a72 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 ff08 	bl	8006880 <I2C_SlaveReceive_RXNE>
 8005a70:	e014      	b.n	8005a9c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	089b      	lsrs	r3, r3, #2
 8005a76:	f003 0301 	and.w	r3, r3, #1
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00e      	beq.n	8005a9c <HAL_I2C_EV_IRQHandler+0x2dc>
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	0a5b      	lsrs	r3, r3, #9
 8005a82:	f003 0301 	and.w	r3, r3, #1
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d008      	beq.n	8005a9c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 ff36 	bl	80068fc <I2C_SlaveReceive_BTF>
 8005a90:	e004      	b.n	8005a9c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005a92:	bf00      	nop
 8005a94:	e002      	b.n	8005a9c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a96:	bf00      	nop
 8005a98:	e000      	b.n	8005a9c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005a9a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005a9c:	3720      	adds	r7, #32
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b08a      	sub	sp, #40	; 0x28
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	695b      	ldr	r3, [r3, #20]
 8005ab0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005aba:	2300      	movs	r3, #0
 8005abc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ac4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005ac6:	6a3b      	ldr	r3, [r7, #32]
 8005ac8:	0a1b      	lsrs	r3, r3, #8
 8005aca:	f003 0301 	and.w	r3, r3, #1
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00e      	beq.n	8005af0 <HAL_I2C_ER_IRQHandler+0x4e>
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	0a1b      	lsrs	r3, r3, #8
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d008      	beq.n	8005af0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae0:	f043 0301 	orr.w	r3, r3, #1
 8005ae4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005aee:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005af0:	6a3b      	ldr	r3, [r7, #32]
 8005af2:	0a5b      	lsrs	r3, r3, #9
 8005af4:	f003 0301 	and.w	r3, r3, #1
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00e      	beq.n	8005b1a <HAL_I2C_ER_IRQHandler+0x78>
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	0a1b      	lsrs	r3, r3, #8
 8005b00:	f003 0301 	and.w	r3, r3, #1
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d008      	beq.n	8005b1a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0a:	f043 0302 	orr.w	r3, r3, #2
 8005b0e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005b18:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	0a9b      	lsrs	r3, r3, #10
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d03f      	beq.n	8005ba6 <HAL_I2C_ER_IRQHandler+0x104>
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	0a1b      	lsrs	r3, r3, #8
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d039      	beq.n	8005ba6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005b32:	7efb      	ldrb	r3, [r7, #27]
 8005b34:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b44:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b4a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005b4c:	7ebb      	ldrb	r3, [r7, #26]
 8005b4e:	2b20      	cmp	r3, #32
 8005b50:	d112      	bne.n	8005b78 <HAL_I2C_ER_IRQHandler+0xd6>
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10f      	bne.n	8005b78 <HAL_I2C_ER_IRQHandler+0xd6>
 8005b58:	7cfb      	ldrb	r3, [r7, #19]
 8005b5a:	2b21      	cmp	r3, #33	; 0x21
 8005b5c:	d008      	beq.n	8005b70 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005b5e:	7cfb      	ldrb	r3, [r7, #19]
 8005b60:	2b29      	cmp	r3, #41	; 0x29
 8005b62:	d005      	beq.n	8005b70 <HAL_I2C_ER_IRQHandler+0xce>
 8005b64:	7cfb      	ldrb	r3, [r7, #19]
 8005b66:	2b28      	cmp	r3, #40	; 0x28
 8005b68:	d106      	bne.n	8005b78 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2b21      	cmp	r3, #33	; 0x21
 8005b6e:	d103      	bne.n	8005b78 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f001 f85f 	bl	8006c34 <I2C_Slave_AF>
 8005b76:	e016      	b.n	8005ba6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b80:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b84:	f043 0304 	orr.w	r3, r3, #4
 8005b88:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005b8a:	7efb      	ldrb	r3, [r7, #27]
 8005b8c:	2b10      	cmp	r3, #16
 8005b8e:	d002      	beq.n	8005b96 <HAL_I2C_ER_IRQHandler+0xf4>
 8005b90:	7efb      	ldrb	r3, [r7, #27]
 8005b92:	2b40      	cmp	r3, #64	; 0x40
 8005b94:	d107      	bne.n	8005ba6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ba4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005ba6:	6a3b      	ldr	r3, [r7, #32]
 8005ba8:	0adb      	lsrs	r3, r3, #11
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00e      	beq.n	8005bd0 <HAL_I2C_ER_IRQHandler+0x12e>
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	0a1b      	lsrs	r3, r3, #8
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d008      	beq.n	8005bd0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc0:	f043 0308 	orr.w	r3, r3, #8
 8005bc4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005bce:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d008      	beq.n	8005be8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bdc:	431a      	orrs	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f001 f896 	bl	8006d14 <I2C_ITError>
  }
}
 8005be8:	bf00      	nop
 8005bea:	3728      	adds	r7, #40	; 0x28
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005bf8:	bf00      	nop
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	460b      	mov	r3, r1
 8005c4a:	70fb      	strb	r3, [r7, #3]
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005c64:	bf00      	nop
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005c78:	bf00      	nop
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005ca0:	bf00      	nop
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cba:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cc2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d150      	bne.n	8005d74 <I2C_MasterTransmit_TXE+0xc8>
 8005cd2:	7bfb      	ldrb	r3, [r7, #15]
 8005cd4:	2b21      	cmp	r3, #33	; 0x21
 8005cd6:	d14d      	bne.n	8005d74 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	2b08      	cmp	r3, #8
 8005cdc:	d01d      	beq.n	8005d1a <I2C_MasterTransmit_TXE+0x6e>
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	2b20      	cmp	r3, #32
 8005ce2:	d01a      	beq.n	8005d1a <I2C_MasterTransmit_TXE+0x6e>
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005cea:	d016      	beq.n	8005d1a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685a      	ldr	r2, [r3, #4]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005cfa:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2211      	movs	r2, #17
 8005d00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2220      	movs	r2, #32
 8005d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f7ff ff6c 	bl	8005bf0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005d18:	e060      	b.n	8005ddc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	685a      	ldr	r2, [r3, #4]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d28:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d38:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2220      	movs	r2, #32
 8005d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b40      	cmp	r3, #64	; 0x40
 8005d52:	d107      	bne.n	8005d64 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f7ff ff87 	bl	8005c70 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005d62:	e03b      	b.n	8005ddc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f7ff ff3f 	bl	8005bf0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005d72:	e033      	b.n	8005ddc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005d74:	7bfb      	ldrb	r3, [r7, #15]
 8005d76:	2b21      	cmp	r3, #33	; 0x21
 8005d78:	d005      	beq.n	8005d86 <I2C_MasterTransmit_TXE+0xda>
 8005d7a:	7bbb      	ldrb	r3, [r7, #14]
 8005d7c:	2b40      	cmp	r3, #64	; 0x40
 8005d7e:	d12d      	bne.n	8005ddc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005d80:	7bfb      	ldrb	r3, [r7, #15]
 8005d82:	2b22      	cmp	r3, #34	; 0x22
 8005d84:	d12a      	bne.n	8005ddc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d108      	bne.n	8005da2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	685a      	ldr	r2, [r3, #4]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d9e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005da0:	e01c      	b.n	8005ddc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b40      	cmp	r3, #64	; 0x40
 8005dac:	d103      	bne.n	8005db6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f88e 	bl	8005ed0 <I2C_MemoryTransmit_TXE_BTF>
}
 8005db4:	e012      	b.n	8005ddc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dba:	781a      	ldrb	r2, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc6:	1c5a      	adds	r2, r3, #1
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005dda:	e7ff      	b.n	8005ddc <I2C_MasterTransmit_TXE+0x130>
 8005ddc:	bf00      	nop
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b21      	cmp	r3, #33	; 0x21
 8005dfc:	d164      	bne.n	8005ec8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d012      	beq.n	8005e2e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0c:	781a      	ldrb	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e18:	1c5a      	adds	r2, r3, #1
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	3b01      	subs	r3, #1
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005e2c:	e04c      	b.n	8005ec8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2b08      	cmp	r3, #8
 8005e32:	d01d      	beq.n	8005e70 <I2C_MasterTransmit_BTF+0x8c>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2b20      	cmp	r3, #32
 8005e38:	d01a      	beq.n	8005e70 <I2C_MasterTransmit_BTF+0x8c>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e40:	d016      	beq.n	8005e70 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	685a      	ldr	r2, [r3, #4]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e50:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2211      	movs	r2, #17
 8005e56:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2220      	movs	r2, #32
 8005e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f7ff fec1 	bl	8005bf0 <HAL_I2C_MasterTxCpltCallback>
}
 8005e6e:	e02b      	b.n	8005ec8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	685a      	ldr	r2, [r3, #4]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e7e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e8e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2220      	movs	r2, #32
 8005e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	2b40      	cmp	r3, #64	; 0x40
 8005ea8:	d107      	bne.n	8005eba <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f7ff fedc 	bl	8005c70 <HAL_I2C_MemTxCpltCallback>
}
 8005eb8:	e006      	b.n	8005ec8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f7ff fe94 	bl	8005bf0 <HAL_I2C_MasterTxCpltCallback>
}
 8005ec8:	bf00      	nop
 8005eca:	3710      	adds	r7, #16
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ede:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d11d      	bne.n	8005f24 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d10b      	bne.n	8005f08 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ef4:	b2da      	uxtb	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f00:	1c9a      	adds	r2, r3, #2
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005f06:	e073      	b.n	8005ff0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	121b      	asrs	r3, r3, #8
 8005f10:	b2da      	uxtb	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f1c:	1c5a      	adds	r2, r3, #1
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005f22:	e065      	b.n	8005ff0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d10b      	bne.n	8005f44 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f30:	b2da      	uxtb	r2, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f3c:	1c5a      	adds	r2, r3, #1
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005f42:	e055      	b.n	8005ff0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d151      	bne.n	8005ff0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005f4c:	7bfb      	ldrb	r3, [r7, #15]
 8005f4e:	2b22      	cmp	r3, #34	; 0x22
 8005f50:	d10d      	bne.n	8005f6e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f60:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f66:	1c5a      	adds	r2, r3, #1
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005f6c:	e040      	b.n	8005ff0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d015      	beq.n	8005fa4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005f78:	7bfb      	ldrb	r3, [r7, #15]
 8005f7a:	2b21      	cmp	r3, #33	; 0x21
 8005f7c:	d112      	bne.n	8005fa4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f82:	781a      	ldrb	r2, [r3, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8e:	1c5a      	adds	r2, r3, #1
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005fa2:	e025      	b.n	8005ff0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d120      	bne.n	8005ff0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005fae:	7bfb      	ldrb	r3, [r7, #15]
 8005fb0:	2b21      	cmp	r3, #33	; 0x21
 8005fb2:	d11d      	bne.n	8005ff0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	685a      	ldr	r2, [r3, #4]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005fc2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fd2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2220      	movs	r2, #32
 8005fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f7ff fe40 	bl	8005c70 <HAL_I2C_MemTxCpltCallback>
}
 8005ff0:	bf00      	nop
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b22      	cmp	r3, #34	; 0x22
 800600a:	f040 80ac 	bne.w	8006166 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006012:	b29b      	uxth	r3, r3
 8006014:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2b03      	cmp	r3, #3
 800601a:	d921      	bls.n	8006060 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	691a      	ldr	r2, [r3, #16]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006026:	b2d2      	uxtb	r2, r2
 8006028:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602e:	1c5a      	adds	r2, r3, #1
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006038:	b29b      	uxth	r3, r3
 800603a:	3b01      	subs	r3, #1
 800603c:	b29a      	uxth	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006046:	b29b      	uxth	r3, r3
 8006048:	2b03      	cmp	r3, #3
 800604a:	f040 808c 	bne.w	8006166 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	685a      	ldr	r2, [r3, #4]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800605c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800605e:	e082      	b.n	8006166 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006064:	2b02      	cmp	r3, #2
 8006066:	d075      	beq.n	8006154 <I2C_MasterReceive_RXNE+0x15c>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2b01      	cmp	r3, #1
 800606c:	d002      	beq.n	8006074 <I2C_MasterReceive_RXNE+0x7c>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d16f      	bne.n	8006154 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f001 fb7f 	bl	8007778 <I2C_WaitOnSTOPRequestThroughIT>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d142      	bne.n	8006106 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800608e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	685a      	ldr	r2, [r3, #4]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800609e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	691a      	ldr	r2, [r3, #16]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060aa:	b2d2      	uxtb	r2, r2
 80060ac:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b2:	1c5a      	adds	r2, r3, #1
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060bc:	b29b      	uxth	r3, r3
 80060be:	3b01      	subs	r3, #1
 80060c0:	b29a      	uxth	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2220      	movs	r2, #32
 80060ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b40      	cmp	r3, #64	; 0x40
 80060d8:	d10a      	bne.n	80060f0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f7fc fa47 	bl	800257c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80060ee:	e03a      	b.n	8006166 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2212      	movs	r2, #18
 80060fc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f7ff fd80 	bl	8005c04 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006104:	e02f      	b.n	8006166 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	685a      	ldr	r2, [r3, #4]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006114:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	691a      	ldr	r2, [r3, #16]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006120:	b2d2      	uxtb	r2, r2
 8006122:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006128:	1c5a      	adds	r2, r3, #1
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006132:	b29b      	uxth	r3, r3
 8006134:	3b01      	subs	r3, #1
 8006136:	b29a      	uxth	r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2220      	movs	r2, #32
 8006140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f7ff fd99 	bl	8005c84 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006152:	e008      	b.n	8006166 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	685a      	ldr	r2, [r3, #4]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006162:	605a      	str	r2, [r3, #4]
}
 8006164:	e7ff      	b.n	8006166 <I2C_MasterReceive_RXNE+0x16e>
 8006166:	bf00      	nop
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b084      	sub	sp, #16
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006180:	b29b      	uxth	r3, r3
 8006182:	2b04      	cmp	r3, #4
 8006184:	d11b      	bne.n	80061be <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	685a      	ldr	r2, [r3, #4]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006194:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	691a      	ldr	r2, [r3, #16]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a0:	b2d2      	uxtb	r2, r2
 80061a2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a8:	1c5a      	adds	r2, r3, #1
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	3b01      	subs	r3, #1
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80061bc:	e0bd      	b.n	800633a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	2b03      	cmp	r3, #3
 80061c6:	d129      	bne.n	800621c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	685a      	ldr	r2, [r3, #4]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061d6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2b04      	cmp	r3, #4
 80061dc:	d00a      	beq.n	80061f4 <I2C_MasterReceive_BTF+0x86>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d007      	beq.n	80061f4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061f2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	691a      	ldr	r2, [r3, #16]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fe:	b2d2      	uxtb	r2, r2
 8006200:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006206:	1c5a      	adds	r2, r3, #1
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006210:	b29b      	uxth	r3, r3
 8006212:	3b01      	subs	r3, #1
 8006214:	b29a      	uxth	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800621a:	e08e      	b.n	800633a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006220:	b29b      	uxth	r3, r3
 8006222:	2b02      	cmp	r3, #2
 8006224:	d176      	bne.n	8006314 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d002      	beq.n	8006232 <I2C_MasterReceive_BTF+0xc4>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2b10      	cmp	r3, #16
 8006230:	d108      	bne.n	8006244 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006240:	601a      	str	r2, [r3, #0]
 8006242:	e019      	b.n	8006278 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2b04      	cmp	r3, #4
 8006248:	d002      	beq.n	8006250 <I2C_MasterReceive_BTF+0xe2>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2b02      	cmp	r3, #2
 800624e:	d108      	bne.n	8006262 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800625e:	601a      	str	r2, [r3, #0]
 8006260:	e00a      	b.n	8006278 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2b10      	cmp	r3, #16
 8006266:	d007      	beq.n	8006278 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006276:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	691a      	ldr	r2, [r3, #16]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006282:	b2d2      	uxtb	r2, r2
 8006284:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628a:	1c5a      	adds	r2, r3, #1
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006294:	b29b      	uxth	r3, r3
 8006296:	3b01      	subs	r3, #1
 8006298:	b29a      	uxth	r2, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	691a      	ldr	r2, [r3, #16]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a8:	b2d2      	uxtb	r2, r2
 80062aa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b0:	1c5a      	adds	r2, r3, #1
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	3b01      	subs	r3, #1
 80062be:	b29a      	uxth	r2, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	685a      	ldr	r2, [r3, #4]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80062d2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2220      	movs	r2, #32
 80062d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b40      	cmp	r3, #64	; 0x40
 80062e6:	d10a      	bne.n	80062fe <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f7fc f940 	bl	800257c <HAL_I2C_MemRxCpltCallback>
}
 80062fc:	e01d      	b.n	800633a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2212      	movs	r2, #18
 800630a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f7ff fc79 	bl	8005c04 <HAL_I2C_MasterRxCpltCallback>
}
 8006312:	e012      	b.n	800633a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	691a      	ldr	r2, [r3, #16]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631e:	b2d2      	uxtb	r2, r2
 8006320:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006326:	1c5a      	adds	r2, r3, #1
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006330:	b29b      	uxth	r3, r3
 8006332:	3b01      	subs	r3, #1
 8006334:	b29a      	uxth	r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800633a:	bf00      	nop
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006342:	b480      	push	{r7}
 8006344:	b083      	sub	sp, #12
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006350:	b2db      	uxtb	r3, r3
 8006352:	2b40      	cmp	r3, #64	; 0x40
 8006354:	d117      	bne.n	8006386 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800635a:	2b00      	cmp	r3, #0
 800635c:	d109      	bne.n	8006372 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006362:	b2db      	uxtb	r3, r3
 8006364:	461a      	mov	r2, r3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800636e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006370:	e067      	b.n	8006442 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006376:	b2db      	uxtb	r3, r3
 8006378:	f043 0301 	orr.w	r3, r3, #1
 800637c:	b2da      	uxtb	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	611a      	str	r2, [r3, #16]
}
 8006384:	e05d      	b.n	8006442 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800638e:	d133      	bne.n	80063f8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006396:	b2db      	uxtb	r3, r3
 8006398:	2b21      	cmp	r3, #33	; 0x21
 800639a:	d109      	bne.n	80063b0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	461a      	mov	r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80063ac:	611a      	str	r2, [r3, #16]
 80063ae:	e008      	b.n	80063c2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	f043 0301 	orr.w	r3, r3, #1
 80063ba:	b2da      	uxtb	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d004      	beq.n	80063d4 <I2C_Master_SB+0x92>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d108      	bne.n	80063e6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d032      	beq.n	8006442 <I2C_Master_SB+0x100>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d02d      	beq.n	8006442 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	685a      	ldr	r2, [r3, #4]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063f4:	605a      	str	r2, [r3, #4]
}
 80063f6:	e024      	b.n	8006442 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d10e      	bne.n	800641e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006404:	b29b      	uxth	r3, r3
 8006406:	11db      	asrs	r3, r3, #7
 8006408:	b2db      	uxtb	r3, r3
 800640a:	f003 0306 	and.w	r3, r3, #6
 800640e:	b2db      	uxtb	r3, r3
 8006410:	f063 030f 	orn	r3, r3, #15
 8006414:	b2da      	uxtb	r2, r3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	611a      	str	r2, [r3, #16]
}
 800641c:	e011      	b.n	8006442 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006422:	2b01      	cmp	r3, #1
 8006424:	d10d      	bne.n	8006442 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800642a:	b29b      	uxth	r3, r3
 800642c:	11db      	asrs	r3, r3, #7
 800642e:	b2db      	uxtb	r3, r3
 8006430:	f003 0306 	and.w	r3, r3, #6
 8006434:	b2db      	uxtb	r3, r3
 8006436:	f063 030e 	orn	r3, r3, #14
 800643a:	b2da      	uxtb	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	611a      	str	r2, [r3, #16]
}
 8006442:	bf00      	nop
 8006444:	370c      	adds	r7, #12
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr

0800644e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800644e:	b480      	push	{r7}
 8006450:	b083      	sub	sp, #12
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800645a:	b2da      	uxtb	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006466:	2b00      	cmp	r3, #0
 8006468:	d004      	beq.n	8006474 <I2C_Master_ADD10+0x26>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800646e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006470:	2b00      	cmp	r3, #0
 8006472:	d108      	bne.n	8006486 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00c      	beq.n	8006496 <I2C_Master_ADD10+0x48>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006482:	2b00      	cmp	r3, #0
 8006484:	d007      	beq.n	8006496 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006494:	605a      	str	r2, [r3, #4]
  }
}
 8006496:	bf00      	nop
 8006498:	370c      	adds	r7, #12
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr

080064a2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80064a2:	b480      	push	{r7}
 80064a4:	b091      	sub	sp, #68	; 0x44
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064be:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	2b22      	cmp	r3, #34	; 0x22
 80064ca:	f040 8169 	bne.w	80067a0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10f      	bne.n	80064f6 <I2C_Master_ADDR+0x54>
 80064d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80064da:	2b40      	cmp	r3, #64	; 0x40
 80064dc:	d10b      	bne.n	80064f6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064de:	2300      	movs	r3, #0
 80064e0:	633b      	str	r3, [r7, #48]	; 0x30
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	695b      	ldr	r3, [r3, #20]
 80064e8:	633b      	str	r3, [r7, #48]	; 0x30
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	633b      	str	r3, [r7, #48]	; 0x30
 80064f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f4:	e160      	b.n	80067b8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d11d      	bne.n	800653a <I2C_Master_ADDR+0x98>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006506:	d118      	bne.n	800653a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006508:	2300      	movs	r3, #0
 800650a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800651c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800652c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006532:	1c5a      	adds	r2, r3, #1
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	651a      	str	r2, [r3, #80]	; 0x50
 8006538:	e13e      	b.n	80067b8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800653e:	b29b      	uxth	r3, r3
 8006540:	2b00      	cmp	r3, #0
 8006542:	d113      	bne.n	800656c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006544:	2300      	movs	r3, #0
 8006546:	62bb      	str	r3, [r7, #40]	; 0x28
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	695b      	ldr	r3, [r3, #20]
 800654e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	62bb      	str	r3, [r7, #40]	; 0x28
 8006558:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006568:	601a      	str	r2, [r3, #0]
 800656a:	e115      	b.n	8006798 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006570:	b29b      	uxth	r3, r3
 8006572:	2b01      	cmp	r3, #1
 8006574:	f040 808a 	bne.w	800668c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800657a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800657e:	d137      	bne.n	80065f0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800658e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800659a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800659e:	d113      	bne.n	80065c8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065ae:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065b0:	2300      	movs	r3, #0
 80065b2:	627b      	str	r3, [r7, #36]	; 0x24
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	695b      	ldr	r3, [r3, #20]
 80065ba:	627b      	str	r3, [r7, #36]	; 0x24
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	627b      	str	r3, [r7, #36]	; 0x24
 80065c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c6:	e0e7      	b.n	8006798 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065c8:	2300      	movs	r3, #0
 80065ca:	623b      	str	r3, [r7, #32]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	623b      	str	r3, [r7, #32]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	623b      	str	r3, [r7, #32]
 80065dc:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065ec:	601a      	str	r2, [r3, #0]
 80065ee:	e0d3      	b.n	8006798 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80065f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f2:	2b08      	cmp	r3, #8
 80065f4:	d02e      	beq.n	8006654 <I2C_Master_ADDR+0x1b2>
 80065f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f8:	2b20      	cmp	r3, #32
 80065fa:	d02b      	beq.n	8006654 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80065fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065fe:	2b12      	cmp	r3, #18
 8006600:	d102      	bne.n	8006608 <I2C_Master_ADDR+0x166>
 8006602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006604:	2b01      	cmp	r3, #1
 8006606:	d125      	bne.n	8006654 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660a:	2b04      	cmp	r3, #4
 800660c:	d00e      	beq.n	800662c <I2C_Master_ADDR+0x18a>
 800660e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006610:	2b02      	cmp	r3, #2
 8006612:	d00b      	beq.n	800662c <I2C_Master_ADDR+0x18a>
 8006614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006616:	2b10      	cmp	r3, #16
 8006618:	d008      	beq.n	800662c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006628:	601a      	str	r2, [r3, #0]
 800662a:	e007      	b.n	800663c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800663a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800663c:	2300      	movs	r3, #0
 800663e:	61fb      	str	r3, [r7, #28]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	61fb      	str	r3, [r7, #28]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	61fb      	str	r3, [r7, #28]
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	e0a1      	b.n	8006798 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006662:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006664:	2300      	movs	r3, #0
 8006666:	61bb      	str	r3, [r7, #24]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	695b      	ldr	r3, [r3, #20]
 800666e:	61bb      	str	r3, [r7, #24]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	699b      	ldr	r3, [r3, #24]
 8006676:	61bb      	str	r3, [r7, #24]
 8006678:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006688:	601a      	str	r2, [r3, #0]
 800668a:	e085      	b.n	8006798 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006690:	b29b      	uxth	r3, r3
 8006692:	2b02      	cmp	r3, #2
 8006694:	d14d      	bne.n	8006732 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006698:	2b04      	cmp	r3, #4
 800669a:	d016      	beq.n	80066ca <I2C_Master_ADDR+0x228>
 800669c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669e:	2b02      	cmp	r3, #2
 80066a0:	d013      	beq.n	80066ca <I2C_Master_ADDR+0x228>
 80066a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a4:	2b10      	cmp	r3, #16
 80066a6:	d010      	beq.n	80066ca <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066b6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066c6:	601a      	str	r2, [r3, #0]
 80066c8:	e007      	b.n	80066da <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80066d8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066e8:	d117      	bne.n	800671a <I2C_Master_ADDR+0x278>
 80066ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80066f0:	d00b      	beq.n	800670a <I2C_Master_ADDR+0x268>
 80066f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d008      	beq.n	800670a <I2C_Master_ADDR+0x268>
 80066f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fa:	2b08      	cmp	r3, #8
 80066fc:	d005      	beq.n	800670a <I2C_Master_ADDR+0x268>
 80066fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006700:	2b10      	cmp	r3, #16
 8006702:	d002      	beq.n	800670a <I2C_Master_ADDR+0x268>
 8006704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006706:	2b20      	cmp	r3, #32
 8006708:	d107      	bne.n	800671a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	685a      	ldr	r2, [r3, #4]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006718:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800671a:	2300      	movs	r3, #0
 800671c:	617b      	str	r3, [r7, #20]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	695b      	ldr	r3, [r3, #20]
 8006724:	617b      	str	r3, [r7, #20]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	699b      	ldr	r3, [r3, #24]
 800672c:	617b      	str	r3, [r7, #20]
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	e032      	b.n	8006798 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006740:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800674c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006750:	d117      	bne.n	8006782 <I2C_Master_ADDR+0x2e0>
 8006752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006754:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006758:	d00b      	beq.n	8006772 <I2C_Master_ADDR+0x2d0>
 800675a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675c:	2b01      	cmp	r3, #1
 800675e:	d008      	beq.n	8006772 <I2C_Master_ADDR+0x2d0>
 8006760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006762:	2b08      	cmp	r3, #8
 8006764:	d005      	beq.n	8006772 <I2C_Master_ADDR+0x2d0>
 8006766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006768:	2b10      	cmp	r3, #16
 800676a:	d002      	beq.n	8006772 <I2C_Master_ADDR+0x2d0>
 800676c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676e:	2b20      	cmp	r3, #32
 8006770:	d107      	bne.n	8006782 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	685a      	ldr	r2, [r3, #4]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006780:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006782:	2300      	movs	r3, #0
 8006784:	613b      	str	r3, [r7, #16]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	695b      	ldr	r3, [r3, #20]
 800678c:	613b      	str	r3, [r7, #16]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	699b      	ldr	r3, [r3, #24]
 8006794:	613b      	str	r3, [r7, #16]
 8006796:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800679e:	e00b      	b.n	80067b8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067a0:	2300      	movs	r3, #0
 80067a2:	60fb      	str	r3, [r7, #12]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	60fb      	str	r3, [r7, #12]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	699b      	ldr	r3, [r3, #24]
 80067b2:	60fb      	str	r3, [r7, #12]
 80067b4:	68fb      	ldr	r3, [r7, #12]
}
 80067b6:	e7ff      	b.n	80067b8 <I2C_Master_ADDR+0x316>
 80067b8:	bf00      	nop
 80067ba:	3744      	adds	r7, #68	; 0x44
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067d2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067d8:	b29b      	uxth	r3, r3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d02b      	beq.n	8006836 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e2:	781a      	ldrb	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ee:	1c5a      	adds	r2, r3, #1
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	3b01      	subs	r3, #1
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006806:	b29b      	uxth	r3, r3
 8006808:	2b00      	cmp	r3, #0
 800680a:	d114      	bne.n	8006836 <I2C_SlaveTransmit_TXE+0x72>
 800680c:	7bfb      	ldrb	r3, [r7, #15]
 800680e:	2b29      	cmp	r3, #41	; 0x29
 8006810:	d111      	bne.n	8006836 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	685a      	ldr	r2, [r3, #4]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006820:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2221      	movs	r2, #33	; 0x21
 8006826:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2228      	movs	r2, #40	; 0x28
 800682c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f7ff f9f1 	bl	8005c18 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006836:	bf00      	nop
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800683e:	b480      	push	{r7}
 8006840:	b083      	sub	sp, #12
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800684a:	b29b      	uxth	r3, r3
 800684c:	2b00      	cmp	r3, #0
 800684e:	d011      	beq.n	8006874 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006854:	781a      	ldrb	r2, [r3, #0]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006860:	1c5a      	adds	r2, r3, #1
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800686a:	b29b      	uxth	r3, r3
 800686c:	3b01      	subs	r3, #1
 800686e:	b29a      	uxth	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006874:	bf00      	nop
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800688e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006894:	b29b      	uxth	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d02c      	beq.n	80068f4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	691a      	ldr	r2, [r3, #16]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a4:	b2d2      	uxtb	r2, r2
 80068a6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ac:	1c5a      	adds	r2, r3, #1
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	3b01      	subs	r3, #1
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d114      	bne.n	80068f4 <I2C_SlaveReceive_RXNE+0x74>
 80068ca:	7bfb      	ldrb	r3, [r7, #15]
 80068cc:	2b2a      	cmp	r3, #42	; 0x2a
 80068ce:	d111      	bne.n	80068f4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	685a      	ldr	r2, [r3, #4]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068de:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2222      	movs	r2, #34	; 0x22
 80068e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2228      	movs	r2, #40	; 0x28
 80068ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f7ff f99c 	bl	8005c2c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80068f4:	bf00      	nop
 80068f6:	3710      	adds	r7, #16
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006908:	b29b      	uxth	r3, r3
 800690a:	2b00      	cmp	r3, #0
 800690c:	d012      	beq.n	8006934 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	691a      	ldr	r2, [r3, #16]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006918:	b2d2      	uxtb	r2, r2
 800691a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006920:	1c5a      	adds	r2, r3, #1
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800692a:	b29b      	uxth	r3, r3
 800692c:	3b01      	subs	r3, #1
 800692e:	b29a      	uxth	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006934:	bf00      	nop
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800694a:	2300      	movs	r3, #0
 800694c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006954:	b2db      	uxtb	r3, r3
 8006956:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800695a:	2b28      	cmp	r3, #40	; 0x28
 800695c:	d127      	bne.n	80069ae <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	685a      	ldr	r2, [r3, #4]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800696c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	089b      	lsrs	r3, r3, #2
 8006972:	f003 0301 	and.w	r3, r3, #1
 8006976:	2b00      	cmp	r3, #0
 8006978:	d101      	bne.n	800697e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800697a:	2301      	movs	r3, #1
 800697c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	09db      	lsrs	r3, r3, #7
 8006982:	f003 0301 	and.w	r3, r3, #1
 8006986:	2b00      	cmp	r3, #0
 8006988:	d103      	bne.n	8006992 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	81bb      	strh	r3, [r7, #12]
 8006990:	e002      	b.n	8006998 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80069a0:	89ba      	ldrh	r2, [r7, #12]
 80069a2:	7bfb      	ldrb	r3, [r7, #15]
 80069a4:	4619      	mov	r1, r3
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f7ff f94a 	bl	8005c40 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80069ac:	e00e      	b.n	80069cc <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069ae:	2300      	movs	r3, #0
 80069b0:	60bb      	str	r3, [r7, #8]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	695b      	ldr	r3, [r3, #20]
 80069b8:	60bb      	str	r3, [r7, #8]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	699b      	ldr	r3, [r3, #24]
 80069c0:	60bb      	str	r3, [r7, #8]
 80069c2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80069cc:	bf00      	nop
 80069ce:	3710      	adds	r7, #16
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069e2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	685a      	ldr	r2, [r3, #4]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80069f2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80069f4:	2300      	movs	r3, #0
 80069f6:	60bb      	str	r3, [r7, #8]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	695b      	ldr	r3, [r3, #20]
 80069fe:	60bb      	str	r3, [r7, #8]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f042 0201 	orr.w	r2, r2, #1
 8006a0e:	601a      	str	r2, [r3, #0]
 8006a10:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a20:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a30:	d172      	bne.n	8006b18 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006a32:	7bfb      	ldrb	r3, [r7, #15]
 8006a34:	2b22      	cmp	r3, #34	; 0x22
 8006a36:	d002      	beq.n	8006a3e <I2C_Slave_STOPF+0x6a>
 8006a38:	7bfb      	ldrb	r3, [r7, #15]
 8006a3a:	2b2a      	cmp	r3, #42	; 0x2a
 8006a3c:	d135      	bne.n	8006aaa <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d005      	beq.n	8006a62 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5a:	f043 0204 	orr.w	r2, r3, #4
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	685a      	ldr	r2, [r3, #4]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a70:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a76:	4618      	mov	r0, r3
 8006a78:	f7fd fc53 	bl	8004322 <HAL_DMA_GetState>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d049      	beq.n	8006b16 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a86:	4a69      	ldr	r2, [pc, #420]	; (8006c2c <I2C_Slave_STOPF+0x258>)
 8006a88:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f7fd fc25 	bl	80042de <HAL_DMA_Abort_IT>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d03d      	beq.n	8006b16 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006aa4:	4610      	mov	r0, r2
 8006aa6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006aa8:	e035      	b.n	8006b16 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	b29a      	uxth	r2, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d005      	beq.n	8006ace <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac6:	f043 0204 	orr.w	r2, r3, #4
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	685a      	ldr	r2, [r3, #4]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006adc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7fd fc1d 	bl	8004322 <HAL_DMA_GetState>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d014      	beq.n	8006b18 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006af2:	4a4e      	ldr	r2, [pc, #312]	; (8006c2c <I2C_Slave_STOPF+0x258>)
 8006af4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7fd fbef 	bl	80042de <HAL_DMA_Abort_IT>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d008      	beq.n	8006b18 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006b10:	4610      	mov	r0, r2
 8006b12:	4798      	blx	r3
 8006b14:	e000      	b.n	8006b18 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006b16:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d03e      	beq.n	8006ba0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	695b      	ldr	r3, [r3, #20]
 8006b28:	f003 0304 	and.w	r3, r3, #4
 8006b2c:	2b04      	cmp	r3, #4
 8006b2e:	d112      	bne.n	8006b56 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	691a      	ldr	r2, [r3, #16]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3a:	b2d2      	uxtb	r2, r2
 8006b3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b42:	1c5a      	adds	r2, r3, #1
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	b29a      	uxth	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	695b      	ldr	r3, [r3, #20]
 8006b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b60:	2b40      	cmp	r3, #64	; 0x40
 8006b62:	d112      	bne.n	8006b8a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	691a      	ldr	r2, [r3, #16]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6e:	b2d2      	uxtb	r2, r2
 8006b70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b76:	1c5a      	adds	r2, r3, #1
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	3b01      	subs	r3, #1
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d005      	beq.n	8006ba0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b98:	f043 0204 	orr.w	r2, r3, #4
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d003      	beq.n	8006bb0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 f8b3 	bl	8006d14 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006bae:	e039      	b.n	8006c24 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006bb0:	7bfb      	ldrb	r3, [r7, #15]
 8006bb2:	2b2a      	cmp	r3, #42	; 0x2a
 8006bb4:	d109      	bne.n	8006bca <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2228      	movs	r2, #40	; 0x28
 8006bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f7ff f831 	bl	8005c2c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	2b28      	cmp	r3, #40	; 0x28
 8006bd4:	d111      	bne.n	8006bfa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a15      	ldr	r2, [pc, #84]	; (8006c30 <I2C_Slave_STOPF+0x25c>)
 8006bda:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2220      	movs	r2, #32
 8006be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f7ff f832 	bl	8005c5c <HAL_I2C_ListenCpltCallback>
}
 8006bf8:	e014      	b.n	8006c24 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bfe:	2b22      	cmp	r3, #34	; 0x22
 8006c00:	d002      	beq.n	8006c08 <I2C_Slave_STOPF+0x234>
 8006c02:	7bfb      	ldrb	r3, [r7, #15]
 8006c04:	2b22      	cmp	r3, #34	; 0x22
 8006c06:	d10d      	bne.n	8006c24 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2220      	movs	r2, #32
 8006c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f7ff f804 	bl	8005c2c <HAL_I2C_SlaveRxCpltCallback>
}
 8006c24:	bf00      	nop
 8006c26:	3710      	adds	r7, #16
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	08007379 	.word	0x08007379
 8006c30:	ffff0000 	.word	0xffff0000

08006c34 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c42:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c48:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	2b08      	cmp	r3, #8
 8006c4e:	d002      	beq.n	8006c56 <I2C_Slave_AF+0x22>
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	2b20      	cmp	r3, #32
 8006c54:	d129      	bne.n	8006caa <I2C_Slave_AF+0x76>
 8006c56:	7bfb      	ldrb	r3, [r7, #15]
 8006c58:	2b28      	cmp	r3, #40	; 0x28
 8006c5a:	d126      	bne.n	8006caa <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a2c      	ldr	r2, [pc, #176]	; (8006d10 <I2C_Slave_AF+0xdc>)
 8006c60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	685a      	ldr	r2, [r3, #4]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c70:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c7a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c8a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2220      	movs	r2, #32
 8006c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f7fe ffda 	bl	8005c5c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006ca8:	e02e      	b.n	8006d08 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006caa:	7bfb      	ldrb	r3, [r7, #15]
 8006cac:	2b21      	cmp	r3, #33	; 0x21
 8006cae:	d126      	bne.n	8006cfe <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a17      	ldr	r2, [pc, #92]	; (8006d10 <I2C_Slave_AF+0xdc>)
 8006cb4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2221      	movs	r2, #33	; 0x21
 8006cba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2220      	movs	r2, #32
 8006cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	685a      	ldr	r2, [r3, #4]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006cda:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ce4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cf4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f7fe ff8e 	bl	8005c18 <HAL_I2C_SlaveTxCpltCallback>
}
 8006cfc:	e004      	b.n	8006d08 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006d06:	615a      	str	r2, [r3, #20]
}
 8006d08:	bf00      	nop
 8006d0a:	3710      	adds	r7, #16
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	ffff0000 	.word	0xffff0000

08006d14 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d22:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d2a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006d2c:	7bbb      	ldrb	r3, [r7, #14]
 8006d2e:	2b10      	cmp	r3, #16
 8006d30:	d002      	beq.n	8006d38 <I2C_ITError+0x24>
 8006d32:	7bbb      	ldrb	r3, [r7, #14]
 8006d34:	2b40      	cmp	r3, #64	; 0x40
 8006d36:	d10a      	bne.n	8006d4e <I2C_ITError+0x3a>
 8006d38:	7bfb      	ldrb	r3, [r7, #15]
 8006d3a:	2b22      	cmp	r3, #34	; 0x22
 8006d3c:	d107      	bne.n	8006d4e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d4c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006d4e:	7bfb      	ldrb	r3, [r7, #15]
 8006d50:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006d54:	2b28      	cmp	r3, #40	; 0x28
 8006d56:	d107      	bne.n	8006d68 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2228      	movs	r2, #40	; 0x28
 8006d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006d66:	e015      	b.n	8006d94 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d76:	d00a      	beq.n	8006d8e <I2C_ITError+0x7a>
 8006d78:	7bfb      	ldrb	r3, [r7, #15]
 8006d7a:	2b60      	cmp	r3, #96	; 0x60
 8006d7c:	d007      	beq.n	8006d8e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2220      	movs	r2, #32
 8006d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006da2:	d162      	bne.n	8006e6a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	685a      	ldr	r2, [r3, #4]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006db2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006db8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d020      	beq.n	8006e04 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dc6:	4a6a      	ldr	r2, [pc, #424]	; (8006f70 <I2C_ITError+0x25c>)
 8006dc8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f7fd fa85 	bl	80042de <HAL_DMA_Abort_IT>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f000 8089 	beq.w	8006eee <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f022 0201 	bic.w	r2, r2, #1
 8006dea:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2220      	movs	r2, #32
 8006df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006dfe:	4610      	mov	r0, r2
 8006e00:	4798      	blx	r3
 8006e02:	e074      	b.n	8006eee <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e08:	4a59      	ldr	r2, [pc, #356]	; (8006f70 <I2C_ITError+0x25c>)
 8006e0a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e10:	4618      	mov	r0, r3
 8006e12:	f7fd fa64 	bl	80042de <HAL_DMA_Abort_IT>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d068      	beq.n	8006eee <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e26:	2b40      	cmp	r3, #64	; 0x40
 8006e28:	d10b      	bne.n	8006e42 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	691a      	ldr	r2, [r3, #16]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e34:	b2d2      	uxtb	r2, r2
 8006e36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3c:	1c5a      	adds	r2, r3, #1
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f022 0201 	bic.w	r2, r2, #1
 8006e50:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2220      	movs	r2, #32
 8006e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006e64:	4610      	mov	r0, r2
 8006e66:	4798      	blx	r3
 8006e68:	e041      	b.n	8006eee <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	2b60      	cmp	r3, #96	; 0x60
 8006e74:	d125      	bne.n	8006ec2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2220      	movs	r2, #32
 8006e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e8e:	2b40      	cmp	r3, #64	; 0x40
 8006e90:	d10b      	bne.n	8006eaa <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	691a      	ldr	r2, [r3, #16]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9c:	b2d2      	uxtb	r2, r2
 8006e9e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea4:	1c5a      	adds	r2, r3, #1
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f022 0201 	bic.w	r2, r2, #1
 8006eb8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f7fe feec 	bl	8005c98 <HAL_I2C_AbortCpltCallback>
 8006ec0:	e015      	b.n	8006eee <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	695b      	ldr	r3, [r3, #20]
 8006ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ecc:	2b40      	cmp	r3, #64	; 0x40
 8006ece:	d10b      	bne.n	8006ee8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	691a      	ldr	r2, [r3, #16]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eda:	b2d2      	uxtb	r2, r2
 8006edc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee2:	1c5a      	adds	r2, r3, #1
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f7fe fecb 	bl	8005c84 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	f003 0301 	and.w	r3, r3, #1
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d10e      	bne.n	8006f1c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d109      	bne.n	8006f1c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d104      	bne.n	8006f1c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d007      	beq.n	8006f2c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	685a      	ldr	r2, [r3, #4]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006f2a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f32:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f38:	f003 0304 	and.w	r3, r3, #4
 8006f3c:	2b04      	cmp	r3, #4
 8006f3e:	d113      	bne.n	8006f68 <I2C_ITError+0x254>
 8006f40:	7bfb      	ldrb	r3, [r7, #15]
 8006f42:	2b28      	cmp	r3, #40	; 0x28
 8006f44:	d110      	bne.n	8006f68 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a0a      	ldr	r2, [pc, #40]	; (8006f74 <I2C_ITError+0x260>)
 8006f4a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2220      	movs	r2, #32
 8006f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f7fe fe7a 	bl	8005c5c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006f68:	bf00      	nop
 8006f6a:	3710      	adds	r7, #16
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	08007379 	.word	0x08007379
 8006f74:	ffff0000 	.word	0xffff0000

08006f78 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b088      	sub	sp, #32
 8006f7c:	af02      	add	r7, sp, #8
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	607a      	str	r2, [r7, #4]
 8006f82:	603b      	str	r3, [r7, #0]
 8006f84:	460b      	mov	r3, r1
 8006f86:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	2b08      	cmp	r3, #8
 8006f92:	d006      	beq.n	8006fa2 <I2C_MasterRequestWrite+0x2a>
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d003      	beq.n	8006fa2 <I2C_MasterRequestWrite+0x2a>
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006fa0:	d108      	bne.n	8006fb4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fb0:	601a      	str	r2, [r3, #0]
 8006fb2:	e00b      	b.n	8006fcc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb8:	2b12      	cmp	r3, #18
 8006fba:	d107      	bne.n	8006fcc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	9300      	str	r3, [sp, #0]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f000 fa75 	bl	80074c8 <I2C_WaitOnFlagUntilTimeout>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00d      	beq.n	8007000 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ff2:	d103      	bne.n	8006ffc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ffa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	e035      	b.n	800706c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007008:	d108      	bne.n	800701c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800700a:	897b      	ldrh	r3, [r7, #10]
 800700c:	b2db      	uxtb	r3, r3
 800700e:	461a      	mov	r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007018:	611a      	str	r2, [r3, #16]
 800701a:	e01b      	b.n	8007054 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800701c:	897b      	ldrh	r3, [r7, #10]
 800701e:	11db      	asrs	r3, r3, #7
 8007020:	b2db      	uxtb	r3, r3
 8007022:	f003 0306 	and.w	r3, r3, #6
 8007026:	b2db      	uxtb	r3, r3
 8007028:	f063 030f 	orn	r3, r3, #15
 800702c:	b2da      	uxtb	r2, r3
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	490e      	ldr	r1, [pc, #56]	; (8007074 <I2C_MasterRequestWrite+0xfc>)
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f000 fa9b 	bl	8007576 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d001      	beq.n	800704a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e010      	b.n	800706c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800704a:	897b      	ldrh	r3, [r7, #10]
 800704c:	b2da      	uxtb	r2, r3
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	4907      	ldr	r1, [pc, #28]	; (8007078 <I2C_MasterRequestWrite+0x100>)
 800705a:	68f8      	ldr	r0, [r7, #12]
 800705c:	f000 fa8b 	bl	8007576 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d001      	beq.n	800706a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	e000      	b.n	800706c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3718      	adds	r7, #24
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	00010008 	.word	0x00010008
 8007078:	00010002 	.word	0x00010002

0800707c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b088      	sub	sp, #32
 8007080:	af02      	add	r7, sp, #8
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	4608      	mov	r0, r1
 8007086:	4611      	mov	r1, r2
 8007088:	461a      	mov	r2, r3
 800708a:	4603      	mov	r3, r0
 800708c:	817b      	strh	r3, [r7, #10]
 800708e:	460b      	mov	r3, r1
 8007090:	813b      	strh	r3, [r7, #8]
 8007092:	4613      	mov	r3, r2
 8007094:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80070a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a8:	9300      	str	r3, [sp, #0]
 80070aa:	6a3b      	ldr	r3, [r7, #32]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f000 fa08 	bl	80074c8 <I2C_WaitOnFlagUntilTimeout>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00d      	beq.n	80070da <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070cc:	d103      	bne.n	80070d6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80070d6:	2303      	movs	r3, #3
 80070d8:	e05f      	b.n	800719a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80070da:	897b      	ldrh	r3, [r7, #10]
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	461a      	mov	r2, r3
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80070e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80070ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ec:	6a3a      	ldr	r2, [r7, #32]
 80070ee:	492d      	ldr	r1, [pc, #180]	; (80071a4 <I2C_RequestMemoryWrite+0x128>)
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	f000 fa40 	bl	8007576 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d001      	beq.n	8007100 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	e04c      	b.n	800719a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007100:	2300      	movs	r3, #0
 8007102:	617b      	str	r3, [r7, #20]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	695b      	ldr	r3, [r3, #20]
 800710a:	617b      	str	r3, [r7, #20]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	699b      	ldr	r3, [r3, #24]
 8007112:	617b      	str	r3, [r7, #20]
 8007114:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007118:	6a39      	ldr	r1, [r7, #32]
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	f000 faaa 	bl	8007674 <I2C_WaitOnTXEFlagUntilTimeout>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00d      	beq.n	8007142 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712a:	2b04      	cmp	r3, #4
 800712c:	d107      	bne.n	800713e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800713c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e02b      	b.n	800719a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007142:	88fb      	ldrh	r3, [r7, #6]
 8007144:	2b01      	cmp	r3, #1
 8007146:	d105      	bne.n	8007154 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007148:	893b      	ldrh	r3, [r7, #8]
 800714a:	b2da      	uxtb	r2, r3
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	611a      	str	r2, [r3, #16]
 8007152:	e021      	b.n	8007198 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007154:	893b      	ldrh	r3, [r7, #8]
 8007156:	0a1b      	lsrs	r3, r3, #8
 8007158:	b29b      	uxth	r3, r3
 800715a:	b2da      	uxtb	r2, r3
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007164:	6a39      	ldr	r1, [r7, #32]
 8007166:	68f8      	ldr	r0, [r7, #12]
 8007168:	f000 fa84 	bl	8007674 <I2C_WaitOnTXEFlagUntilTimeout>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00d      	beq.n	800718e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007176:	2b04      	cmp	r3, #4
 8007178:	d107      	bne.n	800718a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007188:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e005      	b.n	800719a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800718e:	893b      	ldrh	r3, [r7, #8]
 8007190:	b2da      	uxtb	r2, r3
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3718      	adds	r7, #24
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	00010002 	.word	0x00010002

080071a8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b088      	sub	sp, #32
 80071ac:	af02      	add	r7, sp, #8
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	4608      	mov	r0, r1
 80071b2:	4611      	mov	r1, r2
 80071b4:	461a      	mov	r2, r3
 80071b6:	4603      	mov	r3, r0
 80071b8:	817b      	strh	r3, [r7, #10]
 80071ba:	460b      	mov	r3, r1
 80071bc:	813b      	strh	r3, [r7, #8]
 80071be:	4613      	mov	r3, r2
 80071c0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80071d0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80071e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	6a3b      	ldr	r3, [r7, #32]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80071ee:	68f8      	ldr	r0, [r7, #12]
 80071f0:	f000 f96a 	bl	80074c8 <I2C_WaitOnFlagUntilTimeout>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00d      	beq.n	8007216 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007204:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007208:	d103      	bne.n	8007212 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007210:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	e0aa      	b.n	800736c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007216:	897b      	ldrh	r3, [r7, #10]
 8007218:	b2db      	uxtb	r3, r3
 800721a:	461a      	mov	r2, r3
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007224:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007228:	6a3a      	ldr	r2, [r7, #32]
 800722a:	4952      	ldr	r1, [pc, #328]	; (8007374 <I2C_RequestMemoryRead+0x1cc>)
 800722c:	68f8      	ldr	r0, [r7, #12]
 800722e:	f000 f9a2 	bl	8007576 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007232:	4603      	mov	r3, r0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d001      	beq.n	800723c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	e097      	b.n	800736c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800723c:	2300      	movs	r3, #0
 800723e:	617b      	str	r3, [r7, #20]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	695b      	ldr	r3, [r3, #20]
 8007246:	617b      	str	r3, [r7, #20]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	699b      	ldr	r3, [r3, #24]
 800724e:	617b      	str	r3, [r7, #20]
 8007250:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007254:	6a39      	ldr	r1, [r7, #32]
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	f000 fa0c 	bl	8007674 <I2C_WaitOnTXEFlagUntilTimeout>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00d      	beq.n	800727e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007266:	2b04      	cmp	r3, #4
 8007268:	d107      	bne.n	800727a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007278:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e076      	b.n	800736c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800727e:	88fb      	ldrh	r3, [r7, #6]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d105      	bne.n	8007290 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007284:	893b      	ldrh	r3, [r7, #8]
 8007286:	b2da      	uxtb	r2, r3
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	611a      	str	r2, [r3, #16]
 800728e:	e021      	b.n	80072d4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007290:	893b      	ldrh	r3, [r7, #8]
 8007292:	0a1b      	lsrs	r3, r3, #8
 8007294:	b29b      	uxth	r3, r3
 8007296:	b2da      	uxtb	r2, r3
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800729e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072a0:	6a39      	ldr	r1, [r7, #32]
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	f000 f9e6 	bl	8007674 <I2C_WaitOnTXEFlagUntilTimeout>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00d      	beq.n	80072ca <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b2:	2b04      	cmp	r3, #4
 80072b4:	d107      	bne.n	80072c6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e050      	b.n	800736c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80072ca:	893b      	ldrh	r3, [r7, #8]
 80072cc:	b2da      	uxtb	r2, r3
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072d6:	6a39      	ldr	r1, [r7, #32]
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f000 f9cb 	bl	8007674 <I2C_WaitOnTXEFlagUntilTimeout>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d00d      	beq.n	8007300 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e8:	2b04      	cmp	r3, #4
 80072ea:	d107      	bne.n	80072fc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072fa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	e035      	b.n	800736c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800730e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007312:	9300      	str	r3, [sp, #0]
 8007314:	6a3b      	ldr	r3, [r7, #32]
 8007316:	2200      	movs	r2, #0
 8007318:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	f000 f8d3 	bl	80074c8 <I2C_WaitOnFlagUntilTimeout>
 8007322:	4603      	mov	r3, r0
 8007324:	2b00      	cmp	r3, #0
 8007326:	d00d      	beq.n	8007344 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007336:	d103      	bne.n	8007340 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800733e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007340:	2303      	movs	r3, #3
 8007342:	e013      	b.n	800736c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007344:	897b      	ldrh	r3, [r7, #10]
 8007346:	b2db      	uxtb	r3, r3
 8007348:	f043 0301 	orr.w	r3, r3, #1
 800734c:	b2da      	uxtb	r2, r3
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007356:	6a3a      	ldr	r2, [r7, #32]
 8007358:	4906      	ldr	r1, [pc, #24]	; (8007374 <I2C_RequestMemoryRead+0x1cc>)
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	f000 f90b 	bl	8007576 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d001      	beq.n	800736a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e000      	b.n	800736c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3718      	adds	r7, #24
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}
 8007374:	00010002 	.word	0x00010002

08007378 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b086      	sub	sp, #24
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007380:	2300      	movs	r3, #0
 8007382:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007388:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007390:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007392:	4b4b      	ldr	r3, [pc, #300]	; (80074c0 <I2C_DMAAbort+0x148>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	08db      	lsrs	r3, r3, #3
 8007398:	4a4a      	ldr	r2, [pc, #296]	; (80074c4 <I2C_DMAAbort+0x14c>)
 800739a:	fba2 2303 	umull	r2, r3, r2, r3
 800739e:	0a1a      	lsrs	r2, r3, #8
 80073a0:	4613      	mov	r3, r2
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	4413      	add	r3, r2
 80073a6:	00da      	lsls	r2, r3, #3
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d106      	bne.n	80073c0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b6:	f043 0220 	orr.w	r2, r3, #32
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80073be:	e00a      	b.n	80073d6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	3b01      	subs	r3, #1
 80073c4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073d4:	d0ea      	beq.n	80073ac <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d003      	beq.n	80073e6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073e2:	2200      	movs	r2, #0
 80073e4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d003      	beq.n	80073f6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f2:	2200      	movs	r2, #0
 80073f4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007404:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	2200      	movs	r2, #0
 800740a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007410:	2b00      	cmp	r3, #0
 8007412:	d003      	beq.n	800741c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007418:	2200      	movs	r2, #0
 800741a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007420:	2b00      	cmp	r3, #0
 8007422:	d003      	beq.n	800742c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007428:	2200      	movs	r2, #0
 800742a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f022 0201 	bic.w	r2, r2, #1
 800743a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007442:	b2db      	uxtb	r3, r3
 8007444:	2b60      	cmp	r3, #96	; 0x60
 8007446:	d10e      	bne.n	8007466 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	2220      	movs	r2, #32
 800744c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	2200      	movs	r2, #0
 8007454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	2200      	movs	r2, #0
 800745c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800745e:	6978      	ldr	r0, [r7, #20]
 8007460:	f7fe fc1a 	bl	8005c98 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007464:	e027      	b.n	80074b6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007466:	7cfb      	ldrb	r3, [r7, #19]
 8007468:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800746c:	2b28      	cmp	r3, #40	; 0x28
 800746e:	d117      	bne.n	80074a0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f042 0201 	orr.w	r2, r2, #1
 800747e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800748e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	2200      	movs	r2, #0
 8007494:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	2228      	movs	r2, #40	; 0x28
 800749a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800749e:	e007      	b.n	80074b0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	2220      	movs	r2, #32
 80074a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80074b0:	6978      	ldr	r0, [r7, #20]
 80074b2:	f7fe fbe7 	bl	8005c84 <HAL_I2C_ErrorCallback>
}
 80074b6:	bf00      	nop
 80074b8:	3718      	adds	r7, #24
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	200000f0 	.word	0x200000f0
 80074c4:	14f8b589 	.word	0x14f8b589

080074c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	603b      	str	r3, [r7, #0]
 80074d4:	4613      	mov	r3, r2
 80074d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80074d8:	e025      	b.n	8007526 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e0:	d021      	beq.n	8007526 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074e2:	f7fc fae9 	bl	8003ab8 <HAL_GetTick>
 80074e6:	4602      	mov	r2, r0
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	1ad3      	subs	r3, r2, r3
 80074ec:	683a      	ldr	r2, [r7, #0]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d302      	bcc.n	80074f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d116      	bne.n	8007526 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2200      	movs	r2, #0
 80074fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2220      	movs	r2, #32
 8007502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007512:	f043 0220 	orr.w	r2, r3, #32
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2200      	movs	r2, #0
 800751e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e023      	b.n	800756e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	0c1b      	lsrs	r3, r3, #16
 800752a:	b2db      	uxtb	r3, r3
 800752c:	2b01      	cmp	r3, #1
 800752e:	d10d      	bne.n	800754c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	695b      	ldr	r3, [r3, #20]
 8007536:	43da      	mvns	r2, r3
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	4013      	ands	r3, r2
 800753c:	b29b      	uxth	r3, r3
 800753e:	2b00      	cmp	r3, #0
 8007540:	bf0c      	ite	eq
 8007542:	2301      	moveq	r3, #1
 8007544:	2300      	movne	r3, #0
 8007546:	b2db      	uxtb	r3, r3
 8007548:	461a      	mov	r2, r3
 800754a:	e00c      	b.n	8007566 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	699b      	ldr	r3, [r3, #24]
 8007552:	43da      	mvns	r2, r3
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	4013      	ands	r3, r2
 8007558:	b29b      	uxth	r3, r3
 800755a:	2b00      	cmp	r3, #0
 800755c:	bf0c      	ite	eq
 800755e:	2301      	moveq	r3, #1
 8007560:	2300      	movne	r3, #0
 8007562:	b2db      	uxtb	r3, r3
 8007564:	461a      	mov	r2, r3
 8007566:	79fb      	ldrb	r3, [r7, #7]
 8007568:	429a      	cmp	r2, r3
 800756a:	d0b6      	beq.n	80074da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3710      	adds	r7, #16
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b084      	sub	sp, #16
 800757a:	af00      	add	r7, sp, #0
 800757c:	60f8      	str	r0, [r7, #12]
 800757e:	60b9      	str	r1, [r7, #8]
 8007580:	607a      	str	r2, [r7, #4]
 8007582:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007584:	e051      	b.n	800762a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	695b      	ldr	r3, [r3, #20]
 800758c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007594:	d123      	bne.n	80075de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80075ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2200      	movs	r2, #0
 80075b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2220      	movs	r2, #32
 80075ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ca:	f043 0204 	orr.w	r2, r3, #4
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	e046      	b.n	800766c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075e4:	d021      	beq.n	800762a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075e6:	f7fc fa67 	bl	8003ab8 <HAL_GetTick>
 80075ea:	4602      	mov	r2, r0
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	1ad3      	subs	r3, r2, r3
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d302      	bcc.n	80075fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d116      	bne.n	800762a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2220      	movs	r2, #32
 8007606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007616:	f043 0220 	orr.w	r2, r3, #32
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2200      	movs	r2, #0
 8007622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	e020      	b.n	800766c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	0c1b      	lsrs	r3, r3, #16
 800762e:	b2db      	uxtb	r3, r3
 8007630:	2b01      	cmp	r3, #1
 8007632:	d10c      	bne.n	800764e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	695b      	ldr	r3, [r3, #20]
 800763a:	43da      	mvns	r2, r3
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	4013      	ands	r3, r2
 8007640:	b29b      	uxth	r3, r3
 8007642:	2b00      	cmp	r3, #0
 8007644:	bf14      	ite	ne
 8007646:	2301      	movne	r3, #1
 8007648:	2300      	moveq	r3, #0
 800764a:	b2db      	uxtb	r3, r3
 800764c:	e00b      	b.n	8007666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	699b      	ldr	r3, [r3, #24]
 8007654:	43da      	mvns	r2, r3
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	4013      	ands	r3, r2
 800765a:	b29b      	uxth	r3, r3
 800765c:	2b00      	cmp	r3, #0
 800765e:	bf14      	ite	ne
 8007660:	2301      	movne	r3, #1
 8007662:	2300      	moveq	r3, #0
 8007664:	b2db      	uxtb	r3, r3
 8007666:	2b00      	cmp	r3, #0
 8007668:	d18d      	bne.n	8007586 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800766a:	2300      	movs	r3, #0
}
 800766c:	4618      	mov	r0, r3
 800766e:	3710      	adds	r7, #16
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af00      	add	r7, sp, #0
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007680:	e02d      	b.n	80076de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007682:	68f8      	ldr	r0, [r7, #12]
 8007684:	f000 f900 	bl	8007888 <I2C_IsAcknowledgeFailed>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d001      	beq.n	8007692 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	e02d      	b.n	80076ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007698:	d021      	beq.n	80076de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800769a:	f7fc fa0d 	bl	8003ab8 <HAL_GetTick>
 800769e:	4602      	mov	r2, r0
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	68ba      	ldr	r2, [r7, #8]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d302      	bcc.n	80076b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d116      	bne.n	80076de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2200      	movs	r2, #0
 80076b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2220      	movs	r2, #32
 80076ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ca:	f043 0220 	orr.w	r2, r3, #32
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e007      	b.n	80076ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	695b      	ldr	r3, [r3, #20]
 80076e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076e8:	2b80      	cmp	r3, #128	; 0x80
 80076ea:	d1ca      	bne.n	8007682 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b084      	sub	sp, #16
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	60f8      	str	r0, [r7, #12]
 80076fe:	60b9      	str	r1, [r7, #8]
 8007700:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007702:	e02d      	b.n	8007760 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007704:	68f8      	ldr	r0, [r7, #12]
 8007706:	f000 f8bf 	bl	8007888 <I2C_IsAcknowledgeFailed>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d001      	beq.n	8007714 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e02d      	b.n	8007770 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800771a:	d021      	beq.n	8007760 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800771c:	f7fc f9cc 	bl	8003ab8 <HAL_GetTick>
 8007720:	4602      	mov	r2, r0
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	1ad3      	subs	r3, r2, r3
 8007726:	68ba      	ldr	r2, [r7, #8]
 8007728:	429a      	cmp	r2, r3
 800772a:	d302      	bcc.n	8007732 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d116      	bne.n	8007760 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2200      	movs	r2, #0
 8007736:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2220      	movs	r2, #32
 800773c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2200      	movs	r2, #0
 8007744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774c:	f043 0220 	orr.w	r2, r3, #32
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2200      	movs	r2, #0
 8007758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	e007      	b.n	8007770 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	f003 0304 	and.w	r3, r3, #4
 800776a:	2b04      	cmp	r3, #4
 800776c:	d1ca      	bne.n	8007704 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800776e:	2300      	movs	r3, #0
}
 8007770:	4618      	mov	r0, r3
 8007772:	3710      	adds	r7, #16
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007778:	b480      	push	{r7}
 800777a:	b085      	sub	sp, #20
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007780:	2300      	movs	r3, #0
 8007782:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007784:	4b13      	ldr	r3, [pc, #76]	; (80077d4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	08db      	lsrs	r3, r3, #3
 800778a:	4a13      	ldr	r2, [pc, #76]	; (80077d8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800778c:	fba2 2303 	umull	r2, r3, r2, r3
 8007790:	0a1a      	lsrs	r2, r3, #8
 8007792:	4613      	mov	r3, r2
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	4413      	add	r3, r2
 8007798:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	3b01      	subs	r3, #1
 800779e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d107      	bne.n	80077b6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077aa:	f043 0220 	orr.w	r2, r3, #32
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e008      	b.n	80077c8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077c4:	d0e9      	beq.n	800779a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3714      	adds	r7, #20
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr
 80077d4:	200000f0 	.word	0x200000f0
 80077d8:	14f8b589 	.word	0x14f8b589

080077dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80077e8:	e042      	b.n	8007870 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	695b      	ldr	r3, [r3, #20]
 80077f0:	f003 0310 	and.w	r3, r3, #16
 80077f4:	2b10      	cmp	r3, #16
 80077f6:	d119      	bne.n	800782c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f06f 0210 	mvn.w	r2, #16
 8007800:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2220      	movs	r2, #32
 800780c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2200      	movs	r2, #0
 8007814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2200      	movs	r2, #0
 8007824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	e029      	b.n	8007880 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800782c:	f7fc f944 	bl	8003ab8 <HAL_GetTick>
 8007830:	4602      	mov	r2, r0
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	1ad3      	subs	r3, r2, r3
 8007836:	68ba      	ldr	r2, [r7, #8]
 8007838:	429a      	cmp	r2, r3
 800783a:	d302      	bcc.n	8007842 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d116      	bne.n	8007870 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2200      	movs	r2, #0
 8007846:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2220      	movs	r2, #32
 800784c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2200      	movs	r2, #0
 8007854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785c:	f043 0220 	orr.w	r2, r3, #32
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	e007      	b.n	8007880 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	695b      	ldr	r3, [r3, #20]
 8007876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800787a:	2b40      	cmp	r3, #64	; 0x40
 800787c:	d1b5      	bne.n	80077ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800787e:	2300      	movs	r3, #0
}
 8007880:	4618      	mov	r0, r3
 8007882:	3710      	adds	r7, #16
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	695b      	ldr	r3, [r3, #20]
 8007896:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800789a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800789e:	d11b      	bne.n	80078d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80078a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2220      	movs	r2, #32
 80078b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c4:	f043 0204 	orr.w	r2, r3, #4
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	e000      	b.n	80078da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	370c      	adds	r7, #12
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr

080078e6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80078e6:	b480      	push	{r7}
 80078e8:	b083      	sub	sp, #12
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80078f6:	d103      	bne.n	8007900 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80078fe:	e007      	b.n	8007910 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007904:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007908:	d102      	bne.n	8007910 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2208      	movs	r2, #8
 800790e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007910:	bf00      	nop
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b086      	sub	sp, #24
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d101      	bne.n	800792e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e267      	b.n	8007dfe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f003 0301 	and.w	r3, r3, #1
 8007936:	2b00      	cmp	r3, #0
 8007938:	d075      	beq.n	8007a26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800793a:	4b88      	ldr	r3, [pc, #544]	; (8007b5c <HAL_RCC_OscConfig+0x240>)
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	f003 030c 	and.w	r3, r3, #12
 8007942:	2b04      	cmp	r3, #4
 8007944:	d00c      	beq.n	8007960 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007946:	4b85      	ldr	r3, [pc, #532]	; (8007b5c <HAL_RCC_OscConfig+0x240>)
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800794e:	2b08      	cmp	r3, #8
 8007950:	d112      	bne.n	8007978 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007952:	4b82      	ldr	r3, [pc, #520]	; (8007b5c <HAL_RCC_OscConfig+0x240>)
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800795a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800795e:	d10b      	bne.n	8007978 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007960:	4b7e      	ldr	r3, [pc, #504]	; (8007b5c <HAL_RCC_OscConfig+0x240>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007968:	2b00      	cmp	r3, #0
 800796a:	d05b      	beq.n	8007a24 <HAL_RCC_OscConfig+0x108>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d157      	bne.n	8007a24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	e242      	b.n	8007dfe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007980:	d106      	bne.n	8007990 <HAL_RCC_OscConfig+0x74>
 8007982:	4b76      	ldr	r3, [pc, #472]	; (8007b5c <HAL_RCC_OscConfig+0x240>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a75      	ldr	r2, [pc, #468]	; (8007b5c <HAL_RCC_OscConfig+0x240>)
 8007988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800798c:	6013      	str	r3, [r2, #0]
 800798e:	e01d      	b.n	80079cc <HAL_RCC_OscConfig+0xb0>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007998:	d10c      	bne.n	80079b4 <HAL_RCC_OscConfig+0x98>
 800799a:	4b70      	ldr	r3, [pc, #448]	; (8007b5c <HAL_RCC_OscConfig+0x240>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a6f      	ldr	r2, [pc, #444]	; (8007b5c <HAL_RCC_OscConfig+0x240>)
 80079a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80079a4:	6013      	str	r3, [r2, #0]
 80079a6:	4b6d      	ldr	r3, [pc, #436]	; (8007b5c <HAL_RCC_OscConfig+0x240>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a6c      	ldr	r2, [pc, #432]	; (8007b5c <HAL_RCC_OscConfig+0x240>)
 80079ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079b0:	6013      	str	r3, [r2, #0]
 80079b2:	e00b      	b.n	80079cc <HAL_RCC_OscConfig+0xb0>
 80079b4:	4b69      	ldr	r3, [pc, #420]	; (8007b5c <HAL_RCC_OscConfig+0x240>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a68      	ldr	r2, [pc, #416]	; (8007b5c <HAL_RCC_OscConfig+0x240>)
 80079ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079be:	6013      	str	r3, [r2, #0]
 80079c0:	4b66      	ldr	r3, [pc, #408]	; (8007b5c <HAL_RCC_OscConfig+0x240>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a65      	ldr	r2, [pc, #404]	; (8007b5c <HAL_RCC_OscConfig+0x240>)
 80079c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d013      	beq.n	80079fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079d4:	f7fc f870 	bl	8003ab8 <HAL_GetTick>
 80079d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079da:	e008      	b.n	80079ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80079dc:	f7fc f86c 	bl	8003ab8 <HAL_GetTick>
 80079e0:	4602      	mov	r2, r0
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	1ad3      	subs	r3, r2, r3
 80079e6:	2b64      	cmp	r3, #100	; 0x64
 80079e8:	d901      	bls.n	80079ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80079ea:	2303      	movs	r3, #3
 80079ec:	e207      	b.n	8007dfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079ee:	4b5b      	ldr	r3, [pc, #364]	; (8007b5c <HAL_RCC_OscConfig+0x240>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d0f0      	beq.n	80079dc <HAL_RCC_OscConfig+0xc0>
 80079fa:	e014      	b.n	8007a26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079fc:	f7fc f85c 	bl	8003ab8 <HAL_GetTick>
 8007a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a02:	e008      	b.n	8007a16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a04:	f7fc f858 	bl	8003ab8 <HAL_GetTick>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	1ad3      	subs	r3, r2, r3
 8007a0e:	2b64      	cmp	r3, #100	; 0x64
 8007a10:	d901      	bls.n	8007a16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007a12:	2303      	movs	r3, #3
 8007a14:	e1f3      	b.n	8007dfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a16:	4b51      	ldr	r3, [pc, #324]	; (8007b5c <HAL_RCC_OscConfig+0x240>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1f0      	bne.n	8007a04 <HAL_RCC_OscConfig+0xe8>
 8007a22:	e000      	b.n	8007a26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f003 0302 	and.w	r3, r3, #2
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d063      	beq.n	8007afa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007a32:	4b4a      	ldr	r3, [pc, #296]	; (8007b5c <HAL_RCC_OscConfig+0x240>)
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	f003 030c 	and.w	r3, r3, #12
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00b      	beq.n	8007a56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a3e:	4b47      	ldr	r3, [pc, #284]	; (8007b5c <HAL_RCC_OscConfig+0x240>)
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007a46:	2b08      	cmp	r3, #8
 8007a48:	d11c      	bne.n	8007a84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a4a:	4b44      	ldr	r3, [pc, #272]	; (8007b5c <HAL_RCC_OscConfig+0x240>)
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d116      	bne.n	8007a84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a56:	4b41      	ldr	r3, [pc, #260]	; (8007b5c <HAL_RCC_OscConfig+0x240>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f003 0302 	and.w	r3, r3, #2
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d005      	beq.n	8007a6e <HAL_RCC_OscConfig+0x152>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d001      	beq.n	8007a6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e1c7      	b.n	8007dfe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a6e:	4b3b      	ldr	r3, [pc, #236]	; (8007b5c <HAL_RCC_OscConfig+0x240>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	00db      	lsls	r3, r3, #3
 8007a7c:	4937      	ldr	r1, [pc, #220]	; (8007b5c <HAL_RCC_OscConfig+0x240>)
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a82:	e03a      	b.n	8007afa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d020      	beq.n	8007ace <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007a8c:	4b34      	ldr	r3, [pc, #208]	; (8007b60 <HAL_RCC_OscConfig+0x244>)
 8007a8e:	2201      	movs	r2, #1
 8007a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a92:	f7fc f811 	bl	8003ab8 <HAL_GetTick>
 8007a96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a98:	e008      	b.n	8007aac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007a9a:	f7fc f80d 	bl	8003ab8 <HAL_GetTick>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	1ad3      	subs	r3, r2, r3
 8007aa4:	2b02      	cmp	r3, #2
 8007aa6:	d901      	bls.n	8007aac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007aa8:	2303      	movs	r3, #3
 8007aaa:	e1a8      	b.n	8007dfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007aac:	4b2b      	ldr	r3, [pc, #172]	; (8007b5c <HAL_RCC_OscConfig+0x240>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 0302 	and.w	r3, r3, #2
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d0f0      	beq.n	8007a9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ab8:	4b28      	ldr	r3, [pc, #160]	; (8007b5c <HAL_RCC_OscConfig+0x240>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	691b      	ldr	r3, [r3, #16]
 8007ac4:	00db      	lsls	r3, r3, #3
 8007ac6:	4925      	ldr	r1, [pc, #148]	; (8007b5c <HAL_RCC_OscConfig+0x240>)
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	600b      	str	r3, [r1, #0]
 8007acc:	e015      	b.n	8007afa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ace:	4b24      	ldr	r3, [pc, #144]	; (8007b60 <HAL_RCC_OscConfig+0x244>)
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ad4:	f7fb fff0 	bl	8003ab8 <HAL_GetTick>
 8007ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ada:	e008      	b.n	8007aee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007adc:	f7fb ffec 	bl	8003ab8 <HAL_GetTick>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	1ad3      	subs	r3, r2, r3
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d901      	bls.n	8007aee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007aea:	2303      	movs	r3, #3
 8007aec:	e187      	b.n	8007dfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007aee:	4b1b      	ldr	r3, [pc, #108]	; (8007b5c <HAL_RCC_OscConfig+0x240>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 0302 	and.w	r3, r3, #2
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d1f0      	bne.n	8007adc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f003 0308 	and.w	r3, r3, #8
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d036      	beq.n	8007b74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	695b      	ldr	r3, [r3, #20]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d016      	beq.n	8007b3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b0e:	4b15      	ldr	r3, [pc, #84]	; (8007b64 <HAL_RCC_OscConfig+0x248>)
 8007b10:	2201      	movs	r2, #1
 8007b12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b14:	f7fb ffd0 	bl	8003ab8 <HAL_GetTick>
 8007b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b1a:	e008      	b.n	8007b2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b1c:	f7fb ffcc 	bl	8003ab8 <HAL_GetTick>
 8007b20:	4602      	mov	r2, r0
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	1ad3      	subs	r3, r2, r3
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	d901      	bls.n	8007b2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007b2a:	2303      	movs	r3, #3
 8007b2c:	e167      	b.n	8007dfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b2e:	4b0b      	ldr	r3, [pc, #44]	; (8007b5c <HAL_RCC_OscConfig+0x240>)
 8007b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b32:	f003 0302 	and.w	r3, r3, #2
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d0f0      	beq.n	8007b1c <HAL_RCC_OscConfig+0x200>
 8007b3a:	e01b      	b.n	8007b74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b3c:	4b09      	ldr	r3, [pc, #36]	; (8007b64 <HAL_RCC_OscConfig+0x248>)
 8007b3e:	2200      	movs	r2, #0
 8007b40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b42:	f7fb ffb9 	bl	8003ab8 <HAL_GetTick>
 8007b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b48:	e00e      	b.n	8007b68 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b4a:	f7fb ffb5 	bl	8003ab8 <HAL_GetTick>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	1ad3      	subs	r3, r2, r3
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	d907      	bls.n	8007b68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	e150      	b.n	8007dfe <HAL_RCC_OscConfig+0x4e2>
 8007b5c:	40023800 	.word	0x40023800
 8007b60:	42470000 	.word	0x42470000
 8007b64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b68:	4b88      	ldr	r3, [pc, #544]	; (8007d8c <HAL_RCC_OscConfig+0x470>)
 8007b6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b6c:	f003 0302 	and.w	r3, r3, #2
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d1ea      	bne.n	8007b4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f003 0304 	and.w	r3, r3, #4
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f000 8097 	beq.w	8007cb0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b82:	2300      	movs	r3, #0
 8007b84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b86:	4b81      	ldr	r3, [pc, #516]	; (8007d8c <HAL_RCC_OscConfig+0x470>)
 8007b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d10f      	bne.n	8007bb2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b92:	2300      	movs	r3, #0
 8007b94:	60bb      	str	r3, [r7, #8]
 8007b96:	4b7d      	ldr	r3, [pc, #500]	; (8007d8c <HAL_RCC_OscConfig+0x470>)
 8007b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9a:	4a7c      	ldr	r2, [pc, #496]	; (8007d8c <HAL_RCC_OscConfig+0x470>)
 8007b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8007ba2:	4b7a      	ldr	r3, [pc, #488]	; (8007d8c <HAL_RCC_OscConfig+0x470>)
 8007ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007baa:	60bb      	str	r3, [r7, #8]
 8007bac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bb2:	4b77      	ldr	r3, [pc, #476]	; (8007d90 <HAL_RCC_OscConfig+0x474>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d118      	bne.n	8007bf0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007bbe:	4b74      	ldr	r3, [pc, #464]	; (8007d90 <HAL_RCC_OscConfig+0x474>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a73      	ldr	r2, [pc, #460]	; (8007d90 <HAL_RCC_OscConfig+0x474>)
 8007bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007bca:	f7fb ff75 	bl	8003ab8 <HAL_GetTick>
 8007bce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bd0:	e008      	b.n	8007be4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007bd2:	f7fb ff71 	bl	8003ab8 <HAL_GetTick>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	1ad3      	subs	r3, r2, r3
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	d901      	bls.n	8007be4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007be0:	2303      	movs	r3, #3
 8007be2:	e10c      	b.n	8007dfe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007be4:	4b6a      	ldr	r3, [pc, #424]	; (8007d90 <HAL_RCC_OscConfig+0x474>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d0f0      	beq.n	8007bd2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d106      	bne.n	8007c06 <HAL_RCC_OscConfig+0x2ea>
 8007bf8:	4b64      	ldr	r3, [pc, #400]	; (8007d8c <HAL_RCC_OscConfig+0x470>)
 8007bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bfc:	4a63      	ldr	r2, [pc, #396]	; (8007d8c <HAL_RCC_OscConfig+0x470>)
 8007bfe:	f043 0301 	orr.w	r3, r3, #1
 8007c02:	6713      	str	r3, [r2, #112]	; 0x70
 8007c04:	e01c      	b.n	8007c40 <HAL_RCC_OscConfig+0x324>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	2b05      	cmp	r3, #5
 8007c0c:	d10c      	bne.n	8007c28 <HAL_RCC_OscConfig+0x30c>
 8007c0e:	4b5f      	ldr	r3, [pc, #380]	; (8007d8c <HAL_RCC_OscConfig+0x470>)
 8007c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c12:	4a5e      	ldr	r2, [pc, #376]	; (8007d8c <HAL_RCC_OscConfig+0x470>)
 8007c14:	f043 0304 	orr.w	r3, r3, #4
 8007c18:	6713      	str	r3, [r2, #112]	; 0x70
 8007c1a:	4b5c      	ldr	r3, [pc, #368]	; (8007d8c <HAL_RCC_OscConfig+0x470>)
 8007c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c1e:	4a5b      	ldr	r2, [pc, #364]	; (8007d8c <HAL_RCC_OscConfig+0x470>)
 8007c20:	f043 0301 	orr.w	r3, r3, #1
 8007c24:	6713      	str	r3, [r2, #112]	; 0x70
 8007c26:	e00b      	b.n	8007c40 <HAL_RCC_OscConfig+0x324>
 8007c28:	4b58      	ldr	r3, [pc, #352]	; (8007d8c <HAL_RCC_OscConfig+0x470>)
 8007c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c2c:	4a57      	ldr	r2, [pc, #348]	; (8007d8c <HAL_RCC_OscConfig+0x470>)
 8007c2e:	f023 0301 	bic.w	r3, r3, #1
 8007c32:	6713      	str	r3, [r2, #112]	; 0x70
 8007c34:	4b55      	ldr	r3, [pc, #340]	; (8007d8c <HAL_RCC_OscConfig+0x470>)
 8007c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c38:	4a54      	ldr	r2, [pc, #336]	; (8007d8c <HAL_RCC_OscConfig+0x470>)
 8007c3a:	f023 0304 	bic.w	r3, r3, #4
 8007c3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d015      	beq.n	8007c74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c48:	f7fb ff36 	bl	8003ab8 <HAL_GetTick>
 8007c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c4e:	e00a      	b.n	8007c66 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c50:	f7fb ff32 	bl	8003ab8 <HAL_GetTick>
 8007c54:	4602      	mov	r2, r0
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d901      	bls.n	8007c66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007c62:	2303      	movs	r3, #3
 8007c64:	e0cb      	b.n	8007dfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c66:	4b49      	ldr	r3, [pc, #292]	; (8007d8c <HAL_RCC_OscConfig+0x470>)
 8007c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c6a:	f003 0302 	and.w	r3, r3, #2
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d0ee      	beq.n	8007c50 <HAL_RCC_OscConfig+0x334>
 8007c72:	e014      	b.n	8007c9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c74:	f7fb ff20 	bl	8003ab8 <HAL_GetTick>
 8007c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c7a:	e00a      	b.n	8007c92 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c7c:	f7fb ff1c 	bl	8003ab8 <HAL_GetTick>
 8007c80:	4602      	mov	r2, r0
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	1ad3      	subs	r3, r2, r3
 8007c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d901      	bls.n	8007c92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007c8e:	2303      	movs	r3, #3
 8007c90:	e0b5      	b.n	8007dfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c92:	4b3e      	ldr	r3, [pc, #248]	; (8007d8c <HAL_RCC_OscConfig+0x470>)
 8007c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c96:	f003 0302 	and.w	r3, r3, #2
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d1ee      	bne.n	8007c7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007c9e:	7dfb      	ldrb	r3, [r7, #23]
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d105      	bne.n	8007cb0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ca4:	4b39      	ldr	r3, [pc, #228]	; (8007d8c <HAL_RCC_OscConfig+0x470>)
 8007ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca8:	4a38      	ldr	r2, [pc, #224]	; (8007d8c <HAL_RCC_OscConfig+0x470>)
 8007caa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	699b      	ldr	r3, [r3, #24]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f000 80a1 	beq.w	8007dfc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007cba:	4b34      	ldr	r3, [pc, #208]	; (8007d8c <HAL_RCC_OscConfig+0x470>)
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	f003 030c 	and.w	r3, r3, #12
 8007cc2:	2b08      	cmp	r3, #8
 8007cc4:	d05c      	beq.n	8007d80 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	699b      	ldr	r3, [r3, #24]
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d141      	bne.n	8007d52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cce:	4b31      	ldr	r3, [pc, #196]	; (8007d94 <HAL_RCC_OscConfig+0x478>)
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cd4:	f7fb fef0 	bl	8003ab8 <HAL_GetTick>
 8007cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cda:	e008      	b.n	8007cee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007cdc:	f7fb feec 	bl	8003ab8 <HAL_GetTick>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	d901      	bls.n	8007cee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007cea:	2303      	movs	r3, #3
 8007cec:	e087      	b.n	8007dfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cee:	4b27      	ldr	r3, [pc, #156]	; (8007d8c <HAL_RCC_OscConfig+0x470>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d1f0      	bne.n	8007cdc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	69da      	ldr	r2, [r3, #28]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a1b      	ldr	r3, [r3, #32]
 8007d02:	431a      	orrs	r2, r3
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d08:	019b      	lsls	r3, r3, #6
 8007d0a:	431a      	orrs	r2, r3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d10:	085b      	lsrs	r3, r3, #1
 8007d12:	3b01      	subs	r3, #1
 8007d14:	041b      	lsls	r3, r3, #16
 8007d16:	431a      	orrs	r2, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1c:	061b      	lsls	r3, r3, #24
 8007d1e:	491b      	ldr	r1, [pc, #108]	; (8007d8c <HAL_RCC_OscConfig+0x470>)
 8007d20:	4313      	orrs	r3, r2
 8007d22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d24:	4b1b      	ldr	r3, [pc, #108]	; (8007d94 <HAL_RCC_OscConfig+0x478>)
 8007d26:	2201      	movs	r2, #1
 8007d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d2a:	f7fb fec5 	bl	8003ab8 <HAL_GetTick>
 8007d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d30:	e008      	b.n	8007d44 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d32:	f7fb fec1 	bl	8003ab8 <HAL_GetTick>
 8007d36:	4602      	mov	r2, r0
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	1ad3      	subs	r3, r2, r3
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d901      	bls.n	8007d44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007d40:	2303      	movs	r3, #3
 8007d42:	e05c      	b.n	8007dfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d44:	4b11      	ldr	r3, [pc, #68]	; (8007d8c <HAL_RCC_OscConfig+0x470>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d0f0      	beq.n	8007d32 <HAL_RCC_OscConfig+0x416>
 8007d50:	e054      	b.n	8007dfc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d52:	4b10      	ldr	r3, [pc, #64]	; (8007d94 <HAL_RCC_OscConfig+0x478>)
 8007d54:	2200      	movs	r2, #0
 8007d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d58:	f7fb feae 	bl	8003ab8 <HAL_GetTick>
 8007d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d5e:	e008      	b.n	8007d72 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d60:	f7fb feaa 	bl	8003ab8 <HAL_GetTick>
 8007d64:	4602      	mov	r2, r0
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	1ad3      	subs	r3, r2, r3
 8007d6a:	2b02      	cmp	r3, #2
 8007d6c:	d901      	bls.n	8007d72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007d6e:	2303      	movs	r3, #3
 8007d70:	e045      	b.n	8007dfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d72:	4b06      	ldr	r3, [pc, #24]	; (8007d8c <HAL_RCC_OscConfig+0x470>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d1f0      	bne.n	8007d60 <HAL_RCC_OscConfig+0x444>
 8007d7e:	e03d      	b.n	8007dfc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	699b      	ldr	r3, [r3, #24]
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d107      	bne.n	8007d98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	e038      	b.n	8007dfe <HAL_RCC_OscConfig+0x4e2>
 8007d8c:	40023800 	.word	0x40023800
 8007d90:	40007000 	.word	0x40007000
 8007d94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007d98:	4b1b      	ldr	r3, [pc, #108]	; (8007e08 <HAL_RCC_OscConfig+0x4ec>)
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	699b      	ldr	r3, [r3, #24]
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d028      	beq.n	8007df8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d121      	bne.n	8007df8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d11a      	bne.n	8007df8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007dc8:	4013      	ands	r3, r2
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007dce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d111      	bne.n	8007df8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dde:	085b      	lsrs	r3, r3, #1
 8007de0:	3b01      	subs	r3, #1
 8007de2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d107      	bne.n	8007df8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d001      	beq.n	8007dfc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	e000      	b.n	8007dfe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3718      	adds	r7, #24
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	40023800 	.word	0x40023800

08007e0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d101      	bne.n	8007e20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e0cc      	b.n	8007fba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007e20:	4b68      	ldr	r3, [pc, #416]	; (8007fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f003 0307 	and.w	r3, r3, #7
 8007e28:	683a      	ldr	r2, [r7, #0]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d90c      	bls.n	8007e48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e2e:	4b65      	ldr	r3, [pc, #404]	; (8007fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8007e30:	683a      	ldr	r2, [r7, #0]
 8007e32:	b2d2      	uxtb	r2, r2
 8007e34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e36:	4b63      	ldr	r3, [pc, #396]	; (8007fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 0307 	and.w	r3, r3, #7
 8007e3e:	683a      	ldr	r2, [r7, #0]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d001      	beq.n	8007e48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007e44:	2301      	movs	r3, #1
 8007e46:	e0b8      	b.n	8007fba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f003 0302 	and.w	r3, r3, #2
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d020      	beq.n	8007e96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 0304 	and.w	r3, r3, #4
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d005      	beq.n	8007e6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007e60:	4b59      	ldr	r3, [pc, #356]	; (8007fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	4a58      	ldr	r2, [pc, #352]	; (8007fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007e66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007e6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f003 0308 	and.w	r3, r3, #8
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d005      	beq.n	8007e84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007e78:	4b53      	ldr	r3, [pc, #332]	; (8007fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	4a52      	ldr	r2, [pc, #328]	; (8007fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007e7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007e82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e84:	4b50      	ldr	r3, [pc, #320]	; (8007fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	494d      	ldr	r1, [pc, #308]	; (8007fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007e92:	4313      	orrs	r3, r2
 8007e94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f003 0301 	and.w	r3, r3, #1
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d044      	beq.n	8007f2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d107      	bne.n	8007eba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007eaa:	4b47      	ldr	r3, [pc, #284]	; (8007fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d119      	bne.n	8007eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e07f      	b.n	8007fba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d003      	beq.n	8007eca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007ec6:	2b03      	cmp	r3, #3
 8007ec8:	d107      	bne.n	8007eda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007eca:	4b3f      	ldr	r3, [pc, #252]	; (8007fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d109      	bne.n	8007eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e06f      	b.n	8007fba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007eda:	4b3b      	ldr	r3, [pc, #236]	; (8007fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f003 0302 	and.w	r3, r3, #2
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d101      	bne.n	8007eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e067      	b.n	8007fba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007eea:	4b37      	ldr	r3, [pc, #220]	; (8007fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	f023 0203 	bic.w	r2, r3, #3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	4934      	ldr	r1, [pc, #208]	; (8007fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007efc:	f7fb fddc 	bl	8003ab8 <HAL_GetTick>
 8007f00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f02:	e00a      	b.n	8007f1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f04:	f7fb fdd8 	bl	8003ab8 <HAL_GetTick>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	1ad3      	subs	r3, r2, r3
 8007f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d901      	bls.n	8007f1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007f16:	2303      	movs	r3, #3
 8007f18:	e04f      	b.n	8007fba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f1a:	4b2b      	ldr	r3, [pc, #172]	; (8007fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	f003 020c 	and.w	r2, r3, #12
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d1eb      	bne.n	8007f04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007f2c:	4b25      	ldr	r3, [pc, #148]	; (8007fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f003 0307 	and.w	r3, r3, #7
 8007f34:	683a      	ldr	r2, [r7, #0]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d20c      	bcs.n	8007f54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f3a:	4b22      	ldr	r3, [pc, #136]	; (8007fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8007f3c:	683a      	ldr	r2, [r7, #0]
 8007f3e:	b2d2      	uxtb	r2, r2
 8007f40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f42:	4b20      	ldr	r3, [pc, #128]	; (8007fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f003 0307 	and.w	r3, r3, #7
 8007f4a:	683a      	ldr	r2, [r7, #0]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d001      	beq.n	8007f54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	e032      	b.n	8007fba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 0304 	and.w	r3, r3, #4
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d008      	beq.n	8007f72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f60:	4b19      	ldr	r3, [pc, #100]	; (8007fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	4916      	ldr	r1, [pc, #88]	; (8007fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f003 0308 	and.w	r3, r3, #8
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d009      	beq.n	8007f92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007f7e:	4b12      	ldr	r3, [pc, #72]	; (8007fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	00db      	lsls	r3, r3, #3
 8007f8c:	490e      	ldr	r1, [pc, #56]	; (8007fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007f92:	f000 f821 	bl	8007fd8 <HAL_RCC_GetSysClockFreq>
 8007f96:	4602      	mov	r2, r0
 8007f98:	4b0b      	ldr	r3, [pc, #44]	; (8007fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	091b      	lsrs	r3, r3, #4
 8007f9e:	f003 030f 	and.w	r3, r3, #15
 8007fa2:	490a      	ldr	r1, [pc, #40]	; (8007fcc <HAL_RCC_ClockConfig+0x1c0>)
 8007fa4:	5ccb      	ldrb	r3, [r1, r3]
 8007fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8007faa:	4a09      	ldr	r2, [pc, #36]	; (8007fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8007fac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007fae:	4b09      	ldr	r3, [pc, #36]	; (8007fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f7fb fd3c 	bl	8003a30 <HAL_InitTick>

  return HAL_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3710      	adds	r7, #16
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	40023c00 	.word	0x40023c00
 8007fc8:	40023800 	.word	0x40023800
 8007fcc:	08010070 	.word	0x08010070
 8007fd0:	200000f0 	.word	0x200000f0
 8007fd4:	200000f4 	.word	0x200000f4

08007fd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007fdc:	b090      	sub	sp, #64	; 0x40
 8007fde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	637b      	str	r3, [r7, #52]	; 0x34
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fe8:	2300      	movs	r3, #0
 8007fea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007fec:	2300      	movs	r3, #0
 8007fee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007ff0:	4b59      	ldr	r3, [pc, #356]	; (8008158 <HAL_RCC_GetSysClockFreq+0x180>)
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	f003 030c 	and.w	r3, r3, #12
 8007ff8:	2b08      	cmp	r3, #8
 8007ffa:	d00d      	beq.n	8008018 <HAL_RCC_GetSysClockFreq+0x40>
 8007ffc:	2b08      	cmp	r3, #8
 8007ffe:	f200 80a1 	bhi.w	8008144 <HAL_RCC_GetSysClockFreq+0x16c>
 8008002:	2b00      	cmp	r3, #0
 8008004:	d002      	beq.n	800800c <HAL_RCC_GetSysClockFreq+0x34>
 8008006:	2b04      	cmp	r3, #4
 8008008:	d003      	beq.n	8008012 <HAL_RCC_GetSysClockFreq+0x3a>
 800800a:	e09b      	b.n	8008144 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800800c:	4b53      	ldr	r3, [pc, #332]	; (800815c <HAL_RCC_GetSysClockFreq+0x184>)
 800800e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8008010:	e09b      	b.n	800814a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008012:	4b53      	ldr	r3, [pc, #332]	; (8008160 <HAL_RCC_GetSysClockFreq+0x188>)
 8008014:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008016:	e098      	b.n	800814a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008018:	4b4f      	ldr	r3, [pc, #316]	; (8008158 <HAL_RCC_GetSysClockFreq+0x180>)
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008020:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008022:	4b4d      	ldr	r3, [pc, #308]	; (8008158 <HAL_RCC_GetSysClockFreq+0x180>)
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800802a:	2b00      	cmp	r3, #0
 800802c:	d028      	beq.n	8008080 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800802e:	4b4a      	ldr	r3, [pc, #296]	; (8008158 <HAL_RCC_GetSysClockFreq+0x180>)
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	099b      	lsrs	r3, r3, #6
 8008034:	2200      	movs	r2, #0
 8008036:	623b      	str	r3, [r7, #32]
 8008038:	627a      	str	r2, [r7, #36]	; 0x24
 800803a:	6a3b      	ldr	r3, [r7, #32]
 800803c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008040:	2100      	movs	r1, #0
 8008042:	4b47      	ldr	r3, [pc, #284]	; (8008160 <HAL_RCC_GetSysClockFreq+0x188>)
 8008044:	fb03 f201 	mul.w	r2, r3, r1
 8008048:	2300      	movs	r3, #0
 800804a:	fb00 f303 	mul.w	r3, r0, r3
 800804e:	4413      	add	r3, r2
 8008050:	4a43      	ldr	r2, [pc, #268]	; (8008160 <HAL_RCC_GetSysClockFreq+0x188>)
 8008052:	fba0 1202 	umull	r1, r2, r0, r2
 8008056:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008058:	460a      	mov	r2, r1
 800805a:	62ba      	str	r2, [r7, #40]	; 0x28
 800805c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800805e:	4413      	add	r3, r2
 8008060:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008064:	2200      	movs	r2, #0
 8008066:	61bb      	str	r3, [r7, #24]
 8008068:	61fa      	str	r2, [r7, #28]
 800806a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800806e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008072:	f7f8 fe09 	bl	8000c88 <__aeabi_uldivmod>
 8008076:	4602      	mov	r2, r0
 8008078:	460b      	mov	r3, r1
 800807a:	4613      	mov	r3, r2
 800807c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800807e:	e053      	b.n	8008128 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008080:	4b35      	ldr	r3, [pc, #212]	; (8008158 <HAL_RCC_GetSysClockFreq+0x180>)
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	099b      	lsrs	r3, r3, #6
 8008086:	2200      	movs	r2, #0
 8008088:	613b      	str	r3, [r7, #16]
 800808a:	617a      	str	r2, [r7, #20]
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008092:	f04f 0b00 	mov.w	fp, #0
 8008096:	4652      	mov	r2, sl
 8008098:	465b      	mov	r3, fp
 800809a:	f04f 0000 	mov.w	r0, #0
 800809e:	f04f 0100 	mov.w	r1, #0
 80080a2:	0159      	lsls	r1, r3, #5
 80080a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80080a8:	0150      	lsls	r0, r2, #5
 80080aa:	4602      	mov	r2, r0
 80080ac:	460b      	mov	r3, r1
 80080ae:	ebb2 080a 	subs.w	r8, r2, sl
 80080b2:	eb63 090b 	sbc.w	r9, r3, fp
 80080b6:	f04f 0200 	mov.w	r2, #0
 80080ba:	f04f 0300 	mov.w	r3, #0
 80080be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80080c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80080c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80080ca:	ebb2 0408 	subs.w	r4, r2, r8
 80080ce:	eb63 0509 	sbc.w	r5, r3, r9
 80080d2:	f04f 0200 	mov.w	r2, #0
 80080d6:	f04f 0300 	mov.w	r3, #0
 80080da:	00eb      	lsls	r3, r5, #3
 80080dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80080e0:	00e2      	lsls	r2, r4, #3
 80080e2:	4614      	mov	r4, r2
 80080e4:	461d      	mov	r5, r3
 80080e6:	eb14 030a 	adds.w	r3, r4, sl
 80080ea:	603b      	str	r3, [r7, #0]
 80080ec:	eb45 030b 	adc.w	r3, r5, fp
 80080f0:	607b      	str	r3, [r7, #4]
 80080f2:	f04f 0200 	mov.w	r2, #0
 80080f6:	f04f 0300 	mov.w	r3, #0
 80080fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80080fe:	4629      	mov	r1, r5
 8008100:	028b      	lsls	r3, r1, #10
 8008102:	4621      	mov	r1, r4
 8008104:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008108:	4621      	mov	r1, r4
 800810a:	028a      	lsls	r2, r1, #10
 800810c:	4610      	mov	r0, r2
 800810e:	4619      	mov	r1, r3
 8008110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008112:	2200      	movs	r2, #0
 8008114:	60bb      	str	r3, [r7, #8]
 8008116:	60fa      	str	r2, [r7, #12]
 8008118:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800811c:	f7f8 fdb4 	bl	8000c88 <__aeabi_uldivmod>
 8008120:	4602      	mov	r2, r0
 8008122:	460b      	mov	r3, r1
 8008124:	4613      	mov	r3, r2
 8008126:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008128:	4b0b      	ldr	r3, [pc, #44]	; (8008158 <HAL_RCC_GetSysClockFreq+0x180>)
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	0c1b      	lsrs	r3, r3, #16
 800812e:	f003 0303 	and.w	r3, r3, #3
 8008132:	3301      	adds	r3, #1
 8008134:	005b      	lsls	r3, r3, #1
 8008136:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8008138:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800813a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008140:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008142:	e002      	b.n	800814a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008144:	4b05      	ldr	r3, [pc, #20]	; (800815c <HAL_RCC_GetSysClockFreq+0x184>)
 8008146:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008148:	bf00      	nop
    }
  }
  return sysclockfreq;
 800814a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800814c:	4618      	mov	r0, r3
 800814e:	3740      	adds	r7, #64	; 0x40
 8008150:	46bd      	mov	sp, r7
 8008152:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008156:	bf00      	nop
 8008158:	40023800 	.word	0x40023800
 800815c:	00f42400 	.word	0x00f42400
 8008160:	017d7840 	.word	0x017d7840

08008164 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008164:	b480      	push	{r7}
 8008166:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008168:	4b03      	ldr	r3, [pc, #12]	; (8008178 <HAL_RCC_GetHCLKFreq+0x14>)
 800816a:	681b      	ldr	r3, [r3, #0]
}
 800816c:	4618      	mov	r0, r3
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr
 8008176:	bf00      	nop
 8008178:	200000f0 	.word	0x200000f0

0800817c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008180:	f7ff fff0 	bl	8008164 <HAL_RCC_GetHCLKFreq>
 8008184:	4602      	mov	r2, r0
 8008186:	4b05      	ldr	r3, [pc, #20]	; (800819c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	0a9b      	lsrs	r3, r3, #10
 800818c:	f003 0307 	and.w	r3, r3, #7
 8008190:	4903      	ldr	r1, [pc, #12]	; (80081a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008192:	5ccb      	ldrb	r3, [r1, r3]
 8008194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008198:	4618      	mov	r0, r3
 800819a:	bd80      	pop	{r7, pc}
 800819c:	40023800 	.word	0x40023800
 80081a0:	08010080 	.word	0x08010080

080081a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80081a8:	f7ff ffdc 	bl	8008164 <HAL_RCC_GetHCLKFreq>
 80081ac:	4602      	mov	r2, r0
 80081ae:	4b05      	ldr	r3, [pc, #20]	; (80081c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	0b5b      	lsrs	r3, r3, #13
 80081b4:	f003 0307 	and.w	r3, r3, #7
 80081b8:	4903      	ldr	r1, [pc, #12]	; (80081c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80081ba:	5ccb      	ldrb	r3, [r1, r3]
 80081bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	40023800 	.word	0x40023800
 80081c8:	08010080 	.word	0x08010080

080081cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d101      	bne.n	80081de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	e07b      	b.n	80082d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d108      	bne.n	80081f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081ee:	d009      	beq.n	8008204 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	61da      	str	r2, [r3, #28]
 80081f6:	e005      	b.n	8008204 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008210:	b2db      	uxtb	r3, r3
 8008212:	2b00      	cmp	r3, #0
 8008214:	d106      	bne.n	8008224 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f7fa fbf4 	bl	8002a0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2202      	movs	r2, #2
 8008228:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800823a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800824c:	431a      	orrs	r2, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008256:	431a      	orrs	r2, r3
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	691b      	ldr	r3, [r3, #16]
 800825c:	f003 0302 	and.w	r3, r3, #2
 8008260:	431a      	orrs	r2, r3
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	695b      	ldr	r3, [r3, #20]
 8008266:	f003 0301 	and.w	r3, r3, #1
 800826a:	431a      	orrs	r2, r3
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	699b      	ldr	r3, [r3, #24]
 8008270:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008274:	431a      	orrs	r2, r3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	69db      	ldr	r3, [r3, #28]
 800827a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800827e:	431a      	orrs	r2, r3
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6a1b      	ldr	r3, [r3, #32]
 8008284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008288:	ea42 0103 	orr.w	r1, r2, r3
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008290:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	430a      	orrs	r2, r1
 800829a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	699b      	ldr	r3, [r3, #24]
 80082a0:	0c1b      	lsrs	r3, r3, #16
 80082a2:	f003 0104 	and.w	r1, r3, #4
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082aa:	f003 0210 	and.w	r2, r3, #16
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	430a      	orrs	r2, r1
 80082b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	69da      	ldr	r2, [r3, #28]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80082c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80082d4:	2300      	movs	r3, #0
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3708      	adds	r7, #8
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}

080082de <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b082      	sub	sp, #8
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d101      	bne.n	80082f0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	e041      	b.n	8008374 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d106      	bne.n	800830a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f7fb f83d 	bl	8003384 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2202      	movs	r2, #2
 800830e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	3304      	adds	r3, #4
 800831a:	4619      	mov	r1, r3
 800831c:	4610      	mov	r0, r2
 800831e:	f000 ffc1 	bl	80092a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2201      	movs	r2, #1
 8008326:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2201      	movs	r2, #1
 800832e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2201      	movs	r2, #1
 8008336:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2201      	movs	r2, #1
 800833e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2201      	movs	r2, #1
 8008346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2201      	movs	r2, #1
 800834e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2201      	movs	r2, #1
 8008356:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2201      	movs	r2, #1
 800835e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2201      	movs	r2, #1
 8008366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2201      	movs	r2, #1
 800836e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008372:	2300      	movs	r3, #0
}
 8008374:	4618      	mov	r0, r3
 8008376:	3708      	adds	r7, #8
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800837c:	b480      	push	{r7}
 800837e:	b085      	sub	sp, #20
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800838a:	b2db      	uxtb	r3, r3
 800838c:	2b01      	cmp	r3, #1
 800838e:	d001      	beq.n	8008394 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	e04e      	b.n	8008432 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2202      	movs	r2, #2
 8008398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	68da      	ldr	r2, [r3, #12]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f042 0201 	orr.w	r2, r2, #1
 80083aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a23      	ldr	r2, [pc, #140]	; (8008440 <HAL_TIM_Base_Start_IT+0xc4>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d022      	beq.n	80083fc <HAL_TIM_Base_Start_IT+0x80>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083be:	d01d      	beq.n	80083fc <HAL_TIM_Base_Start_IT+0x80>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a1f      	ldr	r2, [pc, #124]	; (8008444 <HAL_TIM_Base_Start_IT+0xc8>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d018      	beq.n	80083fc <HAL_TIM_Base_Start_IT+0x80>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a1e      	ldr	r2, [pc, #120]	; (8008448 <HAL_TIM_Base_Start_IT+0xcc>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d013      	beq.n	80083fc <HAL_TIM_Base_Start_IT+0x80>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a1c      	ldr	r2, [pc, #112]	; (800844c <HAL_TIM_Base_Start_IT+0xd0>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d00e      	beq.n	80083fc <HAL_TIM_Base_Start_IT+0x80>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a1b      	ldr	r2, [pc, #108]	; (8008450 <HAL_TIM_Base_Start_IT+0xd4>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d009      	beq.n	80083fc <HAL_TIM_Base_Start_IT+0x80>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a19      	ldr	r2, [pc, #100]	; (8008454 <HAL_TIM_Base_Start_IT+0xd8>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d004      	beq.n	80083fc <HAL_TIM_Base_Start_IT+0x80>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a18      	ldr	r2, [pc, #96]	; (8008458 <HAL_TIM_Base_Start_IT+0xdc>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d111      	bne.n	8008420 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	f003 0307 	and.w	r3, r3, #7
 8008406:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2b06      	cmp	r3, #6
 800840c:	d010      	beq.n	8008430 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f042 0201 	orr.w	r2, r2, #1
 800841c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800841e:	e007      	b.n	8008430 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f042 0201 	orr.w	r2, r2, #1
 800842e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008430:	2300      	movs	r3, #0
}
 8008432:	4618      	mov	r0, r3
 8008434:	3714      	adds	r7, #20
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr
 800843e:	bf00      	nop
 8008440:	40010000 	.word	0x40010000
 8008444:	40000400 	.word	0x40000400
 8008448:	40000800 	.word	0x40000800
 800844c:	40000c00 	.word	0x40000c00
 8008450:	40010400 	.word	0x40010400
 8008454:	40014000 	.word	0x40014000
 8008458:	40001800 	.word	0x40001800

0800845c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d101      	bne.n	800846e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e041      	b.n	80084f2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008474:	b2db      	uxtb	r3, r3
 8008476:	2b00      	cmp	r3, #0
 8008478:	d106      	bne.n	8008488 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 f839 	bl	80084fa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2202      	movs	r2, #2
 800848c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	3304      	adds	r3, #4
 8008498:	4619      	mov	r1, r3
 800849a:	4610      	mov	r0, r2
 800849c:	f000 ff02 	bl	80092a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2201      	movs	r2, #1
 80084ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2201      	movs	r2, #1
 80084b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2201      	movs	r2, #1
 80084bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2201      	movs	r2, #1
 80084c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2201      	movs	r2, #1
 80084cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2201      	movs	r2, #1
 80084dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80084f0:	2300      	movs	r3, #0
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3708      	adds	r7, #8
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}

080084fa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80084fa:	b480      	push	{r7}
 80084fc:	b083      	sub	sp, #12
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008502:	bf00      	nop
 8008504:	370c      	adds	r7, #12
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr
	...

08008510 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d109      	bne.n	8008534 <HAL_TIM_PWM_Start+0x24>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008526:	b2db      	uxtb	r3, r3
 8008528:	2b01      	cmp	r3, #1
 800852a:	bf14      	ite	ne
 800852c:	2301      	movne	r3, #1
 800852e:	2300      	moveq	r3, #0
 8008530:	b2db      	uxtb	r3, r3
 8008532:	e022      	b.n	800857a <HAL_TIM_PWM_Start+0x6a>
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	2b04      	cmp	r3, #4
 8008538:	d109      	bne.n	800854e <HAL_TIM_PWM_Start+0x3e>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008540:	b2db      	uxtb	r3, r3
 8008542:	2b01      	cmp	r3, #1
 8008544:	bf14      	ite	ne
 8008546:	2301      	movne	r3, #1
 8008548:	2300      	moveq	r3, #0
 800854a:	b2db      	uxtb	r3, r3
 800854c:	e015      	b.n	800857a <HAL_TIM_PWM_Start+0x6a>
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	2b08      	cmp	r3, #8
 8008552:	d109      	bne.n	8008568 <HAL_TIM_PWM_Start+0x58>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800855a:	b2db      	uxtb	r3, r3
 800855c:	2b01      	cmp	r3, #1
 800855e:	bf14      	ite	ne
 8008560:	2301      	movne	r3, #1
 8008562:	2300      	moveq	r3, #0
 8008564:	b2db      	uxtb	r3, r3
 8008566:	e008      	b.n	800857a <HAL_TIM_PWM_Start+0x6a>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800856e:	b2db      	uxtb	r3, r3
 8008570:	2b01      	cmp	r3, #1
 8008572:	bf14      	ite	ne
 8008574:	2301      	movne	r3, #1
 8008576:	2300      	moveq	r3, #0
 8008578:	b2db      	uxtb	r3, r3
 800857a:	2b00      	cmp	r3, #0
 800857c:	d001      	beq.n	8008582 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	e07c      	b.n	800867c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d104      	bne.n	8008592 <HAL_TIM_PWM_Start+0x82>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2202      	movs	r2, #2
 800858c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008590:	e013      	b.n	80085ba <HAL_TIM_PWM_Start+0xaa>
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	2b04      	cmp	r3, #4
 8008596:	d104      	bne.n	80085a2 <HAL_TIM_PWM_Start+0x92>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2202      	movs	r2, #2
 800859c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085a0:	e00b      	b.n	80085ba <HAL_TIM_PWM_Start+0xaa>
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	2b08      	cmp	r3, #8
 80085a6:	d104      	bne.n	80085b2 <HAL_TIM_PWM_Start+0xa2>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2202      	movs	r2, #2
 80085ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085b0:	e003      	b.n	80085ba <HAL_TIM_PWM_Start+0xaa>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2202      	movs	r2, #2
 80085b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	2201      	movs	r2, #1
 80085c0:	6839      	ldr	r1, [r7, #0]
 80085c2:	4618      	mov	r0, r3
 80085c4:	f001 fa82 	bl	8009acc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a2d      	ldr	r2, [pc, #180]	; (8008684 <HAL_TIM_PWM_Start+0x174>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d004      	beq.n	80085dc <HAL_TIM_PWM_Start+0xcc>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a2c      	ldr	r2, [pc, #176]	; (8008688 <HAL_TIM_PWM_Start+0x178>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d101      	bne.n	80085e0 <HAL_TIM_PWM_Start+0xd0>
 80085dc:	2301      	movs	r3, #1
 80085de:	e000      	b.n	80085e2 <HAL_TIM_PWM_Start+0xd2>
 80085e0:	2300      	movs	r3, #0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d007      	beq.n	80085f6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80085f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a22      	ldr	r2, [pc, #136]	; (8008684 <HAL_TIM_PWM_Start+0x174>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d022      	beq.n	8008646 <HAL_TIM_PWM_Start+0x136>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008608:	d01d      	beq.n	8008646 <HAL_TIM_PWM_Start+0x136>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a1f      	ldr	r2, [pc, #124]	; (800868c <HAL_TIM_PWM_Start+0x17c>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d018      	beq.n	8008646 <HAL_TIM_PWM_Start+0x136>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a1d      	ldr	r2, [pc, #116]	; (8008690 <HAL_TIM_PWM_Start+0x180>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d013      	beq.n	8008646 <HAL_TIM_PWM_Start+0x136>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a1c      	ldr	r2, [pc, #112]	; (8008694 <HAL_TIM_PWM_Start+0x184>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d00e      	beq.n	8008646 <HAL_TIM_PWM_Start+0x136>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a16      	ldr	r2, [pc, #88]	; (8008688 <HAL_TIM_PWM_Start+0x178>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d009      	beq.n	8008646 <HAL_TIM_PWM_Start+0x136>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a18      	ldr	r2, [pc, #96]	; (8008698 <HAL_TIM_PWM_Start+0x188>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d004      	beq.n	8008646 <HAL_TIM_PWM_Start+0x136>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a16      	ldr	r2, [pc, #88]	; (800869c <HAL_TIM_PWM_Start+0x18c>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d111      	bne.n	800866a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	f003 0307 	and.w	r3, r3, #7
 8008650:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2b06      	cmp	r3, #6
 8008656:	d010      	beq.n	800867a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f042 0201 	orr.w	r2, r2, #1
 8008666:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008668:	e007      	b.n	800867a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f042 0201 	orr.w	r2, r2, #1
 8008678:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800867a:	2300      	movs	r3, #0
}
 800867c:	4618      	mov	r0, r3
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}
 8008684:	40010000 	.word	0x40010000
 8008688:	40010400 	.word	0x40010400
 800868c:	40000400 	.word	0x40000400
 8008690:	40000800 	.word	0x40000800
 8008694:	40000c00 	.word	0x40000c00
 8008698:	40014000 	.word	0x40014000
 800869c:	40001800 	.word	0x40001800

080086a0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d101      	bne.n	80086b2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	e041      	b.n	8008736 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d106      	bne.n	80086cc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2200      	movs	r2, #0
 80086c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f7fa ff90 	bl	80035ec <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2202      	movs	r2, #2
 80086d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	3304      	adds	r3, #4
 80086dc:	4619      	mov	r1, r3
 80086de:	4610      	mov	r0, r2
 80086e0:	f000 fde0 	bl	80092a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008734:	2300      	movs	r3, #0
}
 8008736:	4618      	mov	r0, r3
 8008738:	3708      	adds	r7, #8
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
	...

08008740 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800874a:	2300      	movs	r3, #0
 800874c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d104      	bne.n	800875e <HAL_TIM_IC_Start_IT+0x1e>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800875a:	b2db      	uxtb	r3, r3
 800875c:	e013      	b.n	8008786 <HAL_TIM_IC_Start_IT+0x46>
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	2b04      	cmp	r3, #4
 8008762:	d104      	bne.n	800876e <HAL_TIM_IC_Start_IT+0x2e>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800876a:	b2db      	uxtb	r3, r3
 800876c:	e00b      	b.n	8008786 <HAL_TIM_IC_Start_IT+0x46>
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	2b08      	cmp	r3, #8
 8008772:	d104      	bne.n	800877e <HAL_TIM_IC_Start_IT+0x3e>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800877a:	b2db      	uxtb	r3, r3
 800877c:	e003      	b.n	8008786 <HAL_TIM_IC_Start_IT+0x46>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008784:	b2db      	uxtb	r3, r3
 8008786:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d104      	bne.n	8008798 <HAL_TIM_IC_Start_IT+0x58>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008794:	b2db      	uxtb	r3, r3
 8008796:	e013      	b.n	80087c0 <HAL_TIM_IC_Start_IT+0x80>
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	2b04      	cmp	r3, #4
 800879c:	d104      	bne.n	80087a8 <HAL_TIM_IC_Start_IT+0x68>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	e00b      	b.n	80087c0 <HAL_TIM_IC_Start_IT+0x80>
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	2b08      	cmp	r3, #8
 80087ac:	d104      	bne.n	80087b8 <HAL_TIM_IC_Start_IT+0x78>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	e003      	b.n	80087c0 <HAL_TIM_IC_Start_IT+0x80>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087be:	b2db      	uxtb	r3, r3
 80087c0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80087c2:	7bbb      	ldrb	r3, [r7, #14]
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d102      	bne.n	80087ce <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80087c8:	7b7b      	ldrb	r3, [r7, #13]
 80087ca:	2b01      	cmp	r3, #1
 80087cc:	d001      	beq.n	80087d2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80087ce:	2301      	movs	r3, #1
 80087d0:	e0cc      	b.n	800896c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d104      	bne.n	80087e2 <HAL_TIM_IC_Start_IT+0xa2>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2202      	movs	r2, #2
 80087dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80087e0:	e013      	b.n	800880a <HAL_TIM_IC_Start_IT+0xca>
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	2b04      	cmp	r3, #4
 80087e6:	d104      	bne.n	80087f2 <HAL_TIM_IC_Start_IT+0xb2>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2202      	movs	r2, #2
 80087ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80087f0:	e00b      	b.n	800880a <HAL_TIM_IC_Start_IT+0xca>
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	2b08      	cmp	r3, #8
 80087f6:	d104      	bne.n	8008802 <HAL_TIM_IC_Start_IT+0xc2>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2202      	movs	r2, #2
 80087fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008800:	e003      	b.n	800880a <HAL_TIM_IC_Start_IT+0xca>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2202      	movs	r2, #2
 8008806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d104      	bne.n	800881a <HAL_TIM_IC_Start_IT+0xda>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2202      	movs	r2, #2
 8008814:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008818:	e013      	b.n	8008842 <HAL_TIM_IC_Start_IT+0x102>
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	2b04      	cmp	r3, #4
 800881e:	d104      	bne.n	800882a <HAL_TIM_IC_Start_IT+0xea>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2202      	movs	r2, #2
 8008824:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008828:	e00b      	b.n	8008842 <HAL_TIM_IC_Start_IT+0x102>
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	2b08      	cmp	r3, #8
 800882e:	d104      	bne.n	800883a <HAL_TIM_IC_Start_IT+0xfa>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2202      	movs	r2, #2
 8008834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008838:	e003      	b.n	8008842 <HAL_TIM_IC_Start_IT+0x102>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2202      	movs	r2, #2
 800883e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	2b0c      	cmp	r3, #12
 8008846:	d841      	bhi.n	80088cc <HAL_TIM_IC_Start_IT+0x18c>
 8008848:	a201      	add	r2, pc, #4	; (adr r2, 8008850 <HAL_TIM_IC_Start_IT+0x110>)
 800884a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800884e:	bf00      	nop
 8008850:	08008885 	.word	0x08008885
 8008854:	080088cd 	.word	0x080088cd
 8008858:	080088cd 	.word	0x080088cd
 800885c:	080088cd 	.word	0x080088cd
 8008860:	08008897 	.word	0x08008897
 8008864:	080088cd 	.word	0x080088cd
 8008868:	080088cd 	.word	0x080088cd
 800886c:	080088cd 	.word	0x080088cd
 8008870:	080088a9 	.word	0x080088a9
 8008874:	080088cd 	.word	0x080088cd
 8008878:	080088cd 	.word	0x080088cd
 800887c:	080088cd 	.word	0x080088cd
 8008880:	080088bb 	.word	0x080088bb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	68da      	ldr	r2, [r3, #12]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f042 0202 	orr.w	r2, r2, #2
 8008892:	60da      	str	r2, [r3, #12]
      break;
 8008894:	e01d      	b.n	80088d2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	68da      	ldr	r2, [r3, #12]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f042 0204 	orr.w	r2, r2, #4
 80088a4:	60da      	str	r2, [r3, #12]
      break;
 80088a6:	e014      	b.n	80088d2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	68da      	ldr	r2, [r3, #12]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f042 0208 	orr.w	r2, r2, #8
 80088b6:	60da      	str	r2, [r3, #12]
      break;
 80088b8:	e00b      	b.n	80088d2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	68da      	ldr	r2, [r3, #12]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f042 0210 	orr.w	r2, r2, #16
 80088c8:	60da      	str	r2, [r3, #12]
      break;
 80088ca:	e002      	b.n	80088d2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	73fb      	strb	r3, [r7, #15]
      break;
 80088d0:	bf00      	nop
  }

  if (status == HAL_OK)
 80088d2:	7bfb      	ldrb	r3, [r7, #15]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d148      	bne.n	800896a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2201      	movs	r2, #1
 80088de:	6839      	ldr	r1, [r7, #0]
 80088e0:	4618      	mov	r0, r3
 80088e2:	f001 f8f3 	bl	8009acc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a22      	ldr	r2, [pc, #136]	; (8008974 <HAL_TIM_IC_Start_IT+0x234>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d022      	beq.n	8008936 <HAL_TIM_IC_Start_IT+0x1f6>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088f8:	d01d      	beq.n	8008936 <HAL_TIM_IC_Start_IT+0x1f6>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a1e      	ldr	r2, [pc, #120]	; (8008978 <HAL_TIM_IC_Start_IT+0x238>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d018      	beq.n	8008936 <HAL_TIM_IC_Start_IT+0x1f6>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a1c      	ldr	r2, [pc, #112]	; (800897c <HAL_TIM_IC_Start_IT+0x23c>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d013      	beq.n	8008936 <HAL_TIM_IC_Start_IT+0x1f6>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a1b      	ldr	r2, [pc, #108]	; (8008980 <HAL_TIM_IC_Start_IT+0x240>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d00e      	beq.n	8008936 <HAL_TIM_IC_Start_IT+0x1f6>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a19      	ldr	r2, [pc, #100]	; (8008984 <HAL_TIM_IC_Start_IT+0x244>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d009      	beq.n	8008936 <HAL_TIM_IC_Start_IT+0x1f6>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a18      	ldr	r2, [pc, #96]	; (8008988 <HAL_TIM_IC_Start_IT+0x248>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d004      	beq.n	8008936 <HAL_TIM_IC_Start_IT+0x1f6>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a16      	ldr	r2, [pc, #88]	; (800898c <HAL_TIM_IC_Start_IT+0x24c>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d111      	bne.n	800895a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	f003 0307 	and.w	r3, r3, #7
 8008940:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	2b06      	cmp	r3, #6
 8008946:	d010      	beq.n	800896a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f042 0201 	orr.w	r2, r2, #1
 8008956:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008958:	e007      	b.n	800896a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	681a      	ldr	r2, [r3, #0]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f042 0201 	orr.w	r2, r2, #1
 8008968:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800896a:	7bfb      	ldrb	r3, [r7, #15]
}
 800896c:	4618      	mov	r0, r3
 800896e:	3710      	adds	r7, #16
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}
 8008974:	40010000 	.word	0x40010000
 8008978:	40000400 	.word	0x40000400
 800897c:	40000800 	.word	0x40000800
 8008980:	40000c00 	.word	0x40000c00
 8008984:	40010400 	.word	0x40010400
 8008988:	40014000 	.word	0x40014000
 800898c:	40001800 	.word	0x40001800

08008990 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b086      	sub	sp, #24
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d101      	bne.n	80089a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80089a0:	2301      	movs	r3, #1
 80089a2:	e097      	b.n	8008ad4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d106      	bne.n	80089be <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f7fa fd7d 	bl	80034b8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2202      	movs	r2, #2
 80089c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	6812      	ldr	r2, [r2, #0]
 80089d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80089d4:	f023 0307 	bic.w	r3, r3, #7
 80089d8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	3304      	adds	r3, #4
 80089e2:	4619      	mov	r1, r3
 80089e4:	4610      	mov	r0, r2
 80089e6:	f000 fc5d 	bl	80092a4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	699b      	ldr	r3, [r3, #24]
 80089f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	6a1b      	ldr	r3, [r3, #32]
 8008a00:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	697a      	ldr	r2, [r7, #20]
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a12:	f023 0303 	bic.w	r3, r3, #3
 8008a16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	689a      	ldr	r2, [r3, #8]
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	699b      	ldr	r3, [r3, #24]
 8008a20:	021b      	lsls	r3, r3, #8
 8008a22:	4313      	orrs	r3, r2
 8008a24:	693a      	ldr	r2, [r7, #16]
 8008a26:	4313      	orrs	r3, r2
 8008a28:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008a30:	f023 030c 	bic.w	r3, r3, #12
 8008a34:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008a3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	68da      	ldr	r2, [r3, #12]
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	69db      	ldr	r3, [r3, #28]
 8008a4a:	021b      	lsls	r3, r3, #8
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	693a      	ldr	r2, [r7, #16]
 8008a50:	4313      	orrs	r3, r2
 8008a52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	691b      	ldr	r3, [r3, #16]
 8008a58:	011a      	lsls	r2, r3, #4
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	6a1b      	ldr	r3, [r3, #32]
 8008a5e:	031b      	lsls	r3, r3, #12
 8008a60:	4313      	orrs	r3, r2
 8008a62:	693a      	ldr	r2, [r7, #16]
 8008a64:	4313      	orrs	r3, r2
 8008a66:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008a6e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008a76:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	685a      	ldr	r2, [r3, #4]
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	695b      	ldr	r3, [r3, #20]
 8008a80:	011b      	lsls	r3, r3, #4
 8008a82:	4313      	orrs	r3, r2
 8008a84:	68fa      	ldr	r2, [r7, #12]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	697a      	ldr	r2, [r7, #20]
 8008a90:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	693a      	ldr	r2, [r7, #16]
 8008a98:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	68fa      	ldr	r2, [r7, #12]
 8008aa0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2201      	movs	r2, #1
 8008aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2201      	movs	r2, #1
 8008abe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2201      	movs	r2, #1
 8008ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3718      	adds	r7, #24
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008aec:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008af4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008afc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008b04:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d110      	bne.n	8008b2e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008b0c:	7bfb      	ldrb	r3, [r7, #15]
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d102      	bne.n	8008b18 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008b12:	7b7b      	ldrb	r3, [r7, #13]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d001      	beq.n	8008b1c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e069      	b.n	8008bf0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2202      	movs	r2, #2
 8008b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2202      	movs	r2, #2
 8008b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b2c:	e031      	b.n	8008b92 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	2b04      	cmp	r3, #4
 8008b32:	d110      	bne.n	8008b56 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008b34:	7bbb      	ldrb	r3, [r7, #14]
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d102      	bne.n	8008b40 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008b3a:	7b3b      	ldrb	r3, [r7, #12]
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d001      	beq.n	8008b44 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008b40:	2301      	movs	r3, #1
 8008b42:	e055      	b.n	8008bf0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2202      	movs	r2, #2
 8008b48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2202      	movs	r2, #2
 8008b50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b54:	e01d      	b.n	8008b92 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008b56:	7bfb      	ldrb	r3, [r7, #15]
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d108      	bne.n	8008b6e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008b5c:	7bbb      	ldrb	r3, [r7, #14]
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d105      	bne.n	8008b6e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008b62:	7b7b      	ldrb	r3, [r7, #13]
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d102      	bne.n	8008b6e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008b68:	7b3b      	ldrb	r3, [r7, #12]
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d001      	beq.n	8008b72 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e03e      	b.n	8008bf0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2202      	movs	r2, #2
 8008b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2202      	movs	r2, #2
 8008b7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2202      	movs	r2, #2
 8008b86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2202      	movs	r2, #2
 8008b8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d003      	beq.n	8008ba0 <HAL_TIM_Encoder_Start+0xc4>
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	2b04      	cmp	r3, #4
 8008b9c:	d008      	beq.n	8008bb0 <HAL_TIM_Encoder_Start+0xd4>
 8008b9e:	e00f      	b.n	8008bc0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	2100      	movs	r1, #0
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f000 ff8f 	bl	8009acc <TIM_CCxChannelCmd>
      break;
 8008bae:	e016      	b.n	8008bde <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	2104      	movs	r1, #4
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f000 ff87 	bl	8009acc <TIM_CCxChannelCmd>
      break;
 8008bbe:	e00e      	b.n	8008bde <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	2100      	movs	r1, #0
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f000 ff7f 	bl	8009acc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	2104      	movs	r1, #4
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f000 ff78 	bl	8009acc <TIM_CCxChannelCmd>
      break;
 8008bdc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f042 0201 	orr.w	r2, r2, #1
 8008bec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3710      	adds	r7, #16
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	691b      	ldr	r3, [r3, #16]
 8008c06:	f003 0302 	and.w	r3, r3, #2
 8008c0a:	2b02      	cmp	r3, #2
 8008c0c:	d122      	bne.n	8008c54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	68db      	ldr	r3, [r3, #12]
 8008c14:	f003 0302 	and.w	r3, r3, #2
 8008c18:	2b02      	cmp	r3, #2
 8008c1a:	d11b      	bne.n	8008c54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f06f 0202 	mvn.w	r2, #2
 8008c24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2201      	movs	r2, #1
 8008c2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	699b      	ldr	r3, [r3, #24]
 8008c32:	f003 0303 	and.w	r3, r3, #3
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d003      	beq.n	8008c42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 fb13 	bl	8009266 <HAL_TIM_IC_CaptureCallback>
 8008c40:	e005      	b.n	8008c4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 fb05 	bl	8009252 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 fb16 	bl	800927a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2200      	movs	r2, #0
 8008c52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	691b      	ldr	r3, [r3, #16]
 8008c5a:	f003 0304 	and.w	r3, r3, #4
 8008c5e:	2b04      	cmp	r3, #4
 8008c60:	d122      	bne.n	8008ca8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	f003 0304 	and.w	r3, r3, #4
 8008c6c:	2b04      	cmp	r3, #4
 8008c6e:	d11b      	bne.n	8008ca8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f06f 0204 	mvn.w	r2, #4
 8008c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2202      	movs	r2, #2
 8008c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	699b      	ldr	r3, [r3, #24]
 8008c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d003      	beq.n	8008c96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 fae9 	bl	8009266 <HAL_TIM_IC_CaptureCallback>
 8008c94:	e005      	b.n	8008ca2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 fadb 	bl	8009252 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 faec 	bl	800927a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	691b      	ldr	r3, [r3, #16]
 8008cae:	f003 0308 	and.w	r3, r3, #8
 8008cb2:	2b08      	cmp	r3, #8
 8008cb4:	d122      	bne.n	8008cfc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	68db      	ldr	r3, [r3, #12]
 8008cbc:	f003 0308 	and.w	r3, r3, #8
 8008cc0:	2b08      	cmp	r3, #8
 8008cc2:	d11b      	bne.n	8008cfc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f06f 0208 	mvn.w	r2, #8
 8008ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2204      	movs	r2, #4
 8008cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	69db      	ldr	r3, [r3, #28]
 8008cda:	f003 0303 	and.w	r3, r3, #3
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d003      	beq.n	8008cea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 fabf 	bl	8009266 <HAL_TIM_IC_CaptureCallback>
 8008ce8:	e005      	b.n	8008cf6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 fab1 	bl	8009252 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 fac2 	bl	800927a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	691b      	ldr	r3, [r3, #16]
 8008d02:	f003 0310 	and.w	r3, r3, #16
 8008d06:	2b10      	cmp	r3, #16
 8008d08:	d122      	bne.n	8008d50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	f003 0310 	and.w	r3, r3, #16
 8008d14:	2b10      	cmp	r3, #16
 8008d16:	d11b      	bne.n	8008d50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f06f 0210 	mvn.w	r2, #16
 8008d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2208      	movs	r2, #8
 8008d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	69db      	ldr	r3, [r3, #28]
 8008d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d003      	beq.n	8008d3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 fa95 	bl	8009266 <HAL_TIM_IC_CaptureCallback>
 8008d3c:	e005      	b.n	8008d4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 fa87 	bl	8009252 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 fa98 	bl	800927a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	691b      	ldr	r3, [r3, #16]
 8008d56:	f003 0301 	and.w	r3, r3, #1
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d10e      	bne.n	8008d7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	68db      	ldr	r3, [r3, #12]
 8008d64:	f003 0301 	and.w	r3, r3, #1
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d107      	bne.n	8008d7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f06f 0201 	mvn.w	r2, #1
 8008d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f7f9 fbea 	bl	8002550 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	691b      	ldr	r3, [r3, #16]
 8008d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d86:	2b80      	cmp	r3, #128	; 0x80
 8008d88:	d10e      	bne.n	8008da8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d94:	2b80      	cmp	r3, #128	; 0x80
 8008d96:	d107      	bne.n	8008da8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 ff90 	bl	8009cc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	691b      	ldr	r3, [r3, #16]
 8008dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008db2:	2b40      	cmp	r3, #64	; 0x40
 8008db4:	d10e      	bne.n	8008dd4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	68db      	ldr	r3, [r3, #12]
 8008dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dc0:	2b40      	cmp	r3, #64	; 0x40
 8008dc2:	d107      	bne.n	8008dd4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 fa5d 	bl	800928e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	691b      	ldr	r3, [r3, #16]
 8008dda:	f003 0320 	and.w	r3, r3, #32
 8008dde:	2b20      	cmp	r3, #32
 8008de0:	d10e      	bne.n	8008e00 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	68db      	ldr	r3, [r3, #12]
 8008de8:	f003 0320 	and.w	r3, r3, #32
 8008dec:	2b20      	cmp	r3, #32
 8008dee:	d107      	bne.n	8008e00 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f06f 0220 	mvn.w	r2, #32
 8008df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 ff5a 	bl	8009cb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e00:	bf00      	nop
 8008e02:	3708      	adds	r7, #8
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b086      	sub	sp, #24
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e14:	2300      	movs	r3, #0
 8008e16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d101      	bne.n	8008e26 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008e22:	2302      	movs	r3, #2
 8008e24:	e088      	b.n	8008f38 <HAL_TIM_IC_ConfigChannel+0x130>
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2201      	movs	r2, #1
 8008e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d11b      	bne.n	8008e6c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6818      	ldr	r0, [r3, #0]
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	6819      	ldr	r1, [r3, #0]
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	685a      	ldr	r2, [r3, #4]
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	68db      	ldr	r3, [r3, #12]
 8008e44:	f000 fc7e 	bl	8009744 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	699a      	ldr	r2, [r3, #24]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f022 020c 	bic.w	r2, r2, #12
 8008e56:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	6999      	ldr	r1, [r3, #24]
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	689a      	ldr	r2, [r3, #8]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	430a      	orrs	r2, r1
 8008e68:	619a      	str	r2, [r3, #24]
 8008e6a:	e060      	b.n	8008f2e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2b04      	cmp	r3, #4
 8008e70:	d11c      	bne.n	8008eac <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	6818      	ldr	r0, [r3, #0]
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	6819      	ldr	r1, [r3, #0]
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	685a      	ldr	r2, [r3, #4]
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	68db      	ldr	r3, [r3, #12]
 8008e82:	f000 fd02 	bl	800988a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	699a      	ldr	r2, [r3, #24]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008e94:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	6999      	ldr	r1, [r3, #24]
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	021a      	lsls	r2, r3, #8
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	430a      	orrs	r2, r1
 8008ea8:	619a      	str	r2, [r3, #24]
 8008eaa:	e040      	b.n	8008f2e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2b08      	cmp	r3, #8
 8008eb0:	d11b      	bne.n	8008eea <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	6818      	ldr	r0, [r3, #0]
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	6819      	ldr	r1, [r3, #0]
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	685a      	ldr	r2, [r3, #4]
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	f000 fd4f 	bl	8009964 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	69da      	ldr	r2, [r3, #28]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f022 020c 	bic.w	r2, r2, #12
 8008ed4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	69d9      	ldr	r1, [r3, #28]
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	689a      	ldr	r2, [r3, #8]
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	430a      	orrs	r2, r1
 8008ee6:	61da      	str	r2, [r3, #28]
 8008ee8:	e021      	b.n	8008f2e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2b0c      	cmp	r3, #12
 8008eee:	d11c      	bne.n	8008f2a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	6818      	ldr	r0, [r3, #0]
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	6819      	ldr	r1, [r3, #0]
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	685a      	ldr	r2, [r3, #4]
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	f000 fd6c 	bl	80099dc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	69da      	ldr	r2, [r3, #28]
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008f12:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	69d9      	ldr	r1, [r3, #28]
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	689b      	ldr	r3, [r3, #8]
 8008f1e:	021a      	lsls	r2, r3, #8
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	430a      	orrs	r2, r1
 8008f26:	61da      	str	r2, [r3, #28]
 8008f28:	e001      	b.n	8008f2e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2200      	movs	r2, #0
 8008f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008f36:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3718      	adds	r7, #24
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b086      	sub	sp, #24
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	d101      	bne.n	8008f5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008f5a:	2302      	movs	r3, #2
 8008f5c:	e0ae      	b.n	80090bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2201      	movs	r2, #1
 8008f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2b0c      	cmp	r3, #12
 8008f6a:	f200 809f 	bhi.w	80090ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008f6e:	a201      	add	r2, pc, #4	; (adr r2, 8008f74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f74:	08008fa9 	.word	0x08008fa9
 8008f78:	080090ad 	.word	0x080090ad
 8008f7c:	080090ad 	.word	0x080090ad
 8008f80:	080090ad 	.word	0x080090ad
 8008f84:	08008fe9 	.word	0x08008fe9
 8008f88:	080090ad 	.word	0x080090ad
 8008f8c:	080090ad 	.word	0x080090ad
 8008f90:	080090ad 	.word	0x080090ad
 8008f94:	0800902b 	.word	0x0800902b
 8008f98:	080090ad 	.word	0x080090ad
 8008f9c:	080090ad 	.word	0x080090ad
 8008fa0:	080090ad 	.word	0x080090ad
 8008fa4:	0800906b 	.word	0x0800906b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	68b9      	ldr	r1, [r7, #8]
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f000 fa18 	bl	80093e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	699a      	ldr	r2, [r3, #24]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f042 0208 	orr.w	r2, r2, #8
 8008fc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	699a      	ldr	r2, [r3, #24]
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f022 0204 	bic.w	r2, r2, #4
 8008fd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	6999      	ldr	r1, [r3, #24]
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	691a      	ldr	r2, [r3, #16]
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	430a      	orrs	r2, r1
 8008fe4:	619a      	str	r2, [r3, #24]
      break;
 8008fe6:	e064      	b.n	80090b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	68b9      	ldr	r1, [r7, #8]
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f000 fa68 	bl	80094c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	699a      	ldr	r2, [r3, #24]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009002:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	699a      	ldr	r2, [r3, #24]
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009012:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	6999      	ldr	r1, [r3, #24]
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	691b      	ldr	r3, [r3, #16]
 800901e:	021a      	lsls	r2, r3, #8
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	430a      	orrs	r2, r1
 8009026:	619a      	str	r2, [r3, #24]
      break;
 8009028:	e043      	b.n	80090b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	68b9      	ldr	r1, [r7, #8]
 8009030:	4618      	mov	r0, r3
 8009032:	f000 fabd 	bl	80095b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	69da      	ldr	r2, [r3, #28]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f042 0208 	orr.w	r2, r2, #8
 8009044:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	69da      	ldr	r2, [r3, #28]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f022 0204 	bic.w	r2, r2, #4
 8009054:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	69d9      	ldr	r1, [r3, #28]
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	691a      	ldr	r2, [r3, #16]
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	430a      	orrs	r2, r1
 8009066:	61da      	str	r2, [r3, #28]
      break;
 8009068:	e023      	b.n	80090b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	68b9      	ldr	r1, [r7, #8]
 8009070:	4618      	mov	r0, r3
 8009072:	f000 fb11 	bl	8009698 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	69da      	ldr	r2, [r3, #28]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009084:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	69da      	ldr	r2, [r3, #28]
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009094:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	69d9      	ldr	r1, [r3, #28]
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	691b      	ldr	r3, [r3, #16]
 80090a0:	021a      	lsls	r2, r3, #8
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	430a      	orrs	r2, r1
 80090a8:	61da      	str	r2, [r3, #28]
      break;
 80090aa:	e002      	b.n	80090b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80090ac:	2301      	movs	r3, #1
 80090ae:	75fb      	strb	r3, [r7, #23]
      break;
 80090b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2200      	movs	r2, #0
 80090b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80090ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3718      	adds	r7, #24
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80090ce:	2300      	movs	r3, #0
 80090d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d101      	bne.n	80090e0 <HAL_TIM_ConfigClockSource+0x1c>
 80090dc:	2302      	movs	r3, #2
 80090de:	e0b4      	b.n	800924a <HAL_TIM_ConfigClockSource+0x186>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2201      	movs	r2, #1
 80090e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2202      	movs	r2, #2
 80090ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	689b      	ldr	r3, [r3, #8]
 80090f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80090fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009106:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	68ba      	ldr	r2, [r7, #8]
 800910e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009118:	d03e      	beq.n	8009198 <HAL_TIM_ConfigClockSource+0xd4>
 800911a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800911e:	f200 8087 	bhi.w	8009230 <HAL_TIM_ConfigClockSource+0x16c>
 8009122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009126:	f000 8086 	beq.w	8009236 <HAL_TIM_ConfigClockSource+0x172>
 800912a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800912e:	d87f      	bhi.n	8009230 <HAL_TIM_ConfigClockSource+0x16c>
 8009130:	2b70      	cmp	r3, #112	; 0x70
 8009132:	d01a      	beq.n	800916a <HAL_TIM_ConfigClockSource+0xa6>
 8009134:	2b70      	cmp	r3, #112	; 0x70
 8009136:	d87b      	bhi.n	8009230 <HAL_TIM_ConfigClockSource+0x16c>
 8009138:	2b60      	cmp	r3, #96	; 0x60
 800913a:	d050      	beq.n	80091de <HAL_TIM_ConfigClockSource+0x11a>
 800913c:	2b60      	cmp	r3, #96	; 0x60
 800913e:	d877      	bhi.n	8009230 <HAL_TIM_ConfigClockSource+0x16c>
 8009140:	2b50      	cmp	r3, #80	; 0x50
 8009142:	d03c      	beq.n	80091be <HAL_TIM_ConfigClockSource+0xfa>
 8009144:	2b50      	cmp	r3, #80	; 0x50
 8009146:	d873      	bhi.n	8009230 <HAL_TIM_ConfigClockSource+0x16c>
 8009148:	2b40      	cmp	r3, #64	; 0x40
 800914a:	d058      	beq.n	80091fe <HAL_TIM_ConfigClockSource+0x13a>
 800914c:	2b40      	cmp	r3, #64	; 0x40
 800914e:	d86f      	bhi.n	8009230 <HAL_TIM_ConfigClockSource+0x16c>
 8009150:	2b30      	cmp	r3, #48	; 0x30
 8009152:	d064      	beq.n	800921e <HAL_TIM_ConfigClockSource+0x15a>
 8009154:	2b30      	cmp	r3, #48	; 0x30
 8009156:	d86b      	bhi.n	8009230 <HAL_TIM_ConfigClockSource+0x16c>
 8009158:	2b20      	cmp	r3, #32
 800915a:	d060      	beq.n	800921e <HAL_TIM_ConfigClockSource+0x15a>
 800915c:	2b20      	cmp	r3, #32
 800915e:	d867      	bhi.n	8009230 <HAL_TIM_ConfigClockSource+0x16c>
 8009160:	2b00      	cmp	r3, #0
 8009162:	d05c      	beq.n	800921e <HAL_TIM_ConfigClockSource+0x15a>
 8009164:	2b10      	cmp	r3, #16
 8009166:	d05a      	beq.n	800921e <HAL_TIM_ConfigClockSource+0x15a>
 8009168:	e062      	b.n	8009230 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6818      	ldr	r0, [r3, #0]
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	6899      	ldr	r1, [r3, #8]
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	685a      	ldr	r2, [r3, #4]
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	68db      	ldr	r3, [r3, #12]
 800917a:	f000 fc87 	bl	8009a8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	689b      	ldr	r3, [r3, #8]
 8009184:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800918c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	68ba      	ldr	r2, [r7, #8]
 8009194:	609a      	str	r2, [r3, #8]
      break;
 8009196:	e04f      	b.n	8009238 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6818      	ldr	r0, [r3, #0]
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	6899      	ldr	r1, [r3, #8]
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	685a      	ldr	r2, [r3, #4]
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	68db      	ldr	r3, [r3, #12]
 80091a8:	f000 fc70 	bl	8009a8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	689a      	ldr	r2, [r3, #8]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80091ba:	609a      	str	r2, [r3, #8]
      break;
 80091bc:	e03c      	b.n	8009238 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6818      	ldr	r0, [r3, #0]
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	6859      	ldr	r1, [r3, #4]
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	461a      	mov	r2, r3
 80091cc:	f000 fb2e 	bl	800982c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	2150      	movs	r1, #80	; 0x50
 80091d6:	4618      	mov	r0, r3
 80091d8:	f000 fc3d 	bl	8009a56 <TIM_ITRx_SetConfig>
      break;
 80091dc:	e02c      	b.n	8009238 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6818      	ldr	r0, [r3, #0]
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	6859      	ldr	r1, [r3, #4]
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	68db      	ldr	r3, [r3, #12]
 80091ea:	461a      	mov	r2, r3
 80091ec:	f000 fb8a 	bl	8009904 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	2160      	movs	r1, #96	; 0x60
 80091f6:	4618      	mov	r0, r3
 80091f8:	f000 fc2d 	bl	8009a56 <TIM_ITRx_SetConfig>
      break;
 80091fc:	e01c      	b.n	8009238 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6818      	ldr	r0, [r3, #0]
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	6859      	ldr	r1, [r3, #4]
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	68db      	ldr	r3, [r3, #12]
 800920a:	461a      	mov	r2, r3
 800920c:	f000 fb0e 	bl	800982c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	2140      	movs	r1, #64	; 0x40
 8009216:	4618      	mov	r0, r3
 8009218:	f000 fc1d 	bl	8009a56 <TIM_ITRx_SetConfig>
      break;
 800921c:	e00c      	b.n	8009238 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4619      	mov	r1, r3
 8009228:	4610      	mov	r0, r2
 800922a:	f000 fc14 	bl	8009a56 <TIM_ITRx_SetConfig>
      break;
 800922e:	e003      	b.n	8009238 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009230:	2301      	movs	r3, #1
 8009232:	73fb      	strb	r3, [r7, #15]
      break;
 8009234:	e000      	b.n	8009238 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009236:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009248:	7bfb      	ldrb	r3, [r7, #15]
}
 800924a:	4618      	mov	r0, r3
 800924c:	3710      	adds	r7, #16
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009252:	b480      	push	{r7}
 8009254:	b083      	sub	sp, #12
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800925a:	bf00      	nop
 800925c:	370c      	adds	r7, #12
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr

08009266 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009266:	b480      	push	{r7}
 8009268:	b083      	sub	sp, #12
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800926e:	bf00      	nop
 8009270:	370c      	adds	r7, #12
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr

0800927a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800927a:	b480      	push	{r7}
 800927c:	b083      	sub	sp, #12
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009282:	bf00      	nop
 8009284:	370c      	adds	r7, #12
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr

0800928e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800928e:	b480      	push	{r7}
 8009290:	b083      	sub	sp, #12
 8009292:	af00      	add	r7, sp, #0
 8009294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009296:	bf00      	nop
 8009298:	370c      	adds	r7, #12
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr
	...

080092a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b085      	sub	sp, #20
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	4a40      	ldr	r2, [pc, #256]	; (80093b8 <TIM_Base_SetConfig+0x114>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d013      	beq.n	80092e4 <TIM_Base_SetConfig+0x40>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092c2:	d00f      	beq.n	80092e4 <TIM_Base_SetConfig+0x40>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	4a3d      	ldr	r2, [pc, #244]	; (80093bc <TIM_Base_SetConfig+0x118>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d00b      	beq.n	80092e4 <TIM_Base_SetConfig+0x40>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	4a3c      	ldr	r2, [pc, #240]	; (80093c0 <TIM_Base_SetConfig+0x11c>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d007      	beq.n	80092e4 <TIM_Base_SetConfig+0x40>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	4a3b      	ldr	r2, [pc, #236]	; (80093c4 <TIM_Base_SetConfig+0x120>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d003      	beq.n	80092e4 <TIM_Base_SetConfig+0x40>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	4a3a      	ldr	r2, [pc, #232]	; (80093c8 <TIM_Base_SetConfig+0x124>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d108      	bne.n	80092f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	68fa      	ldr	r2, [r7, #12]
 80092f2:	4313      	orrs	r3, r2
 80092f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	4a2f      	ldr	r2, [pc, #188]	; (80093b8 <TIM_Base_SetConfig+0x114>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d02b      	beq.n	8009356 <TIM_Base_SetConfig+0xb2>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009304:	d027      	beq.n	8009356 <TIM_Base_SetConfig+0xb2>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	4a2c      	ldr	r2, [pc, #176]	; (80093bc <TIM_Base_SetConfig+0x118>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d023      	beq.n	8009356 <TIM_Base_SetConfig+0xb2>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	4a2b      	ldr	r2, [pc, #172]	; (80093c0 <TIM_Base_SetConfig+0x11c>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d01f      	beq.n	8009356 <TIM_Base_SetConfig+0xb2>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	4a2a      	ldr	r2, [pc, #168]	; (80093c4 <TIM_Base_SetConfig+0x120>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d01b      	beq.n	8009356 <TIM_Base_SetConfig+0xb2>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	4a29      	ldr	r2, [pc, #164]	; (80093c8 <TIM_Base_SetConfig+0x124>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d017      	beq.n	8009356 <TIM_Base_SetConfig+0xb2>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	4a28      	ldr	r2, [pc, #160]	; (80093cc <TIM_Base_SetConfig+0x128>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d013      	beq.n	8009356 <TIM_Base_SetConfig+0xb2>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	4a27      	ldr	r2, [pc, #156]	; (80093d0 <TIM_Base_SetConfig+0x12c>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d00f      	beq.n	8009356 <TIM_Base_SetConfig+0xb2>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	4a26      	ldr	r2, [pc, #152]	; (80093d4 <TIM_Base_SetConfig+0x130>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d00b      	beq.n	8009356 <TIM_Base_SetConfig+0xb2>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	4a25      	ldr	r2, [pc, #148]	; (80093d8 <TIM_Base_SetConfig+0x134>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d007      	beq.n	8009356 <TIM_Base_SetConfig+0xb2>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	4a24      	ldr	r2, [pc, #144]	; (80093dc <TIM_Base_SetConfig+0x138>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d003      	beq.n	8009356 <TIM_Base_SetConfig+0xb2>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	4a23      	ldr	r2, [pc, #140]	; (80093e0 <TIM_Base_SetConfig+0x13c>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d108      	bne.n	8009368 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800935c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	68db      	ldr	r3, [r3, #12]
 8009362:	68fa      	ldr	r2, [r7, #12]
 8009364:	4313      	orrs	r3, r2
 8009366:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	695b      	ldr	r3, [r3, #20]
 8009372:	4313      	orrs	r3, r2
 8009374:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	68fa      	ldr	r2, [r7, #12]
 800937a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	689a      	ldr	r2, [r3, #8]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	681a      	ldr	r2, [r3, #0]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	4a0a      	ldr	r2, [pc, #40]	; (80093b8 <TIM_Base_SetConfig+0x114>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d003      	beq.n	800939c <TIM_Base_SetConfig+0xf8>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	4a0c      	ldr	r2, [pc, #48]	; (80093c8 <TIM_Base_SetConfig+0x124>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d103      	bne.n	80093a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	691a      	ldr	r2, [r3, #16]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2201      	movs	r2, #1
 80093a8:	615a      	str	r2, [r3, #20]
}
 80093aa:	bf00      	nop
 80093ac:	3714      	adds	r7, #20
 80093ae:	46bd      	mov	sp, r7
 80093b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b4:	4770      	bx	lr
 80093b6:	bf00      	nop
 80093b8:	40010000 	.word	0x40010000
 80093bc:	40000400 	.word	0x40000400
 80093c0:	40000800 	.word	0x40000800
 80093c4:	40000c00 	.word	0x40000c00
 80093c8:	40010400 	.word	0x40010400
 80093cc:	40014000 	.word	0x40014000
 80093d0:	40014400 	.word	0x40014400
 80093d4:	40014800 	.word	0x40014800
 80093d8:	40001800 	.word	0x40001800
 80093dc:	40001c00 	.word	0x40001c00
 80093e0:	40002000 	.word	0x40002000

080093e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b087      	sub	sp, #28
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6a1b      	ldr	r3, [r3, #32]
 80093f2:	f023 0201 	bic.w	r2, r3, #1
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6a1b      	ldr	r3, [r3, #32]
 80093fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	699b      	ldr	r3, [r3, #24]
 800940a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f023 0303 	bic.w	r3, r3, #3
 800941a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	4313      	orrs	r3, r2
 8009424:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	f023 0302 	bic.w	r3, r3, #2
 800942c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	689b      	ldr	r3, [r3, #8]
 8009432:	697a      	ldr	r2, [r7, #20]
 8009434:	4313      	orrs	r3, r2
 8009436:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	4a20      	ldr	r2, [pc, #128]	; (80094bc <TIM_OC1_SetConfig+0xd8>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d003      	beq.n	8009448 <TIM_OC1_SetConfig+0x64>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4a1f      	ldr	r2, [pc, #124]	; (80094c0 <TIM_OC1_SetConfig+0xdc>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d10c      	bne.n	8009462 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	f023 0308 	bic.w	r3, r3, #8
 800944e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	697a      	ldr	r2, [r7, #20]
 8009456:	4313      	orrs	r3, r2
 8009458:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	f023 0304 	bic.w	r3, r3, #4
 8009460:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	4a15      	ldr	r2, [pc, #84]	; (80094bc <TIM_OC1_SetConfig+0xd8>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d003      	beq.n	8009472 <TIM_OC1_SetConfig+0x8e>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	4a14      	ldr	r2, [pc, #80]	; (80094c0 <TIM_OC1_SetConfig+0xdc>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d111      	bne.n	8009496 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009478:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009480:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	695b      	ldr	r3, [r3, #20]
 8009486:	693a      	ldr	r2, [r7, #16]
 8009488:	4313      	orrs	r3, r2
 800948a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	699b      	ldr	r3, [r3, #24]
 8009490:	693a      	ldr	r2, [r7, #16]
 8009492:	4313      	orrs	r3, r2
 8009494:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	693a      	ldr	r2, [r7, #16]
 800949a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	68fa      	ldr	r2, [r7, #12]
 80094a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	685a      	ldr	r2, [r3, #4]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	697a      	ldr	r2, [r7, #20]
 80094ae:	621a      	str	r2, [r3, #32]
}
 80094b0:	bf00      	nop
 80094b2:	371c      	adds	r7, #28
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr
 80094bc:	40010000 	.word	0x40010000
 80094c0:	40010400 	.word	0x40010400

080094c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b087      	sub	sp, #28
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6a1b      	ldr	r3, [r3, #32]
 80094d2:	f023 0210 	bic.w	r2, r3, #16
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6a1b      	ldr	r3, [r3, #32]
 80094de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	699b      	ldr	r3, [r3, #24]
 80094ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	021b      	lsls	r3, r3, #8
 8009502:	68fa      	ldr	r2, [r7, #12]
 8009504:	4313      	orrs	r3, r2
 8009506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	f023 0320 	bic.w	r3, r3, #32
 800950e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	689b      	ldr	r3, [r3, #8]
 8009514:	011b      	lsls	r3, r3, #4
 8009516:	697a      	ldr	r2, [r7, #20]
 8009518:	4313      	orrs	r3, r2
 800951a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	4a22      	ldr	r2, [pc, #136]	; (80095a8 <TIM_OC2_SetConfig+0xe4>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d003      	beq.n	800952c <TIM_OC2_SetConfig+0x68>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	4a21      	ldr	r2, [pc, #132]	; (80095ac <TIM_OC2_SetConfig+0xe8>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d10d      	bne.n	8009548 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009532:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	68db      	ldr	r3, [r3, #12]
 8009538:	011b      	lsls	r3, r3, #4
 800953a:	697a      	ldr	r2, [r7, #20]
 800953c:	4313      	orrs	r3, r2
 800953e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009546:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	4a17      	ldr	r2, [pc, #92]	; (80095a8 <TIM_OC2_SetConfig+0xe4>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d003      	beq.n	8009558 <TIM_OC2_SetConfig+0x94>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	4a16      	ldr	r2, [pc, #88]	; (80095ac <TIM_OC2_SetConfig+0xe8>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d113      	bne.n	8009580 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800955e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009566:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	695b      	ldr	r3, [r3, #20]
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	693a      	ldr	r2, [r7, #16]
 8009570:	4313      	orrs	r3, r2
 8009572:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	699b      	ldr	r3, [r3, #24]
 8009578:	009b      	lsls	r3, r3, #2
 800957a:	693a      	ldr	r2, [r7, #16]
 800957c:	4313      	orrs	r3, r2
 800957e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	693a      	ldr	r2, [r7, #16]
 8009584:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	68fa      	ldr	r2, [r7, #12]
 800958a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	685a      	ldr	r2, [r3, #4]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	697a      	ldr	r2, [r7, #20]
 8009598:	621a      	str	r2, [r3, #32]
}
 800959a:	bf00      	nop
 800959c:	371c      	adds	r7, #28
 800959e:	46bd      	mov	sp, r7
 80095a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a4:	4770      	bx	lr
 80095a6:	bf00      	nop
 80095a8:	40010000 	.word	0x40010000
 80095ac:	40010400 	.word	0x40010400

080095b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b087      	sub	sp, #28
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6a1b      	ldr	r3, [r3, #32]
 80095be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6a1b      	ldr	r3, [r3, #32]
 80095ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	69db      	ldr	r3, [r3, #28]
 80095d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f023 0303 	bic.w	r3, r3, #3
 80095e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	68fa      	ldr	r2, [r7, #12]
 80095ee:	4313      	orrs	r3, r2
 80095f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80095f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	689b      	ldr	r3, [r3, #8]
 80095fe:	021b      	lsls	r3, r3, #8
 8009600:	697a      	ldr	r2, [r7, #20]
 8009602:	4313      	orrs	r3, r2
 8009604:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	4a21      	ldr	r2, [pc, #132]	; (8009690 <TIM_OC3_SetConfig+0xe0>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d003      	beq.n	8009616 <TIM_OC3_SetConfig+0x66>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	4a20      	ldr	r2, [pc, #128]	; (8009694 <TIM_OC3_SetConfig+0xe4>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d10d      	bne.n	8009632 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800961c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	68db      	ldr	r3, [r3, #12]
 8009622:	021b      	lsls	r3, r3, #8
 8009624:	697a      	ldr	r2, [r7, #20]
 8009626:	4313      	orrs	r3, r2
 8009628:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009630:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	4a16      	ldr	r2, [pc, #88]	; (8009690 <TIM_OC3_SetConfig+0xe0>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d003      	beq.n	8009642 <TIM_OC3_SetConfig+0x92>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	4a15      	ldr	r2, [pc, #84]	; (8009694 <TIM_OC3_SetConfig+0xe4>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d113      	bne.n	800966a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009648:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009650:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	695b      	ldr	r3, [r3, #20]
 8009656:	011b      	lsls	r3, r3, #4
 8009658:	693a      	ldr	r2, [r7, #16]
 800965a:	4313      	orrs	r3, r2
 800965c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	699b      	ldr	r3, [r3, #24]
 8009662:	011b      	lsls	r3, r3, #4
 8009664:	693a      	ldr	r2, [r7, #16]
 8009666:	4313      	orrs	r3, r2
 8009668:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	693a      	ldr	r2, [r7, #16]
 800966e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	68fa      	ldr	r2, [r7, #12]
 8009674:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	685a      	ldr	r2, [r3, #4]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	697a      	ldr	r2, [r7, #20]
 8009682:	621a      	str	r2, [r3, #32]
}
 8009684:	bf00      	nop
 8009686:	371c      	adds	r7, #28
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr
 8009690:	40010000 	.word	0x40010000
 8009694:	40010400 	.word	0x40010400

08009698 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009698:	b480      	push	{r7}
 800969a:	b087      	sub	sp, #28
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6a1b      	ldr	r3, [r3, #32]
 80096a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6a1b      	ldr	r3, [r3, #32]
 80096b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	69db      	ldr	r3, [r3, #28]
 80096be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	021b      	lsls	r3, r3, #8
 80096d6:	68fa      	ldr	r2, [r7, #12]
 80096d8:	4313      	orrs	r3, r2
 80096da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80096e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	689b      	ldr	r3, [r3, #8]
 80096e8:	031b      	lsls	r3, r3, #12
 80096ea:	693a      	ldr	r2, [r7, #16]
 80096ec:	4313      	orrs	r3, r2
 80096ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	4a12      	ldr	r2, [pc, #72]	; (800973c <TIM_OC4_SetConfig+0xa4>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d003      	beq.n	8009700 <TIM_OC4_SetConfig+0x68>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	4a11      	ldr	r2, [pc, #68]	; (8009740 <TIM_OC4_SetConfig+0xa8>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d109      	bne.n	8009714 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009706:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	695b      	ldr	r3, [r3, #20]
 800970c:	019b      	lsls	r3, r3, #6
 800970e:	697a      	ldr	r2, [r7, #20]
 8009710:	4313      	orrs	r3, r2
 8009712:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	697a      	ldr	r2, [r7, #20]
 8009718:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	68fa      	ldr	r2, [r7, #12]
 800971e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	685a      	ldr	r2, [r3, #4]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	693a      	ldr	r2, [r7, #16]
 800972c:	621a      	str	r2, [r3, #32]
}
 800972e:	bf00      	nop
 8009730:	371c      	adds	r7, #28
 8009732:	46bd      	mov	sp, r7
 8009734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009738:	4770      	bx	lr
 800973a:	bf00      	nop
 800973c:	40010000 	.word	0x40010000
 8009740:	40010400 	.word	0x40010400

08009744 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009744:	b480      	push	{r7}
 8009746:	b087      	sub	sp, #28
 8009748:	af00      	add	r7, sp, #0
 800974a:	60f8      	str	r0, [r7, #12]
 800974c:	60b9      	str	r1, [r7, #8]
 800974e:	607a      	str	r2, [r7, #4]
 8009750:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	6a1b      	ldr	r3, [r3, #32]
 8009756:	f023 0201 	bic.w	r2, r3, #1
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	699b      	ldr	r3, [r3, #24]
 8009762:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	6a1b      	ldr	r3, [r3, #32]
 8009768:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	4a28      	ldr	r2, [pc, #160]	; (8009810 <TIM_TI1_SetConfig+0xcc>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d01b      	beq.n	80097aa <TIM_TI1_SetConfig+0x66>
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009778:	d017      	beq.n	80097aa <TIM_TI1_SetConfig+0x66>
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	4a25      	ldr	r2, [pc, #148]	; (8009814 <TIM_TI1_SetConfig+0xd0>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d013      	beq.n	80097aa <TIM_TI1_SetConfig+0x66>
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	4a24      	ldr	r2, [pc, #144]	; (8009818 <TIM_TI1_SetConfig+0xd4>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d00f      	beq.n	80097aa <TIM_TI1_SetConfig+0x66>
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	4a23      	ldr	r2, [pc, #140]	; (800981c <TIM_TI1_SetConfig+0xd8>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d00b      	beq.n	80097aa <TIM_TI1_SetConfig+0x66>
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	4a22      	ldr	r2, [pc, #136]	; (8009820 <TIM_TI1_SetConfig+0xdc>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d007      	beq.n	80097aa <TIM_TI1_SetConfig+0x66>
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	4a21      	ldr	r2, [pc, #132]	; (8009824 <TIM_TI1_SetConfig+0xe0>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d003      	beq.n	80097aa <TIM_TI1_SetConfig+0x66>
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	4a20      	ldr	r2, [pc, #128]	; (8009828 <TIM_TI1_SetConfig+0xe4>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d101      	bne.n	80097ae <TIM_TI1_SetConfig+0x6a>
 80097aa:	2301      	movs	r3, #1
 80097ac:	e000      	b.n	80097b0 <TIM_TI1_SetConfig+0x6c>
 80097ae:	2300      	movs	r3, #0
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d008      	beq.n	80097c6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	f023 0303 	bic.w	r3, r3, #3
 80097ba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80097bc:	697a      	ldr	r2, [r7, #20]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	4313      	orrs	r3, r2
 80097c2:	617b      	str	r3, [r7, #20]
 80097c4:	e003      	b.n	80097ce <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	f043 0301 	orr.w	r3, r3, #1
 80097cc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80097d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	011b      	lsls	r3, r3, #4
 80097da:	b2db      	uxtb	r3, r3
 80097dc:	697a      	ldr	r2, [r7, #20]
 80097de:	4313      	orrs	r3, r2
 80097e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	f023 030a 	bic.w	r3, r3, #10
 80097e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	f003 030a 	and.w	r3, r3, #10
 80097f0:	693a      	ldr	r2, [r7, #16]
 80097f2:	4313      	orrs	r3, r2
 80097f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	697a      	ldr	r2, [r7, #20]
 80097fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	693a      	ldr	r2, [r7, #16]
 8009800:	621a      	str	r2, [r3, #32]
}
 8009802:	bf00      	nop
 8009804:	371c      	adds	r7, #28
 8009806:	46bd      	mov	sp, r7
 8009808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980c:	4770      	bx	lr
 800980e:	bf00      	nop
 8009810:	40010000 	.word	0x40010000
 8009814:	40000400 	.word	0x40000400
 8009818:	40000800 	.word	0x40000800
 800981c:	40000c00 	.word	0x40000c00
 8009820:	40010400 	.word	0x40010400
 8009824:	40014000 	.word	0x40014000
 8009828:	40001800 	.word	0x40001800

0800982c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800982c:	b480      	push	{r7}
 800982e:	b087      	sub	sp, #28
 8009830:	af00      	add	r7, sp, #0
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	60b9      	str	r1, [r7, #8]
 8009836:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	6a1b      	ldr	r3, [r3, #32]
 800983c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	6a1b      	ldr	r3, [r3, #32]
 8009842:	f023 0201 	bic.w	r2, r3, #1
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	699b      	ldr	r3, [r3, #24]
 800984e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009856:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	011b      	lsls	r3, r3, #4
 800985c:	693a      	ldr	r2, [r7, #16]
 800985e:	4313      	orrs	r3, r2
 8009860:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	f023 030a 	bic.w	r3, r3, #10
 8009868:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800986a:	697a      	ldr	r2, [r7, #20]
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	4313      	orrs	r3, r2
 8009870:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	693a      	ldr	r2, [r7, #16]
 8009876:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	697a      	ldr	r2, [r7, #20]
 800987c:	621a      	str	r2, [r3, #32]
}
 800987e:	bf00      	nop
 8009880:	371c      	adds	r7, #28
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr

0800988a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800988a:	b480      	push	{r7}
 800988c:	b087      	sub	sp, #28
 800988e:	af00      	add	r7, sp, #0
 8009890:	60f8      	str	r0, [r7, #12]
 8009892:	60b9      	str	r1, [r7, #8]
 8009894:	607a      	str	r2, [r7, #4]
 8009896:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	6a1b      	ldr	r3, [r3, #32]
 800989c:	f023 0210 	bic.w	r2, r3, #16
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	699b      	ldr	r3, [r3, #24]
 80098a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	6a1b      	ldr	r3, [r3, #32]
 80098ae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	021b      	lsls	r3, r3, #8
 80098bc:	697a      	ldr	r2, [r7, #20]
 80098be:	4313      	orrs	r3, r2
 80098c0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80098c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	031b      	lsls	r3, r3, #12
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	697a      	ldr	r2, [r7, #20]
 80098d2:	4313      	orrs	r3, r2
 80098d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80098dc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	011b      	lsls	r3, r3, #4
 80098e2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80098e6:	693a      	ldr	r2, [r7, #16]
 80098e8:	4313      	orrs	r3, r2
 80098ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	697a      	ldr	r2, [r7, #20]
 80098f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	693a      	ldr	r2, [r7, #16]
 80098f6:	621a      	str	r2, [r3, #32]
}
 80098f8:	bf00      	nop
 80098fa:	371c      	adds	r7, #28
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr

08009904 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009904:	b480      	push	{r7}
 8009906:	b087      	sub	sp, #28
 8009908:	af00      	add	r7, sp, #0
 800990a:	60f8      	str	r0, [r7, #12]
 800990c:	60b9      	str	r1, [r7, #8]
 800990e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	6a1b      	ldr	r3, [r3, #32]
 8009914:	f023 0210 	bic.w	r2, r3, #16
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	699b      	ldr	r3, [r3, #24]
 8009920:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	6a1b      	ldr	r3, [r3, #32]
 8009926:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800992e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	031b      	lsls	r3, r3, #12
 8009934:	697a      	ldr	r2, [r7, #20]
 8009936:	4313      	orrs	r3, r2
 8009938:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009940:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	011b      	lsls	r3, r3, #4
 8009946:	693a      	ldr	r2, [r7, #16]
 8009948:	4313      	orrs	r3, r2
 800994a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	697a      	ldr	r2, [r7, #20]
 8009950:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	693a      	ldr	r2, [r7, #16]
 8009956:	621a      	str	r2, [r3, #32]
}
 8009958:	bf00      	nop
 800995a:	371c      	adds	r7, #28
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr

08009964 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009964:	b480      	push	{r7}
 8009966:	b087      	sub	sp, #28
 8009968:	af00      	add	r7, sp, #0
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	60b9      	str	r1, [r7, #8]
 800996e:	607a      	str	r2, [r7, #4]
 8009970:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	6a1b      	ldr	r3, [r3, #32]
 8009976:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	69db      	ldr	r3, [r3, #28]
 8009982:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	6a1b      	ldr	r3, [r3, #32]
 8009988:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	f023 0303 	bic.w	r3, r3, #3
 8009990:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009992:	697a      	ldr	r2, [r7, #20]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	4313      	orrs	r3, r2
 8009998:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80099a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	011b      	lsls	r3, r3, #4
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	697a      	ldr	r2, [r7, #20]
 80099aa:	4313      	orrs	r3, r2
 80099ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80099b4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	021b      	lsls	r3, r3, #8
 80099ba:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80099be:	693a      	ldr	r2, [r7, #16]
 80099c0:	4313      	orrs	r3, r2
 80099c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	697a      	ldr	r2, [r7, #20]
 80099c8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	693a      	ldr	r2, [r7, #16]
 80099ce:	621a      	str	r2, [r3, #32]
}
 80099d0:	bf00      	nop
 80099d2:	371c      	adds	r7, #28
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr

080099dc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80099dc:	b480      	push	{r7}
 80099de:	b087      	sub	sp, #28
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	60f8      	str	r0, [r7, #12]
 80099e4:	60b9      	str	r1, [r7, #8]
 80099e6:	607a      	str	r2, [r7, #4]
 80099e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	6a1b      	ldr	r3, [r3, #32]
 80099ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	69db      	ldr	r3, [r3, #28]
 80099fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	6a1b      	ldr	r3, [r3, #32]
 8009a00:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a08:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	021b      	lsls	r3, r3, #8
 8009a0e:	697a      	ldr	r2, [r7, #20]
 8009a10:	4313      	orrs	r3, r2
 8009a12:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a1a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	031b      	lsls	r3, r3, #12
 8009a20:	b29b      	uxth	r3, r3
 8009a22:	697a      	ldr	r2, [r7, #20]
 8009a24:	4313      	orrs	r3, r2
 8009a26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009a2e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	031b      	lsls	r3, r3, #12
 8009a34:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009a38:	693a      	ldr	r2, [r7, #16]
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	697a      	ldr	r2, [r7, #20]
 8009a42:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	693a      	ldr	r2, [r7, #16]
 8009a48:	621a      	str	r2, [r3, #32]
}
 8009a4a:	bf00      	nop
 8009a4c:	371c      	adds	r7, #28
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr

08009a56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009a56:	b480      	push	{r7}
 8009a58:	b085      	sub	sp, #20
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
 8009a5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	689b      	ldr	r3, [r3, #8]
 8009a64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009a6e:	683a      	ldr	r2, [r7, #0]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	4313      	orrs	r3, r2
 8009a74:	f043 0307 	orr.w	r3, r3, #7
 8009a78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	68fa      	ldr	r2, [r7, #12]
 8009a7e:	609a      	str	r2, [r3, #8]
}
 8009a80:	bf00      	nop
 8009a82:	3714      	adds	r7, #20
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr

08009a8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b087      	sub	sp, #28
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	60f8      	str	r0, [r7, #12]
 8009a94:	60b9      	str	r1, [r7, #8]
 8009a96:	607a      	str	r2, [r7, #4]
 8009a98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009aa6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	021a      	lsls	r2, r3, #8
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	431a      	orrs	r2, r3
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	697a      	ldr	r2, [r7, #20]
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	697a      	ldr	r2, [r7, #20]
 8009abe:	609a      	str	r2, [r3, #8]
}
 8009ac0:	bf00      	nop
 8009ac2:	371c      	adds	r7, #28
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr

08009acc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b087      	sub	sp, #28
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	60f8      	str	r0, [r7, #12]
 8009ad4:	60b9      	str	r1, [r7, #8]
 8009ad6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	f003 031f 	and.w	r3, r3, #31
 8009ade:	2201      	movs	r2, #1
 8009ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ae4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	6a1a      	ldr	r2, [r3, #32]
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	43db      	mvns	r3, r3
 8009aee:	401a      	ands	r2, r3
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	6a1a      	ldr	r2, [r3, #32]
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	f003 031f 	and.w	r3, r3, #31
 8009afe:	6879      	ldr	r1, [r7, #4]
 8009b00:	fa01 f303 	lsl.w	r3, r1, r3
 8009b04:	431a      	orrs	r2, r3
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	621a      	str	r2, [r3, #32]
}
 8009b0a:	bf00      	nop
 8009b0c:	371c      	adds	r7, #28
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b14:	4770      	bx	lr
	...

08009b18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b085      	sub	sp, #20
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d101      	bne.n	8009b30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009b2c:	2302      	movs	r3, #2
 8009b2e:	e05a      	b.n	8009be6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2202      	movs	r2, #2
 8009b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	689b      	ldr	r3, [r3, #8]
 8009b4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	68fa      	ldr	r2, [r7, #12]
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	68fa      	ldr	r2, [r7, #12]
 8009b68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4a21      	ldr	r2, [pc, #132]	; (8009bf4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d022      	beq.n	8009bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b7c:	d01d      	beq.n	8009bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4a1d      	ldr	r2, [pc, #116]	; (8009bf8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d018      	beq.n	8009bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a1b      	ldr	r2, [pc, #108]	; (8009bfc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d013      	beq.n	8009bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a1a      	ldr	r2, [pc, #104]	; (8009c00 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d00e      	beq.n	8009bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a18      	ldr	r2, [pc, #96]	; (8009c04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d009      	beq.n	8009bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4a17      	ldr	r2, [pc, #92]	; (8009c08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d004      	beq.n	8009bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	4a15      	ldr	r2, [pc, #84]	; (8009c0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d10c      	bne.n	8009bd4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009bc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	685b      	ldr	r3, [r3, #4]
 8009bc6:	68ba      	ldr	r2, [r7, #8]
 8009bc8:	4313      	orrs	r3, r2
 8009bca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	68ba      	ldr	r2, [r7, #8]
 8009bd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2200      	movs	r2, #0
 8009be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009be4:	2300      	movs	r3, #0
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3714      	adds	r7, #20
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr
 8009bf2:	bf00      	nop
 8009bf4:	40010000 	.word	0x40010000
 8009bf8:	40000400 	.word	0x40000400
 8009bfc:	40000800 	.word	0x40000800
 8009c00:	40000c00 	.word	0x40000c00
 8009c04:	40010400 	.word	0x40010400
 8009c08:	40014000 	.word	0x40014000
 8009c0c:	40001800 	.word	0x40001800

08009c10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b085      	sub	sp, #20
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d101      	bne.n	8009c2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009c28:	2302      	movs	r3, #2
 8009c2a:	e03d      	b.n	8009ca8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2201      	movs	r2, #1
 8009c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	68db      	ldr	r3, [r3, #12]
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	689b      	ldr	r3, [r3, #8]
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	691b      	ldr	r3, [r3, #16]
 8009c76:	4313      	orrs	r3, r2
 8009c78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	695b      	ldr	r3, [r3, #20]
 8009c84:	4313      	orrs	r3, r2
 8009c86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	69db      	ldr	r3, [r3, #28]
 8009c92:	4313      	orrs	r3, r2
 8009c94:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	68fa      	ldr	r2, [r7, #12]
 8009c9c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ca6:	2300      	movs	r3, #0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3714      	adds	r7, #20
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr

08009cb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b083      	sub	sp, #12
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009cbc:	bf00      	nop
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b083      	sub	sp, #12
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009cd0:	bf00      	nop
 8009cd2:	370c      	adds	r7, #12
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr

08009cdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b082      	sub	sp, #8
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d101      	bne.n	8009cee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009cea:	2301      	movs	r3, #1
 8009cec:	e03f      	b.n	8009d6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cf4:	b2db      	uxtb	r3, r3
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d106      	bne.n	8009d08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f7f9 fd60 	bl	80037c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2224      	movs	r2, #36	; 0x24
 8009d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	68da      	ldr	r2, [r3, #12]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009d1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 fec5 	bl	800aab0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	691a      	ldr	r2, [r3, #16]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009d34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	695a      	ldr	r2, [r3, #20]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009d44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	68da      	ldr	r2, [r3, #12]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009d54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2220      	movs	r2, #32
 8009d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2220      	movs	r2, #32
 8009d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009d6c:	2300      	movs	r3, #0
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3708      	adds	r7, #8
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}

08009d76 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d76:	b580      	push	{r7, lr}
 8009d78:	b08a      	sub	sp, #40	; 0x28
 8009d7a:	af02      	add	r7, sp, #8
 8009d7c:	60f8      	str	r0, [r7, #12]
 8009d7e:	60b9      	str	r1, [r7, #8]
 8009d80:	603b      	str	r3, [r7, #0]
 8009d82:	4613      	mov	r3, r2
 8009d84:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009d86:	2300      	movs	r3, #0
 8009d88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d90:	b2db      	uxtb	r3, r3
 8009d92:	2b20      	cmp	r3, #32
 8009d94:	d17c      	bne.n	8009e90 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d002      	beq.n	8009da2 <HAL_UART_Transmit+0x2c>
 8009d9c:	88fb      	ldrh	r3, [r7, #6]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d101      	bne.n	8009da6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009da2:	2301      	movs	r3, #1
 8009da4:	e075      	b.n	8009e92 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	d101      	bne.n	8009db4 <HAL_UART_Transmit+0x3e>
 8009db0:	2302      	movs	r3, #2
 8009db2:	e06e      	b.n	8009e92 <HAL_UART_Transmit+0x11c>
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2201      	movs	r2, #1
 8009db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2221      	movs	r2, #33	; 0x21
 8009dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009dca:	f7f9 fe75 	bl	8003ab8 <HAL_GetTick>
 8009dce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	88fa      	ldrh	r2, [r7, #6]
 8009dd4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	88fa      	ldrh	r2, [r7, #6]
 8009dda:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009de4:	d108      	bne.n	8009df8 <HAL_UART_Transmit+0x82>
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	691b      	ldr	r3, [r3, #16]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d104      	bne.n	8009df8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009dee:	2300      	movs	r3, #0
 8009df0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	61bb      	str	r3, [r7, #24]
 8009df6:	e003      	b.n	8009e00 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	2200      	movs	r2, #0
 8009e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009e08:	e02a      	b.n	8009e60 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	9300      	str	r3, [sp, #0]
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	2200      	movs	r2, #0
 8009e12:	2180      	movs	r1, #128	; 0x80
 8009e14:	68f8      	ldr	r0, [r7, #12]
 8009e16:	f000 fc05 	bl	800a624 <UART_WaitOnFlagUntilTimeout>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d001      	beq.n	8009e24 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009e20:	2303      	movs	r3, #3
 8009e22:	e036      	b.n	8009e92 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009e24:	69fb      	ldr	r3, [r7, #28]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d10b      	bne.n	8009e42 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009e2a:	69bb      	ldr	r3, [r7, #24]
 8009e2c:	881b      	ldrh	r3, [r3, #0]
 8009e2e:	461a      	mov	r2, r3
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009e38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009e3a:	69bb      	ldr	r3, [r7, #24]
 8009e3c:	3302      	adds	r3, #2
 8009e3e:	61bb      	str	r3, [r7, #24]
 8009e40:	e007      	b.n	8009e52 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009e42:	69fb      	ldr	r3, [r7, #28]
 8009e44:	781a      	ldrb	r2, [r3, #0]
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009e4c:	69fb      	ldr	r3, [r7, #28]
 8009e4e:	3301      	adds	r3, #1
 8009e50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009e56:	b29b      	uxth	r3, r3
 8009e58:	3b01      	subs	r3, #1
 8009e5a:	b29a      	uxth	r2, r3
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009e64:	b29b      	uxth	r3, r3
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d1cf      	bne.n	8009e0a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	9300      	str	r3, [sp, #0]
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	2200      	movs	r2, #0
 8009e72:	2140      	movs	r1, #64	; 0x40
 8009e74:	68f8      	ldr	r0, [r7, #12]
 8009e76:	f000 fbd5 	bl	800a624 <UART_WaitOnFlagUntilTimeout>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d001      	beq.n	8009e84 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009e80:	2303      	movs	r3, #3
 8009e82:	e006      	b.n	8009e92 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2220      	movs	r2, #32
 8009e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	e000      	b.n	8009e92 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009e90:	2302      	movs	r3, #2
  }
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3720      	adds	r7, #32
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}

08009e9a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e9a:	b580      	push	{r7, lr}
 8009e9c:	b08a      	sub	sp, #40	; 0x28
 8009e9e:	af02      	add	r7, sp, #8
 8009ea0:	60f8      	str	r0, [r7, #12]
 8009ea2:	60b9      	str	r1, [r7, #8]
 8009ea4:	603b      	str	r3, [r7, #0]
 8009ea6:	4613      	mov	r3, r2
 8009ea8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	2b20      	cmp	r3, #32
 8009eb8:	f040 808c 	bne.w	8009fd4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d002      	beq.n	8009ec8 <HAL_UART_Receive+0x2e>
 8009ec2:	88fb      	ldrh	r3, [r7, #6]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d101      	bne.n	8009ecc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8009ec8:	2301      	movs	r3, #1
 8009eca:	e084      	b.n	8009fd6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d101      	bne.n	8009eda <HAL_UART_Receive+0x40>
 8009ed6:	2302      	movs	r3, #2
 8009ed8:	e07d      	b.n	8009fd6 <HAL_UART_Receive+0x13c>
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2201      	movs	r2, #1
 8009ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2222      	movs	r2, #34	; 0x22
 8009eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009ef6:	f7f9 fddf 	bl	8003ab8 <HAL_GetTick>
 8009efa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	88fa      	ldrh	r2, [r7, #6]
 8009f00:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	88fa      	ldrh	r2, [r7, #6]
 8009f06:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	689b      	ldr	r3, [r3, #8]
 8009f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f10:	d108      	bne.n	8009f24 <HAL_UART_Receive+0x8a>
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	691b      	ldr	r3, [r3, #16]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d104      	bne.n	8009f24 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	61bb      	str	r3, [r7, #24]
 8009f22:	e003      	b.n	8009f2c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8009f34:	e043      	b.n	8009fbe <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	9300      	str	r3, [sp, #0]
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	2120      	movs	r1, #32
 8009f40:	68f8      	ldr	r0, [r7, #12]
 8009f42:	f000 fb6f 	bl	800a624 <UART_WaitOnFlagUntilTimeout>
 8009f46:	4603      	mov	r3, r0
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d001      	beq.n	8009f50 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8009f4c:	2303      	movs	r3, #3
 8009f4e:	e042      	b.n	8009fd6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8009f50:	69fb      	ldr	r3, [r7, #28]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d10c      	bne.n	8009f70 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	b29b      	uxth	r3, r3
 8009f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f62:	b29a      	uxth	r2, r3
 8009f64:	69bb      	ldr	r3, [r7, #24]
 8009f66:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009f68:	69bb      	ldr	r3, [r7, #24]
 8009f6a:	3302      	adds	r3, #2
 8009f6c:	61bb      	str	r3, [r7, #24]
 8009f6e:	e01f      	b.n	8009fb0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	689b      	ldr	r3, [r3, #8]
 8009f74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f78:	d007      	beq.n	8009f8a <HAL_UART_Receive+0xf0>
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	689b      	ldr	r3, [r3, #8]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d10a      	bne.n	8009f98 <HAL_UART_Receive+0xfe>
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	691b      	ldr	r3, [r3, #16]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d106      	bne.n	8009f98 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	b2da      	uxtb	r2, r3
 8009f92:	69fb      	ldr	r3, [r7, #28]
 8009f94:	701a      	strb	r2, [r3, #0]
 8009f96:	e008      	b.n	8009faa <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	b2db      	uxtb	r3, r3
 8009fa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fa4:	b2da      	uxtb	r2, r3
 8009fa6:	69fb      	ldr	r3, [r7, #28]
 8009fa8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8009faa:	69fb      	ldr	r3, [r7, #28]
 8009fac:	3301      	adds	r3, #1
 8009fae:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009fb4:	b29b      	uxth	r3, r3
 8009fb6:	3b01      	subs	r3, #1
 8009fb8:	b29a      	uxth	r2, r3
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d1b6      	bne.n	8009f36 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2220      	movs	r2, #32
 8009fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	e000      	b.n	8009fd6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8009fd4:	2302      	movs	r3, #2
  }
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3720      	adds	r7, #32
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}

08009fde <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009fde:	b480      	push	{r7}
 8009fe0:	b085      	sub	sp, #20
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	60f8      	str	r0, [r7, #12]
 8009fe6:	60b9      	str	r1, [r7, #8]
 8009fe8:	4613      	mov	r3, r2
 8009fea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ff2:	b2db      	uxtb	r3, r3
 8009ff4:	2b20      	cmp	r3, #32
 8009ff6:	d130      	bne.n	800a05a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d002      	beq.n	800a004 <HAL_UART_Transmit_IT+0x26>
 8009ffe:	88fb      	ldrh	r3, [r7, #6]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d101      	bne.n	800a008 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800a004:	2301      	movs	r3, #1
 800a006:	e029      	b.n	800a05c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d101      	bne.n	800a016 <HAL_UART_Transmit_IT+0x38>
 800a012:	2302      	movs	r3, #2
 800a014:	e022      	b.n	800a05c <HAL_UART_Transmit_IT+0x7e>
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2201      	movs	r2, #1
 800a01a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	68ba      	ldr	r2, [r7, #8]
 800a022:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	88fa      	ldrh	r2, [r7, #6]
 800a028:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	88fa      	ldrh	r2, [r7, #6]
 800a02e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2200      	movs	r2, #0
 800a034:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2221      	movs	r2, #33	; 0x21
 800a03a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	2200      	movs	r2, #0
 800a042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	68da      	ldr	r2, [r3, #12]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a054:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800a056:	2300      	movs	r3, #0
 800a058:	e000      	b.n	800a05c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800a05a:	2302      	movs	r3, #2
  }
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3714      	adds	r7, #20
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr

0800a068 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b084      	sub	sp, #16
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	60f8      	str	r0, [r7, #12]
 800a070:	60b9      	str	r1, [r7, #8]
 800a072:	4613      	mov	r3, r2
 800a074:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a07c:	b2db      	uxtb	r3, r3
 800a07e:	2b20      	cmp	r3, #32
 800a080:	d11d      	bne.n	800a0be <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d002      	beq.n	800a08e <HAL_UART_Receive_IT+0x26>
 800a088:	88fb      	ldrh	r3, [r7, #6]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d101      	bne.n	800a092 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a08e:	2301      	movs	r3, #1
 800a090:	e016      	b.n	800a0c0 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d101      	bne.n	800a0a0 <HAL_UART_Receive_IT+0x38>
 800a09c:	2302      	movs	r3, #2
 800a09e:	e00f      	b.n	800a0c0 <HAL_UART_Receive_IT+0x58>
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a0ae:	88fb      	ldrh	r3, [r7, #6]
 800a0b0:	461a      	mov	r2, r3
 800a0b2:	68b9      	ldr	r1, [r7, #8]
 800a0b4:	68f8      	ldr	r0, [r7, #12]
 800a0b6:	f000 fb23 	bl	800a700 <UART_Start_Receive_IT>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	e000      	b.n	800a0c0 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a0be:	2302      	movs	r3, #2
  }
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3710      	adds	r7, #16
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b0ba      	sub	sp, #232	; 0xe8
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	68db      	ldr	r3, [r3, #12]
 800a0e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	695b      	ldr	r3, [r3, #20]
 800a0ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a0fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0fe:	f003 030f 	and.w	r3, r3, #15
 800a102:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a106:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d10f      	bne.n	800a12e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a10e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a112:	f003 0320 	and.w	r3, r3, #32
 800a116:	2b00      	cmp	r3, #0
 800a118:	d009      	beq.n	800a12e <HAL_UART_IRQHandler+0x66>
 800a11a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a11e:	f003 0320 	and.w	r3, r3, #32
 800a122:	2b00      	cmp	r3, #0
 800a124:	d003      	beq.n	800a12e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 fc07 	bl	800a93a <UART_Receive_IT>
      return;
 800a12c:	e256      	b.n	800a5dc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a12e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a132:	2b00      	cmp	r3, #0
 800a134:	f000 80de 	beq.w	800a2f4 <HAL_UART_IRQHandler+0x22c>
 800a138:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a13c:	f003 0301 	and.w	r3, r3, #1
 800a140:	2b00      	cmp	r3, #0
 800a142:	d106      	bne.n	800a152 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a148:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	f000 80d1 	beq.w	800a2f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a156:	f003 0301 	and.w	r3, r3, #1
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d00b      	beq.n	800a176 <HAL_UART_IRQHandler+0xae>
 800a15e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a166:	2b00      	cmp	r3, #0
 800a168:	d005      	beq.n	800a176 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a16e:	f043 0201 	orr.w	r2, r3, #1
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a17a:	f003 0304 	and.w	r3, r3, #4
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d00b      	beq.n	800a19a <HAL_UART_IRQHandler+0xd2>
 800a182:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a186:	f003 0301 	and.w	r3, r3, #1
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d005      	beq.n	800a19a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a192:	f043 0202 	orr.w	r2, r3, #2
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a19a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a19e:	f003 0302 	and.w	r3, r3, #2
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d00b      	beq.n	800a1be <HAL_UART_IRQHandler+0xf6>
 800a1a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a1aa:	f003 0301 	and.w	r3, r3, #1
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d005      	beq.n	800a1be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1b6:	f043 0204 	orr.w	r2, r3, #4
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a1be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1c2:	f003 0308 	and.w	r3, r3, #8
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d011      	beq.n	800a1ee <HAL_UART_IRQHandler+0x126>
 800a1ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1ce:	f003 0320 	and.w	r3, r3, #32
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d105      	bne.n	800a1e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a1d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a1da:	f003 0301 	and.w	r3, r3, #1
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d005      	beq.n	800a1ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1e6:	f043 0208 	orr.w	r2, r3, #8
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	f000 81ed 	beq.w	800a5d2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a1f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1fc:	f003 0320 	and.w	r3, r3, #32
 800a200:	2b00      	cmp	r3, #0
 800a202:	d008      	beq.n	800a216 <HAL_UART_IRQHandler+0x14e>
 800a204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a208:	f003 0320 	and.w	r3, r3, #32
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d002      	beq.n	800a216 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f000 fb92 	bl	800a93a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	695b      	ldr	r3, [r3, #20]
 800a21c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a220:	2b40      	cmp	r3, #64	; 0x40
 800a222:	bf0c      	ite	eq
 800a224:	2301      	moveq	r3, #1
 800a226:	2300      	movne	r3, #0
 800a228:	b2db      	uxtb	r3, r3
 800a22a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a232:	f003 0308 	and.w	r3, r3, #8
 800a236:	2b00      	cmp	r3, #0
 800a238:	d103      	bne.n	800a242 <HAL_UART_IRQHandler+0x17a>
 800a23a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d04f      	beq.n	800a2e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f000 fa9a 	bl	800a77c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	695b      	ldr	r3, [r3, #20]
 800a24e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a252:	2b40      	cmp	r3, #64	; 0x40
 800a254:	d141      	bne.n	800a2da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	3314      	adds	r3, #20
 800a25c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a260:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a264:	e853 3f00 	ldrex	r3, [r3]
 800a268:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a26c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a270:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a274:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	3314      	adds	r3, #20
 800a27e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a282:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a286:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a28a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a28e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a292:	e841 2300 	strex	r3, r2, [r1]
 800a296:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a29a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d1d9      	bne.n	800a256 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d013      	beq.n	800a2d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ae:	4a7d      	ldr	r2, [pc, #500]	; (800a4a4 <HAL_UART_IRQHandler+0x3dc>)
 800a2b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7fa f811 	bl	80042de <HAL_DMA_Abort_IT>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d016      	beq.n	800a2f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2c8:	687a      	ldr	r2, [r7, #4]
 800a2ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a2cc:	4610      	mov	r0, r2
 800a2ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2d0:	e00e      	b.n	800a2f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f000 f990 	bl	800a5f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2d8:	e00a      	b.n	800a2f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f000 f98c 	bl	800a5f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2e0:	e006      	b.n	800a2f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f000 f988 	bl	800a5f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a2ee:	e170      	b.n	800a5d2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2f0:	bf00      	nop
    return;
 800a2f2:	e16e      	b.n	800a5d2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	f040 814a 	bne.w	800a592 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a2fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a302:	f003 0310 	and.w	r3, r3, #16
 800a306:	2b00      	cmp	r3, #0
 800a308:	f000 8143 	beq.w	800a592 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a30c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a310:	f003 0310 	and.w	r3, r3, #16
 800a314:	2b00      	cmp	r3, #0
 800a316:	f000 813c 	beq.w	800a592 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a31a:	2300      	movs	r3, #0
 800a31c:	60bb      	str	r3, [r7, #8]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	60bb      	str	r3, [r7, #8]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	685b      	ldr	r3, [r3, #4]
 800a32c:	60bb      	str	r3, [r7, #8]
 800a32e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	695b      	ldr	r3, [r3, #20]
 800a336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a33a:	2b40      	cmp	r3, #64	; 0x40
 800a33c:	f040 80b4 	bne.w	800a4a8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	685b      	ldr	r3, [r3, #4]
 800a348:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a34c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a350:	2b00      	cmp	r3, #0
 800a352:	f000 8140 	beq.w	800a5d6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a35a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a35e:	429a      	cmp	r2, r3
 800a360:	f080 8139 	bcs.w	800a5d6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a36a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a370:	69db      	ldr	r3, [r3, #28]
 800a372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a376:	f000 8088 	beq.w	800a48a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	330c      	adds	r3, #12
 800a380:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a384:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a388:	e853 3f00 	ldrex	r3, [r3]
 800a38c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a390:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a394:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a398:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	330c      	adds	r3, #12
 800a3a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a3a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a3aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a3b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a3b6:	e841 2300 	strex	r3, r2, [r1]
 800a3ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a3be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d1d9      	bne.n	800a37a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	3314      	adds	r3, #20
 800a3cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a3d0:	e853 3f00 	ldrex	r3, [r3]
 800a3d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a3d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a3d8:	f023 0301 	bic.w	r3, r3, #1
 800a3dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	3314      	adds	r3, #20
 800a3e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a3ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a3ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a3f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a3f6:	e841 2300 	strex	r3, r2, [r1]
 800a3fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a3fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d1e1      	bne.n	800a3c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	3314      	adds	r3, #20
 800a408:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a40a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a40c:	e853 3f00 	ldrex	r3, [r3]
 800a410:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a412:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a414:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a418:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	3314      	adds	r3, #20
 800a422:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a426:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a428:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a42a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a42c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a42e:	e841 2300 	strex	r3, r2, [r1]
 800a432:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a434:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a436:	2b00      	cmp	r3, #0
 800a438:	d1e3      	bne.n	800a402 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2220      	movs	r2, #32
 800a43e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2200      	movs	r2, #0
 800a446:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	330c      	adds	r3, #12
 800a44e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a452:	e853 3f00 	ldrex	r3, [r3]
 800a456:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a45a:	f023 0310 	bic.w	r3, r3, #16
 800a45e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	330c      	adds	r3, #12
 800a468:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a46c:	65ba      	str	r2, [r7, #88]	; 0x58
 800a46e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a470:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a472:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a474:	e841 2300 	strex	r3, r2, [r1]
 800a478:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a47a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d1e3      	bne.n	800a448 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a484:	4618      	mov	r0, r3
 800a486:	f7f9 feba 	bl	80041fe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a492:	b29b      	uxth	r3, r3
 800a494:	1ad3      	subs	r3, r2, r3
 800a496:	b29b      	uxth	r3, r3
 800a498:	4619      	mov	r1, r3
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f000 f8b6 	bl	800a60c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a4a0:	e099      	b.n	800a5d6 <HAL_UART_IRQHandler+0x50e>
 800a4a2:	bf00      	nop
 800a4a4:	0800a843 	.word	0x0800a843
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a4b0:	b29b      	uxth	r3, r3
 800a4b2:	1ad3      	subs	r3, r2, r3
 800a4b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a4bc:	b29b      	uxth	r3, r3
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	f000 808b 	beq.w	800a5da <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a4c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	f000 8086 	beq.w	800a5da <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	330c      	adds	r3, #12
 800a4d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d8:	e853 3f00 	ldrex	r3, [r3]
 800a4dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a4de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a4e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	330c      	adds	r3, #12
 800a4ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a4f2:	647a      	str	r2, [r7, #68]	; 0x44
 800a4f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a4f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a4fa:	e841 2300 	strex	r3, r2, [r1]
 800a4fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a502:	2b00      	cmp	r3, #0
 800a504:	d1e3      	bne.n	800a4ce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	3314      	adds	r3, #20
 800a50c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a510:	e853 3f00 	ldrex	r3, [r3]
 800a514:	623b      	str	r3, [r7, #32]
   return(result);
 800a516:	6a3b      	ldr	r3, [r7, #32]
 800a518:	f023 0301 	bic.w	r3, r3, #1
 800a51c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	3314      	adds	r3, #20
 800a526:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a52a:	633a      	str	r2, [r7, #48]	; 0x30
 800a52c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a52e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a532:	e841 2300 	strex	r3, r2, [r1]
 800a536:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d1e3      	bne.n	800a506 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2220      	movs	r2, #32
 800a542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2200      	movs	r2, #0
 800a54a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	330c      	adds	r3, #12
 800a552:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	e853 3f00 	ldrex	r3, [r3]
 800a55a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f023 0310 	bic.w	r3, r3, #16
 800a562:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	330c      	adds	r3, #12
 800a56c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a570:	61fa      	str	r2, [r7, #28]
 800a572:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a574:	69b9      	ldr	r1, [r7, #24]
 800a576:	69fa      	ldr	r2, [r7, #28]
 800a578:	e841 2300 	strex	r3, r2, [r1]
 800a57c:	617b      	str	r3, [r7, #20]
   return(result);
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d1e3      	bne.n	800a54c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a584:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a588:	4619      	mov	r1, r3
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 f83e 	bl	800a60c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a590:	e023      	b.n	800a5da <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d009      	beq.n	800a5b2 <HAL_UART_IRQHandler+0x4ea>
 800a59e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d003      	beq.n	800a5b2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f000 f95d 	bl	800a86a <UART_Transmit_IT>
    return;
 800a5b0:	e014      	b.n	800a5dc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a5b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d00e      	beq.n	800a5dc <HAL_UART_IRQHandler+0x514>
 800a5be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d008      	beq.n	800a5dc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f000 f99d 	bl	800a90a <UART_EndTransmit_IT>
    return;
 800a5d0:	e004      	b.n	800a5dc <HAL_UART_IRQHandler+0x514>
    return;
 800a5d2:	bf00      	nop
 800a5d4:	e002      	b.n	800a5dc <HAL_UART_IRQHandler+0x514>
      return;
 800a5d6:	bf00      	nop
 800a5d8:	e000      	b.n	800a5dc <HAL_UART_IRQHandler+0x514>
      return;
 800a5da:	bf00      	nop
  }
}
 800a5dc:	37e8      	adds	r7, #232	; 0xe8
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}
 800a5e2:	bf00      	nop

0800a5e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b083      	sub	sp, #12
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a5ec:	bf00      	nop
 800a5ee:	370c      	adds	r7, #12
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr

0800a5f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b083      	sub	sp, #12
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a600:	bf00      	nop
 800a602:	370c      	adds	r7, #12
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr

0800a60c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b083      	sub	sp, #12
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	460b      	mov	r3, r1
 800a616:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a618:	bf00      	nop
 800a61a:	370c      	adds	r7, #12
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr

0800a624 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b090      	sub	sp, #64	; 0x40
 800a628:	af00      	add	r7, sp, #0
 800a62a:	60f8      	str	r0, [r7, #12]
 800a62c:	60b9      	str	r1, [r7, #8]
 800a62e:	603b      	str	r3, [r7, #0]
 800a630:	4613      	mov	r3, r2
 800a632:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a634:	e050      	b.n	800a6d8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a63c:	d04c      	beq.n	800a6d8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a63e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a640:	2b00      	cmp	r3, #0
 800a642:	d007      	beq.n	800a654 <UART_WaitOnFlagUntilTimeout+0x30>
 800a644:	f7f9 fa38 	bl	8003ab8 <HAL_GetTick>
 800a648:	4602      	mov	r2, r0
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	1ad3      	subs	r3, r2, r3
 800a64e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a650:	429a      	cmp	r2, r3
 800a652:	d241      	bcs.n	800a6d8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	330c      	adds	r3, #12
 800a65a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a65e:	e853 3f00 	ldrex	r3, [r3]
 800a662:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a666:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a66a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	330c      	adds	r3, #12
 800a672:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a674:	637a      	str	r2, [r7, #52]	; 0x34
 800a676:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a678:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a67a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a67c:	e841 2300 	strex	r3, r2, [r1]
 800a680:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a684:	2b00      	cmp	r3, #0
 800a686:	d1e5      	bne.n	800a654 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	3314      	adds	r3, #20
 800a68e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	e853 3f00 	ldrex	r3, [r3]
 800a696:	613b      	str	r3, [r7, #16]
   return(result);
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	f023 0301 	bic.w	r3, r3, #1
 800a69e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	3314      	adds	r3, #20
 800a6a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6a8:	623a      	str	r2, [r7, #32]
 800a6aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ac:	69f9      	ldr	r1, [r7, #28]
 800a6ae:	6a3a      	ldr	r2, [r7, #32]
 800a6b0:	e841 2300 	strex	r3, r2, [r1]
 800a6b4:	61bb      	str	r3, [r7, #24]
   return(result);
 800a6b6:	69bb      	ldr	r3, [r7, #24]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d1e5      	bne.n	800a688 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	2220      	movs	r2, #32
 800a6c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2220      	movs	r2, #32
 800a6c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a6d4:	2303      	movs	r3, #3
 800a6d6:	e00f      	b.n	800a6f8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	681a      	ldr	r2, [r3, #0]
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	4013      	ands	r3, r2
 800a6e2:	68ba      	ldr	r2, [r7, #8]
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	bf0c      	ite	eq
 800a6e8:	2301      	moveq	r3, #1
 800a6ea:	2300      	movne	r3, #0
 800a6ec:	b2db      	uxtb	r3, r3
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	79fb      	ldrb	r3, [r7, #7]
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d09f      	beq.n	800a636 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a6f6:	2300      	movs	r3, #0
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3740      	adds	r7, #64	; 0x40
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}

0800a700 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a700:	b480      	push	{r7}
 800a702:	b085      	sub	sp, #20
 800a704:	af00      	add	r7, sp, #0
 800a706:	60f8      	str	r0, [r7, #12]
 800a708:	60b9      	str	r1, [r7, #8]
 800a70a:	4613      	mov	r3, r2
 800a70c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	68ba      	ldr	r2, [r7, #8]
 800a712:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	88fa      	ldrh	r2, [r7, #6]
 800a718:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	88fa      	ldrh	r2, [r7, #6]
 800a71e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	2200      	movs	r2, #0
 800a724:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2222      	movs	r2, #34	; 0x22
 800a72a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2200      	movs	r2, #0
 800a732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	691b      	ldr	r3, [r3, #16]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d007      	beq.n	800a74e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	68da      	ldr	r2, [r3, #12]
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a74c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	695a      	ldr	r2, [r3, #20]
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f042 0201 	orr.w	r2, r2, #1
 800a75c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	68da      	ldr	r2, [r3, #12]
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f042 0220 	orr.w	r2, r2, #32
 800a76c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a76e:	2300      	movs	r3, #0
}
 800a770:	4618      	mov	r0, r3
 800a772:	3714      	adds	r7, #20
 800a774:	46bd      	mov	sp, r7
 800a776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77a:	4770      	bx	lr

0800a77c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b095      	sub	sp, #84	; 0x54
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	330c      	adds	r3, #12
 800a78a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a78c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a78e:	e853 3f00 	ldrex	r3, [r3]
 800a792:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a796:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a79a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	330c      	adds	r3, #12
 800a7a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a7a4:	643a      	str	r2, [r7, #64]	; 0x40
 800a7a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a7aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a7ac:	e841 2300 	strex	r3, r2, [r1]
 800a7b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a7b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d1e5      	bne.n	800a784 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	3314      	adds	r3, #20
 800a7be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7c0:	6a3b      	ldr	r3, [r7, #32]
 800a7c2:	e853 3f00 	ldrex	r3, [r3]
 800a7c6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a7c8:	69fb      	ldr	r3, [r7, #28]
 800a7ca:	f023 0301 	bic.w	r3, r3, #1
 800a7ce:	64bb      	str	r3, [r7, #72]	; 0x48
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	3314      	adds	r3, #20
 800a7d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a7d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a7da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a7de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7e0:	e841 2300 	strex	r3, r2, [r1]
 800a7e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d1e5      	bne.n	800a7b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7f0:	2b01      	cmp	r3, #1
 800a7f2:	d119      	bne.n	800a828 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	330c      	adds	r3, #12
 800a7fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	e853 3f00 	ldrex	r3, [r3]
 800a802:	60bb      	str	r3, [r7, #8]
   return(result);
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	f023 0310 	bic.w	r3, r3, #16
 800a80a:	647b      	str	r3, [r7, #68]	; 0x44
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	330c      	adds	r3, #12
 800a812:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a814:	61ba      	str	r2, [r7, #24]
 800a816:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a818:	6979      	ldr	r1, [r7, #20]
 800a81a:	69ba      	ldr	r2, [r7, #24]
 800a81c:	e841 2300 	strex	r3, r2, [r1]
 800a820:	613b      	str	r3, [r7, #16]
   return(result);
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d1e5      	bne.n	800a7f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2220      	movs	r2, #32
 800a82c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2200      	movs	r2, #0
 800a834:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a836:	bf00      	nop
 800a838:	3754      	adds	r7, #84	; 0x54
 800a83a:	46bd      	mov	sp, r7
 800a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a840:	4770      	bx	lr

0800a842 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a842:	b580      	push	{r7, lr}
 800a844:	b084      	sub	sp, #16
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a84e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2200      	movs	r2, #0
 800a854:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2200      	movs	r2, #0
 800a85a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a85c:	68f8      	ldr	r0, [r7, #12]
 800a85e:	f7ff fecb 	bl	800a5f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a862:	bf00      	nop
 800a864:	3710      	adds	r7, #16
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}

0800a86a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a86a:	b480      	push	{r7}
 800a86c:	b085      	sub	sp, #20
 800a86e:	af00      	add	r7, sp, #0
 800a870:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a878:	b2db      	uxtb	r3, r3
 800a87a:	2b21      	cmp	r3, #33	; 0x21
 800a87c:	d13e      	bne.n	800a8fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	689b      	ldr	r3, [r3, #8]
 800a882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a886:	d114      	bne.n	800a8b2 <UART_Transmit_IT+0x48>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	691b      	ldr	r3, [r3, #16]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d110      	bne.n	800a8b2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6a1b      	ldr	r3, [r3, #32]
 800a894:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	881b      	ldrh	r3, [r3, #0]
 800a89a:	461a      	mov	r2, r3
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a8a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6a1b      	ldr	r3, [r3, #32]
 800a8aa:	1c9a      	adds	r2, r3, #2
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	621a      	str	r2, [r3, #32]
 800a8b0:	e008      	b.n	800a8c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6a1b      	ldr	r3, [r3, #32]
 800a8b6:	1c59      	adds	r1, r3, #1
 800a8b8:	687a      	ldr	r2, [r7, #4]
 800a8ba:	6211      	str	r1, [r2, #32]
 800a8bc:	781a      	ldrb	r2, [r3, #0]
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a8c8:	b29b      	uxth	r3, r3
 800a8ca:	3b01      	subs	r3, #1
 800a8cc:	b29b      	uxth	r3, r3
 800a8ce:	687a      	ldr	r2, [r7, #4]
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d10f      	bne.n	800a8f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	68da      	ldr	r2, [r3, #12]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a8e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	68da      	ldr	r2, [r3, #12]
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a8f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	e000      	b.n	800a8fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a8fc:	2302      	movs	r3, #2
  }
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3714      	adds	r7, #20
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr

0800a90a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a90a:	b580      	push	{r7, lr}
 800a90c:	b082      	sub	sp, #8
 800a90e:	af00      	add	r7, sp, #0
 800a910:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	68da      	ldr	r2, [r3, #12]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a920:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2220      	movs	r2, #32
 800a926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f7ff fe5a 	bl	800a5e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a930:	2300      	movs	r3, #0
}
 800a932:	4618      	mov	r0, r3
 800a934:	3708      	adds	r7, #8
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}

0800a93a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a93a:	b580      	push	{r7, lr}
 800a93c:	b08c      	sub	sp, #48	; 0x30
 800a93e:	af00      	add	r7, sp, #0
 800a940:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a948:	b2db      	uxtb	r3, r3
 800a94a:	2b22      	cmp	r3, #34	; 0x22
 800a94c:	f040 80ab 	bne.w	800aaa6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	689b      	ldr	r3, [r3, #8]
 800a954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a958:	d117      	bne.n	800a98a <UART_Receive_IT+0x50>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	691b      	ldr	r3, [r3, #16]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d113      	bne.n	800a98a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a962:	2300      	movs	r3, #0
 800a964:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a96a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	685b      	ldr	r3, [r3, #4]
 800a972:	b29b      	uxth	r3, r3
 800a974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a978:	b29a      	uxth	r2, r3
 800a97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a97c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a982:	1c9a      	adds	r2, r3, #2
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	629a      	str	r2, [r3, #40]	; 0x28
 800a988:	e026      	b.n	800a9d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a98e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a990:	2300      	movs	r3, #0
 800a992:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	689b      	ldr	r3, [r3, #8]
 800a998:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a99c:	d007      	beq.n	800a9ae <UART_Receive_IT+0x74>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	689b      	ldr	r3, [r3, #8]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d10a      	bne.n	800a9bc <UART_Receive_IT+0x82>
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	691b      	ldr	r3, [r3, #16]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d106      	bne.n	800a9bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	b2da      	uxtb	r2, r3
 800a9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b8:	701a      	strb	r2, [r3, #0]
 800a9ba:	e008      	b.n	800a9ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	685b      	ldr	r3, [r3, #4]
 800a9c2:	b2db      	uxtb	r3, r3
 800a9c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9c8:	b2da      	uxtb	r2, r3
 800a9ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9d2:	1c5a      	adds	r2, r3, #1
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a9dc:	b29b      	uxth	r3, r3
 800a9de:	3b01      	subs	r3, #1
 800a9e0:	b29b      	uxth	r3, r3
 800a9e2:	687a      	ldr	r2, [r7, #4]
 800a9e4:	4619      	mov	r1, r3
 800a9e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d15a      	bne.n	800aaa2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	68da      	ldr	r2, [r3, #12]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f022 0220 	bic.w	r2, r2, #32
 800a9fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	68da      	ldr	r2, [r3, #12]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aa0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	695a      	ldr	r2, [r3, #20]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f022 0201 	bic.w	r2, r2, #1
 800aa1a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2220      	movs	r2, #32
 800aa20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa28:	2b01      	cmp	r3, #1
 800aa2a:	d135      	bne.n	800aa98 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	330c      	adds	r3, #12
 800aa38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	e853 3f00 	ldrex	r3, [r3]
 800aa40:	613b      	str	r3, [r7, #16]
   return(result);
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	f023 0310 	bic.w	r3, r3, #16
 800aa48:	627b      	str	r3, [r7, #36]	; 0x24
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	330c      	adds	r3, #12
 800aa50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa52:	623a      	str	r2, [r7, #32]
 800aa54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa56:	69f9      	ldr	r1, [r7, #28]
 800aa58:	6a3a      	ldr	r2, [r7, #32]
 800aa5a:	e841 2300 	strex	r3, r2, [r1]
 800aa5e:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa60:	69bb      	ldr	r3, [r7, #24]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d1e5      	bne.n	800aa32 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f003 0310 	and.w	r3, r3, #16
 800aa70:	2b10      	cmp	r3, #16
 800aa72:	d10a      	bne.n	800aa8a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aa74:	2300      	movs	r3, #0
 800aa76:	60fb      	str	r3, [r7, #12]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	60fb      	str	r3, [r7, #12]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	685b      	ldr	r3, [r3, #4]
 800aa86:	60fb      	str	r3, [r7, #12]
 800aa88:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aa8e:	4619      	mov	r1, r3
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f7ff fdbb 	bl	800a60c <HAL_UARTEx_RxEventCallback>
 800aa96:	e002      	b.n	800aa9e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f7f7 fd49 	bl	8002530 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	e002      	b.n	800aaa8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	e000      	b.n	800aaa8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800aaa6:	2302      	movs	r3, #2
  }
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3730      	adds	r7, #48	; 0x30
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}

0800aab0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aab4:	b0c0      	sub	sp, #256	; 0x100
 800aab6:	af00      	add	r7, sp, #0
 800aab8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aabc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	691b      	ldr	r3, [r3, #16]
 800aac4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800aac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aacc:	68d9      	ldr	r1, [r3, #12]
 800aace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aad2:	681a      	ldr	r2, [r3, #0]
 800aad4:	ea40 0301 	orr.w	r3, r0, r1
 800aad8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800aada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aade:	689a      	ldr	r2, [r3, #8]
 800aae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aae4:	691b      	ldr	r3, [r3, #16]
 800aae6:	431a      	orrs	r2, r3
 800aae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aaec:	695b      	ldr	r3, [r3, #20]
 800aaee:	431a      	orrs	r2, r3
 800aaf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aaf4:	69db      	ldr	r3, [r3, #28]
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800aafc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	68db      	ldr	r3, [r3, #12]
 800ab04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ab08:	f021 010c 	bic.w	r1, r1, #12
 800ab0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab10:	681a      	ldr	r2, [r3, #0]
 800ab12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ab16:	430b      	orrs	r3, r1
 800ab18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ab1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	695b      	ldr	r3, [r3, #20]
 800ab22:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ab26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab2a:	6999      	ldr	r1, [r3, #24]
 800ab2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab30:	681a      	ldr	r2, [r3, #0]
 800ab32:	ea40 0301 	orr.w	r3, r0, r1
 800ab36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ab38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab3c:	681a      	ldr	r2, [r3, #0]
 800ab3e:	4b8f      	ldr	r3, [pc, #572]	; (800ad7c <UART_SetConfig+0x2cc>)
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d005      	beq.n	800ab50 <UART_SetConfig+0xa0>
 800ab44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab48:	681a      	ldr	r2, [r3, #0]
 800ab4a:	4b8d      	ldr	r3, [pc, #564]	; (800ad80 <UART_SetConfig+0x2d0>)
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	d104      	bne.n	800ab5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ab50:	f7fd fb28 	bl	80081a4 <HAL_RCC_GetPCLK2Freq>
 800ab54:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ab58:	e003      	b.n	800ab62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ab5a:	f7fd fb0f 	bl	800817c <HAL_RCC_GetPCLK1Freq>
 800ab5e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ab62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab66:	69db      	ldr	r3, [r3, #28]
 800ab68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab6c:	f040 810c 	bne.w	800ad88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ab70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ab74:	2200      	movs	r2, #0
 800ab76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ab7a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ab7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ab82:	4622      	mov	r2, r4
 800ab84:	462b      	mov	r3, r5
 800ab86:	1891      	adds	r1, r2, r2
 800ab88:	65b9      	str	r1, [r7, #88]	; 0x58
 800ab8a:	415b      	adcs	r3, r3
 800ab8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ab92:	4621      	mov	r1, r4
 800ab94:	eb12 0801 	adds.w	r8, r2, r1
 800ab98:	4629      	mov	r1, r5
 800ab9a:	eb43 0901 	adc.w	r9, r3, r1
 800ab9e:	f04f 0200 	mov.w	r2, #0
 800aba2:	f04f 0300 	mov.w	r3, #0
 800aba6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800abaa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800abae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800abb2:	4690      	mov	r8, r2
 800abb4:	4699      	mov	r9, r3
 800abb6:	4623      	mov	r3, r4
 800abb8:	eb18 0303 	adds.w	r3, r8, r3
 800abbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800abc0:	462b      	mov	r3, r5
 800abc2:	eb49 0303 	adc.w	r3, r9, r3
 800abc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800abca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	2200      	movs	r2, #0
 800abd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800abd6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800abda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800abde:	460b      	mov	r3, r1
 800abe0:	18db      	adds	r3, r3, r3
 800abe2:	653b      	str	r3, [r7, #80]	; 0x50
 800abe4:	4613      	mov	r3, r2
 800abe6:	eb42 0303 	adc.w	r3, r2, r3
 800abea:	657b      	str	r3, [r7, #84]	; 0x54
 800abec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800abf0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800abf4:	f7f6 f848 	bl	8000c88 <__aeabi_uldivmod>
 800abf8:	4602      	mov	r2, r0
 800abfa:	460b      	mov	r3, r1
 800abfc:	4b61      	ldr	r3, [pc, #388]	; (800ad84 <UART_SetConfig+0x2d4>)
 800abfe:	fba3 2302 	umull	r2, r3, r3, r2
 800ac02:	095b      	lsrs	r3, r3, #5
 800ac04:	011c      	lsls	r4, r3, #4
 800ac06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ac10:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800ac14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800ac18:	4642      	mov	r2, r8
 800ac1a:	464b      	mov	r3, r9
 800ac1c:	1891      	adds	r1, r2, r2
 800ac1e:	64b9      	str	r1, [r7, #72]	; 0x48
 800ac20:	415b      	adcs	r3, r3
 800ac22:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ac28:	4641      	mov	r1, r8
 800ac2a:	eb12 0a01 	adds.w	sl, r2, r1
 800ac2e:	4649      	mov	r1, r9
 800ac30:	eb43 0b01 	adc.w	fp, r3, r1
 800ac34:	f04f 0200 	mov.w	r2, #0
 800ac38:	f04f 0300 	mov.w	r3, #0
 800ac3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ac40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ac44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ac48:	4692      	mov	sl, r2
 800ac4a:	469b      	mov	fp, r3
 800ac4c:	4643      	mov	r3, r8
 800ac4e:	eb1a 0303 	adds.w	r3, sl, r3
 800ac52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ac56:	464b      	mov	r3, r9
 800ac58:	eb4b 0303 	adc.w	r3, fp, r3
 800ac5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ac60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac64:	685b      	ldr	r3, [r3, #4]
 800ac66:	2200      	movs	r2, #0
 800ac68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ac6c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800ac70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ac74:	460b      	mov	r3, r1
 800ac76:	18db      	adds	r3, r3, r3
 800ac78:	643b      	str	r3, [r7, #64]	; 0x40
 800ac7a:	4613      	mov	r3, r2
 800ac7c:	eb42 0303 	adc.w	r3, r2, r3
 800ac80:	647b      	str	r3, [r7, #68]	; 0x44
 800ac82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ac86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ac8a:	f7f5 fffd 	bl	8000c88 <__aeabi_uldivmod>
 800ac8e:	4602      	mov	r2, r0
 800ac90:	460b      	mov	r3, r1
 800ac92:	4611      	mov	r1, r2
 800ac94:	4b3b      	ldr	r3, [pc, #236]	; (800ad84 <UART_SetConfig+0x2d4>)
 800ac96:	fba3 2301 	umull	r2, r3, r3, r1
 800ac9a:	095b      	lsrs	r3, r3, #5
 800ac9c:	2264      	movs	r2, #100	; 0x64
 800ac9e:	fb02 f303 	mul.w	r3, r2, r3
 800aca2:	1acb      	subs	r3, r1, r3
 800aca4:	00db      	lsls	r3, r3, #3
 800aca6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800acaa:	4b36      	ldr	r3, [pc, #216]	; (800ad84 <UART_SetConfig+0x2d4>)
 800acac:	fba3 2302 	umull	r2, r3, r3, r2
 800acb0:	095b      	lsrs	r3, r3, #5
 800acb2:	005b      	lsls	r3, r3, #1
 800acb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800acb8:	441c      	add	r4, r3
 800acba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800acbe:	2200      	movs	r2, #0
 800acc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800acc4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800acc8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800accc:	4642      	mov	r2, r8
 800acce:	464b      	mov	r3, r9
 800acd0:	1891      	adds	r1, r2, r2
 800acd2:	63b9      	str	r1, [r7, #56]	; 0x38
 800acd4:	415b      	adcs	r3, r3
 800acd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800acdc:	4641      	mov	r1, r8
 800acde:	1851      	adds	r1, r2, r1
 800ace0:	6339      	str	r1, [r7, #48]	; 0x30
 800ace2:	4649      	mov	r1, r9
 800ace4:	414b      	adcs	r3, r1
 800ace6:	637b      	str	r3, [r7, #52]	; 0x34
 800ace8:	f04f 0200 	mov.w	r2, #0
 800acec:	f04f 0300 	mov.w	r3, #0
 800acf0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800acf4:	4659      	mov	r1, fp
 800acf6:	00cb      	lsls	r3, r1, #3
 800acf8:	4651      	mov	r1, sl
 800acfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800acfe:	4651      	mov	r1, sl
 800ad00:	00ca      	lsls	r2, r1, #3
 800ad02:	4610      	mov	r0, r2
 800ad04:	4619      	mov	r1, r3
 800ad06:	4603      	mov	r3, r0
 800ad08:	4642      	mov	r2, r8
 800ad0a:	189b      	adds	r3, r3, r2
 800ad0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ad10:	464b      	mov	r3, r9
 800ad12:	460a      	mov	r2, r1
 800ad14:	eb42 0303 	adc.w	r3, r2, r3
 800ad18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ad1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad20:	685b      	ldr	r3, [r3, #4]
 800ad22:	2200      	movs	r2, #0
 800ad24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ad28:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ad2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ad30:	460b      	mov	r3, r1
 800ad32:	18db      	adds	r3, r3, r3
 800ad34:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad36:	4613      	mov	r3, r2
 800ad38:	eb42 0303 	adc.w	r3, r2, r3
 800ad3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ad42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ad46:	f7f5 ff9f 	bl	8000c88 <__aeabi_uldivmod>
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	460b      	mov	r3, r1
 800ad4e:	4b0d      	ldr	r3, [pc, #52]	; (800ad84 <UART_SetConfig+0x2d4>)
 800ad50:	fba3 1302 	umull	r1, r3, r3, r2
 800ad54:	095b      	lsrs	r3, r3, #5
 800ad56:	2164      	movs	r1, #100	; 0x64
 800ad58:	fb01 f303 	mul.w	r3, r1, r3
 800ad5c:	1ad3      	subs	r3, r2, r3
 800ad5e:	00db      	lsls	r3, r3, #3
 800ad60:	3332      	adds	r3, #50	; 0x32
 800ad62:	4a08      	ldr	r2, [pc, #32]	; (800ad84 <UART_SetConfig+0x2d4>)
 800ad64:	fba2 2303 	umull	r2, r3, r2, r3
 800ad68:	095b      	lsrs	r3, r3, #5
 800ad6a:	f003 0207 	and.w	r2, r3, #7
 800ad6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4422      	add	r2, r4
 800ad76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ad78:	e105      	b.n	800af86 <UART_SetConfig+0x4d6>
 800ad7a:	bf00      	nop
 800ad7c:	40011000 	.word	0x40011000
 800ad80:	40011400 	.word	0x40011400
 800ad84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ad88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ad92:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ad96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ad9a:	4642      	mov	r2, r8
 800ad9c:	464b      	mov	r3, r9
 800ad9e:	1891      	adds	r1, r2, r2
 800ada0:	6239      	str	r1, [r7, #32]
 800ada2:	415b      	adcs	r3, r3
 800ada4:	627b      	str	r3, [r7, #36]	; 0x24
 800ada6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800adaa:	4641      	mov	r1, r8
 800adac:	1854      	adds	r4, r2, r1
 800adae:	4649      	mov	r1, r9
 800adb0:	eb43 0501 	adc.w	r5, r3, r1
 800adb4:	f04f 0200 	mov.w	r2, #0
 800adb8:	f04f 0300 	mov.w	r3, #0
 800adbc:	00eb      	lsls	r3, r5, #3
 800adbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800adc2:	00e2      	lsls	r2, r4, #3
 800adc4:	4614      	mov	r4, r2
 800adc6:	461d      	mov	r5, r3
 800adc8:	4643      	mov	r3, r8
 800adca:	18e3      	adds	r3, r4, r3
 800adcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800add0:	464b      	mov	r3, r9
 800add2:	eb45 0303 	adc.w	r3, r5, r3
 800add6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800adda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adde:	685b      	ldr	r3, [r3, #4]
 800ade0:	2200      	movs	r2, #0
 800ade2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ade6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800adea:	f04f 0200 	mov.w	r2, #0
 800adee:	f04f 0300 	mov.w	r3, #0
 800adf2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800adf6:	4629      	mov	r1, r5
 800adf8:	008b      	lsls	r3, r1, #2
 800adfa:	4621      	mov	r1, r4
 800adfc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ae00:	4621      	mov	r1, r4
 800ae02:	008a      	lsls	r2, r1, #2
 800ae04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ae08:	f7f5 ff3e 	bl	8000c88 <__aeabi_uldivmod>
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	460b      	mov	r3, r1
 800ae10:	4b60      	ldr	r3, [pc, #384]	; (800af94 <UART_SetConfig+0x4e4>)
 800ae12:	fba3 2302 	umull	r2, r3, r3, r2
 800ae16:	095b      	lsrs	r3, r3, #5
 800ae18:	011c      	lsls	r4, r3, #4
 800ae1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ae1e:	2200      	movs	r2, #0
 800ae20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ae24:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ae28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ae2c:	4642      	mov	r2, r8
 800ae2e:	464b      	mov	r3, r9
 800ae30:	1891      	adds	r1, r2, r2
 800ae32:	61b9      	str	r1, [r7, #24]
 800ae34:	415b      	adcs	r3, r3
 800ae36:	61fb      	str	r3, [r7, #28]
 800ae38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ae3c:	4641      	mov	r1, r8
 800ae3e:	1851      	adds	r1, r2, r1
 800ae40:	6139      	str	r1, [r7, #16]
 800ae42:	4649      	mov	r1, r9
 800ae44:	414b      	adcs	r3, r1
 800ae46:	617b      	str	r3, [r7, #20]
 800ae48:	f04f 0200 	mov.w	r2, #0
 800ae4c:	f04f 0300 	mov.w	r3, #0
 800ae50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ae54:	4659      	mov	r1, fp
 800ae56:	00cb      	lsls	r3, r1, #3
 800ae58:	4651      	mov	r1, sl
 800ae5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ae5e:	4651      	mov	r1, sl
 800ae60:	00ca      	lsls	r2, r1, #3
 800ae62:	4610      	mov	r0, r2
 800ae64:	4619      	mov	r1, r3
 800ae66:	4603      	mov	r3, r0
 800ae68:	4642      	mov	r2, r8
 800ae6a:	189b      	adds	r3, r3, r2
 800ae6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ae70:	464b      	mov	r3, r9
 800ae72:	460a      	mov	r2, r1
 800ae74:	eb42 0303 	adc.w	r3, r2, r3
 800ae78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ae7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	2200      	movs	r2, #0
 800ae84:	67bb      	str	r3, [r7, #120]	; 0x78
 800ae86:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ae88:	f04f 0200 	mov.w	r2, #0
 800ae8c:	f04f 0300 	mov.w	r3, #0
 800ae90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ae94:	4649      	mov	r1, r9
 800ae96:	008b      	lsls	r3, r1, #2
 800ae98:	4641      	mov	r1, r8
 800ae9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ae9e:	4641      	mov	r1, r8
 800aea0:	008a      	lsls	r2, r1, #2
 800aea2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800aea6:	f7f5 feef 	bl	8000c88 <__aeabi_uldivmod>
 800aeaa:	4602      	mov	r2, r0
 800aeac:	460b      	mov	r3, r1
 800aeae:	4b39      	ldr	r3, [pc, #228]	; (800af94 <UART_SetConfig+0x4e4>)
 800aeb0:	fba3 1302 	umull	r1, r3, r3, r2
 800aeb4:	095b      	lsrs	r3, r3, #5
 800aeb6:	2164      	movs	r1, #100	; 0x64
 800aeb8:	fb01 f303 	mul.w	r3, r1, r3
 800aebc:	1ad3      	subs	r3, r2, r3
 800aebe:	011b      	lsls	r3, r3, #4
 800aec0:	3332      	adds	r3, #50	; 0x32
 800aec2:	4a34      	ldr	r2, [pc, #208]	; (800af94 <UART_SetConfig+0x4e4>)
 800aec4:	fba2 2303 	umull	r2, r3, r2, r3
 800aec8:	095b      	lsrs	r3, r3, #5
 800aeca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aece:	441c      	add	r4, r3
 800aed0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aed4:	2200      	movs	r2, #0
 800aed6:	673b      	str	r3, [r7, #112]	; 0x70
 800aed8:	677a      	str	r2, [r7, #116]	; 0x74
 800aeda:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800aede:	4642      	mov	r2, r8
 800aee0:	464b      	mov	r3, r9
 800aee2:	1891      	adds	r1, r2, r2
 800aee4:	60b9      	str	r1, [r7, #8]
 800aee6:	415b      	adcs	r3, r3
 800aee8:	60fb      	str	r3, [r7, #12]
 800aeea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aeee:	4641      	mov	r1, r8
 800aef0:	1851      	adds	r1, r2, r1
 800aef2:	6039      	str	r1, [r7, #0]
 800aef4:	4649      	mov	r1, r9
 800aef6:	414b      	adcs	r3, r1
 800aef8:	607b      	str	r3, [r7, #4]
 800aefa:	f04f 0200 	mov.w	r2, #0
 800aefe:	f04f 0300 	mov.w	r3, #0
 800af02:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800af06:	4659      	mov	r1, fp
 800af08:	00cb      	lsls	r3, r1, #3
 800af0a:	4651      	mov	r1, sl
 800af0c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800af10:	4651      	mov	r1, sl
 800af12:	00ca      	lsls	r2, r1, #3
 800af14:	4610      	mov	r0, r2
 800af16:	4619      	mov	r1, r3
 800af18:	4603      	mov	r3, r0
 800af1a:	4642      	mov	r2, r8
 800af1c:	189b      	adds	r3, r3, r2
 800af1e:	66bb      	str	r3, [r7, #104]	; 0x68
 800af20:	464b      	mov	r3, r9
 800af22:	460a      	mov	r2, r1
 800af24:	eb42 0303 	adc.w	r3, r2, r3
 800af28:	66fb      	str	r3, [r7, #108]	; 0x6c
 800af2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	2200      	movs	r2, #0
 800af32:	663b      	str	r3, [r7, #96]	; 0x60
 800af34:	667a      	str	r2, [r7, #100]	; 0x64
 800af36:	f04f 0200 	mov.w	r2, #0
 800af3a:	f04f 0300 	mov.w	r3, #0
 800af3e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800af42:	4649      	mov	r1, r9
 800af44:	008b      	lsls	r3, r1, #2
 800af46:	4641      	mov	r1, r8
 800af48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800af4c:	4641      	mov	r1, r8
 800af4e:	008a      	lsls	r2, r1, #2
 800af50:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800af54:	f7f5 fe98 	bl	8000c88 <__aeabi_uldivmod>
 800af58:	4602      	mov	r2, r0
 800af5a:	460b      	mov	r3, r1
 800af5c:	4b0d      	ldr	r3, [pc, #52]	; (800af94 <UART_SetConfig+0x4e4>)
 800af5e:	fba3 1302 	umull	r1, r3, r3, r2
 800af62:	095b      	lsrs	r3, r3, #5
 800af64:	2164      	movs	r1, #100	; 0x64
 800af66:	fb01 f303 	mul.w	r3, r1, r3
 800af6a:	1ad3      	subs	r3, r2, r3
 800af6c:	011b      	lsls	r3, r3, #4
 800af6e:	3332      	adds	r3, #50	; 0x32
 800af70:	4a08      	ldr	r2, [pc, #32]	; (800af94 <UART_SetConfig+0x4e4>)
 800af72:	fba2 2303 	umull	r2, r3, r2, r3
 800af76:	095b      	lsrs	r3, r3, #5
 800af78:	f003 020f 	and.w	r2, r3, #15
 800af7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	4422      	add	r2, r4
 800af84:	609a      	str	r2, [r3, #8]
}
 800af86:	bf00      	nop
 800af88:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800af8c:	46bd      	mov	sp, r7
 800af8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800af92:	bf00      	nop
 800af94:	51eb851f 	.word	0x51eb851f

0800af98 <__errno>:
 800af98:	4b01      	ldr	r3, [pc, #4]	; (800afa0 <__errno+0x8>)
 800af9a:	6818      	ldr	r0, [r3, #0]
 800af9c:	4770      	bx	lr
 800af9e:	bf00      	nop
 800afa0:	200000fc 	.word	0x200000fc

0800afa4 <__libc_init_array>:
 800afa4:	b570      	push	{r4, r5, r6, lr}
 800afa6:	4d0d      	ldr	r5, [pc, #52]	; (800afdc <__libc_init_array+0x38>)
 800afa8:	4c0d      	ldr	r4, [pc, #52]	; (800afe0 <__libc_init_array+0x3c>)
 800afaa:	1b64      	subs	r4, r4, r5
 800afac:	10a4      	asrs	r4, r4, #2
 800afae:	2600      	movs	r6, #0
 800afb0:	42a6      	cmp	r6, r4
 800afb2:	d109      	bne.n	800afc8 <__libc_init_array+0x24>
 800afb4:	4d0b      	ldr	r5, [pc, #44]	; (800afe4 <__libc_init_array+0x40>)
 800afb6:	4c0c      	ldr	r4, [pc, #48]	; (800afe8 <__libc_init_array+0x44>)
 800afb8:	f004 ff0c 	bl	800fdd4 <_init>
 800afbc:	1b64      	subs	r4, r4, r5
 800afbe:	10a4      	asrs	r4, r4, #2
 800afc0:	2600      	movs	r6, #0
 800afc2:	42a6      	cmp	r6, r4
 800afc4:	d105      	bne.n	800afd2 <__libc_init_array+0x2e>
 800afc6:	bd70      	pop	{r4, r5, r6, pc}
 800afc8:	f855 3b04 	ldr.w	r3, [r5], #4
 800afcc:	4798      	blx	r3
 800afce:	3601      	adds	r6, #1
 800afd0:	e7ee      	b.n	800afb0 <__libc_init_array+0xc>
 800afd2:	f855 3b04 	ldr.w	r3, [r5], #4
 800afd6:	4798      	blx	r3
 800afd8:	3601      	adds	r6, #1
 800afda:	e7f2      	b.n	800afc2 <__libc_init_array+0x1e>
 800afdc:	080105a8 	.word	0x080105a8
 800afe0:	080105a8 	.word	0x080105a8
 800afe4:	080105a8 	.word	0x080105a8
 800afe8:	080105ac 	.word	0x080105ac

0800afec <memset>:
 800afec:	4402      	add	r2, r0
 800afee:	4603      	mov	r3, r0
 800aff0:	4293      	cmp	r3, r2
 800aff2:	d100      	bne.n	800aff6 <memset+0xa>
 800aff4:	4770      	bx	lr
 800aff6:	f803 1b01 	strb.w	r1, [r3], #1
 800affa:	e7f9      	b.n	800aff0 <memset+0x4>

0800affc <__cvt>:
 800affc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b000:	ec55 4b10 	vmov	r4, r5, d0
 800b004:	2d00      	cmp	r5, #0
 800b006:	460e      	mov	r6, r1
 800b008:	4619      	mov	r1, r3
 800b00a:	462b      	mov	r3, r5
 800b00c:	bfbb      	ittet	lt
 800b00e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b012:	461d      	movlt	r5, r3
 800b014:	2300      	movge	r3, #0
 800b016:	232d      	movlt	r3, #45	; 0x2d
 800b018:	700b      	strb	r3, [r1, #0]
 800b01a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b01c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b020:	4691      	mov	r9, r2
 800b022:	f023 0820 	bic.w	r8, r3, #32
 800b026:	bfbc      	itt	lt
 800b028:	4622      	movlt	r2, r4
 800b02a:	4614      	movlt	r4, r2
 800b02c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b030:	d005      	beq.n	800b03e <__cvt+0x42>
 800b032:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b036:	d100      	bne.n	800b03a <__cvt+0x3e>
 800b038:	3601      	adds	r6, #1
 800b03a:	2102      	movs	r1, #2
 800b03c:	e000      	b.n	800b040 <__cvt+0x44>
 800b03e:	2103      	movs	r1, #3
 800b040:	ab03      	add	r3, sp, #12
 800b042:	9301      	str	r3, [sp, #4]
 800b044:	ab02      	add	r3, sp, #8
 800b046:	9300      	str	r3, [sp, #0]
 800b048:	ec45 4b10 	vmov	d0, r4, r5
 800b04c:	4653      	mov	r3, sl
 800b04e:	4632      	mov	r2, r6
 800b050:	f001 fdae 	bl	800cbb0 <_dtoa_r>
 800b054:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b058:	4607      	mov	r7, r0
 800b05a:	d102      	bne.n	800b062 <__cvt+0x66>
 800b05c:	f019 0f01 	tst.w	r9, #1
 800b060:	d022      	beq.n	800b0a8 <__cvt+0xac>
 800b062:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b066:	eb07 0906 	add.w	r9, r7, r6
 800b06a:	d110      	bne.n	800b08e <__cvt+0x92>
 800b06c:	783b      	ldrb	r3, [r7, #0]
 800b06e:	2b30      	cmp	r3, #48	; 0x30
 800b070:	d10a      	bne.n	800b088 <__cvt+0x8c>
 800b072:	2200      	movs	r2, #0
 800b074:	2300      	movs	r3, #0
 800b076:	4620      	mov	r0, r4
 800b078:	4629      	mov	r1, r5
 800b07a:	f7f5 fd25 	bl	8000ac8 <__aeabi_dcmpeq>
 800b07e:	b918      	cbnz	r0, 800b088 <__cvt+0x8c>
 800b080:	f1c6 0601 	rsb	r6, r6, #1
 800b084:	f8ca 6000 	str.w	r6, [sl]
 800b088:	f8da 3000 	ldr.w	r3, [sl]
 800b08c:	4499      	add	r9, r3
 800b08e:	2200      	movs	r2, #0
 800b090:	2300      	movs	r3, #0
 800b092:	4620      	mov	r0, r4
 800b094:	4629      	mov	r1, r5
 800b096:	f7f5 fd17 	bl	8000ac8 <__aeabi_dcmpeq>
 800b09a:	b108      	cbz	r0, 800b0a0 <__cvt+0xa4>
 800b09c:	f8cd 900c 	str.w	r9, [sp, #12]
 800b0a0:	2230      	movs	r2, #48	; 0x30
 800b0a2:	9b03      	ldr	r3, [sp, #12]
 800b0a4:	454b      	cmp	r3, r9
 800b0a6:	d307      	bcc.n	800b0b8 <__cvt+0xbc>
 800b0a8:	9b03      	ldr	r3, [sp, #12]
 800b0aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b0ac:	1bdb      	subs	r3, r3, r7
 800b0ae:	4638      	mov	r0, r7
 800b0b0:	6013      	str	r3, [r2, #0]
 800b0b2:	b004      	add	sp, #16
 800b0b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0b8:	1c59      	adds	r1, r3, #1
 800b0ba:	9103      	str	r1, [sp, #12]
 800b0bc:	701a      	strb	r2, [r3, #0]
 800b0be:	e7f0      	b.n	800b0a2 <__cvt+0xa6>

0800b0c0 <__exponent>:
 800b0c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	2900      	cmp	r1, #0
 800b0c6:	bfb8      	it	lt
 800b0c8:	4249      	neglt	r1, r1
 800b0ca:	f803 2b02 	strb.w	r2, [r3], #2
 800b0ce:	bfb4      	ite	lt
 800b0d0:	222d      	movlt	r2, #45	; 0x2d
 800b0d2:	222b      	movge	r2, #43	; 0x2b
 800b0d4:	2909      	cmp	r1, #9
 800b0d6:	7042      	strb	r2, [r0, #1]
 800b0d8:	dd2a      	ble.n	800b130 <__exponent+0x70>
 800b0da:	f10d 0407 	add.w	r4, sp, #7
 800b0de:	46a4      	mov	ip, r4
 800b0e0:	270a      	movs	r7, #10
 800b0e2:	46a6      	mov	lr, r4
 800b0e4:	460a      	mov	r2, r1
 800b0e6:	fb91 f6f7 	sdiv	r6, r1, r7
 800b0ea:	fb07 1516 	mls	r5, r7, r6, r1
 800b0ee:	3530      	adds	r5, #48	; 0x30
 800b0f0:	2a63      	cmp	r2, #99	; 0x63
 800b0f2:	f104 34ff 	add.w	r4, r4, #4294967295
 800b0f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b0fa:	4631      	mov	r1, r6
 800b0fc:	dcf1      	bgt.n	800b0e2 <__exponent+0x22>
 800b0fe:	3130      	adds	r1, #48	; 0x30
 800b100:	f1ae 0502 	sub.w	r5, lr, #2
 800b104:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b108:	1c44      	adds	r4, r0, #1
 800b10a:	4629      	mov	r1, r5
 800b10c:	4561      	cmp	r1, ip
 800b10e:	d30a      	bcc.n	800b126 <__exponent+0x66>
 800b110:	f10d 0209 	add.w	r2, sp, #9
 800b114:	eba2 020e 	sub.w	r2, r2, lr
 800b118:	4565      	cmp	r5, ip
 800b11a:	bf88      	it	hi
 800b11c:	2200      	movhi	r2, #0
 800b11e:	4413      	add	r3, r2
 800b120:	1a18      	subs	r0, r3, r0
 800b122:	b003      	add	sp, #12
 800b124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b126:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b12a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b12e:	e7ed      	b.n	800b10c <__exponent+0x4c>
 800b130:	2330      	movs	r3, #48	; 0x30
 800b132:	3130      	adds	r1, #48	; 0x30
 800b134:	7083      	strb	r3, [r0, #2]
 800b136:	70c1      	strb	r1, [r0, #3]
 800b138:	1d03      	adds	r3, r0, #4
 800b13a:	e7f1      	b.n	800b120 <__exponent+0x60>

0800b13c <_printf_float>:
 800b13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b140:	ed2d 8b02 	vpush	{d8}
 800b144:	b08d      	sub	sp, #52	; 0x34
 800b146:	460c      	mov	r4, r1
 800b148:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b14c:	4616      	mov	r6, r2
 800b14e:	461f      	mov	r7, r3
 800b150:	4605      	mov	r5, r0
 800b152:	f002 fe8b 	bl	800de6c <_localeconv_r>
 800b156:	f8d0 a000 	ldr.w	sl, [r0]
 800b15a:	4650      	mov	r0, sl
 800b15c:	f7f5 f838 	bl	80001d0 <strlen>
 800b160:	2300      	movs	r3, #0
 800b162:	930a      	str	r3, [sp, #40]	; 0x28
 800b164:	6823      	ldr	r3, [r4, #0]
 800b166:	9305      	str	r3, [sp, #20]
 800b168:	f8d8 3000 	ldr.w	r3, [r8]
 800b16c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b170:	3307      	adds	r3, #7
 800b172:	f023 0307 	bic.w	r3, r3, #7
 800b176:	f103 0208 	add.w	r2, r3, #8
 800b17a:	f8c8 2000 	str.w	r2, [r8]
 800b17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b182:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b186:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b18a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b18e:	9307      	str	r3, [sp, #28]
 800b190:	f8cd 8018 	str.w	r8, [sp, #24]
 800b194:	ee08 0a10 	vmov	s16, r0
 800b198:	4b9f      	ldr	r3, [pc, #636]	; (800b418 <_printf_float+0x2dc>)
 800b19a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b19e:	f04f 32ff 	mov.w	r2, #4294967295
 800b1a2:	f7f5 fcc3 	bl	8000b2c <__aeabi_dcmpun>
 800b1a6:	bb88      	cbnz	r0, 800b20c <_printf_float+0xd0>
 800b1a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b1ac:	4b9a      	ldr	r3, [pc, #616]	; (800b418 <_printf_float+0x2dc>)
 800b1ae:	f04f 32ff 	mov.w	r2, #4294967295
 800b1b2:	f7f5 fc9d 	bl	8000af0 <__aeabi_dcmple>
 800b1b6:	bb48      	cbnz	r0, 800b20c <_printf_float+0xd0>
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	4640      	mov	r0, r8
 800b1be:	4649      	mov	r1, r9
 800b1c0:	f7f5 fc8c 	bl	8000adc <__aeabi_dcmplt>
 800b1c4:	b110      	cbz	r0, 800b1cc <_printf_float+0x90>
 800b1c6:	232d      	movs	r3, #45	; 0x2d
 800b1c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1cc:	4b93      	ldr	r3, [pc, #588]	; (800b41c <_printf_float+0x2e0>)
 800b1ce:	4894      	ldr	r0, [pc, #592]	; (800b420 <_printf_float+0x2e4>)
 800b1d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b1d4:	bf94      	ite	ls
 800b1d6:	4698      	movls	r8, r3
 800b1d8:	4680      	movhi	r8, r0
 800b1da:	2303      	movs	r3, #3
 800b1dc:	6123      	str	r3, [r4, #16]
 800b1de:	9b05      	ldr	r3, [sp, #20]
 800b1e0:	f023 0204 	bic.w	r2, r3, #4
 800b1e4:	6022      	str	r2, [r4, #0]
 800b1e6:	f04f 0900 	mov.w	r9, #0
 800b1ea:	9700      	str	r7, [sp, #0]
 800b1ec:	4633      	mov	r3, r6
 800b1ee:	aa0b      	add	r2, sp, #44	; 0x2c
 800b1f0:	4621      	mov	r1, r4
 800b1f2:	4628      	mov	r0, r5
 800b1f4:	f000 f9d8 	bl	800b5a8 <_printf_common>
 800b1f8:	3001      	adds	r0, #1
 800b1fa:	f040 8090 	bne.w	800b31e <_printf_float+0x1e2>
 800b1fe:	f04f 30ff 	mov.w	r0, #4294967295
 800b202:	b00d      	add	sp, #52	; 0x34
 800b204:	ecbd 8b02 	vpop	{d8}
 800b208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b20c:	4642      	mov	r2, r8
 800b20e:	464b      	mov	r3, r9
 800b210:	4640      	mov	r0, r8
 800b212:	4649      	mov	r1, r9
 800b214:	f7f5 fc8a 	bl	8000b2c <__aeabi_dcmpun>
 800b218:	b140      	cbz	r0, 800b22c <_printf_float+0xf0>
 800b21a:	464b      	mov	r3, r9
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	bfbc      	itt	lt
 800b220:	232d      	movlt	r3, #45	; 0x2d
 800b222:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b226:	487f      	ldr	r0, [pc, #508]	; (800b424 <_printf_float+0x2e8>)
 800b228:	4b7f      	ldr	r3, [pc, #508]	; (800b428 <_printf_float+0x2ec>)
 800b22a:	e7d1      	b.n	800b1d0 <_printf_float+0x94>
 800b22c:	6863      	ldr	r3, [r4, #4]
 800b22e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b232:	9206      	str	r2, [sp, #24]
 800b234:	1c5a      	adds	r2, r3, #1
 800b236:	d13f      	bne.n	800b2b8 <_printf_float+0x17c>
 800b238:	2306      	movs	r3, #6
 800b23a:	6063      	str	r3, [r4, #4]
 800b23c:	9b05      	ldr	r3, [sp, #20]
 800b23e:	6861      	ldr	r1, [r4, #4]
 800b240:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b244:	2300      	movs	r3, #0
 800b246:	9303      	str	r3, [sp, #12]
 800b248:	ab0a      	add	r3, sp, #40	; 0x28
 800b24a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b24e:	ab09      	add	r3, sp, #36	; 0x24
 800b250:	ec49 8b10 	vmov	d0, r8, r9
 800b254:	9300      	str	r3, [sp, #0]
 800b256:	6022      	str	r2, [r4, #0]
 800b258:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b25c:	4628      	mov	r0, r5
 800b25e:	f7ff fecd 	bl	800affc <__cvt>
 800b262:	9b06      	ldr	r3, [sp, #24]
 800b264:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b266:	2b47      	cmp	r3, #71	; 0x47
 800b268:	4680      	mov	r8, r0
 800b26a:	d108      	bne.n	800b27e <_printf_float+0x142>
 800b26c:	1cc8      	adds	r0, r1, #3
 800b26e:	db02      	blt.n	800b276 <_printf_float+0x13a>
 800b270:	6863      	ldr	r3, [r4, #4]
 800b272:	4299      	cmp	r1, r3
 800b274:	dd41      	ble.n	800b2fa <_printf_float+0x1be>
 800b276:	f1ab 0b02 	sub.w	fp, fp, #2
 800b27a:	fa5f fb8b 	uxtb.w	fp, fp
 800b27e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b282:	d820      	bhi.n	800b2c6 <_printf_float+0x18a>
 800b284:	3901      	subs	r1, #1
 800b286:	465a      	mov	r2, fp
 800b288:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b28c:	9109      	str	r1, [sp, #36]	; 0x24
 800b28e:	f7ff ff17 	bl	800b0c0 <__exponent>
 800b292:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b294:	1813      	adds	r3, r2, r0
 800b296:	2a01      	cmp	r2, #1
 800b298:	4681      	mov	r9, r0
 800b29a:	6123      	str	r3, [r4, #16]
 800b29c:	dc02      	bgt.n	800b2a4 <_printf_float+0x168>
 800b29e:	6822      	ldr	r2, [r4, #0]
 800b2a0:	07d2      	lsls	r2, r2, #31
 800b2a2:	d501      	bpl.n	800b2a8 <_printf_float+0x16c>
 800b2a4:	3301      	adds	r3, #1
 800b2a6:	6123      	str	r3, [r4, #16]
 800b2a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d09c      	beq.n	800b1ea <_printf_float+0xae>
 800b2b0:	232d      	movs	r3, #45	; 0x2d
 800b2b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2b6:	e798      	b.n	800b1ea <_printf_float+0xae>
 800b2b8:	9a06      	ldr	r2, [sp, #24]
 800b2ba:	2a47      	cmp	r2, #71	; 0x47
 800b2bc:	d1be      	bne.n	800b23c <_printf_float+0x100>
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d1bc      	bne.n	800b23c <_printf_float+0x100>
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	e7b9      	b.n	800b23a <_printf_float+0xfe>
 800b2c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b2ca:	d118      	bne.n	800b2fe <_printf_float+0x1c2>
 800b2cc:	2900      	cmp	r1, #0
 800b2ce:	6863      	ldr	r3, [r4, #4]
 800b2d0:	dd0b      	ble.n	800b2ea <_printf_float+0x1ae>
 800b2d2:	6121      	str	r1, [r4, #16]
 800b2d4:	b913      	cbnz	r3, 800b2dc <_printf_float+0x1a0>
 800b2d6:	6822      	ldr	r2, [r4, #0]
 800b2d8:	07d0      	lsls	r0, r2, #31
 800b2da:	d502      	bpl.n	800b2e2 <_printf_float+0x1a6>
 800b2dc:	3301      	adds	r3, #1
 800b2de:	440b      	add	r3, r1
 800b2e0:	6123      	str	r3, [r4, #16]
 800b2e2:	65a1      	str	r1, [r4, #88]	; 0x58
 800b2e4:	f04f 0900 	mov.w	r9, #0
 800b2e8:	e7de      	b.n	800b2a8 <_printf_float+0x16c>
 800b2ea:	b913      	cbnz	r3, 800b2f2 <_printf_float+0x1b6>
 800b2ec:	6822      	ldr	r2, [r4, #0]
 800b2ee:	07d2      	lsls	r2, r2, #31
 800b2f0:	d501      	bpl.n	800b2f6 <_printf_float+0x1ba>
 800b2f2:	3302      	adds	r3, #2
 800b2f4:	e7f4      	b.n	800b2e0 <_printf_float+0x1a4>
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	e7f2      	b.n	800b2e0 <_printf_float+0x1a4>
 800b2fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b2fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b300:	4299      	cmp	r1, r3
 800b302:	db05      	blt.n	800b310 <_printf_float+0x1d4>
 800b304:	6823      	ldr	r3, [r4, #0]
 800b306:	6121      	str	r1, [r4, #16]
 800b308:	07d8      	lsls	r0, r3, #31
 800b30a:	d5ea      	bpl.n	800b2e2 <_printf_float+0x1a6>
 800b30c:	1c4b      	adds	r3, r1, #1
 800b30e:	e7e7      	b.n	800b2e0 <_printf_float+0x1a4>
 800b310:	2900      	cmp	r1, #0
 800b312:	bfd4      	ite	le
 800b314:	f1c1 0202 	rsble	r2, r1, #2
 800b318:	2201      	movgt	r2, #1
 800b31a:	4413      	add	r3, r2
 800b31c:	e7e0      	b.n	800b2e0 <_printf_float+0x1a4>
 800b31e:	6823      	ldr	r3, [r4, #0]
 800b320:	055a      	lsls	r2, r3, #21
 800b322:	d407      	bmi.n	800b334 <_printf_float+0x1f8>
 800b324:	6923      	ldr	r3, [r4, #16]
 800b326:	4642      	mov	r2, r8
 800b328:	4631      	mov	r1, r6
 800b32a:	4628      	mov	r0, r5
 800b32c:	47b8      	blx	r7
 800b32e:	3001      	adds	r0, #1
 800b330:	d12c      	bne.n	800b38c <_printf_float+0x250>
 800b332:	e764      	b.n	800b1fe <_printf_float+0xc2>
 800b334:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b338:	f240 80e0 	bls.w	800b4fc <_printf_float+0x3c0>
 800b33c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b340:	2200      	movs	r2, #0
 800b342:	2300      	movs	r3, #0
 800b344:	f7f5 fbc0 	bl	8000ac8 <__aeabi_dcmpeq>
 800b348:	2800      	cmp	r0, #0
 800b34a:	d034      	beq.n	800b3b6 <_printf_float+0x27a>
 800b34c:	4a37      	ldr	r2, [pc, #220]	; (800b42c <_printf_float+0x2f0>)
 800b34e:	2301      	movs	r3, #1
 800b350:	4631      	mov	r1, r6
 800b352:	4628      	mov	r0, r5
 800b354:	47b8      	blx	r7
 800b356:	3001      	adds	r0, #1
 800b358:	f43f af51 	beq.w	800b1fe <_printf_float+0xc2>
 800b35c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b360:	429a      	cmp	r2, r3
 800b362:	db02      	blt.n	800b36a <_printf_float+0x22e>
 800b364:	6823      	ldr	r3, [r4, #0]
 800b366:	07d8      	lsls	r0, r3, #31
 800b368:	d510      	bpl.n	800b38c <_printf_float+0x250>
 800b36a:	ee18 3a10 	vmov	r3, s16
 800b36e:	4652      	mov	r2, sl
 800b370:	4631      	mov	r1, r6
 800b372:	4628      	mov	r0, r5
 800b374:	47b8      	blx	r7
 800b376:	3001      	adds	r0, #1
 800b378:	f43f af41 	beq.w	800b1fe <_printf_float+0xc2>
 800b37c:	f04f 0800 	mov.w	r8, #0
 800b380:	f104 091a 	add.w	r9, r4, #26
 800b384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b386:	3b01      	subs	r3, #1
 800b388:	4543      	cmp	r3, r8
 800b38a:	dc09      	bgt.n	800b3a0 <_printf_float+0x264>
 800b38c:	6823      	ldr	r3, [r4, #0]
 800b38e:	079b      	lsls	r3, r3, #30
 800b390:	f100 8105 	bmi.w	800b59e <_printf_float+0x462>
 800b394:	68e0      	ldr	r0, [r4, #12]
 800b396:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b398:	4298      	cmp	r0, r3
 800b39a:	bfb8      	it	lt
 800b39c:	4618      	movlt	r0, r3
 800b39e:	e730      	b.n	800b202 <_printf_float+0xc6>
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	464a      	mov	r2, r9
 800b3a4:	4631      	mov	r1, r6
 800b3a6:	4628      	mov	r0, r5
 800b3a8:	47b8      	blx	r7
 800b3aa:	3001      	adds	r0, #1
 800b3ac:	f43f af27 	beq.w	800b1fe <_printf_float+0xc2>
 800b3b0:	f108 0801 	add.w	r8, r8, #1
 800b3b4:	e7e6      	b.n	800b384 <_printf_float+0x248>
 800b3b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	dc39      	bgt.n	800b430 <_printf_float+0x2f4>
 800b3bc:	4a1b      	ldr	r2, [pc, #108]	; (800b42c <_printf_float+0x2f0>)
 800b3be:	2301      	movs	r3, #1
 800b3c0:	4631      	mov	r1, r6
 800b3c2:	4628      	mov	r0, r5
 800b3c4:	47b8      	blx	r7
 800b3c6:	3001      	adds	r0, #1
 800b3c8:	f43f af19 	beq.w	800b1fe <_printf_float+0xc2>
 800b3cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b3d0:	4313      	orrs	r3, r2
 800b3d2:	d102      	bne.n	800b3da <_printf_float+0x29e>
 800b3d4:	6823      	ldr	r3, [r4, #0]
 800b3d6:	07d9      	lsls	r1, r3, #31
 800b3d8:	d5d8      	bpl.n	800b38c <_printf_float+0x250>
 800b3da:	ee18 3a10 	vmov	r3, s16
 800b3de:	4652      	mov	r2, sl
 800b3e0:	4631      	mov	r1, r6
 800b3e2:	4628      	mov	r0, r5
 800b3e4:	47b8      	blx	r7
 800b3e6:	3001      	adds	r0, #1
 800b3e8:	f43f af09 	beq.w	800b1fe <_printf_float+0xc2>
 800b3ec:	f04f 0900 	mov.w	r9, #0
 800b3f0:	f104 0a1a 	add.w	sl, r4, #26
 800b3f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3f6:	425b      	negs	r3, r3
 800b3f8:	454b      	cmp	r3, r9
 800b3fa:	dc01      	bgt.n	800b400 <_printf_float+0x2c4>
 800b3fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3fe:	e792      	b.n	800b326 <_printf_float+0x1ea>
 800b400:	2301      	movs	r3, #1
 800b402:	4652      	mov	r2, sl
 800b404:	4631      	mov	r1, r6
 800b406:	4628      	mov	r0, r5
 800b408:	47b8      	blx	r7
 800b40a:	3001      	adds	r0, #1
 800b40c:	f43f aef7 	beq.w	800b1fe <_printf_float+0xc2>
 800b410:	f109 0901 	add.w	r9, r9, #1
 800b414:	e7ee      	b.n	800b3f4 <_printf_float+0x2b8>
 800b416:	bf00      	nop
 800b418:	7fefffff 	.word	0x7fefffff
 800b41c:	0801008c 	.word	0x0801008c
 800b420:	08010090 	.word	0x08010090
 800b424:	08010098 	.word	0x08010098
 800b428:	08010094 	.word	0x08010094
 800b42c:	0801009c 	.word	0x0801009c
 800b430:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b432:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b434:	429a      	cmp	r2, r3
 800b436:	bfa8      	it	ge
 800b438:	461a      	movge	r2, r3
 800b43a:	2a00      	cmp	r2, #0
 800b43c:	4691      	mov	r9, r2
 800b43e:	dc37      	bgt.n	800b4b0 <_printf_float+0x374>
 800b440:	f04f 0b00 	mov.w	fp, #0
 800b444:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b448:	f104 021a 	add.w	r2, r4, #26
 800b44c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b44e:	9305      	str	r3, [sp, #20]
 800b450:	eba3 0309 	sub.w	r3, r3, r9
 800b454:	455b      	cmp	r3, fp
 800b456:	dc33      	bgt.n	800b4c0 <_printf_float+0x384>
 800b458:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b45c:	429a      	cmp	r2, r3
 800b45e:	db3b      	blt.n	800b4d8 <_printf_float+0x39c>
 800b460:	6823      	ldr	r3, [r4, #0]
 800b462:	07da      	lsls	r2, r3, #31
 800b464:	d438      	bmi.n	800b4d8 <_printf_float+0x39c>
 800b466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b468:	9a05      	ldr	r2, [sp, #20]
 800b46a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b46c:	1a9a      	subs	r2, r3, r2
 800b46e:	eba3 0901 	sub.w	r9, r3, r1
 800b472:	4591      	cmp	r9, r2
 800b474:	bfa8      	it	ge
 800b476:	4691      	movge	r9, r2
 800b478:	f1b9 0f00 	cmp.w	r9, #0
 800b47c:	dc35      	bgt.n	800b4ea <_printf_float+0x3ae>
 800b47e:	f04f 0800 	mov.w	r8, #0
 800b482:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b486:	f104 0a1a 	add.w	sl, r4, #26
 800b48a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b48e:	1a9b      	subs	r3, r3, r2
 800b490:	eba3 0309 	sub.w	r3, r3, r9
 800b494:	4543      	cmp	r3, r8
 800b496:	f77f af79 	ble.w	800b38c <_printf_float+0x250>
 800b49a:	2301      	movs	r3, #1
 800b49c:	4652      	mov	r2, sl
 800b49e:	4631      	mov	r1, r6
 800b4a0:	4628      	mov	r0, r5
 800b4a2:	47b8      	blx	r7
 800b4a4:	3001      	adds	r0, #1
 800b4a6:	f43f aeaa 	beq.w	800b1fe <_printf_float+0xc2>
 800b4aa:	f108 0801 	add.w	r8, r8, #1
 800b4ae:	e7ec      	b.n	800b48a <_printf_float+0x34e>
 800b4b0:	4613      	mov	r3, r2
 800b4b2:	4631      	mov	r1, r6
 800b4b4:	4642      	mov	r2, r8
 800b4b6:	4628      	mov	r0, r5
 800b4b8:	47b8      	blx	r7
 800b4ba:	3001      	adds	r0, #1
 800b4bc:	d1c0      	bne.n	800b440 <_printf_float+0x304>
 800b4be:	e69e      	b.n	800b1fe <_printf_float+0xc2>
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	4631      	mov	r1, r6
 800b4c4:	4628      	mov	r0, r5
 800b4c6:	9205      	str	r2, [sp, #20]
 800b4c8:	47b8      	blx	r7
 800b4ca:	3001      	adds	r0, #1
 800b4cc:	f43f ae97 	beq.w	800b1fe <_printf_float+0xc2>
 800b4d0:	9a05      	ldr	r2, [sp, #20]
 800b4d2:	f10b 0b01 	add.w	fp, fp, #1
 800b4d6:	e7b9      	b.n	800b44c <_printf_float+0x310>
 800b4d8:	ee18 3a10 	vmov	r3, s16
 800b4dc:	4652      	mov	r2, sl
 800b4de:	4631      	mov	r1, r6
 800b4e0:	4628      	mov	r0, r5
 800b4e2:	47b8      	blx	r7
 800b4e4:	3001      	adds	r0, #1
 800b4e6:	d1be      	bne.n	800b466 <_printf_float+0x32a>
 800b4e8:	e689      	b.n	800b1fe <_printf_float+0xc2>
 800b4ea:	9a05      	ldr	r2, [sp, #20]
 800b4ec:	464b      	mov	r3, r9
 800b4ee:	4442      	add	r2, r8
 800b4f0:	4631      	mov	r1, r6
 800b4f2:	4628      	mov	r0, r5
 800b4f4:	47b8      	blx	r7
 800b4f6:	3001      	adds	r0, #1
 800b4f8:	d1c1      	bne.n	800b47e <_printf_float+0x342>
 800b4fa:	e680      	b.n	800b1fe <_printf_float+0xc2>
 800b4fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b4fe:	2a01      	cmp	r2, #1
 800b500:	dc01      	bgt.n	800b506 <_printf_float+0x3ca>
 800b502:	07db      	lsls	r3, r3, #31
 800b504:	d538      	bpl.n	800b578 <_printf_float+0x43c>
 800b506:	2301      	movs	r3, #1
 800b508:	4642      	mov	r2, r8
 800b50a:	4631      	mov	r1, r6
 800b50c:	4628      	mov	r0, r5
 800b50e:	47b8      	blx	r7
 800b510:	3001      	adds	r0, #1
 800b512:	f43f ae74 	beq.w	800b1fe <_printf_float+0xc2>
 800b516:	ee18 3a10 	vmov	r3, s16
 800b51a:	4652      	mov	r2, sl
 800b51c:	4631      	mov	r1, r6
 800b51e:	4628      	mov	r0, r5
 800b520:	47b8      	blx	r7
 800b522:	3001      	adds	r0, #1
 800b524:	f43f ae6b 	beq.w	800b1fe <_printf_float+0xc2>
 800b528:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b52c:	2200      	movs	r2, #0
 800b52e:	2300      	movs	r3, #0
 800b530:	f7f5 faca 	bl	8000ac8 <__aeabi_dcmpeq>
 800b534:	b9d8      	cbnz	r0, 800b56e <_printf_float+0x432>
 800b536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b538:	f108 0201 	add.w	r2, r8, #1
 800b53c:	3b01      	subs	r3, #1
 800b53e:	4631      	mov	r1, r6
 800b540:	4628      	mov	r0, r5
 800b542:	47b8      	blx	r7
 800b544:	3001      	adds	r0, #1
 800b546:	d10e      	bne.n	800b566 <_printf_float+0x42a>
 800b548:	e659      	b.n	800b1fe <_printf_float+0xc2>
 800b54a:	2301      	movs	r3, #1
 800b54c:	4652      	mov	r2, sl
 800b54e:	4631      	mov	r1, r6
 800b550:	4628      	mov	r0, r5
 800b552:	47b8      	blx	r7
 800b554:	3001      	adds	r0, #1
 800b556:	f43f ae52 	beq.w	800b1fe <_printf_float+0xc2>
 800b55a:	f108 0801 	add.w	r8, r8, #1
 800b55e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b560:	3b01      	subs	r3, #1
 800b562:	4543      	cmp	r3, r8
 800b564:	dcf1      	bgt.n	800b54a <_printf_float+0x40e>
 800b566:	464b      	mov	r3, r9
 800b568:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b56c:	e6dc      	b.n	800b328 <_printf_float+0x1ec>
 800b56e:	f04f 0800 	mov.w	r8, #0
 800b572:	f104 0a1a 	add.w	sl, r4, #26
 800b576:	e7f2      	b.n	800b55e <_printf_float+0x422>
 800b578:	2301      	movs	r3, #1
 800b57a:	4642      	mov	r2, r8
 800b57c:	e7df      	b.n	800b53e <_printf_float+0x402>
 800b57e:	2301      	movs	r3, #1
 800b580:	464a      	mov	r2, r9
 800b582:	4631      	mov	r1, r6
 800b584:	4628      	mov	r0, r5
 800b586:	47b8      	blx	r7
 800b588:	3001      	adds	r0, #1
 800b58a:	f43f ae38 	beq.w	800b1fe <_printf_float+0xc2>
 800b58e:	f108 0801 	add.w	r8, r8, #1
 800b592:	68e3      	ldr	r3, [r4, #12]
 800b594:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b596:	1a5b      	subs	r3, r3, r1
 800b598:	4543      	cmp	r3, r8
 800b59a:	dcf0      	bgt.n	800b57e <_printf_float+0x442>
 800b59c:	e6fa      	b.n	800b394 <_printf_float+0x258>
 800b59e:	f04f 0800 	mov.w	r8, #0
 800b5a2:	f104 0919 	add.w	r9, r4, #25
 800b5a6:	e7f4      	b.n	800b592 <_printf_float+0x456>

0800b5a8 <_printf_common>:
 800b5a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5ac:	4616      	mov	r6, r2
 800b5ae:	4699      	mov	r9, r3
 800b5b0:	688a      	ldr	r2, [r1, #8]
 800b5b2:	690b      	ldr	r3, [r1, #16]
 800b5b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	bfb8      	it	lt
 800b5bc:	4613      	movlt	r3, r2
 800b5be:	6033      	str	r3, [r6, #0]
 800b5c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b5c4:	4607      	mov	r7, r0
 800b5c6:	460c      	mov	r4, r1
 800b5c8:	b10a      	cbz	r2, 800b5ce <_printf_common+0x26>
 800b5ca:	3301      	adds	r3, #1
 800b5cc:	6033      	str	r3, [r6, #0]
 800b5ce:	6823      	ldr	r3, [r4, #0]
 800b5d0:	0699      	lsls	r1, r3, #26
 800b5d2:	bf42      	ittt	mi
 800b5d4:	6833      	ldrmi	r3, [r6, #0]
 800b5d6:	3302      	addmi	r3, #2
 800b5d8:	6033      	strmi	r3, [r6, #0]
 800b5da:	6825      	ldr	r5, [r4, #0]
 800b5dc:	f015 0506 	ands.w	r5, r5, #6
 800b5e0:	d106      	bne.n	800b5f0 <_printf_common+0x48>
 800b5e2:	f104 0a19 	add.w	sl, r4, #25
 800b5e6:	68e3      	ldr	r3, [r4, #12]
 800b5e8:	6832      	ldr	r2, [r6, #0]
 800b5ea:	1a9b      	subs	r3, r3, r2
 800b5ec:	42ab      	cmp	r3, r5
 800b5ee:	dc26      	bgt.n	800b63e <_printf_common+0x96>
 800b5f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b5f4:	1e13      	subs	r3, r2, #0
 800b5f6:	6822      	ldr	r2, [r4, #0]
 800b5f8:	bf18      	it	ne
 800b5fa:	2301      	movne	r3, #1
 800b5fc:	0692      	lsls	r2, r2, #26
 800b5fe:	d42b      	bmi.n	800b658 <_printf_common+0xb0>
 800b600:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b604:	4649      	mov	r1, r9
 800b606:	4638      	mov	r0, r7
 800b608:	47c0      	blx	r8
 800b60a:	3001      	adds	r0, #1
 800b60c:	d01e      	beq.n	800b64c <_printf_common+0xa4>
 800b60e:	6823      	ldr	r3, [r4, #0]
 800b610:	68e5      	ldr	r5, [r4, #12]
 800b612:	6832      	ldr	r2, [r6, #0]
 800b614:	f003 0306 	and.w	r3, r3, #6
 800b618:	2b04      	cmp	r3, #4
 800b61a:	bf08      	it	eq
 800b61c:	1aad      	subeq	r5, r5, r2
 800b61e:	68a3      	ldr	r3, [r4, #8]
 800b620:	6922      	ldr	r2, [r4, #16]
 800b622:	bf0c      	ite	eq
 800b624:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b628:	2500      	movne	r5, #0
 800b62a:	4293      	cmp	r3, r2
 800b62c:	bfc4      	itt	gt
 800b62e:	1a9b      	subgt	r3, r3, r2
 800b630:	18ed      	addgt	r5, r5, r3
 800b632:	2600      	movs	r6, #0
 800b634:	341a      	adds	r4, #26
 800b636:	42b5      	cmp	r5, r6
 800b638:	d11a      	bne.n	800b670 <_printf_common+0xc8>
 800b63a:	2000      	movs	r0, #0
 800b63c:	e008      	b.n	800b650 <_printf_common+0xa8>
 800b63e:	2301      	movs	r3, #1
 800b640:	4652      	mov	r2, sl
 800b642:	4649      	mov	r1, r9
 800b644:	4638      	mov	r0, r7
 800b646:	47c0      	blx	r8
 800b648:	3001      	adds	r0, #1
 800b64a:	d103      	bne.n	800b654 <_printf_common+0xac>
 800b64c:	f04f 30ff 	mov.w	r0, #4294967295
 800b650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b654:	3501      	adds	r5, #1
 800b656:	e7c6      	b.n	800b5e6 <_printf_common+0x3e>
 800b658:	18e1      	adds	r1, r4, r3
 800b65a:	1c5a      	adds	r2, r3, #1
 800b65c:	2030      	movs	r0, #48	; 0x30
 800b65e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b662:	4422      	add	r2, r4
 800b664:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b668:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b66c:	3302      	adds	r3, #2
 800b66e:	e7c7      	b.n	800b600 <_printf_common+0x58>
 800b670:	2301      	movs	r3, #1
 800b672:	4622      	mov	r2, r4
 800b674:	4649      	mov	r1, r9
 800b676:	4638      	mov	r0, r7
 800b678:	47c0      	blx	r8
 800b67a:	3001      	adds	r0, #1
 800b67c:	d0e6      	beq.n	800b64c <_printf_common+0xa4>
 800b67e:	3601      	adds	r6, #1
 800b680:	e7d9      	b.n	800b636 <_printf_common+0x8e>
	...

0800b684 <_printf_i>:
 800b684:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b688:	7e0f      	ldrb	r7, [r1, #24]
 800b68a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b68c:	2f78      	cmp	r7, #120	; 0x78
 800b68e:	4691      	mov	r9, r2
 800b690:	4680      	mov	r8, r0
 800b692:	460c      	mov	r4, r1
 800b694:	469a      	mov	sl, r3
 800b696:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b69a:	d807      	bhi.n	800b6ac <_printf_i+0x28>
 800b69c:	2f62      	cmp	r7, #98	; 0x62
 800b69e:	d80a      	bhi.n	800b6b6 <_printf_i+0x32>
 800b6a0:	2f00      	cmp	r7, #0
 800b6a2:	f000 80d8 	beq.w	800b856 <_printf_i+0x1d2>
 800b6a6:	2f58      	cmp	r7, #88	; 0x58
 800b6a8:	f000 80a3 	beq.w	800b7f2 <_printf_i+0x16e>
 800b6ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b6b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b6b4:	e03a      	b.n	800b72c <_printf_i+0xa8>
 800b6b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b6ba:	2b15      	cmp	r3, #21
 800b6bc:	d8f6      	bhi.n	800b6ac <_printf_i+0x28>
 800b6be:	a101      	add	r1, pc, #4	; (adr r1, 800b6c4 <_printf_i+0x40>)
 800b6c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b6c4:	0800b71d 	.word	0x0800b71d
 800b6c8:	0800b731 	.word	0x0800b731
 800b6cc:	0800b6ad 	.word	0x0800b6ad
 800b6d0:	0800b6ad 	.word	0x0800b6ad
 800b6d4:	0800b6ad 	.word	0x0800b6ad
 800b6d8:	0800b6ad 	.word	0x0800b6ad
 800b6dc:	0800b731 	.word	0x0800b731
 800b6e0:	0800b6ad 	.word	0x0800b6ad
 800b6e4:	0800b6ad 	.word	0x0800b6ad
 800b6e8:	0800b6ad 	.word	0x0800b6ad
 800b6ec:	0800b6ad 	.word	0x0800b6ad
 800b6f0:	0800b83d 	.word	0x0800b83d
 800b6f4:	0800b761 	.word	0x0800b761
 800b6f8:	0800b81f 	.word	0x0800b81f
 800b6fc:	0800b6ad 	.word	0x0800b6ad
 800b700:	0800b6ad 	.word	0x0800b6ad
 800b704:	0800b85f 	.word	0x0800b85f
 800b708:	0800b6ad 	.word	0x0800b6ad
 800b70c:	0800b761 	.word	0x0800b761
 800b710:	0800b6ad 	.word	0x0800b6ad
 800b714:	0800b6ad 	.word	0x0800b6ad
 800b718:	0800b827 	.word	0x0800b827
 800b71c:	682b      	ldr	r3, [r5, #0]
 800b71e:	1d1a      	adds	r2, r3, #4
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	602a      	str	r2, [r5, #0]
 800b724:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b728:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b72c:	2301      	movs	r3, #1
 800b72e:	e0a3      	b.n	800b878 <_printf_i+0x1f4>
 800b730:	6820      	ldr	r0, [r4, #0]
 800b732:	6829      	ldr	r1, [r5, #0]
 800b734:	0606      	lsls	r6, r0, #24
 800b736:	f101 0304 	add.w	r3, r1, #4
 800b73a:	d50a      	bpl.n	800b752 <_printf_i+0xce>
 800b73c:	680e      	ldr	r6, [r1, #0]
 800b73e:	602b      	str	r3, [r5, #0]
 800b740:	2e00      	cmp	r6, #0
 800b742:	da03      	bge.n	800b74c <_printf_i+0xc8>
 800b744:	232d      	movs	r3, #45	; 0x2d
 800b746:	4276      	negs	r6, r6
 800b748:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b74c:	485e      	ldr	r0, [pc, #376]	; (800b8c8 <_printf_i+0x244>)
 800b74e:	230a      	movs	r3, #10
 800b750:	e019      	b.n	800b786 <_printf_i+0x102>
 800b752:	680e      	ldr	r6, [r1, #0]
 800b754:	602b      	str	r3, [r5, #0]
 800b756:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b75a:	bf18      	it	ne
 800b75c:	b236      	sxthne	r6, r6
 800b75e:	e7ef      	b.n	800b740 <_printf_i+0xbc>
 800b760:	682b      	ldr	r3, [r5, #0]
 800b762:	6820      	ldr	r0, [r4, #0]
 800b764:	1d19      	adds	r1, r3, #4
 800b766:	6029      	str	r1, [r5, #0]
 800b768:	0601      	lsls	r1, r0, #24
 800b76a:	d501      	bpl.n	800b770 <_printf_i+0xec>
 800b76c:	681e      	ldr	r6, [r3, #0]
 800b76e:	e002      	b.n	800b776 <_printf_i+0xf2>
 800b770:	0646      	lsls	r6, r0, #25
 800b772:	d5fb      	bpl.n	800b76c <_printf_i+0xe8>
 800b774:	881e      	ldrh	r6, [r3, #0]
 800b776:	4854      	ldr	r0, [pc, #336]	; (800b8c8 <_printf_i+0x244>)
 800b778:	2f6f      	cmp	r7, #111	; 0x6f
 800b77a:	bf0c      	ite	eq
 800b77c:	2308      	moveq	r3, #8
 800b77e:	230a      	movne	r3, #10
 800b780:	2100      	movs	r1, #0
 800b782:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b786:	6865      	ldr	r5, [r4, #4]
 800b788:	60a5      	str	r5, [r4, #8]
 800b78a:	2d00      	cmp	r5, #0
 800b78c:	bfa2      	ittt	ge
 800b78e:	6821      	ldrge	r1, [r4, #0]
 800b790:	f021 0104 	bicge.w	r1, r1, #4
 800b794:	6021      	strge	r1, [r4, #0]
 800b796:	b90e      	cbnz	r6, 800b79c <_printf_i+0x118>
 800b798:	2d00      	cmp	r5, #0
 800b79a:	d04d      	beq.n	800b838 <_printf_i+0x1b4>
 800b79c:	4615      	mov	r5, r2
 800b79e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b7a2:	fb03 6711 	mls	r7, r3, r1, r6
 800b7a6:	5dc7      	ldrb	r7, [r0, r7]
 800b7a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b7ac:	4637      	mov	r7, r6
 800b7ae:	42bb      	cmp	r3, r7
 800b7b0:	460e      	mov	r6, r1
 800b7b2:	d9f4      	bls.n	800b79e <_printf_i+0x11a>
 800b7b4:	2b08      	cmp	r3, #8
 800b7b6:	d10b      	bne.n	800b7d0 <_printf_i+0x14c>
 800b7b8:	6823      	ldr	r3, [r4, #0]
 800b7ba:	07de      	lsls	r6, r3, #31
 800b7bc:	d508      	bpl.n	800b7d0 <_printf_i+0x14c>
 800b7be:	6923      	ldr	r3, [r4, #16]
 800b7c0:	6861      	ldr	r1, [r4, #4]
 800b7c2:	4299      	cmp	r1, r3
 800b7c4:	bfde      	ittt	le
 800b7c6:	2330      	movle	r3, #48	; 0x30
 800b7c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b7cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b7d0:	1b52      	subs	r2, r2, r5
 800b7d2:	6122      	str	r2, [r4, #16]
 800b7d4:	f8cd a000 	str.w	sl, [sp]
 800b7d8:	464b      	mov	r3, r9
 800b7da:	aa03      	add	r2, sp, #12
 800b7dc:	4621      	mov	r1, r4
 800b7de:	4640      	mov	r0, r8
 800b7e0:	f7ff fee2 	bl	800b5a8 <_printf_common>
 800b7e4:	3001      	adds	r0, #1
 800b7e6:	d14c      	bne.n	800b882 <_printf_i+0x1fe>
 800b7e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b7ec:	b004      	add	sp, #16
 800b7ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7f2:	4835      	ldr	r0, [pc, #212]	; (800b8c8 <_printf_i+0x244>)
 800b7f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b7f8:	6829      	ldr	r1, [r5, #0]
 800b7fa:	6823      	ldr	r3, [r4, #0]
 800b7fc:	f851 6b04 	ldr.w	r6, [r1], #4
 800b800:	6029      	str	r1, [r5, #0]
 800b802:	061d      	lsls	r5, r3, #24
 800b804:	d514      	bpl.n	800b830 <_printf_i+0x1ac>
 800b806:	07df      	lsls	r7, r3, #31
 800b808:	bf44      	itt	mi
 800b80a:	f043 0320 	orrmi.w	r3, r3, #32
 800b80e:	6023      	strmi	r3, [r4, #0]
 800b810:	b91e      	cbnz	r6, 800b81a <_printf_i+0x196>
 800b812:	6823      	ldr	r3, [r4, #0]
 800b814:	f023 0320 	bic.w	r3, r3, #32
 800b818:	6023      	str	r3, [r4, #0]
 800b81a:	2310      	movs	r3, #16
 800b81c:	e7b0      	b.n	800b780 <_printf_i+0xfc>
 800b81e:	6823      	ldr	r3, [r4, #0]
 800b820:	f043 0320 	orr.w	r3, r3, #32
 800b824:	6023      	str	r3, [r4, #0]
 800b826:	2378      	movs	r3, #120	; 0x78
 800b828:	4828      	ldr	r0, [pc, #160]	; (800b8cc <_printf_i+0x248>)
 800b82a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b82e:	e7e3      	b.n	800b7f8 <_printf_i+0x174>
 800b830:	0659      	lsls	r1, r3, #25
 800b832:	bf48      	it	mi
 800b834:	b2b6      	uxthmi	r6, r6
 800b836:	e7e6      	b.n	800b806 <_printf_i+0x182>
 800b838:	4615      	mov	r5, r2
 800b83a:	e7bb      	b.n	800b7b4 <_printf_i+0x130>
 800b83c:	682b      	ldr	r3, [r5, #0]
 800b83e:	6826      	ldr	r6, [r4, #0]
 800b840:	6961      	ldr	r1, [r4, #20]
 800b842:	1d18      	adds	r0, r3, #4
 800b844:	6028      	str	r0, [r5, #0]
 800b846:	0635      	lsls	r5, r6, #24
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	d501      	bpl.n	800b850 <_printf_i+0x1cc>
 800b84c:	6019      	str	r1, [r3, #0]
 800b84e:	e002      	b.n	800b856 <_printf_i+0x1d2>
 800b850:	0670      	lsls	r0, r6, #25
 800b852:	d5fb      	bpl.n	800b84c <_printf_i+0x1c8>
 800b854:	8019      	strh	r1, [r3, #0]
 800b856:	2300      	movs	r3, #0
 800b858:	6123      	str	r3, [r4, #16]
 800b85a:	4615      	mov	r5, r2
 800b85c:	e7ba      	b.n	800b7d4 <_printf_i+0x150>
 800b85e:	682b      	ldr	r3, [r5, #0]
 800b860:	1d1a      	adds	r2, r3, #4
 800b862:	602a      	str	r2, [r5, #0]
 800b864:	681d      	ldr	r5, [r3, #0]
 800b866:	6862      	ldr	r2, [r4, #4]
 800b868:	2100      	movs	r1, #0
 800b86a:	4628      	mov	r0, r5
 800b86c:	f7f4 fcb8 	bl	80001e0 <memchr>
 800b870:	b108      	cbz	r0, 800b876 <_printf_i+0x1f2>
 800b872:	1b40      	subs	r0, r0, r5
 800b874:	6060      	str	r0, [r4, #4]
 800b876:	6863      	ldr	r3, [r4, #4]
 800b878:	6123      	str	r3, [r4, #16]
 800b87a:	2300      	movs	r3, #0
 800b87c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b880:	e7a8      	b.n	800b7d4 <_printf_i+0x150>
 800b882:	6923      	ldr	r3, [r4, #16]
 800b884:	462a      	mov	r2, r5
 800b886:	4649      	mov	r1, r9
 800b888:	4640      	mov	r0, r8
 800b88a:	47d0      	blx	sl
 800b88c:	3001      	adds	r0, #1
 800b88e:	d0ab      	beq.n	800b7e8 <_printf_i+0x164>
 800b890:	6823      	ldr	r3, [r4, #0]
 800b892:	079b      	lsls	r3, r3, #30
 800b894:	d413      	bmi.n	800b8be <_printf_i+0x23a>
 800b896:	68e0      	ldr	r0, [r4, #12]
 800b898:	9b03      	ldr	r3, [sp, #12]
 800b89a:	4298      	cmp	r0, r3
 800b89c:	bfb8      	it	lt
 800b89e:	4618      	movlt	r0, r3
 800b8a0:	e7a4      	b.n	800b7ec <_printf_i+0x168>
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	4632      	mov	r2, r6
 800b8a6:	4649      	mov	r1, r9
 800b8a8:	4640      	mov	r0, r8
 800b8aa:	47d0      	blx	sl
 800b8ac:	3001      	adds	r0, #1
 800b8ae:	d09b      	beq.n	800b7e8 <_printf_i+0x164>
 800b8b0:	3501      	adds	r5, #1
 800b8b2:	68e3      	ldr	r3, [r4, #12]
 800b8b4:	9903      	ldr	r1, [sp, #12]
 800b8b6:	1a5b      	subs	r3, r3, r1
 800b8b8:	42ab      	cmp	r3, r5
 800b8ba:	dcf2      	bgt.n	800b8a2 <_printf_i+0x21e>
 800b8bc:	e7eb      	b.n	800b896 <_printf_i+0x212>
 800b8be:	2500      	movs	r5, #0
 800b8c0:	f104 0619 	add.w	r6, r4, #25
 800b8c4:	e7f5      	b.n	800b8b2 <_printf_i+0x22e>
 800b8c6:	bf00      	nop
 800b8c8:	0801009e 	.word	0x0801009e
 800b8cc:	080100af 	.word	0x080100af

0800b8d0 <_scanf_float>:
 800b8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8d4:	b087      	sub	sp, #28
 800b8d6:	4617      	mov	r7, r2
 800b8d8:	9303      	str	r3, [sp, #12]
 800b8da:	688b      	ldr	r3, [r1, #8]
 800b8dc:	1e5a      	subs	r2, r3, #1
 800b8de:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b8e2:	bf83      	ittte	hi
 800b8e4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b8e8:	195b      	addhi	r3, r3, r5
 800b8ea:	9302      	strhi	r3, [sp, #8]
 800b8ec:	2300      	movls	r3, #0
 800b8ee:	bf86      	itte	hi
 800b8f0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b8f4:	608b      	strhi	r3, [r1, #8]
 800b8f6:	9302      	strls	r3, [sp, #8]
 800b8f8:	680b      	ldr	r3, [r1, #0]
 800b8fa:	468b      	mov	fp, r1
 800b8fc:	2500      	movs	r5, #0
 800b8fe:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b902:	f84b 3b1c 	str.w	r3, [fp], #28
 800b906:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b90a:	4680      	mov	r8, r0
 800b90c:	460c      	mov	r4, r1
 800b90e:	465e      	mov	r6, fp
 800b910:	46aa      	mov	sl, r5
 800b912:	46a9      	mov	r9, r5
 800b914:	9501      	str	r5, [sp, #4]
 800b916:	68a2      	ldr	r2, [r4, #8]
 800b918:	b152      	cbz	r2, 800b930 <_scanf_float+0x60>
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	781b      	ldrb	r3, [r3, #0]
 800b91e:	2b4e      	cmp	r3, #78	; 0x4e
 800b920:	d864      	bhi.n	800b9ec <_scanf_float+0x11c>
 800b922:	2b40      	cmp	r3, #64	; 0x40
 800b924:	d83c      	bhi.n	800b9a0 <_scanf_float+0xd0>
 800b926:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b92a:	b2c8      	uxtb	r0, r1
 800b92c:	280e      	cmp	r0, #14
 800b92e:	d93a      	bls.n	800b9a6 <_scanf_float+0xd6>
 800b930:	f1b9 0f00 	cmp.w	r9, #0
 800b934:	d003      	beq.n	800b93e <_scanf_float+0x6e>
 800b936:	6823      	ldr	r3, [r4, #0]
 800b938:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b93c:	6023      	str	r3, [r4, #0]
 800b93e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b942:	f1ba 0f01 	cmp.w	sl, #1
 800b946:	f200 8113 	bhi.w	800bb70 <_scanf_float+0x2a0>
 800b94a:	455e      	cmp	r6, fp
 800b94c:	f200 8105 	bhi.w	800bb5a <_scanf_float+0x28a>
 800b950:	2501      	movs	r5, #1
 800b952:	4628      	mov	r0, r5
 800b954:	b007      	add	sp, #28
 800b956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b95a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b95e:	2a0d      	cmp	r2, #13
 800b960:	d8e6      	bhi.n	800b930 <_scanf_float+0x60>
 800b962:	a101      	add	r1, pc, #4	; (adr r1, 800b968 <_scanf_float+0x98>)
 800b964:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b968:	0800baa7 	.word	0x0800baa7
 800b96c:	0800b931 	.word	0x0800b931
 800b970:	0800b931 	.word	0x0800b931
 800b974:	0800b931 	.word	0x0800b931
 800b978:	0800bb07 	.word	0x0800bb07
 800b97c:	0800badf 	.word	0x0800badf
 800b980:	0800b931 	.word	0x0800b931
 800b984:	0800b931 	.word	0x0800b931
 800b988:	0800bab5 	.word	0x0800bab5
 800b98c:	0800b931 	.word	0x0800b931
 800b990:	0800b931 	.word	0x0800b931
 800b994:	0800b931 	.word	0x0800b931
 800b998:	0800b931 	.word	0x0800b931
 800b99c:	0800ba6d 	.word	0x0800ba6d
 800b9a0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b9a4:	e7db      	b.n	800b95e <_scanf_float+0x8e>
 800b9a6:	290e      	cmp	r1, #14
 800b9a8:	d8c2      	bhi.n	800b930 <_scanf_float+0x60>
 800b9aa:	a001      	add	r0, pc, #4	; (adr r0, 800b9b0 <_scanf_float+0xe0>)
 800b9ac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b9b0:	0800ba5f 	.word	0x0800ba5f
 800b9b4:	0800b931 	.word	0x0800b931
 800b9b8:	0800ba5f 	.word	0x0800ba5f
 800b9bc:	0800baf3 	.word	0x0800baf3
 800b9c0:	0800b931 	.word	0x0800b931
 800b9c4:	0800ba0d 	.word	0x0800ba0d
 800b9c8:	0800ba49 	.word	0x0800ba49
 800b9cc:	0800ba49 	.word	0x0800ba49
 800b9d0:	0800ba49 	.word	0x0800ba49
 800b9d4:	0800ba49 	.word	0x0800ba49
 800b9d8:	0800ba49 	.word	0x0800ba49
 800b9dc:	0800ba49 	.word	0x0800ba49
 800b9e0:	0800ba49 	.word	0x0800ba49
 800b9e4:	0800ba49 	.word	0x0800ba49
 800b9e8:	0800ba49 	.word	0x0800ba49
 800b9ec:	2b6e      	cmp	r3, #110	; 0x6e
 800b9ee:	d809      	bhi.n	800ba04 <_scanf_float+0x134>
 800b9f0:	2b60      	cmp	r3, #96	; 0x60
 800b9f2:	d8b2      	bhi.n	800b95a <_scanf_float+0x8a>
 800b9f4:	2b54      	cmp	r3, #84	; 0x54
 800b9f6:	d077      	beq.n	800bae8 <_scanf_float+0x218>
 800b9f8:	2b59      	cmp	r3, #89	; 0x59
 800b9fa:	d199      	bne.n	800b930 <_scanf_float+0x60>
 800b9fc:	2d07      	cmp	r5, #7
 800b9fe:	d197      	bne.n	800b930 <_scanf_float+0x60>
 800ba00:	2508      	movs	r5, #8
 800ba02:	e029      	b.n	800ba58 <_scanf_float+0x188>
 800ba04:	2b74      	cmp	r3, #116	; 0x74
 800ba06:	d06f      	beq.n	800bae8 <_scanf_float+0x218>
 800ba08:	2b79      	cmp	r3, #121	; 0x79
 800ba0a:	e7f6      	b.n	800b9fa <_scanf_float+0x12a>
 800ba0c:	6821      	ldr	r1, [r4, #0]
 800ba0e:	05c8      	lsls	r0, r1, #23
 800ba10:	d51a      	bpl.n	800ba48 <_scanf_float+0x178>
 800ba12:	9b02      	ldr	r3, [sp, #8]
 800ba14:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ba18:	6021      	str	r1, [r4, #0]
 800ba1a:	f109 0901 	add.w	r9, r9, #1
 800ba1e:	b11b      	cbz	r3, 800ba28 <_scanf_float+0x158>
 800ba20:	3b01      	subs	r3, #1
 800ba22:	3201      	adds	r2, #1
 800ba24:	9302      	str	r3, [sp, #8]
 800ba26:	60a2      	str	r2, [r4, #8]
 800ba28:	68a3      	ldr	r3, [r4, #8]
 800ba2a:	3b01      	subs	r3, #1
 800ba2c:	60a3      	str	r3, [r4, #8]
 800ba2e:	6923      	ldr	r3, [r4, #16]
 800ba30:	3301      	adds	r3, #1
 800ba32:	6123      	str	r3, [r4, #16]
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	3b01      	subs	r3, #1
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	607b      	str	r3, [r7, #4]
 800ba3c:	f340 8084 	ble.w	800bb48 <_scanf_float+0x278>
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	3301      	adds	r3, #1
 800ba44:	603b      	str	r3, [r7, #0]
 800ba46:	e766      	b.n	800b916 <_scanf_float+0x46>
 800ba48:	eb1a 0f05 	cmn.w	sl, r5
 800ba4c:	f47f af70 	bne.w	800b930 <_scanf_float+0x60>
 800ba50:	6822      	ldr	r2, [r4, #0]
 800ba52:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800ba56:	6022      	str	r2, [r4, #0]
 800ba58:	f806 3b01 	strb.w	r3, [r6], #1
 800ba5c:	e7e4      	b.n	800ba28 <_scanf_float+0x158>
 800ba5e:	6822      	ldr	r2, [r4, #0]
 800ba60:	0610      	lsls	r0, r2, #24
 800ba62:	f57f af65 	bpl.w	800b930 <_scanf_float+0x60>
 800ba66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ba6a:	e7f4      	b.n	800ba56 <_scanf_float+0x186>
 800ba6c:	f1ba 0f00 	cmp.w	sl, #0
 800ba70:	d10e      	bne.n	800ba90 <_scanf_float+0x1c0>
 800ba72:	f1b9 0f00 	cmp.w	r9, #0
 800ba76:	d10e      	bne.n	800ba96 <_scanf_float+0x1c6>
 800ba78:	6822      	ldr	r2, [r4, #0]
 800ba7a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ba7e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ba82:	d108      	bne.n	800ba96 <_scanf_float+0x1c6>
 800ba84:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ba88:	6022      	str	r2, [r4, #0]
 800ba8a:	f04f 0a01 	mov.w	sl, #1
 800ba8e:	e7e3      	b.n	800ba58 <_scanf_float+0x188>
 800ba90:	f1ba 0f02 	cmp.w	sl, #2
 800ba94:	d055      	beq.n	800bb42 <_scanf_float+0x272>
 800ba96:	2d01      	cmp	r5, #1
 800ba98:	d002      	beq.n	800baa0 <_scanf_float+0x1d0>
 800ba9a:	2d04      	cmp	r5, #4
 800ba9c:	f47f af48 	bne.w	800b930 <_scanf_float+0x60>
 800baa0:	3501      	adds	r5, #1
 800baa2:	b2ed      	uxtb	r5, r5
 800baa4:	e7d8      	b.n	800ba58 <_scanf_float+0x188>
 800baa6:	f1ba 0f01 	cmp.w	sl, #1
 800baaa:	f47f af41 	bne.w	800b930 <_scanf_float+0x60>
 800baae:	f04f 0a02 	mov.w	sl, #2
 800bab2:	e7d1      	b.n	800ba58 <_scanf_float+0x188>
 800bab4:	b97d      	cbnz	r5, 800bad6 <_scanf_float+0x206>
 800bab6:	f1b9 0f00 	cmp.w	r9, #0
 800baba:	f47f af3c 	bne.w	800b936 <_scanf_float+0x66>
 800babe:	6822      	ldr	r2, [r4, #0]
 800bac0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800bac4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bac8:	f47f af39 	bne.w	800b93e <_scanf_float+0x6e>
 800bacc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bad0:	6022      	str	r2, [r4, #0]
 800bad2:	2501      	movs	r5, #1
 800bad4:	e7c0      	b.n	800ba58 <_scanf_float+0x188>
 800bad6:	2d03      	cmp	r5, #3
 800bad8:	d0e2      	beq.n	800baa0 <_scanf_float+0x1d0>
 800bada:	2d05      	cmp	r5, #5
 800badc:	e7de      	b.n	800ba9c <_scanf_float+0x1cc>
 800bade:	2d02      	cmp	r5, #2
 800bae0:	f47f af26 	bne.w	800b930 <_scanf_float+0x60>
 800bae4:	2503      	movs	r5, #3
 800bae6:	e7b7      	b.n	800ba58 <_scanf_float+0x188>
 800bae8:	2d06      	cmp	r5, #6
 800baea:	f47f af21 	bne.w	800b930 <_scanf_float+0x60>
 800baee:	2507      	movs	r5, #7
 800baf0:	e7b2      	b.n	800ba58 <_scanf_float+0x188>
 800baf2:	6822      	ldr	r2, [r4, #0]
 800baf4:	0591      	lsls	r1, r2, #22
 800baf6:	f57f af1b 	bpl.w	800b930 <_scanf_float+0x60>
 800bafa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800bafe:	6022      	str	r2, [r4, #0]
 800bb00:	f8cd 9004 	str.w	r9, [sp, #4]
 800bb04:	e7a8      	b.n	800ba58 <_scanf_float+0x188>
 800bb06:	6822      	ldr	r2, [r4, #0]
 800bb08:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800bb0c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800bb10:	d006      	beq.n	800bb20 <_scanf_float+0x250>
 800bb12:	0550      	lsls	r0, r2, #21
 800bb14:	f57f af0c 	bpl.w	800b930 <_scanf_float+0x60>
 800bb18:	f1b9 0f00 	cmp.w	r9, #0
 800bb1c:	f43f af0f 	beq.w	800b93e <_scanf_float+0x6e>
 800bb20:	0591      	lsls	r1, r2, #22
 800bb22:	bf58      	it	pl
 800bb24:	9901      	ldrpl	r1, [sp, #4]
 800bb26:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bb2a:	bf58      	it	pl
 800bb2c:	eba9 0101 	subpl.w	r1, r9, r1
 800bb30:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800bb34:	bf58      	it	pl
 800bb36:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800bb3a:	6022      	str	r2, [r4, #0]
 800bb3c:	f04f 0900 	mov.w	r9, #0
 800bb40:	e78a      	b.n	800ba58 <_scanf_float+0x188>
 800bb42:	f04f 0a03 	mov.w	sl, #3
 800bb46:	e787      	b.n	800ba58 <_scanf_float+0x188>
 800bb48:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bb4c:	4639      	mov	r1, r7
 800bb4e:	4640      	mov	r0, r8
 800bb50:	4798      	blx	r3
 800bb52:	2800      	cmp	r0, #0
 800bb54:	f43f aedf 	beq.w	800b916 <_scanf_float+0x46>
 800bb58:	e6ea      	b.n	800b930 <_scanf_float+0x60>
 800bb5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bb5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bb62:	463a      	mov	r2, r7
 800bb64:	4640      	mov	r0, r8
 800bb66:	4798      	blx	r3
 800bb68:	6923      	ldr	r3, [r4, #16]
 800bb6a:	3b01      	subs	r3, #1
 800bb6c:	6123      	str	r3, [r4, #16]
 800bb6e:	e6ec      	b.n	800b94a <_scanf_float+0x7a>
 800bb70:	1e6b      	subs	r3, r5, #1
 800bb72:	2b06      	cmp	r3, #6
 800bb74:	d825      	bhi.n	800bbc2 <_scanf_float+0x2f2>
 800bb76:	2d02      	cmp	r5, #2
 800bb78:	d836      	bhi.n	800bbe8 <_scanf_float+0x318>
 800bb7a:	455e      	cmp	r6, fp
 800bb7c:	f67f aee8 	bls.w	800b950 <_scanf_float+0x80>
 800bb80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bb84:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bb88:	463a      	mov	r2, r7
 800bb8a:	4640      	mov	r0, r8
 800bb8c:	4798      	blx	r3
 800bb8e:	6923      	ldr	r3, [r4, #16]
 800bb90:	3b01      	subs	r3, #1
 800bb92:	6123      	str	r3, [r4, #16]
 800bb94:	e7f1      	b.n	800bb7a <_scanf_float+0x2aa>
 800bb96:	9802      	ldr	r0, [sp, #8]
 800bb98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bb9c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800bba0:	9002      	str	r0, [sp, #8]
 800bba2:	463a      	mov	r2, r7
 800bba4:	4640      	mov	r0, r8
 800bba6:	4798      	blx	r3
 800bba8:	6923      	ldr	r3, [r4, #16]
 800bbaa:	3b01      	subs	r3, #1
 800bbac:	6123      	str	r3, [r4, #16]
 800bbae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bbb2:	fa5f fa8a 	uxtb.w	sl, sl
 800bbb6:	f1ba 0f02 	cmp.w	sl, #2
 800bbba:	d1ec      	bne.n	800bb96 <_scanf_float+0x2c6>
 800bbbc:	3d03      	subs	r5, #3
 800bbbe:	b2ed      	uxtb	r5, r5
 800bbc0:	1b76      	subs	r6, r6, r5
 800bbc2:	6823      	ldr	r3, [r4, #0]
 800bbc4:	05da      	lsls	r2, r3, #23
 800bbc6:	d52f      	bpl.n	800bc28 <_scanf_float+0x358>
 800bbc8:	055b      	lsls	r3, r3, #21
 800bbca:	d510      	bpl.n	800bbee <_scanf_float+0x31e>
 800bbcc:	455e      	cmp	r6, fp
 800bbce:	f67f aebf 	bls.w	800b950 <_scanf_float+0x80>
 800bbd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bbd6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bbda:	463a      	mov	r2, r7
 800bbdc:	4640      	mov	r0, r8
 800bbde:	4798      	blx	r3
 800bbe0:	6923      	ldr	r3, [r4, #16]
 800bbe2:	3b01      	subs	r3, #1
 800bbe4:	6123      	str	r3, [r4, #16]
 800bbe6:	e7f1      	b.n	800bbcc <_scanf_float+0x2fc>
 800bbe8:	46aa      	mov	sl, r5
 800bbea:	9602      	str	r6, [sp, #8]
 800bbec:	e7df      	b.n	800bbae <_scanf_float+0x2de>
 800bbee:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bbf2:	6923      	ldr	r3, [r4, #16]
 800bbf4:	2965      	cmp	r1, #101	; 0x65
 800bbf6:	f103 33ff 	add.w	r3, r3, #4294967295
 800bbfa:	f106 35ff 	add.w	r5, r6, #4294967295
 800bbfe:	6123      	str	r3, [r4, #16]
 800bc00:	d00c      	beq.n	800bc1c <_scanf_float+0x34c>
 800bc02:	2945      	cmp	r1, #69	; 0x45
 800bc04:	d00a      	beq.n	800bc1c <_scanf_float+0x34c>
 800bc06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bc0a:	463a      	mov	r2, r7
 800bc0c:	4640      	mov	r0, r8
 800bc0e:	4798      	blx	r3
 800bc10:	6923      	ldr	r3, [r4, #16]
 800bc12:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bc16:	3b01      	subs	r3, #1
 800bc18:	1eb5      	subs	r5, r6, #2
 800bc1a:	6123      	str	r3, [r4, #16]
 800bc1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bc20:	463a      	mov	r2, r7
 800bc22:	4640      	mov	r0, r8
 800bc24:	4798      	blx	r3
 800bc26:	462e      	mov	r6, r5
 800bc28:	6825      	ldr	r5, [r4, #0]
 800bc2a:	f015 0510 	ands.w	r5, r5, #16
 800bc2e:	d159      	bne.n	800bce4 <_scanf_float+0x414>
 800bc30:	7035      	strb	r5, [r6, #0]
 800bc32:	6823      	ldr	r3, [r4, #0]
 800bc34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bc38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc3c:	d11b      	bne.n	800bc76 <_scanf_float+0x3a6>
 800bc3e:	9b01      	ldr	r3, [sp, #4]
 800bc40:	454b      	cmp	r3, r9
 800bc42:	eba3 0209 	sub.w	r2, r3, r9
 800bc46:	d123      	bne.n	800bc90 <_scanf_float+0x3c0>
 800bc48:	2200      	movs	r2, #0
 800bc4a:	4659      	mov	r1, fp
 800bc4c:	4640      	mov	r0, r8
 800bc4e:	f000 fe99 	bl	800c984 <_strtod_r>
 800bc52:	6822      	ldr	r2, [r4, #0]
 800bc54:	9b03      	ldr	r3, [sp, #12]
 800bc56:	f012 0f02 	tst.w	r2, #2
 800bc5a:	ec57 6b10 	vmov	r6, r7, d0
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	d021      	beq.n	800bca6 <_scanf_float+0x3d6>
 800bc62:	9903      	ldr	r1, [sp, #12]
 800bc64:	1d1a      	adds	r2, r3, #4
 800bc66:	600a      	str	r2, [r1, #0]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	e9c3 6700 	strd	r6, r7, [r3]
 800bc6e:	68e3      	ldr	r3, [r4, #12]
 800bc70:	3301      	adds	r3, #1
 800bc72:	60e3      	str	r3, [r4, #12]
 800bc74:	e66d      	b.n	800b952 <_scanf_float+0x82>
 800bc76:	9b04      	ldr	r3, [sp, #16]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d0e5      	beq.n	800bc48 <_scanf_float+0x378>
 800bc7c:	9905      	ldr	r1, [sp, #20]
 800bc7e:	230a      	movs	r3, #10
 800bc80:	462a      	mov	r2, r5
 800bc82:	3101      	adds	r1, #1
 800bc84:	4640      	mov	r0, r8
 800bc86:	f000 ff05 	bl	800ca94 <_strtol_r>
 800bc8a:	9b04      	ldr	r3, [sp, #16]
 800bc8c:	9e05      	ldr	r6, [sp, #20]
 800bc8e:	1ac2      	subs	r2, r0, r3
 800bc90:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800bc94:	429e      	cmp	r6, r3
 800bc96:	bf28      	it	cs
 800bc98:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800bc9c:	4912      	ldr	r1, [pc, #72]	; (800bce8 <_scanf_float+0x418>)
 800bc9e:	4630      	mov	r0, r6
 800bca0:	f000 f82c 	bl	800bcfc <siprintf>
 800bca4:	e7d0      	b.n	800bc48 <_scanf_float+0x378>
 800bca6:	9903      	ldr	r1, [sp, #12]
 800bca8:	f012 0f04 	tst.w	r2, #4
 800bcac:	f103 0204 	add.w	r2, r3, #4
 800bcb0:	600a      	str	r2, [r1, #0]
 800bcb2:	d1d9      	bne.n	800bc68 <_scanf_float+0x398>
 800bcb4:	f8d3 8000 	ldr.w	r8, [r3]
 800bcb8:	ee10 2a10 	vmov	r2, s0
 800bcbc:	ee10 0a10 	vmov	r0, s0
 800bcc0:	463b      	mov	r3, r7
 800bcc2:	4639      	mov	r1, r7
 800bcc4:	f7f4 ff32 	bl	8000b2c <__aeabi_dcmpun>
 800bcc8:	b128      	cbz	r0, 800bcd6 <_scanf_float+0x406>
 800bcca:	4808      	ldr	r0, [pc, #32]	; (800bcec <_scanf_float+0x41c>)
 800bccc:	f000 f810 	bl	800bcf0 <nanf>
 800bcd0:	ed88 0a00 	vstr	s0, [r8]
 800bcd4:	e7cb      	b.n	800bc6e <_scanf_float+0x39e>
 800bcd6:	4630      	mov	r0, r6
 800bcd8:	4639      	mov	r1, r7
 800bcda:	f7f4 ff85 	bl	8000be8 <__aeabi_d2f>
 800bcde:	f8c8 0000 	str.w	r0, [r8]
 800bce2:	e7c4      	b.n	800bc6e <_scanf_float+0x39e>
 800bce4:	2500      	movs	r5, #0
 800bce6:	e634      	b.n	800b952 <_scanf_float+0x82>
 800bce8:	080100c0 	.word	0x080100c0
 800bcec:	080104c8 	.word	0x080104c8

0800bcf0 <nanf>:
 800bcf0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bcf8 <nanf+0x8>
 800bcf4:	4770      	bx	lr
 800bcf6:	bf00      	nop
 800bcf8:	7fc00000 	.word	0x7fc00000

0800bcfc <siprintf>:
 800bcfc:	b40e      	push	{r1, r2, r3}
 800bcfe:	b500      	push	{lr}
 800bd00:	b09c      	sub	sp, #112	; 0x70
 800bd02:	ab1d      	add	r3, sp, #116	; 0x74
 800bd04:	9002      	str	r0, [sp, #8]
 800bd06:	9006      	str	r0, [sp, #24]
 800bd08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bd0c:	4809      	ldr	r0, [pc, #36]	; (800bd34 <siprintf+0x38>)
 800bd0e:	9107      	str	r1, [sp, #28]
 800bd10:	9104      	str	r1, [sp, #16]
 800bd12:	4909      	ldr	r1, [pc, #36]	; (800bd38 <siprintf+0x3c>)
 800bd14:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd18:	9105      	str	r1, [sp, #20]
 800bd1a:	6800      	ldr	r0, [r0, #0]
 800bd1c:	9301      	str	r3, [sp, #4]
 800bd1e:	a902      	add	r1, sp, #8
 800bd20:	f002 fee4 	bl	800eaec <_svfiprintf_r>
 800bd24:	9b02      	ldr	r3, [sp, #8]
 800bd26:	2200      	movs	r2, #0
 800bd28:	701a      	strb	r2, [r3, #0]
 800bd2a:	b01c      	add	sp, #112	; 0x70
 800bd2c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd30:	b003      	add	sp, #12
 800bd32:	4770      	bx	lr
 800bd34:	200000fc 	.word	0x200000fc
 800bd38:	ffff0208 	.word	0xffff0208

0800bd3c <sulp>:
 800bd3c:	b570      	push	{r4, r5, r6, lr}
 800bd3e:	4604      	mov	r4, r0
 800bd40:	460d      	mov	r5, r1
 800bd42:	ec45 4b10 	vmov	d0, r4, r5
 800bd46:	4616      	mov	r6, r2
 800bd48:	f002 fc2e 	bl	800e5a8 <__ulp>
 800bd4c:	ec51 0b10 	vmov	r0, r1, d0
 800bd50:	b17e      	cbz	r6, 800bd72 <sulp+0x36>
 800bd52:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bd56:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	dd09      	ble.n	800bd72 <sulp+0x36>
 800bd5e:	051b      	lsls	r3, r3, #20
 800bd60:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800bd64:	2400      	movs	r4, #0
 800bd66:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bd6a:	4622      	mov	r2, r4
 800bd6c:	462b      	mov	r3, r5
 800bd6e:	f7f4 fc43 	bl	80005f8 <__aeabi_dmul>
 800bd72:	bd70      	pop	{r4, r5, r6, pc}
 800bd74:	0000      	movs	r0, r0
	...

0800bd78 <_strtod_l>:
 800bd78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd7c:	ed2d 8b02 	vpush	{d8}
 800bd80:	b09d      	sub	sp, #116	; 0x74
 800bd82:	461f      	mov	r7, r3
 800bd84:	2300      	movs	r3, #0
 800bd86:	9318      	str	r3, [sp, #96]	; 0x60
 800bd88:	4ba2      	ldr	r3, [pc, #648]	; (800c014 <_strtod_l+0x29c>)
 800bd8a:	9213      	str	r2, [sp, #76]	; 0x4c
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	9305      	str	r3, [sp, #20]
 800bd90:	4604      	mov	r4, r0
 800bd92:	4618      	mov	r0, r3
 800bd94:	4688      	mov	r8, r1
 800bd96:	f7f4 fa1b 	bl	80001d0 <strlen>
 800bd9a:	f04f 0a00 	mov.w	sl, #0
 800bd9e:	4605      	mov	r5, r0
 800bda0:	f04f 0b00 	mov.w	fp, #0
 800bda4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bda8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bdaa:	781a      	ldrb	r2, [r3, #0]
 800bdac:	2a2b      	cmp	r2, #43	; 0x2b
 800bdae:	d04e      	beq.n	800be4e <_strtod_l+0xd6>
 800bdb0:	d83b      	bhi.n	800be2a <_strtod_l+0xb2>
 800bdb2:	2a0d      	cmp	r2, #13
 800bdb4:	d834      	bhi.n	800be20 <_strtod_l+0xa8>
 800bdb6:	2a08      	cmp	r2, #8
 800bdb8:	d834      	bhi.n	800be24 <_strtod_l+0xac>
 800bdba:	2a00      	cmp	r2, #0
 800bdbc:	d03e      	beq.n	800be3c <_strtod_l+0xc4>
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	930a      	str	r3, [sp, #40]	; 0x28
 800bdc2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800bdc4:	7833      	ldrb	r3, [r6, #0]
 800bdc6:	2b30      	cmp	r3, #48	; 0x30
 800bdc8:	f040 80b0 	bne.w	800bf2c <_strtod_l+0x1b4>
 800bdcc:	7873      	ldrb	r3, [r6, #1]
 800bdce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bdd2:	2b58      	cmp	r3, #88	; 0x58
 800bdd4:	d168      	bne.n	800bea8 <_strtod_l+0x130>
 800bdd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdd8:	9301      	str	r3, [sp, #4]
 800bdda:	ab18      	add	r3, sp, #96	; 0x60
 800bddc:	9702      	str	r7, [sp, #8]
 800bdde:	9300      	str	r3, [sp, #0]
 800bde0:	4a8d      	ldr	r2, [pc, #564]	; (800c018 <_strtod_l+0x2a0>)
 800bde2:	ab19      	add	r3, sp, #100	; 0x64
 800bde4:	a917      	add	r1, sp, #92	; 0x5c
 800bde6:	4620      	mov	r0, r4
 800bde8:	f001 fd38 	bl	800d85c <__gethex>
 800bdec:	f010 0707 	ands.w	r7, r0, #7
 800bdf0:	4605      	mov	r5, r0
 800bdf2:	d005      	beq.n	800be00 <_strtod_l+0x88>
 800bdf4:	2f06      	cmp	r7, #6
 800bdf6:	d12c      	bne.n	800be52 <_strtod_l+0xda>
 800bdf8:	3601      	adds	r6, #1
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	9617      	str	r6, [sp, #92]	; 0x5c
 800bdfe:	930a      	str	r3, [sp, #40]	; 0x28
 800be00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800be02:	2b00      	cmp	r3, #0
 800be04:	f040 8590 	bne.w	800c928 <_strtod_l+0xbb0>
 800be08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be0a:	b1eb      	cbz	r3, 800be48 <_strtod_l+0xd0>
 800be0c:	4652      	mov	r2, sl
 800be0e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800be12:	ec43 2b10 	vmov	d0, r2, r3
 800be16:	b01d      	add	sp, #116	; 0x74
 800be18:	ecbd 8b02 	vpop	{d8}
 800be1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be20:	2a20      	cmp	r2, #32
 800be22:	d1cc      	bne.n	800bdbe <_strtod_l+0x46>
 800be24:	3301      	adds	r3, #1
 800be26:	9317      	str	r3, [sp, #92]	; 0x5c
 800be28:	e7be      	b.n	800bda8 <_strtod_l+0x30>
 800be2a:	2a2d      	cmp	r2, #45	; 0x2d
 800be2c:	d1c7      	bne.n	800bdbe <_strtod_l+0x46>
 800be2e:	2201      	movs	r2, #1
 800be30:	920a      	str	r2, [sp, #40]	; 0x28
 800be32:	1c5a      	adds	r2, r3, #1
 800be34:	9217      	str	r2, [sp, #92]	; 0x5c
 800be36:	785b      	ldrb	r3, [r3, #1]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d1c2      	bne.n	800bdc2 <_strtod_l+0x4a>
 800be3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800be3e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800be42:	2b00      	cmp	r3, #0
 800be44:	f040 856e 	bne.w	800c924 <_strtod_l+0xbac>
 800be48:	4652      	mov	r2, sl
 800be4a:	465b      	mov	r3, fp
 800be4c:	e7e1      	b.n	800be12 <_strtod_l+0x9a>
 800be4e:	2200      	movs	r2, #0
 800be50:	e7ee      	b.n	800be30 <_strtod_l+0xb8>
 800be52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800be54:	b13a      	cbz	r2, 800be66 <_strtod_l+0xee>
 800be56:	2135      	movs	r1, #53	; 0x35
 800be58:	a81a      	add	r0, sp, #104	; 0x68
 800be5a:	f002 fcb0 	bl	800e7be <__copybits>
 800be5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800be60:	4620      	mov	r0, r4
 800be62:	f002 f86f 	bl	800df44 <_Bfree>
 800be66:	3f01      	subs	r7, #1
 800be68:	2f04      	cmp	r7, #4
 800be6a:	d806      	bhi.n	800be7a <_strtod_l+0x102>
 800be6c:	e8df f007 	tbb	[pc, r7]
 800be70:	1714030a 	.word	0x1714030a
 800be74:	0a          	.byte	0x0a
 800be75:	00          	.byte	0x00
 800be76:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800be7a:	0728      	lsls	r0, r5, #28
 800be7c:	d5c0      	bpl.n	800be00 <_strtod_l+0x88>
 800be7e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800be82:	e7bd      	b.n	800be00 <_strtod_l+0x88>
 800be84:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800be88:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800be8a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800be8e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800be92:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800be96:	e7f0      	b.n	800be7a <_strtod_l+0x102>
 800be98:	f8df b180 	ldr.w	fp, [pc, #384]	; 800c01c <_strtod_l+0x2a4>
 800be9c:	e7ed      	b.n	800be7a <_strtod_l+0x102>
 800be9e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800bea2:	f04f 3aff 	mov.w	sl, #4294967295
 800bea6:	e7e8      	b.n	800be7a <_strtod_l+0x102>
 800bea8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800beaa:	1c5a      	adds	r2, r3, #1
 800beac:	9217      	str	r2, [sp, #92]	; 0x5c
 800beae:	785b      	ldrb	r3, [r3, #1]
 800beb0:	2b30      	cmp	r3, #48	; 0x30
 800beb2:	d0f9      	beq.n	800bea8 <_strtod_l+0x130>
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d0a3      	beq.n	800be00 <_strtod_l+0x88>
 800beb8:	2301      	movs	r3, #1
 800beba:	f04f 0900 	mov.w	r9, #0
 800bebe:	9304      	str	r3, [sp, #16]
 800bec0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bec2:	9308      	str	r3, [sp, #32]
 800bec4:	f8cd 901c 	str.w	r9, [sp, #28]
 800bec8:	464f      	mov	r7, r9
 800beca:	220a      	movs	r2, #10
 800becc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800bece:	7806      	ldrb	r6, [r0, #0]
 800bed0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800bed4:	b2d9      	uxtb	r1, r3
 800bed6:	2909      	cmp	r1, #9
 800bed8:	d92a      	bls.n	800bf30 <_strtod_l+0x1b8>
 800beda:	9905      	ldr	r1, [sp, #20]
 800bedc:	462a      	mov	r2, r5
 800bede:	f002 ff1f 	bl	800ed20 <strncmp>
 800bee2:	b398      	cbz	r0, 800bf4c <_strtod_l+0x1d4>
 800bee4:	2000      	movs	r0, #0
 800bee6:	4632      	mov	r2, r6
 800bee8:	463d      	mov	r5, r7
 800beea:	9005      	str	r0, [sp, #20]
 800beec:	4603      	mov	r3, r0
 800beee:	2a65      	cmp	r2, #101	; 0x65
 800bef0:	d001      	beq.n	800bef6 <_strtod_l+0x17e>
 800bef2:	2a45      	cmp	r2, #69	; 0x45
 800bef4:	d118      	bne.n	800bf28 <_strtod_l+0x1b0>
 800bef6:	b91d      	cbnz	r5, 800bf00 <_strtod_l+0x188>
 800bef8:	9a04      	ldr	r2, [sp, #16]
 800befa:	4302      	orrs	r2, r0
 800befc:	d09e      	beq.n	800be3c <_strtod_l+0xc4>
 800befe:	2500      	movs	r5, #0
 800bf00:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800bf04:	f108 0201 	add.w	r2, r8, #1
 800bf08:	9217      	str	r2, [sp, #92]	; 0x5c
 800bf0a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800bf0e:	2a2b      	cmp	r2, #43	; 0x2b
 800bf10:	d075      	beq.n	800bffe <_strtod_l+0x286>
 800bf12:	2a2d      	cmp	r2, #45	; 0x2d
 800bf14:	d07b      	beq.n	800c00e <_strtod_l+0x296>
 800bf16:	f04f 0c00 	mov.w	ip, #0
 800bf1a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800bf1e:	2909      	cmp	r1, #9
 800bf20:	f240 8082 	bls.w	800c028 <_strtod_l+0x2b0>
 800bf24:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bf28:	2600      	movs	r6, #0
 800bf2a:	e09d      	b.n	800c068 <_strtod_l+0x2f0>
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	e7c4      	b.n	800beba <_strtod_l+0x142>
 800bf30:	2f08      	cmp	r7, #8
 800bf32:	bfd8      	it	le
 800bf34:	9907      	ldrle	r1, [sp, #28]
 800bf36:	f100 0001 	add.w	r0, r0, #1
 800bf3a:	bfda      	itte	le
 800bf3c:	fb02 3301 	mlale	r3, r2, r1, r3
 800bf40:	9307      	strle	r3, [sp, #28]
 800bf42:	fb02 3909 	mlagt	r9, r2, r9, r3
 800bf46:	3701      	adds	r7, #1
 800bf48:	9017      	str	r0, [sp, #92]	; 0x5c
 800bf4a:	e7bf      	b.n	800becc <_strtod_l+0x154>
 800bf4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bf4e:	195a      	adds	r2, r3, r5
 800bf50:	9217      	str	r2, [sp, #92]	; 0x5c
 800bf52:	5d5a      	ldrb	r2, [r3, r5]
 800bf54:	2f00      	cmp	r7, #0
 800bf56:	d037      	beq.n	800bfc8 <_strtod_l+0x250>
 800bf58:	9005      	str	r0, [sp, #20]
 800bf5a:	463d      	mov	r5, r7
 800bf5c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800bf60:	2b09      	cmp	r3, #9
 800bf62:	d912      	bls.n	800bf8a <_strtod_l+0x212>
 800bf64:	2301      	movs	r3, #1
 800bf66:	e7c2      	b.n	800beee <_strtod_l+0x176>
 800bf68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bf6a:	1c5a      	adds	r2, r3, #1
 800bf6c:	9217      	str	r2, [sp, #92]	; 0x5c
 800bf6e:	785a      	ldrb	r2, [r3, #1]
 800bf70:	3001      	adds	r0, #1
 800bf72:	2a30      	cmp	r2, #48	; 0x30
 800bf74:	d0f8      	beq.n	800bf68 <_strtod_l+0x1f0>
 800bf76:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800bf7a:	2b08      	cmp	r3, #8
 800bf7c:	f200 84d9 	bhi.w	800c932 <_strtod_l+0xbba>
 800bf80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bf82:	9005      	str	r0, [sp, #20]
 800bf84:	2000      	movs	r0, #0
 800bf86:	9308      	str	r3, [sp, #32]
 800bf88:	4605      	mov	r5, r0
 800bf8a:	3a30      	subs	r2, #48	; 0x30
 800bf8c:	f100 0301 	add.w	r3, r0, #1
 800bf90:	d014      	beq.n	800bfbc <_strtod_l+0x244>
 800bf92:	9905      	ldr	r1, [sp, #20]
 800bf94:	4419      	add	r1, r3
 800bf96:	9105      	str	r1, [sp, #20]
 800bf98:	462b      	mov	r3, r5
 800bf9a:	eb00 0e05 	add.w	lr, r0, r5
 800bf9e:	210a      	movs	r1, #10
 800bfa0:	4573      	cmp	r3, lr
 800bfa2:	d113      	bne.n	800bfcc <_strtod_l+0x254>
 800bfa4:	182b      	adds	r3, r5, r0
 800bfa6:	2b08      	cmp	r3, #8
 800bfa8:	f105 0501 	add.w	r5, r5, #1
 800bfac:	4405      	add	r5, r0
 800bfae:	dc1c      	bgt.n	800bfea <_strtod_l+0x272>
 800bfb0:	9907      	ldr	r1, [sp, #28]
 800bfb2:	230a      	movs	r3, #10
 800bfb4:	fb03 2301 	mla	r3, r3, r1, r2
 800bfb8:	9307      	str	r3, [sp, #28]
 800bfba:	2300      	movs	r3, #0
 800bfbc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bfbe:	1c51      	adds	r1, r2, #1
 800bfc0:	9117      	str	r1, [sp, #92]	; 0x5c
 800bfc2:	7852      	ldrb	r2, [r2, #1]
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	e7c9      	b.n	800bf5c <_strtod_l+0x1e4>
 800bfc8:	4638      	mov	r0, r7
 800bfca:	e7d2      	b.n	800bf72 <_strtod_l+0x1fa>
 800bfcc:	2b08      	cmp	r3, #8
 800bfce:	dc04      	bgt.n	800bfda <_strtod_l+0x262>
 800bfd0:	9e07      	ldr	r6, [sp, #28]
 800bfd2:	434e      	muls	r6, r1
 800bfd4:	9607      	str	r6, [sp, #28]
 800bfd6:	3301      	adds	r3, #1
 800bfd8:	e7e2      	b.n	800bfa0 <_strtod_l+0x228>
 800bfda:	f103 0c01 	add.w	ip, r3, #1
 800bfde:	f1bc 0f10 	cmp.w	ip, #16
 800bfe2:	bfd8      	it	le
 800bfe4:	fb01 f909 	mulle.w	r9, r1, r9
 800bfe8:	e7f5      	b.n	800bfd6 <_strtod_l+0x25e>
 800bfea:	2d10      	cmp	r5, #16
 800bfec:	bfdc      	itt	le
 800bfee:	230a      	movle	r3, #10
 800bff0:	fb03 2909 	mlale	r9, r3, r9, r2
 800bff4:	e7e1      	b.n	800bfba <_strtod_l+0x242>
 800bff6:	2300      	movs	r3, #0
 800bff8:	9305      	str	r3, [sp, #20]
 800bffa:	2301      	movs	r3, #1
 800bffc:	e77c      	b.n	800bef8 <_strtod_l+0x180>
 800bffe:	f04f 0c00 	mov.w	ip, #0
 800c002:	f108 0202 	add.w	r2, r8, #2
 800c006:	9217      	str	r2, [sp, #92]	; 0x5c
 800c008:	f898 2002 	ldrb.w	r2, [r8, #2]
 800c00c:	e785      	b.n	800bf1a <_strtod_l+0x1a2>
 800c00e:	f04f 0c01 	mov.w	ip, #1
 800c012:	e7f6      	b.n	800c002 <_strtod_l+0x28a>
 800c014:	08010310 	.word	0x08010310
 800c018:	080100c8 	.word	0x080100c8
 800c01c:	7ff00000 	.word	0x7ff00000
 800c020:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c022:	1c51      	adds	r1, r2, #1
 800c024:	9117      	str	r1, [sp, #92]	; 0x5c
 800c026:	7852      	ldrb	r2, [r2, #1]
 800c028:	2a30      	cmp	r2, #48	; 0x30
 800c02a:	d0f9      	beq.n	800c020 <_strtod_l+0x2a8>
 800c02c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c030:	2908      	cmp	r1, #8
 800c032:	f63f af79 	bhi.w	800bf28 <_strtod_l+0x1b0>
 800c036:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c03a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c03c:	9206      	str	r2, [sp, #24]
 800c03e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c040:	1c51      	adds	r1, r2, #1
 800c042:	9117      	str	r1, [sp, #92]	; 0x5c
 800c044:	7852      	ldrb	r2, [r2, #1]
 800c046:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800c04a:	2e09      	cmp	r6, #9
 800c04c:	d937      	bls.n	800c0be <_strtod_l+0x346>
 800c04e:	9e06      	ldr	r6, [sp, #24]
 800c050:	1b89      	subs	r1, r1, r6
 800c052:	2908      	cmp	r1, #8
 800c054:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800c058:	dc02      	bgt.n	800c060 <_strtod_l+0x2e8>
 800c05a:	4576      	cmp	r6, lr
 800c05c:	bfa8      	it	ge
 800c05e:	4676      	movge	r6, lr
 800c060:	f1bc 0f00 	cmp.w	ip, #0
 800c064:	d000      	beq.n	800c068 <_strtod_l+0x2f0>
 800c066:	4276      	negs	r6, r6
 800c068:	2d00      	cmp	r5, #0
 800c06a:	d14d      	bne.n	800c108 <_strtod_l+0x390>
 800c06c:	9904      	ldr	r1, [sp, #16]
 800c06e:	4301      	orrs	r1, r0
 800c070:	f47f aec6 	bne.w	800be00 <_strtod_l+0x88>
 800c074:	2b00      	cmp	r3, #0
 800c076:	f47f aee1 	bne.w	800be3c <_strtod_l+0xc4>
 800c07a:	2a69      	cmp	r2, #105	; 0x69
 800c07c:	d027      	beq.n	800c0ce <_strtod_l+0x356>
 800c07e:	dc24      	bgt.n	800c0ca <_strtod_l+0x352>
 800c080:	2a49      	cmp	r2, #73	; 0x49
 800c082:	d024      	beq.n	800c0ce <_strtod_l+0x356>
 800c084:	2a4e      	cmp	r2, #78	; 0x4e
 800c086:	f47f aed9 	bne.w	800be3c <_strtod_l+0xc4>
 800c08a:	499f      	ldr	r1, [pc, #636]	; (800c308 <_strtod_l+0x590>)
 800c08c:	a817      	add	r0, sp, #92	; 0x5c
 800c08e:	f001 fe3d 	bl	800dd0c <__match>
 800c092:	2800      	cmp	r0, #0
 800c094:	f43f aed2 	beq.w	800be3c <_strtod_l+0xc4>
 800c098:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c09a:	781b      	ldrb	r3, [r3, #0]
 800c09c:	2b28      	cmp	r3, #40	; 0x28
 800c09e:	d12d      	bne.n	800c0fc <_strtod_l+0x384>
 800c0a0:	499a      	ldr	r1, [pc, #616]	; (800c30c <_strtod_l+0x594>)
 800c0a2:	aa1a      	add	r2, sp, #104	; 0x68
 800c0a4:	a817      	add	r0, sp, #92	; 0x5c
 800c0a6:	f001 fe45 	bl	800dd34 <__hexnan>
 800c0aa:	2805      	cmp	r0, #5
 800c0ac:	d126      	bne.n	800c0fc <_strtod_l+0x384>
 800c0ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c0b0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800c0b4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c0b8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c0bc:	e6a0      	b.n	800be00 <_strtod_l+0x88>
 800c0be:	210a      	movs	r1, #10
 800c0c0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800c0c4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c0c8:	e7b9      	b.n	800c03e <_strtod_l+0x2c6>
 800c0ca:	2a6e      	cmp	r2, #110	; 0x6e
 800c0cc:	e7db      	b.n	800c086 <_strtod_l+0x30e>
 800c0ce:	4990      	ldr	r1, [pc, #576]	; (800c310 <_strtod_l+0x598>)
 800c0d0:	a817      	add	r0, sp, #92	; 0x5c
 800c0d2:	f001 fe1b 	bl	800dd0c <__match>
 800c0d6:	2800      	cmp	r0, #0
 800c0d8:	f43f aeb0 	beq.w	800be3c <_strtod_l+0xc4>
 800c0dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c0de:	498d      	ldr	r1, [pc, #564]	; (800c314 <_strtod_l+0x59c>)
 800c0e0:	3b01      	subs	r3, #1
 800c0e2:	a817      	add	r0, sp, #92	; 0x5c
 800c0e4:	9317      	str	r3, [sp, #92]	; 0x5c
 800c0e6:	f001 fe11 	bl	800dd0c <__match>
 800c0ea:	b910      	cbnz	r0, 800c0f2 <_strtod_l+0x37a>
 800c0ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c0ee:	3301      	adds	r3, #1
 800c0f0:	9317      	str	r3, [sp, #92]	; 0x5c
 800c0f2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800c324 <_strtod_l+0x5ac>
 800c0f6:	f04f 0a00 	mov.w	sl, #0
 800c0fa:	e681      	b.n	800be00 <_strtod_l+0x88>
 800c0fc:	4886      	ldr	r0, [pc, #536]	; (800c318 <_strtod_l+0x5a0>)
 800c0fe:	f002 fdf7 	bl	800ecf0 <nan>
 800c102:	ec5b ab10 	vmov	sl, fp, d0
 800c106:	e67b      	b.n	800be00 <_strtod_l+0x88>
 800c108:	9b05      	ldr	r3, [sp, #20]
 800c10a:	9807      	ldr	r0, [sp, #28]
 800c10c:	1af3      	subs	r3, r6, r3
 800c10e:	2f00      	cmp	r7, #0
 800c110:	bf08      	it	eq
 800c112:	462f      	moveq	r7, r5
 800c114:	2d10      	cmp	r5, #16
 800c116:	9306      	str	r3, [sp, #24]
 800c118:	46a8      	mov	r8, r5
 800c11a:	bfa8      	it	ge
 800c11c:	f04f 0810 	movge.w	r8, #16
 800c120:	f7f4 f9f0 	bl	8000504 <__aeabi_ui2d>
 800c124:	2d09      	cmp	r5, #9
 800c126:	4682      	mov	sl, r0
 800c128:	468b      	mov	fp, r1
 800c12a:	dd13      	ble.n	800c154 <_strtod_l+0x3dc>
 800c12c:	4b7b      	ldr	r3, [pc, #492]	; (800c31c <_strtod_l+0x5a4>)
 800c12e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c132:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c136:	f7f4 fa5f 	bl	80005f8 <__aeabi_dmul>
 800c13a:	4682      	mov	sl, r0
 800c13c:	4648      	mov	r0, r9
 800c13e:	468b      	mov	fp, r1
 800c140:	f7f4 f9e0 	bl	8000504 <__aeabi_ui2d>
 800c144:	4602      	mov	r2, r0
 800c146:	460b      	mov	r3, r1
 800c148:	4650      	mov	r0, sl
 800c14a:	4659      	mov	r1, fp
 800c14c:	f7f4 f89e 	bl	800028c <__adddf3>
 800c150:	4682      	mov	sl, r0
 800c152:	468b      	mov	fp, r1
 800c154:	2d0f      	cmp	r5, #15
 800c156:	dc38      	bgt.n	800c1ca <_strtod_l+0x452>
 800c158:	9b06      	ldr	r3, [sp, #24]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	f43f ae50 	beq.w	800be00 <_strtod_l+0x88>
 800c160:	dd24      	ble.n	800c1ac <_strtod_l+0x434>
 800c162:	2b16      	cmp	r3, #22
 800c164:	dc0b      	bgt.n	800c17e <_strtod_l+0x406>
 800c166:	496d      	ldr	r1, [pc, #436]	; (800c31c <_strtod_l+0x5a4>)
 800c168:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c16c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c170:	4652      	mov	r2, sl
 800c172:	465b      	mov	r3, fp
 800c174:	f7f4 fa40 	bl	80005f8 <__aeabi_dmul>
 800c178:	4682      	mov	sl, r0
 800c17a:	468b      	mov	fp, r1
 800c17c:	e640      	b.n	800be00 <_strtod_l+0x88>
 800c17e:	9a06      	ldr	r2, [sp, #24]
 800c180:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800c184:	4293      	cmp	r3, r2
 800c186:	db20      	blt.n	800c1ca <_strtod_l+0x452>
 800c188:	4c64      	ldr	r4, [pc, #400]	; (800c31c <_strtod_l+0x5a4>)
 800c18a:	f1c5 050f 	rsb	r5, r5, #15
 800c18e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c192:	4652      	mov	r2, sl
 800c194:	465b      	mov	r3, fp
 800c196:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c19a:	f7f4 fa2d 	bl	80005f8 <__aeabi_dmul>
 800c19e:	9b06      	ldr	r3, [sp, #24]
 800c1a0:	1b5d      	subs	r5, r3, r5
 800c1a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c1a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c1aa:	e7e3      	b.n	800c174 <_strtod_l+0x3fc>
 800c1ac:	9b06      	ldr	r3, [sp, #24]
 800c1ae:	3316      	adds	r3, #22
 800c1b0:	db0b      	blt.n	800c1ca <_strtod_l+0x452>
 800c1b2:	9b05      	ldr	r3, [sp, #20]
 800c1b4:	1b9e      	subs	r6, r3, r6
 800c1b6:	4b59      	ldr	r3, [pc, #356]	; (800c31c <_strtod_l+0x5a4>)
 800c1b8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800c1bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c1c0:	4650      	mov	r0, sl
 800c1c2:	4659      	mov	r1, fp
 800c1c4:	f7f4 fb42 	bl	800084c <__aeabi_ddiv>
 800c1c8:	e7d6      	b.n	800c178 <_strtod_l+0x400>
 800c1ca:	9b06      	ldr	r3, [sp, #24]
 800c1cc:	eba5 0808 	sub.w	r8, r5, r8
 800c1d0:	4498      	add	r8, r3
 800c1d2:	f1b8 0f00 	cmp.w	r8, #0
 800c1d6:	dd74      	ble.n	800c2c2 <_strtod_l+0x54a>
 800c1d8:	f018 030f 	ands.w	r3, r8, #15
 800c1dc:	d00a      	beq.n	800c1f4 <_strtod_l+0x47c>
 800c1de:	494f      	ldr	r1, [pc, #316]	; (800c31c <_strtod_l+0x5a4>)
 800c1e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c1e4:	4652      	mov	r2, sl
 800c1e6:	465b      	mov	r3, fp
 800c1e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1ec:	f7f4 fa04 	bl	80005f8 <__aeabi_dmul>
 800c1f0:	4682      	mov	sl, r0
 800c1f2:	468b      	mov	fp, r1
 800c1f4:	f038 080f 	bics.w	r8, r8, #15
 800c1f8:	d04f      	beq.n	800c29a <_strtod_l+0x522>
 800c1fa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c1fe:	dd22      	ble.n	800c246 <_strtod_l+0x4ce>
 800c200:	2500      	movs	r5, #0
 800c202:	462e      	mov	r6, r5
 800c204:	9507      	str	r5, [sp, #28]
 800c206:	9505      	str	r5, [sp, #20]
 800c208:	2322      	movs	r3, #34	; 0x22
 800c20a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800c324 <_strtod_l+0x5ac>
 800c20e:	6023      	str	r3, [r4, #0]
 800c210:	f04f 0a00 	mov.w	sl, #0
 800c214:	9b07      	ldr	r3, [sp, #28]
 800c216:	2b00      	cmp	r3, #0
 800c218:	f43f adf2 	beq.w	800be00 <_strtod_l+0x88>
 800c21c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c21e:	4620      	mov	r0, r4
 800c220:	f001 fe90 	bl	800df44 <_Bfree>
 800c224:	9905      	ldr	r1, [sp, #20]
 800c226:	4620      	mov	r0, r4
 800c228:	f001 fe8c 	bl	800df44 <_Bfree>
 800c22c:	4631      	mov	r1, r6
 800c22e:	4620      	mov	r0, r4
 800c230:	f001 fe88 	bl	800df44 <_Bfree>
 800c234:	9907      	ldr	r1, [sp, #28]
 800c236:	4620      	mov	r0, r4
 800c238:	f001 fe84 	bl	800df44 <_Bfree>
 800c23c:	4629      	mov	r1, r5
 800c23e:	4620      	mov	r0, r4
 800c240:	f001 fe80 	bl	800df44 <_Bfree>
 800c244:	e5dc      	b.n	800be00 <_strtod_l+0x88>
 800c246:	4b36      	ldr	r3, [pc, #216]	; (800c320 <_strtod_l+0x5a8>)
 800c248:	9304      	str	r3, [sp, #16]
 800c24a:	2300      	movs	r3, #0
 800c24c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c250:	4650      	mov	r0, sl
 800c252:	4659      	mov	r1, fp
 800c254:	4699      	mov	r9, r3
 800c256:	f1b8 0f01 	cmp.w	r8, #1
 800c25a:	dc21      	bgt.n	800c2a0 <_strtod_l+0x528>
 800c25c:	b10b      	cbz	r3, 800c262 <_strtod_l+0x4ea>
 800c25e:	4682      	mov	sl, r0
 800c260:	468b      	mov	fp, r1
 800c262:	4b2f      	ldr	r3, [pc, #188]	; (800c320 <_strtod_l+0x5a8>)
 800c264:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c268:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800c26c:	4652      	mov	r2, sl
 800c26e:	465b      	mov	r3, fp
 800c270:	e9d9 0100 	ldrd	r0, r1, [r9]
 800c274:	f7f4 f9c0 	bl	80005f8 <__aeabi_dmul>
 800c278:	4b2a      	ldr	r3, [pc, #168]	; (800c324 <_strtod_l+0x5ac>)
 800c27a:	460a      	mov	r2, r1
 800c27c:	400b      	ands	r3, r1
 800c27e:	492a      	ldr	r1, [pc, #168]	; (800c328 <_strtod_l+0x5b0>)
 800c280:	428b      	cmp	r3, r1
 800c282:	4682      	mov	sl, r0
 800c284:	d8bc      	bhi.n	800c200 <_strtod_l+0x488>
 800c286:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c28a:	428b      	cmp	r3, r1
 800c28c:	bf86      	itte	hi
 800c28e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800c32c <_strtod_l+0x5b4>
 800c292:	f04f 3aff 	movhi.w	sl, #4294967295
 800c296:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c29a:	2300      	movs	r3, #0
 800c29c:	9304      	str	r3, [sp, #16]
 800c29e:	e084      	b.n	800c3aa <_strtod_l+0x632>
 800c2a0:	f018 0f01 	tst.w	r8, #1
 800c2a4:	d005      	beq.n	800c2b2 <_strtod_l+0x53a>
 800c2a6:	9b04      	ldr	r3, [sp, #16]
 800c2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ac:	f7f4 f9a4 	bl	80005f8 <__aeabi_dmul>
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	9a04      	ldr	r2, [sp, #16]
 800c2b4:	3208      	adds	r2, #8
 800c2b6:	f109 0901 	add.w	r9, r9, #1
 800c2ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c2be:	9204      	str	r2, [sp, #16]
 800c2c0:	e7c9      	b.n	800c256 <_strtod_l+0x4de>
 800c2c2:	d0ea      	beq.n	800c29a <_strtod_l+0x522>
 800c2c4:	f1c8 0800 	rsb	r8, r8, #0
 800c2c8:	f018 020f 	ands.w	r2, r8, #15
 800c2cc:	d00a      	beq.n	800c2e4 <_strtod_l+0x56c>
 800c2ce:	4b13      	ldr	r3, [pc, #76]	; (800c31c <_strtod_l+0x5a4>)
 800c2d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c2d4:	4650      	mov	r0, sl
 800c2d6:	4659      	mov	r1, fp
 800c2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2dc:	f7f4 fab6 	bl	800084c <__aeabi_ddiv>
 800c2e0:	4682      	mov	sl, r0
 800c2e2:	468b      	mov	fp, r1
 800c2e4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c2e8:	d0d7      	beq.n	800c29a <_strtod_l+0x522>
 800c2ea:	f1b8 0f1f 	cmp.w	r8, #31
 800c2ee:	dd1f      	ble.n	800c330 <_strtod_l+0x5b8>
 800c2f0:	2500      	movs	r5, #0
 800c2f2:	462e      	mov	r6, r5
 800c2f4:	9507      	str	r5, [sp, #28]
 800c2f6:	9505      	str	r5, [sp, #20]
 800c2f8:	2322      	movs	r3, #34	; 0x22
 800c2fa:	f04f 0a00 	mov.w	sl, #0
 800c2fe:	f04f 0b00 	mov.w	fp, #0
 800c302:	6023      	str	r3, [r4, #0]
 800c304:	e786      	b.n	800c214 <_strtod_l+0x49c>
 800c306:	bf00      	nop
 800c308:	08010099 	.word	0x08010099
 800c30c:	080100dc 	.word	0x080100dc
 800c310:	08010091 	.word	0x08010091
 800c314:	0801021c 	.word	0x0801021c
 800c318:	080104c8 	.word	0x080104c8
 800c31c:	080103a8 	.word	0x080103a8
 800c320:	08010380 	.word	0x08010380
 800c324:	7ff00000 	.word	0x7ff00000
 800c328:	7ca00000 	.word	0x7ca00000
 800c32c:	7fefffff 	.word	0x7fefffff
 800c330:	f018 0310 	ands.w	r3, r8, #16
 800c334:	bf18      	it	ne
 800c336:	236a      	movne	r3, #106	; 0x6a
 800c338:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800c6e8 <_strtod_l+0x970>
 800c33c:	9304      	str	r3, [sp, #16]
 800c33e:	4650      	mov	r0, sl
 800c340:	4659      	mov	r1, fp
 800c342:	2300      	movs	r3, #0
 800c344:	f018 0f01 	tst.w	r8, #1
 800c348:	d004      	beq.n	800c354 <_strtod_l+0x5dc>
 800c34a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c34e:	f7f4 f953 	bl	80005f8 <__aeabi_dmul>
 800c352:	2301      	movs	r3, #1
 800c354:	ea5f 0868 	movs.w	r8, r8, asr #1
 800c358:	f109 0908 	add.w	r9, r9, #8
 800c35c:	d1f2      	bne.n	800c344 <_strtod_l+0x5cc>
 800c35e:	b10b      	cbz	r3, 800c364 <_strtod_l+0x5ec>
 800c360:	4682      	mov	sl, r0
 800c362:	468b      	mov	fp, r1
 800c364:	9b04      	ldr	r3, [sp, #16]
 800c366:	b1c3      	cbz	r3, 800c39a <_strtod_l+0x622>
 800c368:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c36c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c370:	2b00      	cmp	r3, #0
 800c372:	4659      	mov	r1, fp
 800c374:	dd11      	ble.n	800c39a <_strtod_l+0x622>
 800c376:	2b1f      	cmp	r3, #31
 800c378:	f340 8124 	ble.w	800c5c4 <_strtod_l+0x84c>
 800c37c:	2b34      	cmp	r3, #52	; 0x34
 800c37e:	bfde      	ittt	le
 800c380:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c384:	f04f 33ff 	movle.w	r3, #4294967295
 800c388:	fa03 f202 	lslle.w	r2, r3, r2
 800c38c:	f04f 0a00 	mov.w	sl, #0
 800c390:	bfcc      	ite	gt
 800c392:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c396:	ea02 0b01 	andle.w	fp, r2, r1
 800c39a:	2200      	movs	r2, #0
 800c39c:	2300      	movs	r3, #0
 800c39e:	4650      	mov	r0, sl
 800c3a0:	4659      	mov	r1, fp
 800c3a2:	f7f4 fb91 	bl	8000ac8 <__aeabi_dcmpeq>
 800c3a6:	2800      	cmp	r0, #0
 800c3a8:	d1a2      	bne.n	800c2f0 <_strtod_l+0x578>
 800c3aa:	9b07      	ldr	r3, [sp, #28]
 800c3ac:	9300      	str	r3, [sp, #0]
 800c3ae:	9908      	ldr	r1, [sp, #32]
 800c3b0:	462b      	mov	r3, r5
 800c3b2:	463a      	mov	r2, r7
 800c3b4:	4620      	mov	r0, r4
 800c3b6:	f001 fe2d 	bl	800e014 <__s2b>
 800c3ba:	9007      	str	r0, [sp, #28]
 800c3bc:	2800      	cmp	r0, #0
 800c3be:	f43f af1f 	beq.w	800c200 <_strtod_l+0x488>
 800c3c2:	9b05      	ldr	r3, [sp, #20]
 800c3c4:	1b9e      	subs	r6, r3, r6
 800c3c6:	9b06      	ldr	r3, [sp, #24]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	bfb4      	ite	lt
 800c3cc:	4633      	movlt	r3, r6
 800c3ce:	2300      	movge	r3, #0
 800c3d0:	930c      	str	r3, [sp, #48]	; 0x30
 800c3d2:	9b06      	ldr	r3, [sp, #24]
 800c3d4:	2500      	movs	r5, #0
 800c3d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c3da:	9312      	str	r3, [sp, #72]	; 0x48
 800c3dc:	462e      	mov	r6, r5
 800c3de:	9b07      	ldr	r3, [sp, #28]
 800c3e0:	4620      	mov	r0, r4
 800c3e2:	6859      	ldr	r1, [r3, #4]
 800c3e4:	f001 fd6e 	bl	800dec4 <_Balloc>
 800c3e8:	9005      	str	r0, [sp, #20]
 800c3ea:	2800      	cmp	r0, #0
 800c3ec:	f43f af0c 	beq.w	800c208 <_strtod_l+0x490>
 800c3f0:	9b07      	ldr	r3, [sp, #28]
 800c3f2:	691a      	ldr	r2, [r3, #16]
 800c3f4:	3202      	adds	r2, #2
 800c3f6:	f103 010c 	add.w	r1, r3, #12
 800c3fa:	0092      	lsls	r2, r2, #2
 800c3fc:	300c      	adds	r0, #12
 800c3fe:	f001 fd53 	bl	800dea8 <memcpy>
 800c402:	ec4b ab10 	vmov	d0, sl, fp
 800c406:	aa1a      	add	r2, sp, #104	; 0x68
 800c408:	a919      	add	r1, sp, #100	; 0x64
 800c40a:	4620      	mov	r0, r4
 800c40c:	f002 f948 	bl	800e6a0 <__d2b>
 800c410:	ec4b ab18 	vmov	d8, sl, fp
 800c414:	9018      	str	r0, [sp, #96]	; 0x60
 800c416:	2800      	cmp	r0, #0
 800c418:	f43f aef6 	beq.w	800c208 <_strtod_l+0x490>
 800c41c:	2101      	movs	r1, #1
 800c41e:	4620      	mov	r0, r4
 800c420:	f001 fe92 	bl	800e148 <__i2b>
 800c424:	4606      	mov	r6, r0
 800c426:	2800      	cmp	r0, #0
 800c428:	f43f aeee 	beq.w	800c208 <_strtod_l+0x490>
 800c42c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c42e:	9904      	ldr	r1, [sp, #16]
 800c430:	2b00      	cmp	r3, #0
 800c432:	bfab      	itete	ge
 800c434:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800c436:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800c438:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c43a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800c43e:	bfac      	ite	ge
 800c440:	eb03 0902 	addge.w	r9, r3, r2
 800c444:	1ad7      	sublt	r7, r2, r3
 800c446:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c448:	eba3 0801 	sub.w	r8, r3, r1
 800c44c:	4490      	add	r8, r2
 800c44e:	4ba1      	ldr	r3, [pc, #644]	; (800c6d4 <_strtod_l+0x95c>)
 800c450:	f108 38ff 	add.w	r8, r8, #4294967295
 800c454:	4598      	cmp	r8, r3
 800c456:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c45a:	f280 80c7 	bge.w	800c5ec <_strtod_l+0x874>
 800c45e:	eba3 0308 	sub.w	r3, r3, r8
 800c462:	2b1f      	cmp	r3, #31
 800c464:	eba2 0203 	sub.w	r2, r2, r3
 800c468:	f04f 0101 	mov.w	r1, #1
 800c46c:	f300 80b1 	bgt.w	800c5d2 <_strtod_l+0x85a>
 800c470:	fa01 f303 	lsl.w	r3, r1, r3
 800c474:	930d      	str	r3, [sp, #52]	; 0x34
 800c476:	2300      	movs	r3, #0
 800c478:	9308      	str	r3, [sp, #32]
 800c47a:	eb09 0802 	add.w	r8, r9, r2
 800c47e:	9b04      	ldr	r3, [sp, #16]
 800c480:	45c1      	cmp	r9, r8
 800c482:	4417      	add	r7, r2
 800c484:	441f      	add	r7, r3
 800c486:	464b      	mov	r3, r9
 800c488:	bfa8      	it	ge
 800c48a:	4643      	movge	r3, r8
 800c48c:	42bb      	cmp	r3, r7
 800c48e:	bfa8      	it	ge
 800c490:	463b      	movge	r3, r7
 800c492:	2b00      	cmp	r3, #0
 800c494:	bfc2      	ittt	gt
 800c496:	eba8 0803 	subgt.w	r8, r8, r3
 800c49a:	1aff      	subgt	r7, r7, r3
 800c49c:	eba9 0903 	subgt.w	r9, r9, r3
 800c4a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	dd17      	ble.n	800c4d6 <_strtod_l+0x75e>
 800c4a6:	4631      	mov	r1, r6
 800c4a8:	461a      	mov	r2, r3
 800c4aa:	4620      	mov	r0, r4
 800c4ac:	f001 ff0c 	bl	800e2c8 <__pow5mult>
 800c4b0:	4606      	mov	r6, r0
 800c4b2:	2800      	cmp	r0, #0
 800c4b4:	f43f aea8 	beq.w	800c208 <_strtod_l+0x490>
 800c4b8:	4601      	mov	r1, r0
 800c4ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c4bc:	4620      	mov	r0, r4
 800c4be:	f001 fe59 	bl	800e174 <__multiply>
 800c4c2:	900b      	str	r0, [sp, #44]	; 0x2c
 800c4c4:	2800      	cmp	r0, #0
 800c4c6:	f43f ae9f 	beq.w	800c208 <_strtod_l+0x490>
 800c4ca:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c4cc:	4620      	mov	r0, r4
 800c4ce:	f001 fd39 	bl	800df44 <_Bfree>
 800c4d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4d4:	9318      	str	r3, [sp, #96]	; 0x60
 800c4d6:	f1b8 0f00 	cmp.w	r8, #0
 800c4da:	f300 808c 	bgt.w	800c5f6 <_strtod_l+0x87e>
 800c4de:	9b06      	ldr	r3, [sp, #24]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	dd08      	ble.n	800c4f6 <_strtod_l+0x77e>
 800c4e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c4e6:	9905      	ldr	r1, [sp, #20]
 800c4e8:	4620      	mov	r0, r4
 800c4ea:	f001 feed 	bl	800e2c8 <__pow5mult>
 800c4ee:	9005      	str	r0, [sp, #20]
 800c4f0:	2800      	cmp	r0, #0
 800c4f2:	f43f ae89 	beq.w	800c208 <_strtod_l+0x490>
 800c4f6:	2f00      	cmp	r7, #0
 800c4f8:	dd08      	ble.n	800c50c <_strtod_l+0x794>
 800c4fa:	9905      	ldr	r1, [sp, #20]
 800c4fc:	463a      	mov	r2, r7
 800c4fe:	4620      	mov	r0, r4
 800c500:	f001 ff3c 	bl	800e37c <__lshift>
 800c504:	9005      	str	r0, [sp, #20]
 800c506:	2800      	cmp	r0, #0
 800c508:	f43f ae7e 	beq.w	800c208 <_strtod_l+0x490>
 800c50c:	f1b9 0f00 	cmp.w	r9, #0
 800c510:	dd08      	ble.n	800c524 <_strtod_l+0x7ac>
 800c512:	4631      	mov	r1, r6
 800c514:	464a      	mov	r2, r9
 800c516:	4620      	mov	r0, r4
 800c518:	f001 ff30 	bl	800e37c <__lshift>
 800c51c:	4606      	mov	r6, r0
 800c51e:	2800      	cmp	r0, #0
 800c520:	f43f ae72 	beq.w	800c208 <_strtod_l+0x490>
 800c524:	9a05      	ldr	r2, [sp, #20]
 800c526:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c528:	4620      	mov	r0, r4
 800c52a:	f001 ffb3 	bl	800e494 <__mdiff>
 800c52e:	4605      	mov	r5, r0
 800c530:	2800      	cmp	r0, #0
 800c532:	f43f ae69 	beq.w	800c208 <_strtod_l+0x490>
 800c536:	68c3      	ldr	r3, [r0, #12]
 800c538:	930b      	str	r3, [sp, #44]	; 0x2c
 800c53a:	2300      	movs	r3, #0
 800c53c:	60c3      	str	r3, [r0, #12]
 800c53e:	4631      	mov	r1, r6
 800c540:	f001 ff8c 	bl	800e45c <__mcmp>
 800c544:	2800      	cmp	r0, #0
 800c546:	da60      	bge.n	800c60a <_strtod_l+0x892>
 800c548:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c54a:	ea53 030a 	orrs.w	r3, r3, sl
 800c54e:	f040 8082 	bne.w	800c656 <_strtod_l+0x8de>
 800c552:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c556:	2b00      	cmp	r3, #0
 800c558:	d17d      	bne.n	800c656 <_strtod_l+0x8de>
 800c55a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c55e:	0d1b      	lsrs	r3, r3, #20
 800c560:	051b      	lsls	r3, r3, #20
 800c562:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c566:	d976      	bls.n	800c656 <_strtod_l+0x8de>
 800c568:	696b      	ldr	r3, [r5, #20]
 800c56a:	b913      	cbnz	r3, 800c572 <_strtod_l+0x7fa>
 800c56c:	692b      	ldr	r3, [r5, #16]
 800c56e:	2b01      	cmp	r3, #1
 800c570:	dd71      	ble.n	800c656 <_strtod_l+0x8de>
 800c572:	4629      	mov	r1, r5
 800c574:	2201      	movs	r2, #1
 800c576:	4620      	mov	r0, r4
 800c578:	f001 ff00 	bl	800e37c <__lshift>
 800c57c:	4631      	mov	r1, r6
 800c57e:	4605      	mov	r5, r0
 800c580:	f001 ff6c 	bl	800e45c <__mcmp>
 800c584:	2800      	cmp	r0, #0
 800c586:	dd66      	ble.n	800c656 <_strtod_l+0x8de>
 800c588:	9904      	ldr	r1, [sp, #16]
 800c58a:	4a53      	ldr	r2, [pc, #332]	; (800c6d8 <_strtod_l+0x960>)
 800c58c:	465b      	mov	r3, fp
 800c58e:	2900      	cmp	r1, #0
 800c590:	f000 8081 	beq.w	800c696 <_strtod_l+0x91e>
 800c594:	ea02 010b 	and.w	r1, r2, fp
 800c598:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c59c:	dc7b      	bgt.n	800c696 <_strtod_l+0x91e>
 800c59e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c5a2:	f77f aea9 	ble.w	800c2f8 <_strtod_l+0x580>
 800c5a6:	4b4d      	ldr	r3, [pc, #308]	; (800c6dc <_strtod_l+0x964>)
 800c5a8:	4650      	mov	r0, sl
 800c5aa:	4659      	mov	r1, fp
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	f7f4 f823 	bl	80005f8 <__aeabi_dmul>
 800c5b2:	460b      	mov	r3, r1
 800c5b4:	4303      	orrs	r3, r0
 800c5b6:	bf08      	it	eq
 800c5b8:	2322      	moveq	r3, #34	; 0x22
 800c5ba:	4682      	mov	sl, r0
 800c5bc:	468b      	mov	fp, r1
 800c5be:	bf08      	it	eq
 800c5c0:	6023      	streq	r3, [r4, #0]
 800c5c2:	e62b      	b.n	800c21c <_strtod_l+0x4a4>
 800c5c4:	f04f 32ff 	mov.w	r2, #4294967295
 800c5c8:	fa02 f303 	lsl.w	r3, r2, r3
 800c5cc:	ea03 0a0a 	and.w	sl, r3, sl
 800c5d0:	e6e3      	b.n	800c39a <_strtod_l+0x622>
 800c5d2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800c5d6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800c5da:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800c5de:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800c5e2:	fa01 f308 	lsl.w	r3, r1, r8
 800c5e6:	9308      	str	r3, [sp, #32]
 800c5e8:	910d      	str	r1, [sp, #52]	; 0x34
 800c5ea:	e746      	b.n	800c47a <_strtod_l+0x702>
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	9308      	str	r3, [sp, #32]
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	930d      	str	r3, [sp, #52]	; 0x34
 800c5f4:	e741      	b.n	800c47a <_strtod_l+0x702>
 800c5f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c5f8:	4642      	mov	r2, r8
 800c5fa:	4620      	mov	r0, r4
 800c5fc:	f001 febe 	bl	800e37c <__lshift>
 800c600:	9018      	str	r0, [sp, #96]	; 0x60
 800c602:	2800      	cmp	r0, #0
 800c604:	f47f af6b 	bne.w	800c4de <_strtod_l+0x766>
 800c608:	e5fe      	b.n	800c208 <_strtod_l+0x490>
 800c60a:	465f      	mov	r7, fp
 800c60c:	d16e      	bne.n	800c6ec <_strtod_l+0x974>
 800c60e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c610:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c614:	b342      	cbz	r2, 800c668 <_strtod_l+0x8f0>
 800c616:	4a32      	ldr	r2, [pc, #200]	; (800c6e0 <_strtod_l+0x968>)
 800c618:	4293      	cmp	r3, r2
 800c61a:	d128      	bne.n	800c66e <_strtod_l+0x8f6>
 800c61c:	9b04      	ldr	r3, [sp, #16]
 800c61e:	4651      	mov	r1, sl
 800c620:	b1eb      	cbz	r3, 800c65e <_strtod_l+0x8e6>
 800c622:	4b2d      	ldr	r3, [pc, #180]	; (800c6d8 <_strtod_l+0x960>)
 800c624:	403b      	ands	r3, r7
 800c626:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c62a:	f04f 32ff 	mov.w	r2, #4294967295
 800c62e:	d819      	bhi.n	800c664 <_strtod_l+0x8ec>
 800c630:	0d1b      	lsrs	r3, r3, #20
 800c632:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c636:	fa02 f303 	lsl.w	r3, r2, r3
 800c63a:	4299      	cmp	r1, r3
 800c63c:	d117      	bne.n	800c66e <_strtod_l+0x8f6>
 800c63e:	4b29      	ldr	r3, [pc, #164]	; (800c6e4 <_strtod_l+0x96c>)
 800c640:	429f      	cmp	r7, r3
 800c642:	d102      	bne.n	800c64a <_strtod_l+0x8d2>
 800c644:	3101      	adds	r1, #1
 800c646:	f43f addf 	beq.w	800c208 <_strtod_l+0x490>
 800c64a:	4b23      	ldr	r3, [pc, #140]	; (800c6d8 <_strtod_l+0x960>)
 800c64c:	403b      	ands	r3, r7
 800c64e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c652:	f04f 0a00 	mov.w	sl, #0
 800c656:	9b04      	ldr	r3, [sp, #16]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d1a4      	bne.n	800c5a6 <_strtod_l+0x82e>
 800c65c:	e5de      	b.n	800c21c <_strtod_l+0x4a4>
 800c65e:	f04f 33ff 	mov.w	r3, #4294967295
 800c662:	e7ea      	b.n	800c63a <_strtod_l+0x8c2>
 800c664:	4613      	mov	r3, r2
 800c666:	e7e8      	b.n	800c63a <_strtod_l+0x8c2>
 800c668:	ea53 030a 	orrs.w	r3, r3, sl
 800c66c:	d08c      	beq.n	800c588 <_strtod_l+0x810>
 800c66e:	9b08      	ldr	r3, [sp, #32]
 800c670:	b1db      	cbz	r3, 800c6aa <_strtod_l+0x932>
 800c672:	423b      	tst	r3, r7
 800c674:	d0ef      	beq.n	800c656 <_strtod_l+0x8de>
 800c676:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c678:	9a04      	ldr	r2, [sp, #16]
 800c67a:	4650      	mov	r0, sl
 800c67c:	4659      	mov	r1, fp
 800c67e:	b1c3      	cbz	r3, 800c6b2 <_strtod_l+0x93a>
 800c680:	f7ff fb5c 	bl	800bd3c <sulp>
 800c684:	4602      	mov	r2, r0
 800c686:	460b      	mov	r3, r1
 800c688:	ec51 0b18 	vmov	r0, r1, d8
 800c68c:	f7f3 fdfe 	bl	800028c <__adddf3>
 800c690:	4682      	mov	sl, r0
 800c692:	468b      	mov	fp, r1
 800c694:	e7df      	b.n	800c656 <_strtod_l+0x8de>
 800c696:	4013      	ands	r3, r2
 800c698:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c69c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c6a0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c6a4:	f04f 3aff 	mov.w	sl, #4294967295
 800c6a8:	e7d5      	b.n	800c656 <_strtod_l+0x8de>
 800c6aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c6ac:	ea13 0f0a 	tst.w	r3, sl
 800c6b0:	e7e0      	b.n	800c674 <_strtod_l+0x8fc>
 800c6b2:	f7ff fb43 	bl	800bd3c <sulp>
 800c6b6:	4602      	mov	r2, r0
 800c6b8:	460b      	mov	r3, r1
 800c6ba:	ec51 0b18 	vmov	r0, r1, d8
 800c6be:	f7f3 fde3 	bl	8000288 <__aeabi_dsub>
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	4682      	mov	sl, r0
 800c6c8:	468b      	mov	fp, r1
 800c6ca:	f7f4 f9fd 	bl	8000ac8 <__aeabi_dcmpeq>
 800c6ce:	2800      	cmp	r0, #0
 800c6d0:	d0c1      	beq.n	800c656 <_strtod_l+0x8de>
 800c6d2:	e611      	b.n	800c2f8 <_strtod_l+0x580>
 800c6d4:	fffffc02 	.word	0xfffffc02
 800c6d8:	7ff00000 	.word	0x7ff00000
 800c6dc:	39500000 	.word	0x39500000
 800c6e0:	000fffff 	.word	0x000fffff
 800c6e4:	7fefffff 	.word	0x7fefffff
 800c6e8:	080100f0 	.word	0x080100f0
 800c6ec:	4631      	mov	r1, r6
 800c6ee:	4628      	mov	r0, r5
 800c6f0:	f002 f832 	bl	800e758 <__ratio>
 800c6f4:	ec59 8b10 	vmov	r8, r9, d0
 800c6f8:	ee10 0a10 	vmov	r0, s0
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c702:	4649      	mov	r1, r9
 800c704:	f7f4 f9f4 	bl	8000af0 <__aeabi_dcmple>
 800c708:	2800      	cmp	r0, #0
 800c70a:	d07a      	beq.n	800c802 <_strtod_l+0xa8a>
 800c70c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d04a      	beq.n	800c7a8 <_strtod_l+0xa30>
 800c712:	4b95      	ldr	r3, [pc, #596]	; (800c968 <_strtod_l+0xbf0>)
 800c714:	2200      	movs	r2, #0
 800c716:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c71a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c968 <_strtod_l+0xbf0>
 800c71e:	f04f 0800 	mov.w	r8, #0
 800c722:	4b92      	ldr	r3, [pc, #584]	; (800c96c <_strtod_l+0xbf4>)
 800c724:	403b      	ands	r3, r7
 800c726:	930d      	str	r3, [sp, #52]	; 0x34
 800c728:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c72a:	4b91      	ldr	r3, [pc, #580]	; (800c970 <_strtod_l+0xbf8>)
 800c72c:	429a      	cmp	r2, r3
 800c72e:	f040 80b0 	bne.w	800c892 <_strtod_l+0xb1a>
 800c732:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c736:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800c73a:	ec4b ab10 	vmov	d0, sl, fp
 800c73e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c742:	f001 ff31 	bl	800e5a8 <__ulp>
 800c746:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c74a:	ec53 2b10 	vmov	r2, r3, d0
 800c74e:	f7f3 ff53 	bl	80005f8 <__aeabi_dmul>
 800c752:	4652      	mov	r2, sl
 800c754:	465b      	mov	r3, fp
 800c756:	f7f3 fd99 	bl	800028c <__adddf3>
 800c75a:	460b      	mov	r3, r1
 800c75c:	4983      	ldr	r1, [pc, #524]	; (800c96c <_strtod_l+0xbf4>)
 800c75e:	4a85      	ldr	r2, [pc, #532]	; (800c974 <_strtod_l+0xbfc>)
 800c760:	4019      	ands	r1, r3
 800c762:	4291      	cmp	r1, r2
 800c764:	4682      	mov	sl, r0
 800c766:	d960      	bls.n	800c82a <_strtod_l+0xab2>
 800c768:	ee18 3a90 	vmov	r3, s17
 800c76c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c770:	4293      	cmp	r3, r2
 800c772:	d104      	bne.n	800c77e <_strtod_l+0xa06>
 800c774:	ee18 3a10 	vmov	r3, s16
 800c778:	3301      	adds	r3, #1
 800c77a:	f43f ad45 	beq.w	800c208 <_strtod_l+0x490>
 800c77e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800c980 <_strtod_l+0xc08>
 800c782:	f04f 3aff 	mov.w	sl, #4294967295
 800c786:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c788:	4620      	mov	r0, r4
 800c78a:	f001 fbdb 	bl	800df44 <_Bfree>
 800c78e:	9905      	ldr	r1, [sp, #20]
 800c790:	4620      	mov	r0, r4
 800c792:	f001 fbd7 	bl	800df44 <_Bfree>
 800c796:	4631      	mov	r1, r6
 800c798:	4620      	mov	r0, r4
 800c79a:	f001 fbd3 	bl	800df44 <_Bfree>
 800c79e:	4629      	mov	r1, r5
 800c7a0:	4620      	mov	r0, r4
 800c7a2:	f001 fbcf 	bl	800df44 <_Bfree>
 800c7a6:	e61a      	b.n	800c3de <_strtod_l+0x666>
 800c7a8:	f1ba 0f00 	cmp.w	sl, #0
 800c7ac:	d11b      	bne.n	800c7e6 <_strtod_l+0xa6e>
 800c7ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c7b2:	b9f3      	cbnz	r3, 800c7f2 <_strtod_l+0xa7a>
 800c7b4:	4b6c      	ldr	r3, [pc, #432]	; (800c968 <_strtod_l+0xbf0>)
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	4640      	mov	r0, r8
 800c7ba:	4649      	mov	r1, r9
 800c7bc:	f7f4 f98e 	bl	8000adc <__aeabi_dcmplt>
 800c7c0:	b9d0      	cbnz	r0, 800c7f8 <_strtod_l+0xa80>
 800c7c2:	4640      	mov	r0, r8
 800c7c4:	4649      	mov	r1, r9
 800c7c6:	4b6c      	ldr	r3, [pc, #432]	; (800c978 <_strtod_l+0xc00>)
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	f7f3 ff15 	bl	80005f8 <__aeabi_dmul>
 800c7ce:	4680      	mov	r8, r0
 800c7d0:	4689      	mov	r9, r1
 800c7d2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c7d6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800c7da:	9315      	str	r3, [sp, #84]	; 0x54
 800c7dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c7e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c7e4:	e79d      	b.n	800c722 <_strtod_l+0x9aa>
 800c7e6:	f1ba 0f01 	cmp.w	sl, #1
 800c7ea:	d102      	bne.n	800c7f2 <_strtod_l+0xa7a>
 800c7ec:	2f00      	cmp	r7, #0
 800c7ee:	f43f ad83 	beq.w	800c2f8 <_strtod_l+0x580>
 800c7f2:	4b62      	ldr	r3, [pc, #392]	; (800c97c <_strtod_l+0xc04>)
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	e78e      	b.n	800c716 <_strtod_l+0x99e>
 800c7f8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800c978 <_strtod_l+0xc00>
 800c7fc:	f04f 0800 	mov.w	r8, #0
 800c800:	e7e7      	b.n	800c7d2 <_strtod_l+0xa5a>
 800c802:	4b5d      	ldr	r3, [pc, #372]	; (800c978 <_strtod_l+0xc00>)
 800c804:	4640      	mov	r0, r8
 800c806:	4649      	mov	r1, r9
 800c808:	2200      	movs	r2, #0
 800c80a:	f7f3 fef5 	bl	80005f8 <__aeabi_dmul>
 800c80e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c810:	4680      	mov	r8, r0
 800c812:	4689      	mov	r9, r1
 800c814:	b933      	cbnz	r3, 800c824 <_strtod_l+0xaac>
 800c816:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c81a:	900e      	str	r0, [sp, #56]	; 0x38
 800c81c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c81e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c822:	e7dd      	b.n	800c7e0 <_strtod_l+0xa68>
 800c824:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800c828:	e7f9      	b.n	800c81e <_strtod_l+0xaa6>
 800c82a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c82e:	9b04      	ldr	r3, [sp, #16]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d1a8      	bne.n	800c786 <_strtod_l+0xa0e>
 800c834:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c838:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c83a:	0d1b      	lsrs	r3, r3, #20
 800c83c:	051b      	lsls	r3, r3, #20
 800c83e:	429a      	cmp	r2, r3
 800c840:	d1a1      	bne.n	800c786 <_strtod_l+0xa0e>
 800c842:	4640      	mov	r0, r8
 800c844:	4649      	mov	r1, r9
 800c846:	f7f4 fa37 	bl	8000cb8 <__aeabi_d2lz>
 800c84a:	f7f3 fea7 	bl	800059c <__aeabi_l2d>
 800c84e:	4602      	mov	r2, r0
 800c850:	460b      	mov	r3, r1
 800c852:	4640      	mov	r0, r8
 800c854:	4649      	mov	r1, r9
 800c856:	f7f3 fd17 	bl	8000288 <__aeabi_dsub>
 800c85a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c85c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c860:	ea43 030a 	orr.w	r3, r3, sl
 800c864:	4313      	orrs	r3, r2
 800c866:	4680      	mov	r8, r0
 800c868:	4689      	mov	r9, r1
 800c86a:	d055      	beq.n	800c918 <_strtod_l+0xba0>
 800c86c:	a336      	add	r3, pc, #216	; (adr r3, 800c948 <_strtod_l+0xbd0>)
 800c86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c872:	f7f4 f933 	bl	8000adc <__aeabi_dcmplt>
 800c876:	2800      	cmp	r0, #0
 800c878:	f47f acd0 	bne.w	800c21c <_strtod_l+0x4a4>
 800c87c:	a334      	add	r3, pc, #208	; (adr r3, 800c950 <_strtod_l+0xbd8>)
 800c87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c882:	4640      	mov	r0, r8
 800c884:	4649      	mov	r1, r9
 800c886:	f7f4 f947 	bl	8000b18 <__aeabi_dcmpgt>
 800c88a:	2800      	cmp	r0, #0
 800c88c:	f43f af7b 	beq.w	800c786 <_strtod_l+0xa0e>
 800c890:	e4c4      	b.n	800c21c <_strtod_l+0x4a4>
 800c892:	9b04      	ldr	r3, [sp, #16]
 800c894:	b333      	cbz	r3, 800c8e4 <_strtod_l+0xb6c>
 800c896:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c898:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c89c:	d822      	bhi.n	800c8e4 <_strtod_l+0xb6c>
 800c89e:	a32e      	add	r3, pc, #184	; (adr r3, 800c958 <_strtod_l+0xbe0>)
 800c8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a4:	4640      	mov	r0, r8
 800c8a6:	4649      	mov	r1, r9
 800c8a8:	f7f4 f922 	bl	8000af0 <__aeabi_dcmple>
 800c8ac:	b1a0      	cbz	r0, 800c8d8 <_strtod_l+0xb60>
 800c8ae:	4649      	mov	r1, r9
 800c8b0:	4640      	mov	r0, r8
 800c8b2:	f7f4 f979 	bl	8000ba8 <__aeabi_d2uiz>
 800c8b6:	2801      	cmp	r0, #1
 800c8b8:	bf38      	it	cc
 800c8ba:	2001      	movcc	r0, #1
 800c8bc:	f7f3 fe22 	bl	8000504 <__aeabi_ui2d>
 800c8c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8c2:	4680      	mov	r8, r0
 800c8c4:	4689      	mov	r9, r1
 800c8c6:	bb23      	cbnz	r3, 800c912 <_strtod_l+0xb9a>
 800c8c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c8cc:	9010      	str	r0, [sp, #64]	; 0x40
 800c8ce:	9311      	str	r3, [sp, #68]	; 0x44
 800c8d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c8d4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c8d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c8dc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c8e0:	1a9b      	subs	r3, r3, r2
 800c8e2:	9309      	str	r3, [sp, #36]	; 0x24
 800c8e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c8e8:	eeb0 0a48 	vmov.f32	s0, s16
 800c8ec:	eef0 0a68 	vmov.f32	s1, s17
 800c8f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c8f4:	f001 fe58 	bl	800e5a8 <__ulp>
 800c8f8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c8fc:	ec53 2b10 	vmov	r2, r3, d0
 800c900:	f7f3 fe7a 	bl	80005f8 <__aeabi_dmul>
 800c904:	ec53 2b18 	vmov	r2, r3, d8
 800c908:	f7f3 fcc0 	bl	800028c <__adddf3>
 800c90c:	4682      	mov	sl, r0
 800c90e:	468b      	mov	fp, r1
 800c910:	e78d      	b.n	800c82e <_strtod_l+0xab6>
 800c912:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800c916:	e7db      	b.n	800c8d0 <_strtod_l+0xb58>
 800c918:	a311      	add	r3, pc, #68	; (adr r3, 800c960 <_strtod_l+0xbe8>)
 800c91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c91e:	f7f4 f8dd 	bl	8000adc <__aeabi_dcmplt>
 800c922:	e7b2      	b.n	800c88a <_strtod_l+0xb12>
 800c924:	2300      	movs	r3, #0
 800c926:	930a      	str	r3, [sp, #40]	; 0x28
 800c928:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c92a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c92c:	6013      	str	r3, [r2, #0]
 800c92e:	f7ff ba6b 	b.w	800be08 <_strtod_l+0x90>
 800c932:	2a65      	cmp	r2, #101	; 0x65
 800c934:	f43f ab5f 	beq.w	800bff6 <_strtod_l+0x27e>
 800c938:	2a45      	cmp	r2, #69	; 0x45
 800c93a:	f43f ab5c 	beq.w	800bff6 <_strtod_l+0x27e>
 800c93e:	2301      	movs	r3, #1
 800c940:	f7ff bb94 	b.w	800c06c <_strtod_l+0x2f4>
 800c944:	f3af 8000 	nop.w
 800c948:	94a03595 	.word	0x94a03595
 800c94c:	3fdfffff 	.word	0x3fdfffff
 800c950:	35afe535 	.word	0x35afe535
 800c954:	3fe00000 	.word	0x3fe00000
 800c958:	ffc00000 	.word	0xffc00000
 800c95c:	41dfffff 	.word	0x41dfffff
 800c960:	94a03595 	.word	0x94a03595
 800c964:	3fcfffff 	.word	0x3fcfffff
 800c968:	3ff00000 	.word	0x3ff00000
 800c96c:	7ff00000 	.word	0x7ff00000
 800c970:	7fe00000 	.word	0x7fe00000
 800c974:	7c9fffff 	.word	0x7c9fffff
 800c978:	3fe00000 	.word	0x3fe00000
 800c97c:	bff00000 	.word	0xbff00000
 800c980:	7fefffff 	.word	0x7fefffff

0800c984 <_strtod_r>:
 800c984:	4b01      	ldr	r3, [pc, #4]	; (800c98c <_strtod_r+0x8>)
 800c986:	f7ff b9f7 	b.w	800bd78 <_strtod_l>
 800c98a:	bf00      	nop
 800c98c:	20000164 	.word	0x20000164

0800c990 <_strtol_l.constprop.0>:
 800c990:	2b01      	cmp	r3, #1
 800c992:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c996:	d001      	beq.n	800c99c <_strtol_l.constprop.0+0xc>
 800c998:	2b24      	cmp	r3, #36	; 0x24
 800c99a:	d906      	bls.n	800c9aa <_strtol_l.constprop.0+0x1a>
 800c99c:	f7fe fafc 	bl	800af98 <__errno>
 800c9a0:	2316      	movs	r3, #22
 800c9a2:	6003      	str	r3, [r0, #0]
 800c9a4:	2000      	movs	r0, #0
 800c9a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9aa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ca90 <_strtol_l.constprop.0+0x100>
 800c9ae:	460d      	mov	r5, r1
 800c9b0:	462e      	mov	r6, r5
 800c9b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c9b6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c9ba:	f017 0708 	ands.w	r7, r7, #8
 800c9be:	d1f7      	bne.n	800c9b0 <_strtol_l.constprop.0+0x20>
 800c9c0:	2c2d      	cmp	r4, #45	; 0x2d
 800c9c2:	d132      	bne.n	800ca2a <_strtol_l.constprop.0+0x9a>
 800c9c4:	782c      	ldrb	r4, [r5, #0]
 800c9c6:	2701      	movs	r7, #1
 800c9c8:	1cb5      	adds	r5, r6, #2
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d05b      	beq.n	800ca86 <_strtol_l.constprop.0+0xf6>
 800c9ce:	2b10      	cmp	r3, #16
 800c9d0:	d109      	bne.n	800c9e6 <_strtol_l.constprop.0+0x56>
 800c9d2:	2c30      	cmp	r4, #48	; 0x30
 800c9d4:	d107      	bne.n	800c9e6 <_strtol_l.constprop.0+0x56>
 800c9d6:	782c      	ldrb	r4, [r5, #0]
 800c9d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c9dc:	2c58      	cmp	r4, #88	; 0x58
 800c9de:	d14d      	bne.n	800ca7c <_strtol_l.constprop.0+0xec>
 800c9e0:	786c      	ldrb	r4, [r5, #1]
 800c9e2:	2310      	movs	r3, #16
 800c9e4:	3502      	adds	r5, #2
 800c9e6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c9ea:	f108 38ff 	add.w	r8, r8, #4294967295
 800c9ee:	f04f 0c00 	mov.w	ip, #0
 800c9f2:	fbb8 f9f3 	udiv	r9, r8, r3
 800c9f6:	4666      	mov	r6, ip
 800c9f8:	fb03 8a19 	mls	sl, r3, r9, r8
 800c9fc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ca00:	f1be 0f09 	cmp.w	lr, #9
 800ca04:	d816      	bhi.n	800ca34 <_strtol_l.constprop.0+0xa4>
 800ca06:	4674      	mov	r4, lr
 800ca08:	42a3      	cmp	r3, r4
 800ca0a:	dd24      	ble.n	800ca56 <_strtol_l.constprop.0+0xc6>
 800ca0c:	f1bc 0f00 	cmp.w	ip, #0
 800ca10:	db1e      	blt.n	800ca50 <_strtol_l.constprop.0+0xc0>
 800ca12:	45b1      	cmp	r9, r6
 800ca14:	d31c      	bcc.n	800ca50 <_strtol_l.constprop.0+0xc0>
 800ca16:	d101      	bne.n	800ca1c <_strtol_l.constprop.0+0x8c>
 800ca18:	45a2      	cmp	sl, r4
 800ca1a:	db19      	blt.n	800ca50 <_strtol_l.constprop.0+0xc0>
 800ca1c:	fb06 4603 	mla	r6, r6, r3, r4
 800ca20:	f04f 0c01 	mov.w	ip, #1
 800ca24:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ca28:	e7e8      	b.n	800c9fc <_strtol_l.constprop.0+0x6c>
 800ca2a:	2c2b      	cmp	r4, #43	; 0x2b
 800ca2c:	bf04      	itt	eq
 800ca2e:	782c      	ldrbeq	r4, [r5, #0]
 800ca30:	1cb5      	addeq	r5, r6, #2
 800ca32:	e7ca      	b.n	800c9ca <_strtol_l.constprop.0+0x3a>
 800ca34:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ca38:	f1be 0f19 	cmp.w	lr, #25
 800ca3c:	d801      	bhi.n	800ca42 <_strtol_l.constprop.0+0xb2>
 800ca3e:	3c37      	subs	r4, #55	; 0x37
 800ca40:	e7e2      	b.n	800ca08 <_strtol_l.constprop.0+0x78>
 800ca42:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ca46:	f1be 0f19 	cmp.w	lr, #25
 800ca4a:	d804      	bhi.n	800ca56 <_strtol_l.constprop.0+0xc6>
 800ca4c:	3c57      	subs	r4, #87	; 0x57
 800ca4e:	e7db      	b.n	800ca08 <_strtol_l.constprop.0+0x78>
 800ca50:	f04f 3cff 	mov.w	ip, #4294967295
 800ca54:	e7e6      	b.n	800ca24 <_strtol_l.constprop.0+0x94>
 800ca56:	f1bc 0f00 	cmp.w	ip, #0
 800ca5a:	da05      	bge.n	800ca68 <_strtol_l.constprop.0+0xd8>
 800ca5c:	2322      	movs	r3, #34	; 0x22
 800ca5e:	6003      	str	r3, [r0, #0]
 800ca60:	4646      	mov	r6, r8
 800ca62:	b942      	cbnz	r2, 800ca76 <_strtol_l.constprop.0+0xe6>
 800ca64:	4630      	mov	r0, r6
 800ca66:	e79e      	b.n	800c9a6 <_strtol_l.constprop.0+0x16>
 800ca68:	b107      	cbz	r7, 800ca6c <_strtol_l.constprop.0+0xdc>
 800ca6a:	4276      	negs	r6, r6
 800ca6c:	2a00      	cmp	r2, #0
 800ca6e:	d0f9      	beq.n	800ca64 <_strtol_l.constprop.0+0xd4>
 800ca70:	f1bc 0f00 	cmp.w	ip, #0
 800ca74:	d000      	beq.n	800ca78 <_strtol_l.constprop.0+0xe8>
 800ca76:	1e69      	subs	r1, r5, #1
 800ca78:	6011      	str	r1, [r2, #0]
 800ca7a:	e7f3      	b.n	800ca64 <_strtol_l.constprop.0+0xd4>
 800ca7c:	2430      	movs	r4, #48	; 0x30
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d1b1      	bne.n	800c9e6 <_strtol_l.constprop.0+0x56>
 800ca82:	2308      	movs	r3, #8
 800ca84:	e7af      	b.n	800c9e6 <_strtol_l.constprop.0+0x56>
 800ca86:	2c30      	cmp	r4, #48	; 0x30
 800ca88:	d0a5      	beq.n	800c9d6 <_strtol_l.constprop.0+0x46>
 800ca8a:	230a      	movs	r3, #10
 800ca8c:	e7ab      	b.n	800c9e6 <_strtol_l.constprop.0+0x56>
 800ca8e:	bf00      	nop
 800ca90:	08010119 	.word	0x08010119

0800ca94 <_strtol_r>:
 800ca94:	f7ff bf7c 	b.w	800c990 <_strtol_l.constprop.0>

0800ca98 <quorem>:
 800ca98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca9c:	6903      	ldr	r3, [r0, #16]
 800ca9e:	690c      	ldr	r4, [r1, #16]
 800caa0:	42a3      	cmp	r3, r4
 800caa2:	4607      	mov	r7, r0
 800caa4:	f2c0 8081 	blt.w	800cbaa <quorem+0x112>
 800caa8:	3c01      	subs	r4, #1
 800caaa:	f101 0814 	add.w	r8, r1, #20
 800caae:	f100 0514 	add.w	r5, r0, #20
 800cab2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cab6:	9301      	str	r3, [sp, #4]
 800cab8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cabc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cac0:	3301      	adds	r3, #1
 800cac2:	429a      	cmp	r2, r3
 800cac4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cac8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cacc:	fbb2 f6f3 	udiv	r6, r2, r3
 800cad0:	d331      	bcc.n	800cb36 <quorem+0x9e>
 800cad2:	f04f 0e00 	mov.w	lr, #0
 800cad6:	4640      	mov	r0, r8
 800cad8:	46ac      	mov	ip, r5
 800cada:	46f2      	mov	sl, lr
 800cadc:	f850 2b04 	ldr.w	r2, [r0], #4
 800cae0:	b293      	uxth	r3, r2
 800cae2:	fb06 e303 	mla	r3, r6, r3, lr
 800cae6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800caea:	b29b      	uxth	r3, r3
 800caec:	ebaa 0303 	sub.w	r3, sl, r3
 800caf0:	f8dc a000 	ldr.w	sl, [ip]
 800caf4:	0c12      	lsrs	r2, r2, #16
 800caf6:	fa13 f38a 	uxtah	r3, r3, sl
 800cafa:	fb06 e202 	mla	r2, r6, r2, lr
 800cafe:	9300      	str	r3, [sp, #0]
 800cb00:	9b00      	ldr	r3, [sp, #0]
 800cb02:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cb06:	b292      	uxth	r2, r2
 800cb08:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cb0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cb10:	f8bd 3000 	ldrh.w	r3, [sp]
 800cb14:	4581      	cmp	r9, r0
 800cb16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cb1a:	f84c 3b04 	str.w	r3, [ip], #4
 800cb1e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cb22:	d2db      	bcs.n	800cadc <quorem+0x44>
 800cb24:	f855 300b 	ldr.w	r3, [r5, fp]
 800cb28:	b92b      	cbnz	r3, 800cb36 <quorem+0x9e>
 800cb2a:	9b01      	ldr	r3, [sp, #4]
 800cb2c:	3b04      	subs	r3, #4
 800cb2e:	429d      	cmp	r5, r3
 800cb30:	461a      	mov	r2, r3
 800cb32:	d32e      	bcc.n	800cb92 <quorem+0xfa>
 800cb34:	613c      	str	r4, [r7, #16]
 800cb36:	4638      	mov	r0, r7
 800cb38:	f001 fc90 	bl	800e45c <__mcmp>
 800cb3c:	2800      	cmp	r0, #0
 800cb3e:	db24      	blt.n	800cb8a <quorem+0xf2>
 800cb40:	3601      	adds	r6, #1
 800cb42:	4628      	mov	r0, r5
 800cb44:	f04f 0c00 	mov.w	ip, #0
 800cb48:	f858 2b04 	ldr.w	r2, [r8], #4
 800cb4c:	f8d0 e000 	ldr.w	lr, [r0]
 800cb50:	b293      	uxth	r3, r2
 800cb52:	ebac 0303 	sub.w	r3, ip, r3
 800cb56:	0c12      	lsrs	r2, r2, #16
 800cb58:	fa13 f38e 	uxtah	r3, r3, lr
 800cb5c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cb60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cb64:	b29b      	uxth	r3, r3
 800cb66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cb6a:	45c1      	cmp	r9, r8
 800cb6c:	f840 3b04 	str.w	r3, [r0], #4
 800cb70:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cb74:	d2e8      	bcs.n	800cb48 <quorem+0xb0>
 800cb76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cb7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cb7e:	b922      	cbnz	r2, 800cb8a <quorem+0xf2>
 800cb80:	3b04      	subs	r3, #4
 800cb82:	429d      	cmp	r5, r3
 800cb84:	461a      	mov	r2, r3
 800cb86:	d30a      	bcc.n	800cb9e <quorem+0x106>
 800cb88:	613c      	str	r4, [r7, #16]
 800cb8a:	4630      	mov	r0, r6
 800cb8c:	b003      	add	sp, #12
 800cb8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb92:	6812      	ldr	r2, [r2, #0]
 800cb94:	3b04      	subs	r3, #4
 800cb96:	2a00      	cmp	r2, #0
 800cb98:	d1cc      	bne.n	800cb34 <quorem+0x9c>
 800cb9a:	3c01      	subs	r4, #1
 800cb9c:	e7c7      	b.n	800cb2e <quorem+0x96>
 800cb9e:	6812      	ldr	r2, [r2, #0]
 800cba0:	3b04      	subs	r3, #4
 800cba2:	2a00      	cmp	r2, #0
 800cba4:	d1f0      	bne.n	800cb88 <quorem+0xf0>
 800cba6:	3c01      	subs	r4, #1
 800cba8:	e7eb      	b.n	800cb82 <quorem+0xea>
 800cbaa:	2000      	movs	r0, #0
 800cbac:	e7ee      	b.n	800cb8c <quorem+0xf4>
	...

0800cbb0 <_dtoa_r>:
 800cbb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbb4:	ed2d 8b04 	vpush	{d8-d9}
 800cbb8:	ec57 6b10 	vmov	r6, r7, d0
 800cbbc:	b093      	sub	sp, #76	; 0x4c
 800cbbe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cbc0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cbc4:	9106      	str	r1, [sp, #24]
 800cbc6:	ee10 aa10 	vmov	sl, s0
 800cbca:	4604      	mov	r4, r0
 800cbcc:	9209      	str	r2, [sp, #36]	; 0x24
 800cbce:	930c      	str	r3, [sp, #48]	; 0x30
 800cbd0:	46bb      	mov	fp, r7
 800cbd2:	b975      	cbnz	r5, 800cbf2 <_dtoa_r+0x42>
 800cbd4:	2010      	movs	r0, #16
 800cbd6:	f001 f94d 	bl	800de74 <malloc>
 800cbda:	4602      	mov	r2, r0
 800cbdc:	6260      	str	r0, [r4, #36]	; 0x24
 800cbde:	b920      	cbnz	r0, 800cbea <_dtoa_r+0x3a>
 800cbe0:	4ba7      	ldr	r3, [pc, #668]	; (800ce80 <_dtoa_r+0x2d0>)
 800cbe2:	21ea      	movs	r1, #234	; 0xea
 800cbe4:	48a7      	ldr	r0, [pc, #668]	; (800ce84 <_dtoa_r+0x2d4>)
 800cbe6:	f002 f8bd 	bl	800ed64 <__assert_func>
 800cbea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cbee:	6005      	str	r5, [r0, #0]
 800cbf0:	60c5      	str	r5, [r0, #12]
 800cbf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cbf4:	6819      	ldr	r1, [r3, #0]
 800cbf6:	b151      	cbz	r1, 800cc0e <_dtoa_r+0x5e>
 800cbf8:	685a      	ldr	r2, [r3, #4]
 800cbfa:	604a      	str	r2, [r1, #4]
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	4093      	lsls	r3, r2
 800cc00:	608b      	str	r3, [r1, #8]
 800cc02:	4620      	mov	r0, r4
 800cc04:	f001 f99e 	bl	800df44 <_Bfree>
 800cc08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	601a      	str	r2, [r3, #0]
 800cc0e:	1e3b      	subs	r3, r7, #0
 800cc10:	bfaa      	itet	ge
 800cc12:	2300      	movge	r3, #0
 800cc14:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800cc18:	f8c8 3000 	strge.w	r3, [r8]
 800cc1c:	4b9a      	ldr	r3, [pc, #616]	; (800ce88 <_dtoa_r+0x2d8>)
 800cc1e:	bfbc      	itt	lt
 800cc20:	2201      	movlt	r2, #1
 800cc22:	f8c8 2000 	strlt.w	r2, [r8]
 800cc26:	ea33 030b 	bics.w	r3, r3, fp
 800cc2a:	d11b      	bne.n	800cc64 <_dtoa_r+0xb4>
 800cc2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc2e:	f242 730f 	movw	r3, #9999	; 0x270f
 800cc32:	6013      	str	r3, [r2, #0]
 800cc34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cc38:	4333      	orrs	r3, r6
 800cc3a:	f000 8592 	beq.w	800d762 <_dtoa_r+0xbb2>
 800cc3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cc40:	b963      	cbnz	r3, 800cc5c <_dtoa_r+0xac>
 800cc42:	4b92      	ldr	r3, [pc, #584]	; (800ce8c <_dtoa_r+0x2dc>)
 800cc44:	e022      	b.n	800cc8c <_dtoa_r+0xdc>
 800cc46:	4b92      	ldr	r3, [pc, #584]	; (800ce90 <_dtoa_r+0x2e0>)
 800cc48:	9301      	str	r3, [sp, #4]
 800cc4a:	3308      	adds	r3, #8
 800cc4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cc4e:	6013      	str	r3, [r2, #0]
 800cc50:	9801      	ldr	r0, [sp, #4]
 800cc52:	b013      	add	sp, #76	; 0x4c
 800cc54:	ecbd 8b04 	vpop	{d8-d9}
 800cc58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc5c:	4b8b      	ldr	r3, [pc, #556]	; (800ce8c <_dtoa_r+0x2dc>)
 800cc5e:	9301      	str	r3, [sp, #4]
 800cc60:	3303      	adds	r3, #3
 800cc62:	e7f3      	b.n	800cc4c <_dtoa_r+0x9c>
 800cc64:	2200      	movs	r2, #0
 800cc66:	2300      	movs	r3, #0
 800cc68:	4650      	mov	r0, sl
 800cc6a:	4659      	mov	r1, fp
 800cc6c:	f7f3 ff2c 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc70:	ec4b ab19 	vmov	d9, sl, fp
 800cc74:	4680      	mov	r8, r0
 800cc76:	b158      	cbz	r0, 800cc90 <_dtoa_r+0xe0>
 800cc78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	6013      	str	r3, [r2, #0]
 800cc7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	f000 856b 	beq.w	800d75c <_dtoa_r+0xbac>
 800cc86:	4883      	ldr	r0, [pc, #524]	; (800ce94 <_dtoa_r+0x2e4>)
 800cc88:	6018      	str	r0, [r3, #0]
 800cc8a:	1e43      	subs	r3, r0, #1
 800cc8c:	9301      	str	r3, [sp, #4]
 800cc8e:	e7df      	b.n	800cc50 <_dtoa_r+0xa0>
 800cc90:	ec4b ab10 	vmov	d0, sl, fp
 800cc94:	aa10      	add	r2, sp, #64	; 0x40
 800cc96:	a911      	add	r1, sp, #68	; 0x44
 800cc98:	4620      	mov	r0, r4
 800cc9a:	f001 fd01 	bl	800e6a0 <__d2b>
 800cc9e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800cca2:	ee08 0a10 	vmov	s16, r0
 800cca6:	2d00      	cmp	r5, #0
 800cca8:	f000 8084 	beq.w	800cdb4 <_dtoa_r+0x204>
 800ccac:	ee19 3a90 	vmov	r3, s19
 800ccb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ccb4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ccb8:	4656      	mov	r6, sl
 800ccba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ccbe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ccc2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ccc6:	4b74      	ldr	r3, [pc, #464]	; (800ce98 <_dtoa_r+0x2e8>)
 800ccc8:	2200      	movs	r2, #0
 800ccca:	4630      	mov	r0, r6
 800cccc:	4639      	mov	r1, r7
 800ccce:	f7f3 fadb 	bl	8000288 <__aeabi_dsub>
 800ccd2:	a365      	add	r3, pc, #404	; (adr r3, 800ce68 <_dtoa_r+0x2b8>)
 800ccd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd8:	f7f3 fc8e 	bl	80005f8 <__aeabi_dmul>
 800ccdc:	a364      	add	r3, pc, #400	; (adr r3, 800ce70 <_dtoa_r+0x2c0>)
 800ccde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce2:	f7f3 fad3 	bl	800028c <__adddf3>
 800cce6:	4606      	mov	r6, r0
 800cce8:	4628      	mov	r0, r5
 800ccea:	460f      	mov	r7, r1
 800ccec:	f7f3 fc1a 	bl	8000524 <__aeabi_i2d>
 800ccf0:	a361      	add	r3, pc, #388	; (adr r3, 800ce78 <_dtoa_r+0x2c8>)
 800ccf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf6:	f7f3 fc7f 	bl	80005f8 <__aeabi_dmul>
 800ccfa:	4602      	mov	r2, r0
 800ccfc:	460b      	mov	r3, r1
 800ccfe:	4630      	mov	r0, r6
 800cd00:	4639      	mov	r1, r7
 800cd02:	f7f3 fac3 	bl	800028c <__adddf3>
 800cd06:	4606      	mov	r6, r0
 800cd08:	460f      	mov	r7, r1
 800cd0a:	f7f3 ff25 	bl	8000b58 <__aeabi_d2iz>
 800cd0e:	2200      	movs	r2, #0
 800cd10:	9000      	str	r0, [sp, #0]
 800cd12:	2300      	movs	r3, #0
 800cd14:	4630      	mov	r0, r6
 800cd16:	4639      	mov	r1, r7
 800cd18:	f7f3 fee0 	bl	8000adc <__aeabi_dcmplt>
 800cd1c:	b150      	cbz	r0, 800cd34 <_dtoa_r+0x184>
 800cd1e:	9800      	ldr	r0, [sp, #0]
 800cd20:	f7f3 fc00 	bl	8000524 <__aeabi_i2d>
 800cd24:	4632      	mov	r2, r6
 800cd26:	463b      	mov	r3, r7
 800cd28:	f7f3 fece 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd2c:	b910      	cbnz	r0, 800cd34 <_dtoa_r+0x184>
 800cd2e:	9b00      	ldr	r3, [sp, #0]
 800cd30:	3b01      	subs	r3, #1
 800cd32:	9300      	str	r3, [sp, #0]
 800cd34:	9b00      	ldr	r3, [sp, #0]
 800cd36:	2b16      	cmp	r3, #22
 800cd38:	d85a      	bhi.n	800cdf0 <_dtoa_r+0x240>
 800cd3a:	9a00      	ldr	r2, [sp, #0]
 800cd3c:	4b57      	ldr	r3, [pc, #348]	; (800ce9c <_dtoa_r+0x2ec>)
 800cd3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cd42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd46:	ec51 0b19 	vmov	r0, r1, d9
 800cd4a:	f7f3 fec7 	bl	8000adc <__aeabi_dcmplt>
 800cd4e:	2800      	cmp	r0, #0
 800cd50:	d050      	beq.n	800cdf4 <_dtoa_r+0x244>
 800cd52:	9b00      	ldr	r3, [sp, #0]
 800cd54:	3b01      	subs	r3, #1
 800cd56:	9300      	str	r3, [sp, #0]
 800cd58:	2300      	movs	r3, #0
 800cd5a:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cd5e:	1b5d      	subs	r5, r3, r5
 800cd60:	1e6b      	subs	r3, r5, #1
 800cd62:	9305      	str	r3, [sp, #20]
 800cd64:	bf45      	ittet	mi
 800cd66:	f1c5 0301 	rsbmi	r3, r5, #1
 800cd6a:	9304      	strmi	r3, [sp, #16]
 800cd6c:	2300      	movpl	r3, #0
 800cd6e:	2300      	movmi	r3, #0
 800cd70:	bf4c      	ite	mi
 800cd72:	9305      	strmi	r3, [sp, #20]
 800cd74:	9304      	strpl	r3, [sp, #16]
 800cd76:	9b00      	ldr	r3, [sp, #0]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	db3d      	blt.n	800cdf8 <_dtoa_r+0x248>
 800cd7c:	9b05      	ldr	r3, [sp, #20]
 800cd7e:	9a00      	ldr	r2, [sp, #0]
 800cd80:	920a      	str	r2, [sp, #40]	; 0x28
 800cd82:	4413      	add	r3, r2
 800cd84:	9305      	str	r3, [sp, #20]
 800cd86:	2300      	movs	r3, #0
 800cd88:	9307      	str	r3, [sp, #28]
 800cd8a:	9b06      	ldr	r3, [sp, #24]
 800cd8c:	2b09      	cmp	r3, #9
 800cd8e:	f200 8089 	bhi.w	800cea4 <_dtoa_r+0x2f4>
 800cd92:	2b05      	cmp	r3, #5
 800cd94:	bfc4      	itt	gt
 800cd96:	3b04      	subgt	r3, #4
 800cd98:	9306      	strgt	r3, [sp, #24]
 800cd9a:	9b06      	ldr	r3, [sp, #24]
 800cd9c:	f1a3 0302 	sub.w	r3, r3, #2
 800cda0:	bfcc      	ite	gt
 800cda2:	2500      	movgt	r5, #0
 800cda4:	2501      	movle	r5, #1
 800cda6:	2b03      	cmp	r3, #3
 800cda8:	f200 8087 	bhi.w	800ceba <_dtoa_r+0x30a>
 800cdac:	e8df f003 	tbb	[pc, r3]
 800cdb0:	59383a2d 	.word	0x59383a2d
 800cdb4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800cdb8:	441d      	add	r5, r3
 800cdba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cdbe:	2b20      	cmp	r3, #32
 800cdc0:	bfc1      	itttt	gt
 800cdc2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cdc6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800cdca:	fa0b f303 	lslgt.w	r3, fp, r3
 800cdce:	fa26 f000 	lsrgt.w	r0, r6, r0
 800cdd2:	bfda      	itte	le
 800cdd4:	f1c3 0320 	rsble	r3, r3, #32
 800cdd8:	fa06 f003 	lslle.w	r0, r6, r3
 800cddc:	4318      	orrgt	r0, r3
 800cdde:	f7f3 fb91 	bl	8000504 <__aeabi_ui2d>
 800cde2:	2301      	movs	r3, #1
 800cde4:	4606      	mov	r6, r0
 800cde6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800cdea:	3d01      	subs	r5, #1
 800cdec:	930e      	str	r3, [sp, #56]	; 0x38
 800cdee:	e76a      	b.n	800ccc6 <_dtoa_r+0x116>
 800cdf0:	2301      	movs	r3, #1
 800cdf2:	e7b2      	b.n	800cd5a <_dtoa_r+0x1aa>
 800cdf4:	900b      	str	r0, [sp, #44]	; 0x2c
 800cdf6:	e7b1      	b.n	800cd5c <_dtoa_r+0x1ac>
 800cdf8:	9b04      	ldr	r3, [sp, #16]
 800cdfa:	9a00      	ldr	r2, [sp, #0]
 800cdfc:	1a9b      	subs	r3, r3, r2
 800cdfe:	9304      	str	r3, [sp, #16]
 800ce00:	4253      	negs	r3, r2
 800ce02:	9307      	str	r3, [sp, #28]
 800ce04:	2300      	movs	r3, #0
 800ce06:	930a      	str	r3, [sp, #40]	; 0x28
 800ce08:	e7bf      	b.n	800cd8a <_dtoa_r+0x1da>
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	9308      	str	r3, [sp, #32]
 800ce0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	dc55      	bgt.n	800cec0 <_dtoa_r+0x310>
 800ce14:	2301      	movs	r3, #1
 800ce16:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ce1a:	461a      	mov	r2, r3
 800ce1c:	9209      	str	r2, [sp, #36]	; 0x24
 800ce1e:	e00c      	b.n	800ce3a <_dtoa_r+0x28a>
 800ce20:	2301      	movs	r3, #1
 800ce22:	e7f3      	b.n	800ce0c <_dtoa_r+0x25c>
 800ce24:	2300      	movs	r3, #0
 800ce26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce28:	9308      	str	r3, [sp, #32]
 800ce2a:	9b00      	ldr	r3, [sp, #0]
 800ce2c:	4413      	add	r3, r2
 800ce2e:	9302      	str	r3, [sp, #8]
 800ce30:	3301      	adds	r3, #1
 800ce32:	2b01      	cmp	r3, #1
 800ce34:	9303      	str	r3, [sp, #12]
 800ce36:	bfb8      	it	lt
 800ce38:	2301      	movlt	r3, #1
 800ce3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	6042      	str	r2, [r0, #4]
 800ce40:	2204      	movs	r2, #4
 800ce42:	f102 0614 	add.w	r6, r2, #20
 800ce46:	429e      	cmp	r6, r3
 800ce48:	6841      	ldr	r1, [r0, #4]
 800ce4a:	d93d      	bls.n	800cec8 <_dtoa_r+0x318>
 800ce4c:	4620      	mov	r0, r4
 800ce4e:	f001 f839 	bl	800dec4 <_Balloc>
 800ce52:	9001      	str	r0, [sp, #4]
 800ce54:	2800      	cmp	r0, #0
 800ce56:	d13b      	bne.n	800ced0 <_dtoa_r+0x320>
 800ce58:	4b11      	ldr	r3, [pc, #68]	; (800cea0 <_dtoa_r+0x2f0>)
 800ce5a:	4602      	mov	r2, r0
 800ce5c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ce60:	e6c0      	b.n	800cbe4 <_dtoa_r+0x34>
 800ce62:	2301      	movs	r3, #1
 800ce64:	e7df      	b.n	800ce26 <_dtoa_r+0x276>
 800ce66:	bf00      	nop
 800ce68:	636f4361 	.word	0x636f4361
 800ce6c:	3fd287a7 	.word	0x3fd287a7
 800ce70:	8b60c8b3 	.word	0x8b60c8b3
 800ce74:	3fc68a28 	.word	0x3fc68a28
 800ce78:	509f79fb 	.word	0x509f79fb
 800ce7c:	3fd34413 	.word	0x3fd34413
 800ce80:	08010226 	.word	0x08010226
 800ce84:	0801023d 	.word	0x0801023d
 800ce88:	7ff00000 	.word	0x7ff00000
 800ce8c:	08010222 	.word	0x08010222
 800ce90:	08010219 	.word	0x08010219
 800ce94:	0801009d 	.word	0x0801009d
 800ce98:	3ff80000 	.word	0x3ff80000
 800ce9c:	080103a8 	.word	0x080103a8
 800cea0:	08010298 	.word	0x08010298
 800cea4:	2501      	movs	r5, #1
 800cea6:	2300      	movs	r3, #0
 800cea8:	9306      	str	r3, [sp, #24]
 800ceaa:	9508      	str	r5, [sp, #32]
 800ceac:	f04f 33ff 	mov.w	r3, #4294967295
 800ceb0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	2312      	movs	r3, #18
 800ceb8:	e7b0      	b.n	800ce1c <_dtoa_r+0x26c>
 800ceba:	2301      	movs	r3, #1
 800cebc:	9308      	str	r3, [sp, #32]
 800cebe:	e7f5      	b.n	800ceac <_dtoa_r+0x2fc>
 800cec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cec2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cec6:	e7b8      	b.n	800ce3a <_dtoa_r+0x28a>
 800cec8:	3101      	adds	r1, #1
 800ceca:	6041      	str	r1, [r0, #4]
 800cecc:	0052      	lsls	r2, r2, #1
 800cece:	e7b8      	b.n	800ce42 <_dtoa_r+0x292>
 800ced0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ced2:	9a01      	ldr	r2, [sp, #4]
 800ced4:	601a      	str	r2, [r3, #0]
 800ced6:	9b03      	ldr	r3, [sp, #12]
 800ced8:	2b0e      	cmp	r3, #14
 800ceda:	f200 809d 	bhi.w	800d018 <_dtoa_r+0x468>
 800cede:	2d00      	cmp	r5, #0
 800cee0:	f000 809a 	beq.w	800d018 <_dtoa_r+0x468>
 800cee4:	9b00      	ldr	r3, [sp, #0]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	dd32      	ble.n	800cf50 <_dtoa_r+0x3a0>
 800ceea:	4ab7      	ldr	r2, [pc, #732]	; (800d1c8 <_dtoa_r+0x618>)
 800ceec:	f003 030f 	and.w	r3, r3, #15
 800cef0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cef4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cef8:	9b00      	ldr	r3, [sp, #0]
 800cefa:	05d8      	lsls	r0, r3, #23
 800cefc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800cf00:	d516      	bpl.n	800cf30 <_dtoa_r+0x380>
 800cf02:	4bb2      	ldr	r3, [pc, #712]	; (800d1cc <_dtoa_r+0x61c>)
 800cf04:	ec51 0b19 	vmov	r0, r1, d9
 800cf08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cf0c:	f7f3 fc9e 	bl	800084c <__aeabi_ddiv>
 800cf10:	f007 070f 	and.w	r7, r7, #15
 800cf14:	4682      	mov	sl, r0
 800cf16:	468b      	mov	fp, r1
 800cf18:	2503      	movs	r5, #3
 800cf1a:	4eac      	ldr	r6, [pc, #688]	; (800d1cc <_dtoa_r+0x61c>)
 800cf1c:	b957      	cbnz	r7, 800cf34 <_dtoa_r+0x384>
 800cf1e:	4642      	mov	r2, r8
 800cf20:	464b      	mov	r3, r9
 800cf22:	4650      	mov	r0, sl
 800cf24:	4659      	mov	r1, fp
 800cf26:	f7f3 fc91 	bl	800084c <__aeabi_ddiv>
 800cf2a:	4682      	mov	sl, r0
 800cf2c:	468b      	mov	fp, r1
 800cf2e:	e028      	b.n	800cf82 <_dtoa_r+0x3d2>
 800cf30:	2502      	movs	r5, #2
 800cf32:	e7f2      	b.n	800cf1a <_dtoa_r+0x36a>
 800cf34:	07f9      	lsls	r1, r7, #31
 800cf36:	d508      	bpl.n	800cf4a <_dtoa_r+0x39a>
 800cf38:	4640      	mov	r0, r8
 800cf3a:	4649      	mov	r1, r9
 800cf3c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cf40:	f7f3 fb5a 	bl	80005f8 <__aeabi_dmul>
 800cf44:	3501      	adds	r5, #1
 800cf46:	4680      	mov	r8, r0
 800cf48:	4689      	mov	r9, r1
 800cf4a:	107f      	asrs	r7, r7, #1
 800cf4c:	3608      	adds	r6, #8
 800cf4e:	e7e5      	b.n	800cf1c <_dtoa_r+0x36c>
 800cf50:	f000 809b 	beq.w	800d08a <_dtoa_r+0x4da>
 800cf54:	9b00      	ldr	r3, [sp, #0]
 800cf56:	4f9d      	ldr	r7, [pc, #628]	; (800d1cc <_dtoa_r+0x61c>)
 800cf58:	425e      	negs	r6, r3
 800cf5a:	4b9b      	ldr	r3, [pc, #620]	; (800d1c8 <_dtoa_r+0x618>)
 800cf5c:	f006 020f 	and.w	r2, r6, #15
 800cf60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf68:	ec51 0b19 	vmov	r0, r1, d9
 800cf6c:	f7f3 fb44 	bl	80005f8 <__aeabi_dmul>
 800cf70:	1136      	asrs	r6, r6, #4
 800cf72:	4682      	mov	sl, r0
 800cf74:	468b      	mov	fp, r1
 800cf76:	2300      	movs	r3, #0
 800cf78:	2502      	movs	r5, #2
 800cf7a:	2e00      	cmp	r6, #0
 800cf7c:	d17a      	bne.n	800d074 <_dtoa_r+0x4c4>
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d1d3      	bne.n	800cf2a <_dtoa_r+0x37a>
 800cf82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	f000 8082 	beq.w	800d08e <_dtoa_r+0x4de>
 800cf8a:	4b91      	ldr	r3, [pc, #580]	; (800d1d0 <_dtoa_r+0x620>)
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	4650      	mov	r0, sl
 800cf90:	4659      	mov	r1, fp
 800cf92:	f7f3 fda3 	bl	8000adc <__aeabi_dcmplt>
 800cf96:	2800      	cmp	r0, #0
 800cf98:	d079      	beq.n	800d08e <_dtoa_r+0x4de>
 800cf9a:	9b03      	ldr	r3, [sp, #12]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d076      	beq.n	800d08e <_dtoa_r+0x4de>
 800cfa0:	9b02      	ldr	r3, [sp, #8]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	dd36      	ble.n	800d014 <_dtoa_r+0x464>
 800cfa6:	9b00      	ldr	r3, [sp, #0]
 800cfa8:	4650      	mov	r0, sl
 800cfaa:	4659      	mov	r1, fp
 800cfac:	1e5f      	subs	r7, r3, #1
 800cfae:	2200      	movs	r2, #0
 800cfb0:	4b88      	ldr	r3, [pc, #544]	; (800d1d4 <_dtoa_r+0x624>)
 800cfb2:	f7f3 fb21 	bl	80005f8 <__aeabi_dmul>
 800cfb6:	9e02      	ldr	r6, [sp, #8]
 800cfb8:	4682      	mov	sl, r0
 800cfba:	468b      	mov	fp, r1
 800cfbc:	3501      	adds	r5, #1
 800cfbe:	4628      	mov	r0, r5
 800cfc0:	f7f3 fab0 	bl	8000524 <__aeabi_i2d>
 800cfc4:	4652      	mov	r2, sl
 800cfc6:	465b      	mov	r3, fp
 800cfc8:	f7f3 fb16 	bl	80005f8 <__aeabi_dmul>
 800cfcc:	4b82      	ldr	r3, [pc, #520]	; (800d1d8 <_dtoa_r+0x628>)
 800cfce:	2200      	movs	r2, #0
 800cfd0:	f7f3 f95c 	bl	800028c <__adddf3>
 800cfd4:	46d0      	mov	r8, sl
 800cfd6:	46d9      	mov	r9, fp
 800cfd8:	4682      	mov	sl, r0
 800cfda:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800cfde:	2e00      	cmp	r6, #0
 800cfe0:	d158      	bne.n	800d094 <_dtoa_r+0x4e4>
 800cfe2:	4b7e      	ldr	r3, [pc, #504]	; (800d1dc <_dtoa_r+0x62c>)
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	4640      	mov	r0, r8
 800cfe8:	4649      	mov	r1, r9
 800cfea:	f7f3 f94d 	bl	8000288 <__aeabi_dsub>
 800cfee:	4652      	mov	r2, sl
 800cff0:	465b      	mov	r3, fp
 800cff2:	4680      	mov	r8, r0
 800cff4:	4689      	mov	r9, r1
 800cff6:	f7f3 fd8f 	bl	8000b18 <__aeabi_dcmpgt>
 800cffa:	2800      	cmp	r0, #0
 800cffc:	f040 8295 	bne.w	800d52a <_dtoa_r+0x97a>
 800d000:	4652      	mov	r2, sl
 800d002:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d006:	4640      	mov	r0, r8
 800d008:	4649      	mov	r1, r9
 800d00a:	f7f3 fd67 	bl	8000adc <__aeabi_dcmplt>
 800d00e:	2800      	cmp	r0, #0
 800d010:	f040 8289 	bne.w	800d526 <_dtoa_r+0x976>
 800d014:	ec5b ab19 	vmov	sl, fp, d9
 800d018:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	f2c0 8148 	blt.w	800d2b0 <_dtoa_r+0x700>
 800d020:	9a00      	ldr	r2, [sp, #0]
 800d022:	2a0e      	cmp	r2, #14
 800d024:	f300 8144 	bgt.w	800d2b0 <_dtoa_r+0x700>
 800d028:	4b67      	ldr	r3, [pc, #412]	; (800d1c8 <_dtoa_r+0x618>)
 800d02a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d02e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d034:	2b00      	cmp	r3, #0
 800d036:	f280 80d5 	bge.w	800d1e4 <_dtoa_r+0x634>
 800d03a:	9b03      	ldr	r3, [sp, #12]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	f300 80d1 	bgt.w	800d1e4 <_dtoa_r+0x634>
 800d042:	f040 826f 	bne.w	800d524 <_dtoa_r+0x974>
 800d046:	4b65      	ldr	r3, [pc, #404]	; (800d1dc <_dtoa_r+0x62c>)
 800d048:	2200      	movs	r2, #0
 800d04a:	4640      	mov	r0, r8
 800d04c:	4649      	mov	r1, r9
 800d04e:	f7f3 fad3 	bl	80005f8 <__aeabi_dmul>
 800d052:	4652      	mov	r2, sl
 800d054:	465b      	mov	r3, fp
 800d056:	f7f3 fd55 	bl	8000b04 <__aeabi_dcmpge>
 800d05a:	9e03      	ldr	r6, [sp, #12]
 800d05c:	4637      	mov	r7, r6
 800d05e:	2800      	cmp	r0, #0
 800d060:	f040 8245 	bne.w	800d4ee <_dtoa_r+0x93e>
 800d064:	9d01      	ldr	r5, [sp, #4]
 800d066:	2331      	movs	r3, #49	; 0x31
 800d068:	f805 3b01 	strb.w	r3, [r5], #1
 800d06c:	9b00      	ldr	r3, [sp, #0]
 800d06e:	3301      	adds	r3, #1
 800d070:	9300      	str	r3, [sp, #0]
 800d072:	e240      	b.n	800d4f6 <_dtoa_r+0x946>
 800d074:	07f2      	lsls	r2, r6, #31
 800d076:	d505      	bpl.n	800d084 <_dtoa_r+0x4d4>
 800d078:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d07c:	f7f3 fabc 	bl	80005f8 <__aeabi_dmul>
 800d080:	3501      	adds	r5, #1
 800d082:	2301      	movs	r3, #1
 800d084:	1076      	asrs	r6, r6, #1
 800d086:	3708      	adds	r7, #8
 800d088:	e777      	b.n	800cf7a <_dtoa_r+0x3ca>
 800d08a:	2502      	movs	r5, #2
 800d08c:	e779      	b.n	800cf82 <_dtoa_r+0x3d2>
 800d08e:	9f00      	ldr	r7, [sp, #0]
 800d090:	9e03      	ldr	r6, [sp, #12]
 800d092:	e794      	b.n	800cfbe <_dtoa_r+0x40e>
 800d094:	9901      	ldr	r1, [sp, #4]
 800d096:	4b4c      	ldr	r3, [pc, #304]	; (800d1c8 <_dtoa_r+0x618>)
 800d098:	4431      	add	r1, r6
 800d09a:	910d      	str	r1, [sp, #52]	; 0x34
 800d09c:	9908      	ldr	r1, [sp, #32]
 800d09e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d0a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d0a6:	2900      	cmp	r1, #0
 800d0a8:	d043      	beq.n	800d132 <_dtoa_r+0x582>
 800d0aa:	494d      	ldr	r1, [pc, #308]	; (800d1e0 <_dtoa_r+0x630>)
 800d0ac:	2000      	movs	r0, #0
 800d0ae:	f7f3 fbcd 	bl	800084c <__aeabi_ddiv>
 800d0b2:	4652      	mov	r2, sl
 800d0b4:	465b      	mov	r3, fp
 800d0b6:	f7f3 f8e7 	bl	8000288 <__aeabi_dsub>
 800d0ba:	9d01      	ldr	r5, [sp, #4]
 800d0bc:	4682      	mov	sl, r0
 800d0be:	468b      	mov	fp, r1
 800d0c0:	4649      	mov	r1, r9
 800d0c2:	4640      	mov	r0, r8
 800d0c4:	f7f3 fd48 	bl	8000b58 <__aeabi_d2iz>
 800d0c8:	4606      	mov	r6, r0
 800d0ca:	f7f3 fa2b 	bl	8000524 <__aeabi_i2d>
 800d0ce:	4602      	mov	r2, r0
 800d0d0:	460b      	mov	r3, r1
 800d0d2:	4640      	mov	r0, r8
 800d0d4:	4649      	mov	r1, r9
 800d0d6:	f7f3 f8d7 	bl	8000288 <__aeabi_dsub>
 800d0da:	3630      	adds	r6, #48	; 0x30
 800d0dc:	f805 6b01 	strb.w	r6, [r5], #1
 800d0e0:	4652      	mov	r2, sl
 800d0e2:	465b      	mov	r3, fp
 800d0e4:	4680      	mov	r8, r0
 800d0e6:	4689      	mov	r9, r1
 800d0e8:	f7f3 fcf8 	bl	8000adc <__aeabi_dcmplt>
 800d0ec:	2800      	cmp	r0, #0
 800d0ee:	d163      	bne.n	800d1b8 <_dtoa_r+0x608>
 800d0f0:	4642      	mov	r2, r8
 800d0f2:	464b      	mov	r3, r9
 800d0f4:	4936      	ldr	r1, [pc, #216]	; (800d1d0 <_dtoa_r+0x620>)
 800d0f6:	2000      	movs	r0, #0
 800d0f8:	f7f3 f8c6 	bl	8000288 <__aeabi_dsub>
 800d0fc:	4652      	mov	r2, sl
 800d0fe:	465b      	mov	r3, fp
 800d100:	f7f3 fcec 	bl	8000adc <__aeabi_dcmplt>
 800d104:	2800      	cmp	r0, #0
 800d106:	f040 80b5 	bne.w	800d274 <_dtoa_r+0x6c4>
 800d10a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d10c:	429d      	cmp	r5, r3
 800d10e:	d081      	beq.n	800d014 <_dtoa_r+0x464>
 800d110:	4b30      	ldr	r3, [pc, #192]	; (800d1d4 <_dtoa_r+0x624>)
 800d112:	2200      	movs	r2, #0
 800d114:	4650      	mov	r0, sl
 800d116:	4659      	mov	r1, fp
 800d118:	f7f3 fa6e 	bl	80005f8 <__aeabi_dmul>
 800d11c:	4b2d      	ldr	r3, [pc, #180]	; (800d1d4 <_dtoa_r+0x624>)
 800d11e:	4682      	mov	sl, r0
 800d120:	468b      	mov	fp, r1
 800d122:	4640      	mov	r0, r8
 800d124:	4649      	mov	r1, r9
 800d126:	2200      	movs	r2, #0
 800d128:	f7f3 fa66 	bl	80005f8 <__aeabi_dmul>
 800d12c:	4680      	mov	r8, r0
 800d12e:	4689      	mov	r9, r1
 800d130:	e7c6      	b.n	800d0c0 <_dtoa_r+0x510>
 800d132:	4650      	mov	r0, sl
 800d134:	4659      	mov	r1, fp
 800d136:	f7f3 fa5f 	bl	80005f8 <__aeabi_dmul>
 800d13a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d13c:	9d01      	ldr	r5, [sp, #4]
 800d13e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d140:	4682      	mov	sl, r0
 800d142:	468b      	mov	fp, r1
 800d144:	4649      	mov	r1, r9
 800d146:	4640      	mov	r0, r8
 800d148:	f7f3 fd06 	bl	8000b58 <__aeabi_d2iz>
 800d14c:	4606      	mov	r6, r0
 800d14e:	f7f3 f9e9 	bl	8000524 <__aeabi_i2d>
 800d152:	3630      	adds	r6, #48	; 0x30
 800d154:	4602      	mov	r2, r0
 800d156:	460b      	mov	r3, r1
 800d158:	4640      	mov	r0, r8
 800d15a:	4649      	mov	r1, r9
 800d15c:	f7f3 f894 	bl	8000288 <__aeabi_dsub>
 800d160:	f805 6b01 	strb.w	r6, [r5], #1
 800d164:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d166:	429d      	cmp	r5, r3
 800d168:	4680      	mov	r8, r0
 800d16a:	4689      	mov	r9, r1
 800d16c:	f04f 0200 	mov.w	r2, #0
 800d170:	d124      	bne.n	800d1bc <_dtoa_r+0x60c>
 800d172:	4b1b      	ldr	r3, [pc, #108]	; (800d1e0 <_dtoa_r+0x630>)
 800d174:	4650      	mov	r0, sl
 800d176:	4659      	mov	r1, fp
 800d178:	f7f3 f888 	bl	800028c <__adddf3>
 800d17c:	4602      	mov	r2, r0
 800d17e:	460b      	mov	r3, r1
 800d180:	4640      	mov	r0, r8
 800d182:	4649      	mov	r1, r9
 800d184:	f7f3 fcc8 	bl	8000b18 <__aeabi_dcmpgt>
 800d188:	2800      	cmp	r0, #0
 800d18a:	d173      	bne.n	800d274 <_dtoa_r+0x6c4>
 800d18c:	4652      	mov	r2, sl
 800d18e:	465b      	mov	r3, fp
 800d190:	4913      	ldr	r1, [pc, #76]	; (800d1e0 <_dtoa_r+0x630>)
 800d192:	2000      	movs	r0, #0
 800d194:	f7f3 f878 	bl	8000288 <__aeabi_dsub>
 800d198:	4602      	mov	r2, r0
 800d19a:	460b      	mov	r3, r1
 800d19c:	4640      	mov	r0, r8
 800d19e:	4649      	mov	r1, r9
 800d1a0:	f7f3 fc9c 	bl	8000adc <__aeabi_dcmplt>
 800d1a4:	2800      	cmp	r0, #0
 800d1a6:	f43f af35 	beq.w	800d014 <_dtoa_r+0x464>
 800d1aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d1ac:	1e6b      	subs	r3, r5, #1
 800d1ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800d1b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d1b4:	2b30      	cmp	r3, #48	; 0x30
 800d1b6:	d0f8      	beq.n	800d1aa <_dtoa_r+0x5fa>
 800d1b8:	9700      	str	r7, [sp, #0]
 800d1ba:	e049      	b.n	800d250 <_dtoa_r+0x6a0>
 800d1bc:	4b05      	ldr	r3, [pc, #20]	; (800d1d4 <_dtoa_r+0x624>)
 800d1be:	f7f3 fa1b 	bl	80005f8 <__aeabi_dmul>
 800d1c2:	4680      	mov	r8, r0
 800d1c4:	4689      	mov	r9, r1
 800d1c6:	e7bd      	b.n	800d144 <_dtoa_r+0x594>
 800d1c8:	080103a8 	.word	0x080103a8
 800d1cc:	08010380 	.word	0x08010380
 800d1d0:	3ff00000 	.word	0x3ff00000
 800d1d4:	40240000 	.word	0x40240000
 800d1d8:	401c0000 	.word	0x401c0000
 800d1dc:	40140000 	.word	0x40140000
 800d1e0:	3fe00000 	.word	0x3fe00000
 800d1e4:	9d01      	ldr	r5, [sp, #4]
 800d1e6:	4656      	mov	r6, sl
 800d1e8:	465f      	mov	r7, fp
 800d1ea:	4642      	mov	r2, r8
 800d1ec:	464b      	mov	r3, r9
 800d1ee:	4630      	mov	r0, r6
 800d1f0:	4639      	mov	r1, r7
 800d1f2:	f7f3 fb2b 	bl	800084c <__aeabi_ddiv>
 800d1f6:	f7f3 fcaf 	bl	8000b58 <__aeabi_d2iz>
 800d1fa:	4682      	mov	sl, r0
 800d1fc:	f7f3 f992 	bl	8000524 <__aeabi_i2d>
 800d200:	4642      	mov	r2, r8
 800d202:	464b      	mov	r3, r9
 800d204:	f7f3 f9f8 	bl	80005f8 <__aeabi_dmul>
 800d208:	4602      	mov	r2, r0
 800d20a:	460b      	mov	r3, r1
 800d20c:	4630      	mov	r0, r6
 800d20e:	4639      	mov	r1, r7
 800d210:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d214:	f7f3 f838 	bl	8000288 <__aeabi_dsub>
 800d218:	f805 6b01 	strb.w	r6, [r5], #1
 800d21c:	9e01      	ldr	r6, [sp, #4]
 800d21e:	9f03      	ldr	r7, [sp, #12]
 800d220:	1bae      	subs	r6, r5, r6
 800d222:	42b7      	cmp	r7, r6
 800d224:	4602      	mov	r2, r0
 800d226:	460b      	mov	r3, r1
 800d228:	d135      	bne.n	800d296 <_dtoa_r+0x6e6>
 800d22a:	f7f3 f82f 	bl	800028c <__adddf3>
 800d22e:	4642      	mov	r2, r8
 800d230:	464b      	mov	r3, r9
 800d232:	4606      	mov	r6, r0
 800d234:	460f      	mov	r7, r1
 800d236:	f7f3 fc6f 	bl	8000b18 <__aeabi_dcmpgt>
 800d23a:	b9d0      	cbnz	r0, 800d272 <_dtoa_r+0x6c2>
 800d23c:	4642      	mov	r2, r8
 800d23e:	464b      	mov	r3, r9
 800d240:	4630      	mov	r0, r6
 800d242:	4639      	mov	r1, r7
 800d244:	f7f3 fc40 	bl	8000ac8 <__aeabi_dcmpeq>
 800d248:	b110      	cbz	r0, 800d250 <_dtoa_r+0x6a0>
 800d24a:	f01a 0f01 	tst.w	sl, #1
 800d24e:	d110      	bne.n	800d272 <_dtoa_r+0x6c2>
 800d250:	4620      	mov	r0, r4
 800d252:	ee18 1a10 	vmov	r1, s16
 800d256:	f000 fe75 	bl	800df44 <_Bfree>
 800d25a:	2300      	movs	r3, #0
 800d25c:	9800      	ldr	r0, [sp, #0]
 800d25e:	702b      	strb	r3, [r5, #0]
 800d260:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d262:	3001      	adds	r0, #1
 800d264:	6018      	str	r0, [r3, #0]
 800d266:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d268:	2b00      	cmp	r3, #0
 800d26a:	f43f acf1 	beq.w	800cc50 <_dtoa_r+0xa0>
 800d26e:	601d      	str	r5, [r3, #0]
 800d270:	e4ee      	b.n	800cc50 <_dtoa_r+0xa0>
 800d272:	9f00      	ldr	r7, [sp, #0]
 800d274:	462b      	mov	r3, r5
 800d276:	461d      	mov	r5, r3
 800d278:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d27c:	2a39      	cmp	r2, #57	; 0x39
 800d27e:	d106      	bne.n	800d28e <_dtoa_r+0x6de>
 800d280:	9a01      	ldr	r2, [sp, #4]
 800d282:	429a      	cmp	r2, r3
 800d284:	d1f7      	bne.n	800d276 <_dtoa_r+0x6c6>
 800d286:	9901      	ldr	r1, [sp, #4]
 800d288:	2230      	movs	r2, #48	; 0x30
 800d28a:	3701      	adds	r7, #1
 800d28c:	700a      	strb	r2, [r1, #0]
 800d28e:	781a      	ldrb	r2, [r3, #0]
 800d290:	3201      	adds	r2, #1
 800d292:	701a      	strb	r2, [r3, #0]
 800d294:	e790      	b.n	800d1b8 <_dtoa_r+0x608>
 800d296:	4ba6      	ldr	r3, [pc, #664]	; (800d530 <_dtoa_r+0x980>)
 800d298:	2200      	movs	r2, #0
 800d29a:	f7f3 f9ad 	bl	80005f8 <__aeabi_dmul>
 800d29e:	2200      	movs	r2, #0
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	4606      	mov	r6, r0
 800d2a4:	460f      	mov	r7, r1
 800d2a6:	f7f3 fc0f 	bl	8000ac8 <__aeabi_dcmpeq>
 800d2aa:	2800      	cmp	r0, #0
 800d2ac:	d09d      	beq.n	800d1ea <_dtoa_r+0x63a>
 800d2ae:	e7cf      	b.n	800d250 <_dtoa_r+0x6a0>
 800d2b0:	9a08      	ldr	r2, [sp, #32]
 800d2b2:	2a00      	cmp	r2, #0
 800d2b4:	f000 80d7 	beq.w	800d466 <_dtoa_r+0x8b6>
 800d2b8:	9a06      	ldr	r2, [sp, #24]
 800d2ba:	2a01      	cmp	r2, #1
 800d2bc:	f300 80ba 	bgt.w	800d434 <_dtoa_r+0x884>
 800d2c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d2c2:	2a00      	cmp	r2, #0
 800d2c4:	f000 80b2 	beq.w	800d42c <_dtoa_r+0x87c>
 800d2c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d2cc:	9e07      	ldr	r6, [sp, #28]
 800d2ce:	9d04      	ldr	r5, [sp, #16]
 800d2d0:	9a04      	ldr	r2, [sp, #16]
 800d2d2:	441a      	add	r2, r3
 800d2d4:	9204      	str	r2, [sp, #16]
 800d2d6:	9a05      	ldr	r2, [sp, #20]
 800d2d8:	2101      	movs	r1, #1
 800d2da:	441a      	add	r2, r3
 800d2dc:	4620      	mov	r0, r4
 800d2de:	9205      	str	r2, [sp, #20]
 800d2e0:	f000 ff32 	bl	800e148 <__i2b>
 800d2e4:	4607      	mov	r7, r0
 800d2e6:	2d00      	cmp	r5, #0
 800d2e8:	dd0c      	ble.n	800d304 <_dtoa_r+0x754>
 800d2ea:	9b05      	ldr	r3, [sp, #20]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	dd09      	ble.n	800d304 <_dtoa_r+0x754>
 800d2f0:	42ab      	cmp	r3, r5
 800d2f2:	9a04      	ldr	r2, [sp, #16]
 800d2f4:	bfa8      	it	ge
 800d2f6:	462b      	movge	r3, r5
 800d2f8:	1ad2      	subs	r2, r2, r3
 800d2fa:	9204      	str	r2, [sp, #16]
 800d2fc:	9a05      	ldr	r2, [sp, #20]
 800d2fe:	1aed      	subs	r5, r5, r3
 800d300:	1ad3      	subs	r3, r2, r3
 800d302:	9305      	str	r3, [sp, #20]
 800d304:	9b07      	ldr	r3, [sp, #28]
 800d306:	b31b      	cbz	r3, 800d350 <_dtoa_r+0x7a0>
 800d308:	9b08      	ldr	r3, [sp, #32]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	f000 80af 	beq.w	800d46e <_dtoa_r+0x8be>
 800d310:	2e00      	cmp	r6, #0
 800d312:	dd13      	ble.n	800d33c <_dtoa_r+0x78c>
 800d314:	4639      	mov	r1, r7
 800d316:	4632      	mov	r2, r6
 800d318:	4620      	mov	r0, r4
 800d31a:	f000 ffd5 	bl	800e2c8 <__pow5mult>
 800d31e:	ee18 2a10 	vmov	r2, s16
 800d322:	4601      	mov	r1, r0
 800d324:	4607      	mov	r7, r0
 800d326:	4620      	mov	r0, r4
 800d328:	f000 ff24 	bl	800e174 <__multiply>
 800d32c:	ee18 1a10 	vmov	r1, s16
 800d330:	4680      	mov	r8, r0
 800d332:	4620      	mov	r0, r4
 800d334:	f000 fe06 	bl	800df44 <_Bfree>
 800d338:	ee08 8a10 	vmov	s16, r8
 800d33c:	9b07      	ldr	r3, [sp, #28]
 800d33e:	1b9a      	subs	r2, r3, r6
 800d340:	d006      	beq.n	800d350 <_dtoa_r+0x7a0>
 800d342:	ee18 1a10 	vmov	r1, s16
 800d346:	4620      	mov	r0, r4
 800d348:	f000 ffbe 	bl	800e2c8 <__pow5mult>
 800d34c:	ee08 0a10 	vmov	s16, r0
 800d350:	2101      	movs	r1, #1
 800d352:	4620      	mov	r0, r4
 800d354:	f000 fef8 	bl	800e148 <__i2b>
 800d358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	4606      	mov	r6, r0
 800d35e:	f340 8088 	ble.w	800d472 <_dtoa_r+0x8c2>
 800d362:	461a      	mov	r2, r3
 800d364:	4601      	mov	r1, r0
 800d366:	4620      	mov	r0, r4
 800d368:	f000 ffae 	bl	800e2c8 <__pow5mult>
 800d36c:	9b06      	ldr	r3, [sp, #24]
 800d36e:	2b01      	cmp	r3, #1
 800d370:	4606      	mov	r6, r0
 800d372:	f340 8081 	ble.w	800d478 <_dtoa_r+0x8c8>
 800d376:	f04f 0800 	mov.w	r8, #0
 800d37a:	6933      	ldr	r3, [r6, #16]
 800d37c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d380:	6918      	ldr	r0, [r3, #16]
 800d382:	f000 fe91 	bl	800e0a8 <__hi0bits>
 800d386:	f1c0 0020 	rsb	r0, r0, #32
 800d38a:	9b05      	ldr	r3, [sp, #20]
 800d38c:	4418      	add	r0, r3
 800d38e:	f010 001f 	ands.w	r0, r0, #31
 800d392:	f000 8092 	beq.w	800d4ba <_dtoa_r+0x90a>
 800d396:	f1c0 0320 	rsb	r3, r0, #32
 800d39a:	2b04      	cmp	r3, #4
 800d39c:	f340 808a 	ble.w	800d4b4 <_dtoa_r+0x904>
 800d3a0:	f1c0 001c 	rsb	r0, r0, #28
 800d3a4:	9b04      	ldr	r3, [sp, #16]
 800d3a6:	4403      	add	r3, r0
 800d3a8:	9304      	str	r3, [sp, #16]
 800d3aa:	9b05      	ldr	r3, [sp, #20]
 800d3ac:	4403      	add	r3, r0
 800d3ae:	4405      	add	r5, r0
 800d3b0:	9305      	str	r3, [sp, #20]
 800d3b2:	9b04      	ldr	r3, [sp, #16]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	dd07      	ble.n	800d3c8 <_dtoa_r+0x818>
 800d3b8:	ee18 1a10 	vmov	r1, s16
 800d3bc:	461a      	mov	r2, r3
 800d3be:	4620      	mov	r0, r4
 800d3c0:	f000 ffdc 	bl	800e37c <__lshift>
 800d3c4:	ee08 0a10 	vmov	s16, r0
 800d3c8:	9b05      	ldr	r3, [sp, #20]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	dd05      	ble.n	800d3da <_dtoa_r+0x82a>
 800d3ce:	4631      	mov	r1, r6
 800d3d0:	461a      	mov	r2, r3
 800d3d2:	4620      	mov	r0, r4
 800d3d4:	f000 ffd2 	bl	800e37c <__lshift>
 800d3d8:	4606      	mov	r6, r0
 800d3da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d06e      	beq.n	800d4be <_dtoa_r+0x90e>
 800d3e0:	ee18 0a10 	vmov	r0, s16
 800d3e4:	4631      	mov	r1, r6
 800d3e6:	f001 f839 	bl	800e45c <__mcmp>
 800d3ea:	2800      	cmp	r0, #0
 800d3ec:	da67      	bge.n	800d4be <_dtoa_r+0x90e>
 800d3ee:	9b00      	ldr	r3, [sp, #0]
 800d3f0:	3b01      	subs	r3, #1
 800d3f2:	ee18 1a10 	vmov	r1, s16
 800d3f6:	9300      	str	r3, [sp, #0]
 800d3f8:	220a      	movs	r2, #10
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	4620      	mov	r0, r4
 800d3fe:	f000 fdc3 	bl	800df88 <__multadd>
 800d402:	9b08      	ldr	r3, [sp, #32]
 800d404:	ee08 0a10 	vmov	s16, r0
 800d408:	2b00      	cmp	r3, #0
 800d40a:	f000 81b1 	beq.w	800d770 <_dtoa_r+0xbc0>
 800d40e:	2300      	movs	r3, #0
 800d410:	4639      	mov	r1, r7
 800d412:	220a      	movs	r2, #10
 800d414:	4620      	mov	r0, r4
 800d416:	f000 fdb7 	bl	800df88 <__multadd>
 800d41a:	9b02      	ldr	r3, [sp, #8]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	4607      	mov	r7, r0
 800d420:	f300 808e 	bgt.w	800d540 <_dtoa_r+0x990>
 800d424:	9b06      	ldr	r3, [sp, #24]
 800d426:	2b02      	cmp	r3, #2
 800d428:	dc51      	bgt.n	800d4ce <_dtoa_r+0x91e>
 800d42a:	e089      	b.n	800d540 <_dtoa_r+0x990>
 800d42c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d42e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d432:	e74b      	b.n	800d2cc <_dtoa_r+0x71c>
 800d434:	9b03      	ldr	r3, [sp, #12]
 800d436:	1e5e      	subs	r6, r3, #1
 800d438:	9b07      	ldr	r3, [sp, #28]
 800d43a:	42b3      	cmp	r3, r6
 800d43c:	bfbf      	itttt	lt
 800d43e:	9b07      	ldrlt	r3, [sp, #28]
 800d440:	9607      	strlt	r6, [sp, #28]
 800d442:	1af2      	sublt	r2, r6, r3
 800d444:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d446:	bfb6      	itet	lt
 800d448:	189b      	addlt	r3, r3, r2
 800d44a:	1b9e      	subge	r6, r3, r6
 800d44c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d44e:	9b03      	ldr	r3, [sp, #12]
 800d450:	bfb8      	it	lt
 800d452:	2600      	movlt	r6, #0
 800d454:	2b00      	cmp	r3, #0
 800d456:	bfb7      	itett	lt
 800d458:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d45c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d460:	1a9d      	sublt	r5, r3, r2
 800d462:	2300      	movlt	r3, #0
 800d464:	e734      	b.n	800d2d0 <_dtoa_r+0x720>
 800d466:	9e07      	ldr	r6, [sp, #28]
 800d468:	9d04      	ldr	r5, [sp, #16]
 800d46a:	9f08      	ldr	r7, [sp, #32]
 800d46c:	e73b      	b.n	800d2e6 <_dtoa_r+0x736>
 800d46e:	9a07      	ldr	r2, [sp, #28]
 800d470:	e767      	b.n	800d342 <_dtoa_r+0x792>
 800d472:	9b06      	ldr	r3, [sp, #24]
 800d474:	2b01      	cmp	r3, #1
 800d476:	dc18      	bgt.n	800d4aa <_dtoa_r+0x8fa>
 800d478:	f1ba 0f00 	cmp.w	sl, #0
 800d47c:	d115      	bne.n	800d4aa <_dtoa_r+0x8fa>
 800d47e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d482:	b993      	cbnz	r3, 800d4aa <_dtoa_r+0x8fa>
 800d484:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d488:	0d1b      	lsrs	r3, r3, #20
 800d48a:	051b      	lsls	r3, r3, #20
 800d48c:	b183      	cbz	r3, 800d4b0 <_dtoa_r+0x900>
 800d48e:	9b04      	ldr	r3, [sp, #16]
 800d490:	3301      	adds	r3, #1
 800d492:	9304      	str	r3, [sp, #16]
 800d494:	9b05      	ldr	r3, [sp, #20]
 800d496:	3301      	adds	r3, #1
 800d498:	9305      	str	r3, [sp, #20]
 800d49a:	f04f 0801 	mov.w	r8, #1
 800d49e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	f47f af6a 	bne.w	800d37a <_dtoa_r+0x7ca>
 800d4a6:	2001      	movs	r0, #1
 800d4a8:	e76f      	b.n	800d38a <_dtoa_r+0x7da>
 800d4aa:	f04f 0800 	mov.w	r8, #0
 800d4ae:	e7f6      	b.n	800d49e <_dtoa_r+0x8ee>
 800d4b0:	4698      	mov	r8, r3
 800d4b2:	e7f4      	b.n	800d49e <_dtoa_r+0x8ee>
 800d4b4:	f43f af7d 	beq.w	800d3b2 <_dtoa_r+0x802>
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	301c      	adds	r0, #28
 800d4bc:	e772      	b.n	800d3a4 <_dtoa_r+0x7f4>
 800d4be:	9b03      	ldr	r3, [sp, #12]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	dc37      	bgt.n	800d534 <_dtoa_r+0x984>
 800d4c4:	9b06      	ldr	r3, [sp, #24]
 800d4c6:	2b02      	cmp	r3, #2
 800d4c8:	dd34      	ble.n	800d534 <_dtoa_r+0x984>
 800d4ca:	9b03      	ldr	r3, [sp, #12]
 800d4cc:	9302      	str	r3, [sp, #8]
 800d4ce:	9b02      	ldr	r3, [sp, #8]
 800d4d0:	b96b      	cbnz	r3, 800d4ee <_dtoa_r+0x93e>
 800d4d2:	4631      	mov	r1, r6
 800d4d4:	2205      	movs	r2, #5
 800d4d6:	4620      	mov	r0, r4
 800d4d8:	f000 fd56 	bl	800df88 <__multadd>
 800d4dc:	4601      	mov	r1, r0
 800d4de:	4606      	mov	r6, r0
 800d4e0:	ee18 0a10 	vmov	r0, s16
 800d4e4:	f000 ffba 	bl	800e45c <__mcmp>
 800d4e8:	2800      	cmp	r0, #0
 800d4ea:	f73f adbb 	bgt.w	800d064 <_dtoa_r+0x4b4>
 800d4ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4f0:	9d01      	ldr	r5, [sp, #4]
 800d4f2:	43db      	mvns	r3, r3
 800d4f4:	9300      	str	r3, [sp, #0]
 800d4f6:	f04f 0800 	mov.w	r8, #0
 800d4fa:	4631      	mov	r1, r6
 800d4fc:	4620      	mov	r0, r4
 800d4fe:	f000 fd21 	bl	800df44 <_Bfree>
 800d502:	2f00      	cmp	r7, #0
 800d504:	f43f aea4 	beq.w	800d250 <_dtoa_r+0x6a0>
 800d508:	f1b8 0f00 	cmp.w	r8, #0
 800d50c:	d005      	beq.n	800d51a <_dtoa_r+0x96a>
 800d50e:	45b8      	cmp	r8, r7
 800d510:	d003      	beq.n	800d51a <_dtoa_r+0x96a>
 800d512:	4641      	mov	r1, r8
 800d514:	4620      	mov	r0, r4
 800d516:	f000 fd15 	bl	800df44 <_Bfree>
 800d51a:	4639      	mov	r1, r7
 800d51c:	4620      	mov	r0, r4
 800d51e:	f000 fd11 	bl	800df44 <_Bfree>
 800d522:	e695      	b.n	800d250 <_dtoa_r+0x6a0>
 800d524:	2600      	movs	r6, #0
 800d526:	4637      	mov	r7, r6
 800d528:	e7e1      	b.n	800d4ee <_dtoa_r+0x93e>
 800d52a:	9700      	str	r7, [sp, #0]
 800d52c:	4637      	mov	r7, r6
 800d52e:	e599      	b.n	800d064 <_dtoa_r+0x4b4>
 800d530:	40240000 	.word	0x40240000
 800d534:	9b08      	ldr	r3, [sp, #32]
 800d536:	2b00      	cmp	r3, #0
 800d538:	f000 80ca 	beq.w	800d6d0 <_dtoa_r+0xb20>
 800d53c:	9b03      	ldr	r3, [sp, #12]
 800d53e:	9302      	str	r3, [sp, #8]
 800d540:	2d00      	cmp	r5, #0
 800d542:	dd05      	ble.n	800d550 <_dtoa_r+0x9a0>
 800d544:	4639      	mov	r1, r7
 800d546:	462a      	mov	r2, r5
 800d548:	4620      	mov	r0, r4
 800d54a:	f000 ff17 	bl	800e37c <__lshift>
 800d54e:	4607      	mov	r7, r0
 800d550:	f1b8 0f00 	cmp.w	r8, #0
 800d554:	d05b      	beq.n	800d60e <_dtoa_r+0xa5e>
 800d556:	6879      	ldr	r1, [r7, #4]
 800d558:	4620      	mov	r0, r4
 800d55a:	f000 fcb3 	bl	800dec4 <_Balloc>
 800d55e:	4605      	mov	r5, r0
 800d560:	b928      	cbnz	r0, 800d56e <_dtoa_r+0x9be>
 800d562:	4b87      	ldr	r3, [pc, #540]	; (800d780 <_dtoa_r+0xbd0>)
 800d564:	4602      	mov	r2, r0
 800d566:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d56a:	f7ff bb3b 	b.w	800cbe4 <_dtoa_r+0x34>
 800d56e:	693a      	ldr	r2, [r7, #16]
 800d570:	3202      	adds	r2, #2
 800d572:	0092      	lsls	r2, r2, #2
 800d574:	f107 010c 	add.w	r1, r7, #12
 800d578:	300c      	adds	r0, #12
 800d57a:	f000 fc95 	bl	800dea8 <memcpy>
 800d57e:	2201      	movs	r2, #1
 800d580:	4629      	mov	r1, r5
 800d582:	4620      	mov	r0, r4
 800d584:	f000 fefa 	bl	800e37c <__lshift>
 800d588:	9b01      	ldr	r3, [sp, #4]
 800d58a:	f103 0901 	add.w	r9, r3, #1
 800d58e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d592:	4413      	add	r3, r2
 800d594:	9305      	str	r3, [sp, #20]
 800d596:	f00a 0301 	and.w	r3, sl, #1
 800d59a:	46b8      	mov	r8, r7
 800d59c:	9304      	str	r3, [sp, #16]
 800d59e:	4607      	mov	r7, r0
 800d5a0:	4631      	mov	r1, r6
 800d5a2:	ee18 0a10 	vmov	r0, s16
 800d5a6:	f7ff fa77 	bl	800ca98 <quorem>
 800d5aa:	4641      	mov	r1, r8
 800d5ac:	9002      	str	r0, [sp, #8]
 800d5ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d5b2:	ee18 0a10 	vmov	r0, s16
 800d5b6:	f000 ff51 	bl	800e45c <__mcmp>
 800d5ba:	463a      	mov	r2, r7
 800d5bc:	9003      	str	r0, [sp, #12]
 800d5be:	4631      	mov	r1, r6
 800d5c0:	4620      	mov	r0, r4
 800d5c2:	f000 ff67 	bl	800e494 <__mdiff>
 800d5c6:	68c2      	ldr	r2, [r0, #12]
 800d5c8:	f109 3bff 	add.w	fp, r9, #4294967295
 800d5cc:	4605      	mov	r5, r0
 800d5ce:	bb02      	cbnz	r2, 800d612 <_dtoa_r+0xa62>
 800d5d0:	4601      	mov	r1, r0
 800d5d2:	ee18 0a10 	vmov	r0, s16
 800d5d6:	f000 ff41 	bl	800e45c <__mcmp>
 800d5da:	4602      	mov	r2, r0
 800d5dc:	4629      	mov	r1, r5
 800d5de:	4620      	mov	r0, r4
 800d5e0:	9207      	str	r2, [sp, #28]
 800d5e2:	f000 fcaf 	bl	800df44 <_Bfree>
 800d5e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d5ea:	ea43 0102 	orr.w	r1, r3, r2
 800d5ee:	9b04      	ldr	r3, [sp, #16]
 800d5f0:	430b      	orrs	r3, r1
 800d5f2:	464d      	mov	r5, r9
 800d5f4:	d10f      	bne.n	800d616 <_dtoa_r+0xa66>
 800d5f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d5fa:	d02a      	beq.n	800d652 <_dtoa_r+0xaa2>
 800d5fc:	9b03      	ldr	r3, [sp, #12]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	dd02      	ble.n	800d608 <_dtoa_r+0xa58>
 800d602:	9b02      	ldr	r3, [sp, #8]
 800d604:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d608:	f88b a000 	strb.w	sl, [fp]
 800d60c:	e775      	b.n	800d4fa <_dtoa_r+0x94a>
 800d60e:	4638      	mov	r0, r7
 800d610:	e7ba      	b.n	800d588 <_dtoa_r+0x9d8>
 800d612:	2201      	movs	r2, #1
 800d614:	e7e2      	b.n	800d5dc <_dtoa_r+0xa2c>
 800d616:	9b03      	ldr	r3, [sp, #12]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	db04      	blt.n	800d626 <_dtoa_r+0xa76>
 800d61c:	9906      	ldr	r1, [sp, #24]
 800d61e:	430b      	orrs	r3, r1
 800d620:	9904      	ldr	r1, [sp, #16]
 800d622:	430b      	orrs	r3, r1
 800d624:	d122      	bne.n	800d66c <_dtoa_r+0xabc>
 800d626:	2a00      	cmp	r2, #0
 800d628:	ddee      	ble.n	800d608 <_dtoa_r+0xa58>
 800d62a:	ee18 1a10 	vmov	r1, s16
 800d62e:	2201      	movs	r2, #1
 800d630:	4620      	mov	r0, r4
 800d632:	f000 fea3 	bl	800e37c <__lshift>
 800d636:	4631      	mov	r1, r6
 800d638:	ee08 0a10 	vmov	s16, r0
 800d63c:	f000 ff0e 	bl	800e45c <__mcmp>
 800d640:	2800      	cmp	r0, #0
 800d642:	dc03      	bgt.n	800d64c <_dtoa_r+0xa9c>
 800d644:	d1e0      	bne.n	800d608 <_dtoa_r+0xa58>
 800d646:	f01a 0f01 	tst.w	sl, #1
 800d64a:	d0dd      	beq.n	800d608 <_dtoa_r+0xa58>
 800d64c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d650:	d1d7      	bne.n	800d602 <_dtoa_r+0xa52>
 800d652:	2339      	movs	r3, #57	; 0x39
 800d654:	f88b 3000 	strb.w	r3, [fp]
 800d658:	462b      	mov	r3, r5
 800d65a:	461d      	mov	r5, r3
 800d65c:	3b01      	subs	r3, #1
 800d65e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d662:	2a39      	cmp	r2, #57	; 0x39
 800d664:	d071      	beq.n	800d74a <_dtoa_r+0xb9a>
 800d666:	3201      	adds	r2, #1
 800d668:	701a      	strb	r2, [r3, #0]
 800d66a:	e746      	b.n	800d4fa <_dtoa_r+0x94a>
 800d66c:	2a00      	cmp	r2, #0
 800d66e:	dd07      	ble.n	800d680 <_dtoa_r+0xad0>
 800d670:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d674:	d0ed      	beq.n	800d652 <_dtoa_r+0xaa2>
 800d676:	f10a 0301 	add.w	r3, sl, #1
 800d67a:	f88b 3000 	strb.w	r3, [fp]
 800d67e:	e73c      	b.n	800d4fa <_dtoa_r+0x94a>
 800d680:	9b05      	ldr	r3, [sp, #20]
 800d682:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d686:	4599      	cmp	r9, r3
 800d688:	d047      	beq.n	800d71a <_dtoa_r+0xb6a>
 800d68a:	ee18 1a10 	vmov	r1, s16
 800d68e:	2300      	movs	r3, #0
 800d690:	220a      	movs	r2, #10
 800d692:	4620      	mov	r0, r4
 800d694:	f000 fc78 	bl	800df88 <__multadd>
 800d698:	45b8      	cmp	r8, r7
 800d69a:	ee08 0a10 	vmov	s16, r0
 800d69e:	f04f 0300 	mov.w	r3, #0
 800d6a2:	f04f 020a 	mov.w	r2, #10
 800d6a6:	4641      	mov	r1, r8
 800d6a8:	4620      	mov	r0, r4
 800d6aa:	d106      	bne.n	800d6ba <_dtoa_r+0xb0a>
 800d6ac:	f000 fc6c 	bl	800df88 <__multadd>
 800d6b0:	4680      	mov	r8, r0
 800d6b2:	4607      	mov	r7, r0
 800d6b4:	f109 0901 	add.w	r9, r9, #1
 800d6b8:	e772      	b.n	800d5a0 <_dtoa_r+0x9f0>
 800d6ba:	f000 fc65 	bl	800df88 <__multadd>
 800d6be:	4639      	mov	r1, r7
 800d6c0:	4680      	mov	r8, r0
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	220a      	movs	r2, #10
 800d6c6:	4620      	mov	r0, r4
 800d6c8:	f000 fc5e 	bl	800df88 <__multadd>
 800d6cc:	4607      	mov	r7, r0
 800d6ce:	e7f1      	b.n	800d6b4 <_dtoa_r+0xb04>
 800d6d0:	9b03      	ldr	r3, [sp, #12]
 800d6d2:	9302      	str	r3, [sp, #8]
 800d6d4:	9d01      	ldr	r5, [sp, #4]
 800d6d6:	ee18 0a10 	vmov	r0, s16
 800d6da:	4631      	mov	r1, r6
 800d6dc:	f7ff f9dc 	bl	800ca98 <quorem>
 800d6e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d6e4:	9b01      	ldr	r3, [sp, #4]
 800d6e6:	f805 ab01 	strb.w	sl, [r5], #1
 800d6ea:	1aea      	subs	r2, r5, r3
 800d6ec:	9b02      	ldr	r3, [sp, #8]
 800d6ee:	4293      	cmp	r3, r2
 800d6f0:	dd09      	ble.n	800d706 <_dtoa_r+0xb56>
 800d6f2:	ee18 1a10 	vmov	r1, s16
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	220a      	movs	r2, #10
 800d6fa:	4620      	mov	r0, r4
 800d6fc:	f000 fc44 	bl	800df88 <__multadd>
 800d700:	ee08 0a10 	vmov	s16, r0
 800d704:	e7e7      	b.n	800d6d6 <_dtoa_r+0xb26>
 800d706:	9b02      	ldr	r3, [sp, #8]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	bfc8      	it	gt
 800d70c:	461d      	movgt	r5, r3
 800d70e:	9b01      	ldr	r3, [sp, #4]
 800d710:	bfd8      	it	le
 800d712:	2501      	movle	r5, #1
 800d714:	441d      	add	r5, r3
 800d716:	f04f 0800 	mov.w	r8, #0
 800d71a:	ee18 1a10 	vmov	r1, s16
 800d71e:	2201      	movs	r2, #1
 800d720:	4620      	mov	r0, r4
 800d722:	f000 fe2b 	bl	800e37c <__lshift>
 800d726:	4631      	mov	r1, r6
 800d728:	ee08 0a10 	vmov	s16, r0
 800d72c:	f000 fe96 	bl	800e45c <__mcmp>
 800d730:	2800      	cmp	r0, #0
 800d732:	dc91      	bgt.n	800d658 <_dtoa_r+0xaa8>
 800d734:	d102      	bne.n	800d73c <_dtoa_r+0xb8c>
 800d736:	f01a 0f01 	tst.w	sl, #1
 800d73a:	d18d      	bne.n	800d658 <_dtoa_r+0xaa8>
 800d73c:	462b      	mov	r3, r5
 800d73e:	461d      	mov	r5, r3
 800d740:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d744:	2a30      	cmp	r2, #48	; 0x30
 800d746:	d0fa      	beq.n	800d73e <_dtoa_r+0xb8e>
 800d748:	e6d7      	b.n	800d4fa <_dtoa_r+0x94a>
 800d74a:	9a01      	ldr	r2, [sp, #4]
 800d74c:	429a      	cmp	r2, r3
 800d74e:	d184      	bne.n	800d65a <_dtoa_r+0xaaa>
 800d750:	9b00      	ldr	r3, [sp, #0]
 800d752:	3301      	adds	r3, #1
 800d754:	9300      	str	r3, [sp, #0]
 800d756:	2331      	movs	r3, #49	; 0x31
 800d758:	7013      	strb	r3, [r2, #0]
 800d75a:	e6ce      	b.n	800d4fa <_dtoa_r+0x94a>
 800d75c:	4b09      	ldr	r3, [pc, #36]	; (800d784 <_dtoa_r+0xbd4>)
 800d75e:	f7ff ba95 	b.w	800cc8c <_dtoa_r+0xdc>
 800d762:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d764:	2b00      	cmp	r3, #0
 800d766:	f47f aa6e 	bne.w	800cc46 <_dtoa_r+0x96>
 800d76a:	4b07      	ldr	r3, [pc, #28]	; (800d788 <_dtoa_r+0xbd8>)
 800d76c:	f7ff ba8e 	b.w	800cc8c <_dtoa_r+0xdc>
 800d770:	9b02      	ldr	r3, [sp, #8]
 800d772:	2b00      	cmp	r3, #0
 800d774:	dcae      	bgt.n	800d6d4 <_dtoa_r+0xb24>
 800d776:	9b06      	ldr	r3, [sp, #24]
 800d778:	2b02      	cmp	r3, #2
 800d77a:	f73f aea8 	bgt.w	800d4ce <_dtoa_r+0x91e>
 800d77e:	e7a9      	b.n	800d6d4 <_dtoa_r+0xb24>
 800d780:	08010298 	.word	0x08010298
 800d784:	0801009c 	.word	0x0801009c
 800d788:	08010219 	.word	0x08010219

0800d78c <rshift>:
 800d78c:	6903      	ldr	r3, [r0, #16]
 800d78e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d792:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d796:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d79a:	f100 0414 	add.w	r4, r0, #20
 800d79e:	dd45      	ble.n	800d82c <rshift+0xa0>
 800d7a0:	f011 011f 	ands.w	r1, r1, #31
 800d7a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d7a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d7ac:	d10c      	bne.n	800d7c8 <rshift+0x3c>
 800d7ae:	f100 0710 	add.w	r7, r0, #16
 800d7b2:	4629      	mov	r1, r5
 800d7b4:	42b1      	cmp	r1, r6
 800d7b6:	d334      	bcc.n	800d822 <rshift+0x96>
 800d7b8:	1a9b      	subs	r3, r3, r2
 800d7ba:	009b      	lsls	r3, r3, #2
 800d7bc:	1eea      	subs	r2, r5, #3
 800d7be:	4296      	cmp	r6, r2
 800d7c0:	bf38      	it	cc
 800d7c2:	2300      	movcc	r3, #0
 800d7c4:	4423      	add	r3, r4
 800d7c6:	e015      	b.n	800d7f4 <rshift+0x68>
 800d7c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d7cc:	f1c1 0820 	rsb	r8, r1, #32
 800d7d0:	40cf      	lsrs	r7, r1
 800d7d2:	f105 0e04 	add.w	lr, r5, #4
 800d7d6:	46a1      	mov	r9, r4
 800d7d8:	4576      	cmp	r6, lr
 800d7da:	46f4      	mov	ip, lr
 800d7dc:	d815      	bhi.n	800d80a <rshift+0x7e>
 800d7de:	1a9a      	subs	r2, r3, r2
 800d7e0:	0092      	lsls	r2, r2, #2
 800d7e2:	3a04      	subs	r2, #4
 800d7e4:	3501      	adds	r5, #1
 800d7e6:	42ae      	cmp	r6, r5
 800d7e8:	bf38      	it	cc
 800d7ea:	2200      	movcc	r2, #0
 800d7ec:	18a3      	adds	r3, r4, r2
 800d7ee:	50a7      	str	r7, [r4, r2]
 800d7f0:	b107      	cbz	r7, 800d7f4 <rshift+0x68>
 800d7f2:	3304      	adds	r3, #4
 800d7f4:	1b1a      	subs	r2, r3, r4
 800d7f6:	42a3      	cmp	r3, r4
 800d7f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d7fc:	bf08      	it	eq
 800d7fe:	2300      	moveq	r3, #0
 800d800:	6102      	str	r2, [r0, #16]
 800d802:	bf08      	it	eq
 800d804:	6143      	streq	r3, [r0, #20]
 800d806:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d80a:	f8dc c000 	ldr.w	ip, [ip]
 800d80e:	fa0c fc08 	lsl.w	ip, ip, r8
 800d812:	ea4c 0707 	orr.w	r7, ip, r7
 800d816:	f849 7b04 	str.w	r7, [r9], #4
 800d81a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d81e:	40cf      	lsrs	r7, r1
 800d820:	e7da      	b.n	800d7d8 <rshift+0x4c>
 800d822:	f851 cb04 	ldr.w	ip, [r1], #4
 800d826:	f847 cf04 	str.w	ip, [r7, #4]!
 800d82a:	e7c3      	b.n	800d7b4 <rshift+0x28>
 800d82c:	4623      	mov	r3, r4
 800d82e:	e7e1      	b.n	800d7f4 <rshift+0x68>

0800d830 <__hexdig_fun>:
 800d830:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d834:	2b09      	cmp	r3, #9
 800d836:	d802      	bhi.n	800d83e <__hexdig_fun+0xe>
 800d838:	3820      	subs	r0, #32
 800d83a:	b2c0      	uxtb	r0, r0
 800d83c:	4770      	bx	lr
 800d83e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d842:	2b05      	cmp	r3, #5
 800d844:	d801      	bhi.n	800d84a <__hexdig_fun+0x1a>
 800d846:	3847      	subs	r0, #71	; 0x47
 800d848:	e7f7      	b.n	800d83a <__hexdig_fun+0xa>
 800d84a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d84e:	2b05      	cmp	r3, #5
 800d850:	d801      	bhi.n	800d856 <__hexdig_fun+0x26>
 800d852:	3827      	subs	r0, #39	; 0x27
 800d854:	e7f1      	b.n	800d83a <__hexdig_fun+0xa>
 800d856:	2000      	movs	r0, #0
 800d858:	4770      	bx	lr
	...

0800d85c <__gethex>:
 800d85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d860:	ed2d 8b02 	vpush	{d8}
 800d864:	b089      	sub	sp, #36	; 0x24
 800d866:	ee08 0a10 	vmov	s16, r0
 800d86a:	9304      	str	r3, [sp, #16]
 800d86c:	4bb4      	ldr	r3, [pc, #720]	; (800db40 <__gethex+0x2e4>)
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	9301      	str	r3, [sp, #4]
 800d872:	4618      	mov	r0, r3
 800d874:	468b      	mov	fp, r1
 800d876:	4690      	mov	r8, r2
 800d878:	f7f2 fcaa 	bl	80001d0 <strlen>
 800d87c:	9b01      	ldr	r3, [sp, #4]
 800d87e:	f8db 2000 	ldr.w	r2, [fp]
 800d882:	4403      	add	r3, r0
 800d884:	4682      	mov	sl, r0
 800d886:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d88a:	9305      	str	r3, [sp, #20]
 800d88c:	1c93      	adds	r3, r2, #2
 800d88e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d892:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d896:	32fe      	adds	r2, #254	; 0xfe
 800d898:	18d1      	adds	r1, r2, r3
 800d89a:	461f      	mov	r7, r3
 800d89c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d8a0:	9100      	str	r1, [sp, #0]
 800d8a2:	2830      	cmp	r0, #48	; 0x30
 800d8a4:	d0f8      	beq.n	800d898 <__gethex+0x3c>
 800d8a6:	f7ff ffc3 	bl	800d830 <__hexdig_fun>
 800d8aa:	4604      	mov	r4, r0
 800d8ac:	2800      	cmp	r0, #0
 800d8ae:	d13a      	bne.n	800d926 <__gethex+0xca>
 800d8b0:	9901      	ldr	r1, [sp, #4]
 800d8b2:	4652      	mov	r2, sl
 800d8b4:	4638      	mov	r0, r7
 800d8b6:	f001 fa33 	bl	800ed20 <strncmp>
 800d8ba:	4605      	mov	r5, r0
 800d8bc:	2800      	cmp	r0, #0
 800d8be:	d168      	bne.n	800d992 <__gethex+0x136>
 800d8c0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d8c4:	eb07 060a 	add.w	r6, r7, sl
 800d8c8:	f7ff ffb2 	bl	800d830 <__hexdig_fun>
 800d8cc:	2800      	cmp	r0, #0
 800d8ce:	d062      	beq.n	800d996 <__gethex+0x13a>
 800d8d0:	4633      	mov	r3, r6
 800d8d2:	7818      	ldrb	r0, [r3, #0]
 800d8d4:	2830      	cmp	r0, #48	; 0x30
 800d8d6:	461f      	mov	r7, r3
 800d8d8:	f103 0301 	add.w	r3, r3, #1
 800d8dc:	d0f9      	beq.n	800d8d2 <__gethex+0x76>
 800d8de:	f7ff ffa7 	bl	800d830 <__hexdig_fun>
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	fab0 f480 	clz	r4, r0
 800d8e8:	0964      	lsrs	r4, r4, #5
 800d8ea:	4635      	mov	r5, r6
 800d8ec:	9300      	str	r3, [sp, #0]
 800d8ee:	463a      	mov	r2, r7
 800d8f0:	4616      	mov	r6, r2
 800d8f2:	3201      	adds	r2, #1
 800d8f4:	7830      	ldrb	r0, [r6, #0]
 800d8f6:	f7ff ff9b 	bl	800d830 <__hexdig_fun>
 800d8fa:	2800      	cmp	r0, #0
 800d8fc:	d1f8      	bne.n	800d8f0 <__gethex+0x94>
 800d8fe:	9901      	ldr	r1, [sp, #4]
 800d900:	4652      	mov	r2, sl
 800d902:	4630      	mov	r0, r6
 800d904:	f001 fa0c 	bl	800ed20 <strncmp>
 800d908:	b980      	cbnz	r0, 800d92c <__gethex+0xd0>
 800d90a:	b94d      	cbnz	r5, 800d920 <__gethex+0xc4>
 800d90c:	eb06 050a 	add.w	r5, r6, sl
 800d910:	462a      	mov	r2, r5
 800d912:	4616      	mov	r6, r2
 800d914:	3201      	adds	r2, #1
 800d916:	7830      	ldrb	r0, [r6, #0]
 800d918:	f7ff ff8a 	bl	800d830 <__hexdig_fun>
 800d91c:	2800      	cmp	r0, #0
 800d91e:	d1f8      	bne.n	800d912 <__gethex+0xb6>
 800d920:	1bad      	subs	r5, r5, r6
 800d922:	00ad      	lsls	r5, r5, #2
 800d924:	e004      	b.n	800d930 <__gethex+0xd4>
 800d926:	2400      	movs	r4, #0
 800d928:	4625      	mov	r5, r4
 800d92a:	e7e0      	b.n	800d8ee <__gethex+0x92>
 800d92c:	2d00      	cmp	r5, #0
 800d92e:	d1f7      	bne.n	800d920 <__gethex+0xc4>
 800d930:	7833      	ldrb	r3, [r6, #0]
 800d932:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d936:	2b50      	cmp	r3, #80	; 0x50
 800d938:	d13b      	bne.n	800d9b2 <__gethex+0x156>
 800d93a:	7873      	ldrb	r3, [r6, #1]
 800d93c:	2b2b      	cmp	r3, #43	; 0x2b
 800d93e:	d02c      	beq.n	800d99a <__gethex+0x13e>
 800d940:	2b2d      	cmp	r3, #45	; 0x2d
 800d942:	d02e      	beq.n	800d9a2 <__gethex+0x146>
 800d944:	1c71      	adds	r1, r6, #1
 800d946:	f04f 0900 	mov.w	r9, #0
 800d94a:	7808      	ldrb	r0, [r1, #0]
 800d94c:	f7ff ff70 	bl	800d830 <__hexdig_fun>
 800d950:	1e43      	subs	r3, r0, #1
 800d952:	b2db      	uxtb	r3, r3
 800d954:	2b18      	cmp	r3, #24
 800d956:	d82c      	bhi.n	800d9b2 <__gethex+0x156>
 800d958:	f1a0 0210 	sub.w	r2, r0, #16
 800d95c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d960:	f7ff ff66 	bl	800d830 <__hexdig_fun>
 800d964:	1e43      	subs	r3, r0, #1
 800d966:	b2db      	uxtb	r3, r3
 800d968:	2b18      	cmp	r3, #24
 800d96a:	d91d      	bls.n	800d9a8 <__gethex+0x14c>
 800d96c:	f1b9 0f00 	cmp.w	r9, #0
 800d970:	d000      	beq.n	800d974 <__gethex+0x118>
 800d972:	4252      	negs	r2, r2
 800d974:	4415      	add	r5, r2
 800d976:	f8cb 1000 	str.w	r1, [fp]
 800d97a:	b1e4      	cbz	r4, 800d9b6 <__gethex+0x15a>
 800d97c:	9b00      	ldr	r3, [sp, #0]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	bf14      	ite	ne
 800d982:	2700      	movne	r7, #0
 800d984:	2706      	moveq	r7, #6
 800d986:	4638      	mov	r0, r7
 800d988:	b009      	add	sp, #36	; 0x24
 800d98a:	ecbd 8b02 	vpop	{d8}
 800d98e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d992:	463e      	mov	r6, r7
 800d994:	4625      	mov	r5, r4
 800d996:	2401      	movs	r4, #1
 800d998:	e7ca      	b.n	800d930 <__gethex+0xd4>
 800d99a:	f04f 0900 	mov.w	r9, #0
 800d99e:	1cb1      	adds	r1, r6, #2
 800d9a0:	e7d3      	b.n	800d94a <__gethex+0xee>
 800d9a2:	f04f 0901 	mov.w	r9, #1
 800d9a6:	e7fa      	b.n	800d99e <__gethex+0x142>
 800d9a8:	230a      	movs	r3, #10
 800d9aa:	fb03 0202 	mla	r2, r3, r2, r0
 800d9ae:	3a10      	subs	r2, #16
 800d9b0:	e7d4      	b.n	800d95c <__gethex+0x100>
 800d9b2:	4631      	mov	r1, r6
 800d9b4:	e7df      	b.n	800d976 <__gethex+0x11a>
 800d9b6:	1bf3      	subs	r3, r6, r7
 800d9b8:	3b01      	subs	r3, #1
 800d9ba:	4621      	mov	r1, r4
 800d9bc:	2b07      	cmp	r3, #7
 800d9be:	dc0b      	bgt.n	800d9d8 <__gethex+0x17c>
 800d9c0:	ee18 0a10 	vmov	r0, s16
 800d9c4:	f000 fa7e 	bl	800dec4 <_Balloc>
 800d9c8:	4604      	mov	r4, r0
 800d9ca:	b940      	cbnz	r0, 800d9de <__gethex+0x182>
 800d9cc:	4b5d      	ldr	r3, [pc, #372]	; (800db44 <__gethex+0x2e8>)
 800d9ce:	4602      	mov	r2, r0
 800d9d0:	21de      	movs	r1, #222	; 0xde
 800d9d2:	485d      	ldr	r0, [pc, #372]	; (800db48 <__gethex+0x2ec>)
 800d9d4:	f001 f9c6 	bl	800ed64 <__assert_func>
 800d9d8:	3101      	adds	r1, #1
 800d9da:	105b      	asrs	r3, r3, #1
 800d9dc:	e7ee      	b.n	800d9bc <__gethex+0x160>
 800d9de:	f100 0914 	add.w	r9, r0, #20
 800d9e2:	f04f 0b00 	mov.w	fp, #0
 800d9e6:	f1ca 0301 	rsb	r3, sl, #1
 800d9ea:	f8cd 9008 	str.w	r9, [sp, #8]
 800d9ee:	f8cd b000 	str.w	fp, [sp]
 800d9f2:	9306      	str	r3, [sp, #24]
 800d9f4:	42b7      	cmp	r7, r6
 800d9f6:	d340      	bcc.n	800da7a <__gethex+0x21e>
 800d9f8:	9802      	ldr	r0, [sp, #8]
 800d9fa:	9b00      	ldr	r3, [sp, #0]
 800d9fc:	f840 3b04 	str.w	r3, [r0], #4
 800da00:	eba0 0009 	sub.w	r0, r0, r9
 800da04:	1080      	asrs	r0, r0, #2
 800da06:	0146      	lsls	r6, r0, #5
 800da08:	6120      	str	r0, [r4, #16]
 800da0a:	4618      	mov	r0, r3
 800da0c:	f000 fb4c 	bl	800e0a8 <__hi0bits>
 800da10:	1a30      	subs	r0, r6, r0
 800da12:	f8d8 6000 	ldr.w	r6, [r8]
 800da16:	42b0      	cmp	r0, r6
 800da18:	dd63      	ble.n	800dae2 <__gethex+0x286>
 800da1a:	1b87      	subs	r7, r0, r6
 800da1c:	4639      	mov	r1, r7
 800da1e:	4620      	mov	r0, r4
 800da20:	f000 fef0 	bl	800e804 <__any_on>
 800da24:	4682      	mov	sl, r0
 800da26:	b1a8      	cbz	r0, 800da54 <__gethex+0x1f8>
 800da28:	1e7b      	subs	r3, r7, #1
 800da2a:	1159      	asrs	r1, r3, #5
 800da2c:	f003 021f 	and.w	r2, r3, #31
 800da30:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800da34:	f04f 0a01 	mov.w	sl, #1
 800da38:	fa0a f202 	lsl.w	r2, sl, r2
 800da3c:	420a      	tst	r2, r1
 800da3e:	d009      	beq.n	800da54 <__gethex+0x1f8>
 800da40:	4553      	cmp	r3, sl
 800da42:	dd05      	ble.n	800da50 <__gethex+0x1f4>
 800da44:	1eb9      	subs	r1, r7, #2
 800da46:	4620      	mov	r0, r4
 800da48:	f000 fedc 	bl	800e804 <__any_on>
 800da4c:	2800      	cmp	r0, #0
 800da4e:	d145      	bne.n	800dadc <__gethex+0x280>
 800da50:	f04f 0a02 	mov.w	sl, #2
 800da54:	4639      	mov	r1, r7
 800da56:	4620      	mov	r0, r4
 800da58:	f7ff fe98 	bl	800d78c <rshift>
 800da5c:	443d      	add	r5, r7
 800da5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800da62:	42ab      	cmp	r3, r5
 800da64:	da4c      	bge.n	800db00 <__gethex+0x2a4>
 800da66:	ee18 0a10 	vmov	r0, s16
 800da6a:	4621      	mov	r1, r4
 800da6c:	f000 fa6a 	bl	800df44 <_Bfree>
 800da70:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800da72:	2300      	movs	r3, #0
 800da74:	6013      	str	r3, [r2, #0]
 800da76:	27a3      	movs	r7, #163	; 0xa3
 800da78:	e785      	b.n	800d986 <__gethex+0x12a>
 800da7a:	1e73      	subs	r3, r6, #1
 800da7c:	9a05      	ldr	r2, [sp, #20]
 800da7e:	9303      	str	r3, [sp, #12]
 800da80:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800da84:	4293      	cmp	r3, r2
 800da86:	d019      	beq.n	800dabc <__gethex+0x260>
 800da88:	f1bb 0f20 	cmp.w	fp, #32
 800da8c:	d107      	bne.n	800da9e <__gethex+0x242>
 800da8e:	9b02      	ldr	r3, [sp, #8]
 800da90:	9a00      	ldr	r2, [sp, #0]
 800da92:	f843 2b04 	str.w	r2, [r3], #4
 800da96:	9302      	str	r3, [sp, #8]
 800da98:	2300      	movs	r3, #0
 800da9a:	9300      	str	r3, [sp, #0]
 800da9c:	469b      	mov	fp, r3
 800da9e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800daa2:	f7ff fec5 	bl	800d830 <__hexdig_fun>
 800daa6:	9b00      	ldr	r3, [sp, #0]
 800daa8:	f000 000f 	and.w	r0, r0, #15
 800daac:	fa00 f00b 	lsl.w	r0, r0, fp
 800dab0:	4303      	orrs	r3, r0
 800dab2:	9300      	str	r3, [sp, #0]
 800dab4:	f10b 0b04 	add.w	fp, fp, #4
 800dab8:	9b03      	ldr	r3, [sp, #12]
 800daba:	e00d      	b.n	800dad8 <__gethex+0x27c>
 800dabc:	9b03      	ldr	r3, [sp, #12]
 800dabe:	9a06      	ldr	r2, [sp, #24]
 800dac0:	4413      	add	r3, r2
 800dac2:	42bb      	cmp	r3, r7
 800dac4:	d3e0      	bcc.n	800da88 <__gethex+0x22c>
 800dac6:	4618      	mov	r0, r3
 800dac8:	9901      	ldr	r1, [sp, #4]
 800daca:	9307      	str	r3, [sp, #28]
 800dacc:	4652      	mov	r2, sl
 800dace:	f001 f927 	bl	800ed20 <strncmp>
 800dad2:	9b07      	ldr	r3, [sp, #28]
 800dad4:	2800      	cmp	r0, #0
 800dad6:	d1d7      	bne.n	800da88 <__gethex+0x22c>
 800dad8:	461e      	mov	r6, r3
 800dada:	e78b      	b.n	800d9f4 <__gethex+0x198>
 800dadc:	f04f 0a03 	mov.w	sl, #3
 800dae0:	e7b8      	b.n	800da54 <__gethex+0x1f8>
 800dae2:	da0a      	bge.n	800dafa <__gethex+0x29e>
 800dae4:	1a37      	subs	r7, r6, r0
 800dae6:	4621      	mov	r1, r4
 800dae8:	ee18 0a10 	vmov	r0, s16
 800daec:	463a      	mov	r2, r7
 800daee:	f000 fc45 	bl	800e37c <__lshift>
 800daf2:	1bed      	subs	r5, r5, r7
 800daf4:	4604      	mov	r4, r0
 800daf6:	f100 0914 	add.w	r9, r0, #20
 800dafa:	f04f 0a00 	mov.w	sl, #0
 800dafe:	e7ae      	b.n	800da5e <__gethex+0x202>
 800db00:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800db04:	42a8      	cmp	r0, r5
 800db06:	dd72      	ble.n	800dbee <__gethex+0x392>
 800db08:	1b45      	subs	r5, r0, r5
 800db0a:	42ae      	cmp	r6, r5
 800db0c:	dc36      	bgt.n	800db7c <__gethex+0x320>
 800db0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800db12:	2b02      	cmp	r3, #2
 800db14:	d02a      	beq.n	800db6c <__gethex+0x310>
 800db16:	2b03      	cmp	r3, #3
 800db18:	d02c      	beq.n	800db74 <__gethex+0x318>
 800db1a:	2b01      	cmp	r3, #1
 800db1c:	d11c      	bne.n	800db58 <__gethex+0x2fc>
 800db1e:	42ae      	cmp	r6, r5
 800db20:	d11a      	bne.n	800db58 <__gethex+0x2fc>
 800db22:	2e01      	cmp	r6, #1
 800db24:	d112      	bne.n	800db4c <__gethex+0x2f0>
 800db26:	9a04      	ldr	r2, [sp, #16]
 800db28:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800db2c:	6013      	str	r3, [r2, #0]
 800db2e:	2301      	movs	r3, #1
 800db30:	6123      	str	r3, [r4, #16]
 800db32:	f8c9 3000 	str.w	r3, [r9]
 800db36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800db38:	2762      	movs	r7, #98	; 0x62
 800db3a:	601c      	str	r4, [r3, #0]
 800db3c:	e723      	b.n	800d986 <__gethex+0x12a>
 800db3e:	bf00      	nop
 800db40:	08010310 	.word	0x08010310
 800db44:	08010298 	.word	0x08010298
 800db48:	080102a9 	.word	0x080102a9
 800db4c:	1e71      	subs	r1, r6, #1
 800db4e:	4620      	mov	r0, r4
 800db50:	f000 fe58 	bl	800e804 <__any_on>
 800db54:	2800      	cmp	r0, #0
 800db56:	d1e6      	bne.n	800db26 <__gethex+0x2ca>
 800db58:	ee18 0a10 	vmov	r0, s16
 800db5c:	4621      	mov	r1, r4
 800db5e:	f000 f9f1 	bl	800df44 <_Bfree>
 800db62:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800db64:	2300      	movs	r3, #0
 800db66:	6013      	str	r3, [r2, #0]
 800db68:	2750      	movs	r7, #80	; 0x50
 800db6a:	e70c      	b.n	800d986 <__gethex+0x12a>
 800db6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d1f2      	bne.n	800db58 <__gethex+0x2fc>
 800db72:	e7d8      	b.n	800db26 <__gethex+0x2ca>
 800db74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db76:	2b00      	cmp	r3, #0
 800db78:	d1d5      	bne.n	800db26 <__gethex+0x2ca>
 800db7a:	e7ed      	b.n	800db58 <__gethex+0x2fc>
 800db7c:	1e6f      	subs	r7, r5, #1
 800db7e:	f1ba 0f00 	cmp.w	sl, #0
 800db82:	d131      	bne.n	800dbe8 <__gethex+0x38c>
 800db84:	b127      	cbz	r7, 800db90 <__gethex+0x334>
 800db86:	4639      	mov	r1, r7
 800db88:	4620      	mov	r0, r4
 800db8a:	f000 fe3b 	bl	800e804 <__any_on>
 800db8e:	4682      	mov	sl, r0
 800db90:	117b      	asrs	r3, r7, #5
 800db92:	2101      	movs	r1, #1
 800db94:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800db98:	f007 071f 	and.w	r7, r7, #31
 800db9c:	fa01 f707 	lsl.w	r7, r1, r7
 800dba0:	421f      	tst	r7, r3
 800dba2:	4629      	mov	r1, r5
 800dba4:	4620      	mov	r0, r4
 800dba6:	bf18      	it	ne
 800dba8:	f04a 0a02 	orrne.w	sl, sl, #2
 800dbac:	1b76      	subs	r6, r6, r5
 800dbae:	f7ff fded 	bl	800d78c <rshift>
 800dbb2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800dbb6:	2702      	movs	r7, #2
 800dbb8:	f1ba 0f00 	cmp.w	sl, #0
 800dbbc:	d048      	beq.n	800dc50 <__gethex+0x3f4>
 800dbbe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dbc2:	2b02      	cmp	r3, #2
 800dbc4:	d015      	beq.n	800dbf2 <__gethex+0x396>
 800dbc6:	2b03      	cmp	r3, #3
 800dbc8:	d017      	beq.n	800dbfa <__gethex+0x39e>
 800dbca:	2b01      	cmp	r3, #1
 800dbcc:	d109      	bne.n	800dbe2 <__gethex+0x386>
 800dbce:	f01a 0f02 	tst.w	sl, #2
 800dbd2:	d006      	beq.n	800dbe2 <__gethex+0x386>
 800dbd4:	f8d9 0000 	ldr.w	r0, [r9]
 800dbd8:	ea4a 0a00 	orr.w	sl, sl, r0
 800dbdc:	f01a 0f01 	tst.w	sl, #1
 800dbe0:	d10e      	bne.n	800dc00 <__gethex+0x3a4>
 800dbe2:	f047 0710 	orr.w	r7, r7, #16
 800dbe6:	e033      	b.n	800dc50 <__gethex+0x3f4>
 800dbe8:	f04f 0a01 	mov.w	sl, #1
 800dbec:	e7d0      	b.n	800db90 <__gethex+0x334>
 800dbee:	2701      	movs	r7, #1
 800dbf0:	e7e2      	b.n	800dbb8 <__gethex+0x35c>
 800dbf2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dbf4:	f1c3 0301 	rsb	r3, r3, #1
 800dbf8:	9315      	str	r3, [sp, #84]	; 0x54
 800dbfa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d0f0      	beq.n	800dbe2 <__gethex+0x386>
 800dc00:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dc04:	f104 0314 	add.w	r3, r4, #20
 800dc08:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dc0c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dc10:	f04f 0c00 	mov.w	ip, #0
 800dc14:	4618      	mov	r0, r3
 800dc16:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc1a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dc1e:	d01c      	beq.n	800dc5a <__gethex+0x3fe>
 800dc20:	3201      	adds	r2, #1
 800dc22:	6002      	str	r2, [r0, #0]
 800dc24:	2f02      	cmp	r7, #2
 800dc26:	f104 0314 	add.w	r3, r4, #20
 800dc2a:	d13f      	bne.n	800dcac <__gethex+0x450>
 800dc2c:	f8d8 2000 	ldr.w	r2, [r8]
 800dc30:	3a01      	subs	r2, #1
 800dc32:	42b2      	cmp	r2, r6
 800dc34:	d10a      	bne.n	800dc4c <__gethex+0x3f0>
 800dc36:	1171      	asrs	r1, r6, #5
 800dc38:	2201      	movs	r2, #1
 800dc3a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dc3e:	f006 061f 	and.w	r6, r6, #31
 800dc42:	fa02 f606 	lsl.w	r6, r2, r6
 800dc46:	421e      	tst	r6, r3
 800dc48:	bf18      	it	ne
 800dc4a:	4617      	movne	r7, r2
 800dc4c:	f047 0720 	orr.w	r7, r7, #32
 800dc50:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dc52:	601c      	str	r4, [r3, #0]
 800dc54:	9b04      	ldr	r3, [sp, #16]
 800dc56:	601d      	str	r5, [r3, #0]
 800dc58:	e695      	b.n	800d986 <__gethex+0x12a>
 800dc5a:	4299      	cmp	r1, r3
 800dc5c:	f843 cc04 	str.w	ip, [r3, #-4]
 800dc60:	d8d8      	bhi.n	800dc14 <__gethex+0x3b8>
 800dc62:	68a3      	ldr	r3, [r4, #8]
 800dc64:	459b      	cmp	fp, r3
 800dc66:	db19      	blt.n	800dc9c <__gethex+0x440>
 800dc68:	6861      	ldr	r1, [r4, #4]
 800dc6a:	ee18 0a10 	vmov	r0, s16
 800dc6e:	3101      	adds	r1, #1
 800dc70:	f000 f928 	bl	800dec4 <_Balloc>
 800dc74:	4681      	mov	r9, r0
 800dc76:	b918      	cbnz	r0, 800dc80 <__gethex+0x424>
 800dc78:	4b1a      	ldr	r3, [pc, #104]	; (800dce4 <__gethex+0x488>)
 800dc7a:	4602      	mov	r2, r0
 800dc7c:	2184      	movs	r1, #132	; 0x84
 800dc7e:	e6a8      	b.n	800d9d2 <__gethex+0x176>
 800dc80:	6922      	ldr	r2, [r4, #16]
 800dc82:	3202      	adds	r2, #2
 800dc84:	f104 010c 	add.w	r1, r4, #12
 800dc88:	0092      	lsls	r2, r2, #2
 800dc8a:	300c      	adds	r0, #12
 800dc8c:	f000 f90c 	bl	800dea8 <memcpy>
 800dc90:	4621      	mov	r1, r4
 800dc92:	ee18 0a10 	vmov	r0, s16
 800dc96:	f000 f955 	bl	800df44 <_Bfree>
 800dc9a:	464c      	mov	r4, r9
 800dc9c:	6923      	ldr	r3, [r4, #16]
 800dc9e:	1c5a      	adds	r2, r3, #1
 800dca0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dca4:	6122      	str	r2, [r4, #16]
 800dca6:	2201      	movs	r2, #1
 800dca8:	615a      	str	r2, [r3, #20]
 800dcaa:	e7bb      	b.n	800dc24 <__gethex+0x3c8>
 800dcac:	6922      	ldr	r2, [r4, #16]
 800dcae:	455a      	cmp	r2, fp
 800dcb0:	dd0b      	ble.n	800dcca <__gethex+0x46e>
 800dcb2:	2101      	movs	r1, #1
 800dcb4:	4620      	mov	r0, r4
 800dcb6:	f7ff fd69 	bl	800d78c <rshift>
 800dcba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dcbe:	3501      	adds	r5, #1
 800dcc0:	42ab      	cmp	r3, r5
 800dcc2:	f6ff aed0 	blt.w	800da66 <__gethex+0x20a>
 800dcc6:	2701      	movs	r7, #1
 800dcc8:	e7c0      	b.n	800dc4c <__gethex+0x3f0>
 800dcca:	f016 061f 	ands.w	r6, r6, #31
 800dcce:	d0fa      	beq.n	800dcc6 <__gethex+0x46a>
 800dcd0:	4453      	add	r3, sl
 800dcd2:	f1c6 0620 	rsb	r6, r6, #32
 800dcd6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800dcda:	f000 f9e5 	bl	800e0a8 <__hi0bits>
 800dcde:	42b0      	cmp	r0, r6
 800dce0:	dbe7      	blt.n	800dcb2 <__gethex+0x456>
 800dce2:	e7f0      	b.n	800dcc6 <__gethex+0x46a>
 800dce4:	08010298 	.word	0x08010298

0800dce8 <L_shift>:
 800dce8:	f1c2 0208 	rsb	r2, r2, #8
 800dcec:	0092      	lsls	r2, r2, #2
 800dcee:	b570      	push	{r4, r5, r6, lr}
 800dcf0:	f1c2 0620 	rsb	r6, r2, #32
 800dcf4:	6843      	ldr	r3, [r0, #4]
 800dcf6:	6804      	ldr	r4, [r0, #0]
 800dcf8:	fa03 f506 	lsl.w	r5, r3, r6
 800dcfc:	432c      	orrs	r4, r5
 800dcfe:	40d3      	lsrs	r3, r2
 800dd00:	6004      	str	r4, [r0, #0]
 800dd02:	f840 3f04 	str.w	r3, [r0, #4]!
 800dd06:	4288      	cmp	r0, r1
 800dd08:	d3f4      	bcc.n	800dcf4 <L_shift+0xc>
 800dd0a:	bd70      	pop	{r4, r5, r6, pc}

0800dd0c <__match>:
 800dd0c:	b530      	push	{r4, r5, lr}
 800dd0e:	6803      	ldr	r3, [r0, #0]
 800dd10:	3301      	adds	r3, #1
 800dd12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd16:	b914      	cbnz	r4, 800dd1e <__match+0x12>
 800dd18:	6003      	str	r3, [r0, #0]
 800dd1a:	2001      	movs	r0, #1
 800dd1c:	bd30      	pop	{r4, r5, pc}
 800dd1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd22:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800dd26:	2d19      	cmp	r5, #25
 800dd28:	bf98      	it	ls
 800dd2a:	3220      	addls	r2, #32
 800dd2c:	42a2      	cmp	r2, r4
 800dd2e:	d0f0      	beq.n	800dd12 <__match+0x6>
 800dd30:	2000      	movs	r0, #0
 800dd32:	e7f3      	b.n	800dd1c <__match+0x10>

0800dd34 <__hexnan>:
 800dd34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd38:	680b      	ldr	r3, [r1, #0]
 800dd3a:	115e      	asrs	r6, r3, #5
 800dd3c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dd40:	f013 031f 	ands.w	r3, r3, #31
 800dd44:	b087      	sub	sp, #28
 800dd46:	bf18      	it	ne
 800dd48:	3604      	addne	r6, #4
 800dd4a:	2500      	movs	r5, #0
 800dd4c:	1f37      	subs	r7, r6, #4
 800dd4e:	4690      	mov	r8, r2
 800dd50:	6802      	ldr	r2, [r0, #0]
 800dd52:	9301      	str	r3, [sp, #4]
 800dd54:	4682      	mov	sl, r0
 800dd56:	f846 5c04 	str.w	r5, [r6, #-4]
 800dd5a:	46b9      	mov	r9, r7
 800dd5c:	463c      	mov	r4, r7
 800dd5e:	9502      	str	r5, [sp, #8]
 800dd60:	46ab      	mov	fp, r5
 800dd62:	7851      	ldrb	r1, [r2, #1]
 800dd64:	1c53      	adds	r3, r2, #1
 800dd66:	9303      	str	r3, [sp, #12]
 800dd68:	b341      	cbz	r1, 800ddbc <__hexnan+0x88>
 800dd6a:	4608      	mov	r0, r1
 800dd6c:	9205      	str	r2, [sp, #20]
 800dd6e:	9104      	str	r1, [sp, #16]
 800dd70:	f7ff fd5e 	bl	800d830 <__hexdig_fun>
 800dd74:	2800      	cmp	r0, #0
 800dd76:	d14f      	bne.n	800de18 <__hexnan+0xe4>
 800dd78:	9904      	ldr	r1, [sp, #16]
 800dd7a:	9a05      	ldr	r2, [sp, #20]
 800dd7c:	2920      	cmp	r1, #32
 800dd7e:	d818      	bhi.n	800ddb2 <__hexnan+0x7e>
 800dd80:	9b02      	ldr	r3, [sp, #8]
 800dd82:	459b      	cmp	fp, r3
 800dd84:	dd13      	ble.n	800ddae <__hexnan+0x7a>
 800dd86:	454c      	cmp	r4, r9
 800dd88:	d206      	bcs.n	800dd98 <__hexnan+0x64>
 800dd8a:	2d07      	cmp	r5, #7
 800dd8c:	dc04      	bgt.n	800dd98 <__hexnan+0x64>
 800dd8e:	462a      	mov	r2, r5
 800dd90:	4649      	mov	r1, r9
 800dd92:	4620      	mov	r0, r4
 800dd94:	f7ff ffa8 	bl	800dce8 <L_shift>
 800dd98:	4544      	cmp	r4, r8
 800dd9a:	d950      	bls.n	800de3e <__hexnan+0x10a>
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	f1a4 0904 	sub.w	r9, r4, #4
 800dda2:	f844 3c04 	str.w	r3, [r4, #-4]
 800dda6:	f8cd b008 	str.w	fp, [sp, #8]
 800ddaa:	464c      	mov	r4, r9
 800ddac:	461d      	mov	r5, r3
 800ddae:	9a03      	ldr	r2, [sp, #12]
 800ddb0:	e7d7      	b.n	800dd62 <__hexnan+0x2e>
 800ddb2:	2929      	cmp	r1, #41	; 0x29
 800ddb4:	d156      	bne.n	800de64 <__hexnan+0x130>
 800ddb6:	3202      	adds	r2, #2
 800ddb8:	f8ca 2000 	str.w	r2, [sl]
 800ddbc:	f1bb 0f00 	cmp.w	fp, #0
 800ddc0:	d050      	beq.n	800de64 <__hexnan+0x130>
 800ddc2:	454c      	cmp	r4, r9
 800ddc4:	d206      	bcs.n	800ddd4 <__hexnan+0xa0>
 800ddc6:	2d07      	cmp	r5, #7
 800ddc8:	dc04      	bgt.n	800ddd4 <__hexnan+0xa0>
 800ddca:	462a      	mov	r2, r5
 800ddcc:	4649      	mov	r1, r9
 800ddce:	4620      	mov	r0, r4
 800ddd0:	f7ff ff8a 	bl	800dce8 <L_shift>
 800ddd4:	4544      	cmp	r4, r8
 800ddd6:	d934      	bls.n	800de42 <__hexnan+0x10e>
 800ddd8:	f1a8 0204 	sub.w	r2, r8, #4
 800dddc:	4623      	mov	r3, r4
 800ddde:	f853 1b04 	ldr.w	r1, [r3], #4
 800dde2:	f842 1f04 	str.w	r1, [r2, #4]!
 800dde6:	429f      	cmp	r7, r3
 800dde8:	d2f9      	bcs.n	800ddde <__hexnan+0xaa>
 800ddea:	1b3b      	subs	r3, r7, r4
 800ddec:	f023 0303 	bic.w	r3, r3, #3
 800ddf0:	3304      	adds	r3, #4
 800ddf2:	3401      	adds	r4, #1
 800ddf4:	3e03      	subs	r6, #3
 800ddf6:	42b4      	cmp	r4, r6
 800ddf8:	bf88      	it	hi
 800ddfa:	2304      	movhi	r3, #4
 800ddfc:	4443      	add	r3, r8
 800ddfe:	2200      	movs	r2, #0
 800de00:	f843 2b04 	str.w	r2, [r3], #4
 800de04:	429f      	cmp	r7, r3
 800de06:	d2fb      	bcs.n	800de00 <__hexnan+0xcc>
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	b91b      	cbnz	r3, 800de14 <__hexnan+0xe0>
 800de0c:	4547      	cmp	r7, r8
 800de0e:	d127      	bne.n	800de60 <__hexnan+0x12c>
 800de10:	2301      	movs	r3, #1
 800de12:	603b      	str	r3, [r7, #0]
 800de14:	2005      	movs	r0, #5
 800de16:	e026      	b.n	800de66 <__hexnan+0x132>
 800de18:	3501      	adds	r5, #1
 800de1a:	2d08      	cmp	r5, #8
 800de1c:	f10b 0b01 	add.w	fp, fp, #1
 800de20:	dd06      	ble.n	800de30 <__hexnan+0xfc>
 800de22:	4544      	cmp	r4, r8
 800de24:	d9c3      	bls.n	800ddae <__hexnan+0x7a>
 800de26:	2300      	movs	r3, #0
 800de28:	f844 3c04 	str.w	r3, [r4, #-4]
 800de2c:	2501      	movs	r5, #1
 800de2e:	3c04      	subs	r4, #4
 800de30:	6822      	ldr	r2, [r4, #0]
 800de32:	f000 000f 	and.w	r0, r0, #15
 800de36:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800de3a:	6022      	str	r2, [r4, #0]
 800de3c:	e7b7      	b.n	800ddae <__hexnan+0x7a>
 800de3e:	2508      	movs	r5, #8
 800de40:	e7b5      	b.n	800ddae <__hexnan+0x7a>
 800de42:	9b01      	ldr	r3, [sp, #4]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d0df      	beq.n	800de08 <__hexnan+0xd4>
 800de48:	f04f 32ff 	mov.w	r2, #4294967295
 800de4c:	f1c3 0320 	rsb	r3, r3, #32
 800de50:	fa22 f303 	lsr.w	r3, r2, r3
 800de54:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800de58:	401a      	ands	r2, r3
 800de5a:	f846 2c04 	str.w	r2, [r6, #-4]
 800de5e:	e7d3      	b.n	800de08 <__hexnan+0xd4>
 800de60:	3f04      	subs	r7, #4
 800de62:	e7d1      	b.n	800de08 <__hexnan+0xd4>
 800de64:	2004      	movs	r0, #4
 800de66:	b007      	add	sp, #28
 800de68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800de6c <_localeconv_r>:
 800de6c:	4800      	ldr	r0, [pc, #0]	; (800de70 <_localeconv_r+0x4>)
 800de6e:	4770      	bx	lr
 800de70:	20000254 	.word	0x20000254

0800de74 <malloc>:
 800de74:	4b02      	ldr	r3, [pc, #8]	; (800de80 <malloc+0xc>)
 800de76:	4601      	mov	r1, r0
 800de78:	6818      	ldr	r0, [r3, #0]
 800de7a:	f000 bd67 	b.w	800e94c <_malloc_r>
 800de7e:	bf00      	nop
 800de80:	200000fc 	.word	0x200000fc

0800de84 <__ascii_mbtowc>:
 800de84:	b082      	sub	sp, #8
 800de86:	b901      	cbnz	r1, 800de8a <__ascii_mbtowc+0x6>
 800de88:	a901      	add	r1, sp, #4
 800de8a:	b142      	cbz	r2, 800de9e <__ascii_mbtowc+0x1a>
 800de8c:	b14b      	cbz	r3, 800dea2 <__ascii_mbtowc+0x1e>
 800de8e:	7813      	ldrb	r3, [r2, #0]
 800de90:	600b      	str	r3, [r1, #0]
 800de92:	7812      	ldrb	r2, [r2, #0]
 800de94:	1e10      	subs	r0, r2, #0
 800de96:	bf18      	it	ne
 800de98:	2001      	movne	r0, #1
 800de9a:	b002      	add	sp, #8
 800de9c:	4770      	bx	lr
 800de9e:	4610      	mov	r0, r2
 800dea0:	e7fb      	b.n	800de9a <__ascii_mbtowc+0x16>
 800dea2:	f06f 0001 	mvn.w	r0, #1
 800dea6:	e7f8      	b.n	800de9a <__ascii_mbtowc+0x16>

0800dea8 <memcpy>:
 800dea8:	440a      	add	r2, r1
 800deaa:	4291      	cmp	r1, r2
 800deac:	f100 33ff 	add.w	r3, r0, #4294967295
 800deb0:	d100      	bne.n	800deb4 <memcpy+0xc>
 800deb2:	4770      	bx	lr
 800deb4:	b510      	push	{r4, lr}
 800deb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800deba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800debe:	4291      	cmp	r1, r2
 800dec0:	d1f9      	bne.n	800deb6 <memcpy+0xe>
 800dec2:	bd10      	pop	{r4, pc}

0800dec4 <_Balloc>:
 800dec4:	b570      	push	{r4, r5, r6, lr}
 800dec6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dec8:	4604      	mov	r4, r0
 800deca:	460d      	mov	r5, r1
 800decc:	b976      	cbnz	r6, 800deec <_Balloc+0x28>
 800dece:	2010      	movs	r0, #16
 800ded0:	f7ff ffd0 	bl	800de74 <malloc>
 800ded4:	4602      	mov	r2, r0
 800ded6:	6260      	str	r0, [r4, #36]	; 0x24
 800ded8:	b920      	cbnz	r0, 800dee4 <_Balloc+0x20>
 800deda:	4b18      	ldr	r3, [pc, #96]	; (800df3c <_Balloc+0x78>)
 800dedc:	4818      	ldr	r0, [pc, #96]	; (800df40 <_Balloc+0x7c>)
 800dede:	2166      	movs	r1, #102	; 0x66
 800dee0:	f000 ff40 	bl	800ed64 <__assert_func>
 800dee4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dee8:	6006      	str	r6, [r0, #0]
 800deea:	60c6      	str	r6, [r0, #12]
 800deec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800deee:	68f3      	ldr	r3, [r6, #12]
 800def0:	b183      	cbz	r3, 800df14 <_Balloc+0x50>
 800def2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800def4:	68db      	ldr	r3, [r3, #12]
 800def6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800defa:	b9b8      	cbnz	r0, 800df2c <_Balloc+0x68>
 800defc:	2101      	movs	r1, #1
 800defe:	fa01 f605 	lsl.w	r6, r1, r5
 800df02:	1d72      	adds	r2, r6, #5
 800df04:	0092      	lsls	r2, r2, #2
 800df06:	4620      	mov	r0, r4
 800df08:	f000 fc9d 	bl	800e846 <_calloc_r>
 800df0c:	b160      	cbz	r0, 800df28 <_Balloc+0x64>
 800df0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800df12:	e00e      	b.n	800df32 <_Balloc+0x6e>
 800df14:	2221      	movs	r2, #33	; 0x21
 800df16:	2104      	movs	r1, #4
 800df18:	4620      	mov	r0, r4
 800df1a:	f000 fc94 	bl	800e846 <_calloc_r>
 800df1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df20:	60f0      	str	r0, [r6, #12]
 800df22:	68db      	ldr	r3, [r3, #12]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d1e4      	bne.n	800def2 <_Balloc+0x2e>
 800df28:	2000      	movs	r0, #0
 800df2a:	bd70      	pop	{r4, r5, r6, pc}
 800df2c:	6802      	ldr	r2, [r0, #0]
 800df2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800df32:	2300      	movs	r3, #0
 800df34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800df38:	e7f7      	b.n	800df2a <_Balloc+0x66>
 800df3a:	bf00      	nop
 800df3c:	08010226 	.word	0x08010226
 800df40:	08010324 	.word	0x08010324

0800df44 <_Bfree>:
 800df44:	b570      	push	{r4, r5, r6, lr}
 800df46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800df48:	4605      	mov	r5, r0
 800df4a:	460c      	mov	r4, r1
 800df4c:	b976      	cbnz	r6, 800df6c <_Bfree+0x28>
 800df4e:	2010      	movs	r0, #16
 800df50:	f7ff ff90 	bl	800de74 <malloc>
 800df54:	4602      	mov	r2, r0
 800df56:	6268      	str	r0, [r5, #36]	; 0x24
 800df58:	b920      	cbnz	r0, 800df64 <_Bfree+0x20>
 800df5a:	4b09      	ldr	r3, [pc, #36]	; (800df80 <_Bfree+0x3c>)
 800df5c:	4809      	ldr	r0, [pc, #36]	; (800df84 <_Bfree+0x40>)
 800df5e:	218a      	movs	r1, #138	; 0x8a
 800df60:	f000 ff00 	bl	800ed64 <__assert_func>
 800df64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800df68:	6006      	str	r6, [r0, #0]
 800df6a:	60c6      	str	r6, [r0, #12]
 800df6c:	b13c      	cbz	r4, 800df7e <_Bfree+0x3a>
 800df6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800df70:	6862      	ldr	r2, [r4, #4]
 800df72:	68db      	ldr	r3, [r3, #12]
 800df74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800df78:	6021      	str	r1, [r4, #0]
 800df7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800df7e:	bd70      	pop	{r4, r5, r6, pc}
 800df80:	08010226 	.word	0x08010226
 800df84:	08010324 	.word	0x08010324

0800df88 <__multadd>:
 800df88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df8c:	690d      	ldr	r5, [r1, #16]
 800df8e:	4607      	mov	r7, r0
 800df90:	460c      	mov	r4, r1
 800df92:	461e      	mov	r6, r3
 800df94:	f101 0c14 	add.w	ip, r1, #20
 800df98:	2000      	movs	r0, #0
 800df9a:	f8dc 3000 	ldr.w	r3, [ip]
 800df9e:	b299      	uxth	r1, r3
 800dfa0:	fb02 6101 	mla	r1, r2, r1, r6
 800dfa4:	0c1e      	lsrs	r6, r3, #16
 800dfa6:	0c0b      	lsrs	r3, r1, #16
 800dfa8:	fb02 3306 	mla	r3, r2, r6, r3
 800dfac:	b289      	uxth	r1, r1
 800dfae:	3001      	adds	r0, #1
 800dfb0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dfb4:	4285      	cmp	r5, r0
 800dfb6:	f84c 1b04 	str.w	r1, [ip], #4
 800dfba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dfbe:	dcec      	bgt.n	800df9a <__multadd+0x12>
 800dfc0:	b30e      	cbz	r6, 800e006 <__multadd+0x7e>
 800dfc2:	68a3      	ldr	r3, [r4, #8]
 800dfc4:	42ab      	cmp	r3, r5
 800dfc6:	dc19      	bgt.n	800dffc <__multadd+0x74>
 800dfc8:	6861      	ldr	r1, [r4, #4]
 800dfca:	4638      	mov	r0, r7
 800dfcc:	3101      	adds	r1, #1
 800dfce:	f7ff ff79 	bl	800dec4 <_Balloc>
 800dfd2:	4680      	mov	r8, r0
 800dfd4:	b928      	cbnz	r0, 800dfe2 <__multadd+0x5a>
 800dfd6:	4602      	mov	r2, r0
 800dfd8:	4b0c      	ldr	r3, [pc, #48]	; (800e00c <__multadd+0x84>)
 800dfda:	480d      	ldr	r0, [pc, #52]	; (800e010 <__multadd+0x88>)
 800dfdc:	21b5      	movs	r1, #181	; 0xb5
 800dfde:	f000 fec1 	bl	800ed64 <__assert_func>
 800dfe2:	6922      	ldr	r2, [r4, #16]
 800dfe4:	3202      	adds	r2, #2
 800dfe6:	f104 010c 	add.w	r1, r4, #12
 800dfea:	0092      	lsls	r2, r2, #2
 800dfec:	300c      	adds	r0, #12
 800dfee:	f7ff ff5b 	bl	800dea8 <memcpy>
 800dff2:	4621      	mov	r1, r4
 800dff4:	4638      	mov	r0, r7
 800dff6:	f7ff ffa5 	bl	800df44 <_Bfree>
 800dffa:	4644      	mov	r4, r8
 800dffc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e000:	3501      	adds	r5, #1
 800e002:	615e      	str	r6, [r3, #20]
 800e004:	6125      	str	r5, [r4, #16]
 800e006:	4620      	mov	r0, r4
 800e008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e00c:	08010298 	.word	0x08010298
 800e010:	08010324 	.word	0x08010324

0800e014 <__s2b>:
 800e014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e018:	460c      	mov	r4, r1
 800e01a:	4615      	mov	r5, r2
 800e01c:	461f      	mov	r7, r3
 800e01e:	2209      	movs	r2, #9
 800e020:	3308      	adds	r3, #8
 800e022:	4606      	mov	r6, r0
 800e024:	fb93 f3f2 	sdiv	r3, r3, r2
 800e028:	2100      	movs	r1, #0
 800e02a:	2201      	movs	r2, #1
 800e02c:	429a      	cmp	r2, r3
 800e02e:	db09      	blt.n	800e044 <__s2b+0x30>
 800e030:	4630      	mov	r0, r6
 800e032:	f7ff ff47 	bl	800dec4 <_Balloc>
 800e036:	b940      	cbnz	r0, 800e04a <__s2b+0x36>
 800e038:	4602      	mov	r2, r0
 800e03a:	4b19      	ldr	r3, [pc, #100]	; (800e0a0 <__s2b+0x8c>)
 800e03c:	4819      	ldr	r0, [pc, #100]	; (800e0a4 <__s2b+0x90>)
 800e03e:	21ce      	movs	r1, #206	; 0xce
 800e040:	f000 fe90 	bl	800ed64 <__assert_func>
 800e044:	0052      	lsls	r2, r2, #1
 800e046:	3101      	adds	r1, #1
 800e048:	e7f0      	b.n	800e02c <__s2b+0x18>
 800e04a:	9b08      	ldr	r3, [sp, #32]
 800e04c:	6143      	str	r3, [r0, #20]
 800e04e:	2d09      	cmp	r5, #9
 800e050:	f04f 0301 	mov.w	r3, #1
 800e054:	6103      	str	r3, [r0, #16]
 800e056:	dd16      	ble.n	800e086 <__s2b+0x72>
 800e058:	f104 0909 	add.w	r9, r4, #9
 800e05c:	46c8      	mov	r8, r9
 800e05e:	442c      	add	r4, r5
 800e060:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e064:	4601      	mov	r1, r0
 800e066:	3b30      	subs	r3, #48	; 0x30
 800e068:	220a      	movs	r2, #10
 800e06a:	4630      	mov	r0, r6
 800e06c:	f7ff ff8c 	bl	800df88 <__multadd>
 800e070:	45a0      	cmp	r8, r4
 800e072:	d1f5      	bne.n	800e060 <__s2b+0x4c>
 800e074:	f1a5 0408 	sub.w	r4, r5, #8
 800e078:	444c      	add	r4, r9
 800e07a:	1b2d      	subs	r5, r5, r4
 800e07c:	1963      	adds	r3, r4, r5
 800e07e:	42bb      	cmp	r3, r7
 800e080:	db04      	blt.n	800e08c <__s2b+0x78>
 800e082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e086:	340a      	adds	r4, #10
 800e088:	2509      	movs	r5, #9
 800e08a:	e7f6      	b.n	800e07a <__s2b+0x66>
 800e08c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e090:	4601      	mov	r1, r0
 800e092:	3b30      	subs	r3, #48	; 0x30
 800e094:	220a      	movs	r2, #10
 800e096:	4630      	mov	r0, r6
 800e098:	f7ff ff76 	bl	800df88 <__multadd>
 800e09c:	e7ee      	b.n	800e07c <__s2b+0x68>
 800e09e:	bf00      	nop
 800e0a0:	08010298 	.word	0x08010298
 800e0a4:	08010324 	.word	0x08010324

0800e0a8 <__hi0bits>:
 800e0a8:	0c03      	lsrs	r3, r0, #16
 800e0aa:	041b      	lsls	r3, r3, #16
 800e0ac:	b9d3      	cbnz	r3, 800e0e4 <__hi0bits+0x3c>
 800e0ae:	0400      	lsls	r0, r0, #16
 800e0b0:	2310      	movs	r3, #16
 800e0b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e0b6:	bf04      	itt	eq
 800e0b8:	0200      	lsleq	r0, r0, #8
 800e0ba:	3308      	addeq	r3, #8
 800e0bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e0c0:	bf04      	itt	eq
 800e0c2:	0100      	lsleq	r0, r0, #4
 800e0c4:	3304      	addeq	r3, #4
 800e0c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e0ca:	bf04      	itt	eq
 800e0cc:	0080      	lsleq	r0, r0, #2
 800e0ce:	3302      	addeq	r3, #2
 800e0d0:	2800      	cmp	r0, #0
 800e0d2:	db05      	blt.n	800e0e0 <__hi0bits+0x38>
 800e0d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e0d8:	f103 0301 	add.w	r3, r3, #1
 800e0dc:	bf08      	it	eq
 800e0de:	2320      	moveq	r3, #32
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	4770      	bx	lr
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	e7e4      	b.n	800e0b2 <__hi0bits+0xa>

0800e0e8 <__lo0bits>:
 800e0e8:	6803      	ldr	r3, [r0, #0]
 800e0ea:	f013 0207 	ands.w	r2, r3, #7
 800e0ee:	4601      	mov	r1, r0
 800e0f0:	d00b      	beq.n	800e10a <__lo0bits+0x22>
 800e0f2:	07da      	lsls	r2, r3, #31
 800e0f4:	d423      	bmi.n	800e13e <__lo0bits+0x56>
 800e0f6:	0798      	lsls	r0, r3, #30
 800e0f8:	bf49      	itett	mi
 800e0fa:	085b      	lsrmi	r3, r3, #1
 800e0fc:	089b      	lsrpl	r3, r3, #2
 800e0fe:	2001      	movmi	r0, #1
 800e100:	600b      	strmi	r3, [r1, #0]
 800e102:	bf5c      	itt	pl
 800e104:	600b      	strpl	r3, [r1, #0]
 800e106:	2002      	movpl	r0, #2
 800e108:	4770      	bx	lr
 800e10a:	b298      	uxth	r0, r3
 800e10c:	b9a8      	cbnz	r0, 800e13a <__lo0bits+0x52>
 800e10e:	0c1b      	lsrs	r3, r3, #16
 800e110:	2010      	movs	r0, #16
 800e112:	b2da      	uxtb	r2, r3
 800e114:	b90a      	cbnz	r2, 800e11a <__lo0bits+0x32>
 800e116:	3008      	adds	r0, #8
 800e118:	0a1b      	lsrs	r3, r3, #8
 800e11a:	071a      	lsls	r2, r3, #28
 800e11c:	bf04      	itt	eq
 800e11e:	091b      	lsreq	r3, r3, #4
 800e120:	3004      	addeq	r0, #4
 800e122:	079a      	lsls	r2, r3, #30
 800e124:	bf04      	itt	eq
 800e126:	089b      	lsreq	r3, r3, #2
 800e128:	3002      	addeq	r0, #2
 800e12a:	07da      	lsls	r2, r3, #31
 800e12c:	d403      	bmi.n	800e136 <__lo0bits+0x4e>
 800e12e:	085b      	lsrs	r3, r3, #1
 800e130:	f100 0001 	add.w	r0, r0, #1
 800e134:	d005      	beq.n	800e142 <__lo0bits+0x5a>
 800e136:	600b      	str	r3, [r1, #0]
 800e138:	4770      	bx	lr
 800e13a:	4610      	mov	r0, r2
 800e13c:	e7e9      	b.n	800e112 <__lo0bits+0x2a>
 800e13e:	2000      	movs	r0, #0
 800e140:	4770      	bx	lr
 800e142:	2020      	movs	r0, #32
 800e144:	4770      	bx	lr
	...

0800e148 <__i2b>:
 800e148:	b510      	push	{r4, lr}
 800e14a:	460c      	mov	r4, r1
 800e14c:	2101      	movs	r1, #1
 800e14e:	f7ff feb9 	bl	800dec4 <_Balloc>
 800e152:	4602      	mov	r2, r0
 800e154:	b928      	cbnz	r0, 800e162 <__i2b+0x1a>
 800e156:	4b05      	ldr	r3, [pc, #20]	; (800e16c <__i2b+0x24>)
 800e158:	4805      	ldr	r0, [pc, #20]	; (800e170 <__i2b+0x28>)
 800e15a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e15e:	f000 fe01 	bl	800ed64 <__assert_func>
 800e162:	2301      	movs	r3, #1
 800e164:	6144      	str	r4, [r0, #20]
 800e166:	6103      	str	r3, [r0, #16]
 800e168:	bd10      	pop	{r4, pc}
 800e16a:	bf00      	nop
 800e16c:	08010298 	.word	0x08010298
 800e170:	08010324 	.word	0x08010324

0800e174 <__multiply>:
 800e174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e178:	4691      	mov	r9, r2
 800e17a:	690a      	ldr	r2, [r1, #16]
 800e17c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e180:	429a      	cmp	r2, r3
 800e182:	bfb8      	it	lt
 800e184:	460b      	movlt	r3, r1
 800e186:	460c      	mov	r4, r1
 800e188:	bfbc      	itt	lt
 800e18a:	464c      	movlt	r4, r9
 800e18c:	4699      	movlt	r9, r3
 800e18e:	6927      	ldr	r7, [r4, #16]
 800e190:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e194:	68a3      	ldr	r3, [r4, #8]
 800e196:	6861      	ldr	r1, [r4, #4]
 800e198:	eb07 060a 	add.w	r6, r7, sl
 800e19c:	42b3      	cmp	r3, r6
 800e19e:	b085      	sub	sp, #20
 800e1a0:	bfb8      	it	lt
 800e1a2:	3101      	addlt	r1, #1
 800e1a4:	f7ff fe8e 	bl	800dec4 <_Balloc>
 800e1a8:	b930      	cbnz	r0, 800e1b8 <__multiply+0x44>
 800e1aa:	4602      	mov	r2, r0
 800e1ac:	4b44      	ldr	r3, [pc, #272]	; (800e2c0 <__multiply+0x14c>)
 800e1ae:	4845      	ldr	r0, [pc, #276]	; (800e2c4 <__multiply+0x150>)
 800e1b0:	f240 115d 	movw	r1, #349	; 0x15d
 800e1b4:	f000 fdd6 	bl	800ed64 <__assert_func>
 800e1b8:	f100 0514 	add.w	r5, r0, #20
 800e1bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e1c0:	462b      	mov	r3, r5
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	4543      	cmp	r3, r8
 800e1c6:	d321      	bcc.n	800e20c <__multiply+0x98>
 800e1c8:	f104 0314 	add.w	r3, r4, #20
 800e1cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e1d0:	f109 0314 	add.w	r3, r9, #20
 800e1d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e1d8:	9202      	str	r2, [sp, #8]
 800e1da:	1b3a      	subs	r2, r7, r4
 800e1dc:	3a15      	subs	r2, #21
 800e1de:	f022 0203 	bic.w	r2, r2, #3
 800e1e2:	3204      	adds	r2, #4
 800e1e4:	f104 0115 	add.w	r1, r4, #21
 800e1e8:	428f      	cmp	r7, r1
 800e1ea:	bf38      	it	cc
 800e1ec:	2204      	movcc	r2, #4
 800e1ee:	9201      	str	r2, [sp, #4]
 800e1f0:	9a02      	ldr	r2, [sp, #8]
 800e1f2:	9303      	str	r3, [sp, #12]
 800e1f4:	429a      	cmp	r2, r3
 800e1f6:	d80c      	bhi.n	800e212 <__multiply+0x9e>
 800e1f8:	2e00      	cmp	r6, #0
 800e1fa:	dd03      	ble.n	800e204 <__multiply+0x90>
 800e1fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e200:	2b00      	cmp	r3, #0
 800e202:	d05a      	beq.n	800e2ba <__multiply+0x146>
 800e204:	6106      	str	r6, [r0, #16]
 800e206:	b005      	add	sp, #20
 800e208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e20c:	f843 2b04 	str.w	r2, [r3], #4
 800e210:	e7d8      	b.n	800e1c4 <__multiply+0x50>
 800e212:	f8b3 a000 	ldrh.w	sl, [r3]
 800e216:	f1ba 0f00 	cmp.w	sl, #0
 800e21a:	d024      	beq.n	800e266 <__multiply+0xf2>
 800e21c:	f104 0e14 	add.w	lr, r4, #20
 800e220:	46a9      	mov	r9, r5
 800e222:	f04f 0c00 	mov.w	ip, #0
 800e226:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e22a:	f8d9 1000 	ldr.w	r1, [r9]
 800e22e:	fa1f fb82 	uxth.w	fp, r2
 800e232:	b289      	uxth	r1, r1
 800e234:	fb0a 110b 	mla	r1, sl, fp, r1
 800e238:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e23c:	f8d9 2000 	ldr.w	r2, [r9]
 800e240:	4461      	add	r1, ip
 800e242:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e246:	fb0a c20b 	mla	r2, sl, fp, ip
 800e24a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e24e:	b289      	uxth	r1, r1
 800e250:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e254:	4577      	cmp	r7, lr
 800e256:	f849 1b04 	str.w	r1, [r9], #4
 800e25a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e25e:	d8e2      	bhi.n	800e226 <__multiply+0xb2>
 800e260:	9a01      	ldr	r2, [sp, #4]
 800e262:	f845 c002 	str.w	ip, [r5, r2]
 800e266:	9a03      	ldr	r2, [sp, #12]
 800e268:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e26c:	3304      	adds	r3, #4
 800e26e:	f1b9 0f00 	cmp.w	r9, #0
 800e272:	d020      	beq.n	800e2b6 <__multiply+0x142>
 800e274:	6829      	ldr	r1, [r5, #0]
 800e276:	f104 0c14 	add.w	ip, r4, #20
 800e27a:	46ae      	mov	lr, r5
 800e27c:	f04f 0a00 	mov.w	sl, #0
 800e280:	f8bc b000 	ldrh.w	fp, [ip]
 800e284:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e288:	fb09 220b 	mla	r2, r9, fp, r2
 800e28c:	4492      	add	sl, r2
 800e28e:	b289      	uxth	r1, r1
 800e290:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e294:	f84e 1b04 	str.w	r1, [lr], #4
 800e298:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e29c:	f8be 1000 	ldrh.w	r1, [lr]
 800e2a0:	0c12      	lsrs	r2, r2, #16
 800e2a2:	fb09 1102 	mla	r1, r9, r2, r1
 800e2a6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e2aa:	4567      	cmp	r7, ip
 800e2ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e2b0:	d8e6      	bhi.n	800e280 <__multiply+0x10c>
 800e2b2:	9a01      	ldr	r2, [sp, #4]
 800e2b4:	50a9      	str	r1, [r5, r2]
 800e2b6:	3504      	adds	r5, #4
 800e2b8:	e79a      	b.n	800e1f0 <__multiply+0x7c>
 800e2ba:	3e01      	subs	r6, #1
 800e2bc:	e79c      	b.n	800e1f8 <__multiply+0x84>
 800e2be:	bf00      	nop
 800e2c0:	08010298 	.word	0x08010298
 800e2c4:	08010324 	.word	0x08010324

0800e2c8 <__pow5mult>:
 800e2c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2cc:	4615      	mov	r5, r2
 800e2ce:	f012 0203 	ands.w	r2, r2, #3
 800e2d2:	4606      	mov	r6, r0
 800e2d4:	460f      	mov	r7, r1
 800e2d6:	d007      	beq.n	800e2e8 <__pow5mult+0x20>
 800e2d8:	4c25      	ldr	r4, [pc, #148]	; (800e370 <__pow5mult+0xa8>)
 800e2da:	3a01      	subs	r2, #1
 800e2dc:	2300      	movs	r3, #0
 800e2de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e2e2:	f7ff fe51 	bl	800df88 <__multadd>
 800e2e6:	4607      	mov	r7, r0
 800e2e8:	10ad      	asrs	r5, r5, #2
 800e2ea:	d03d      	beq.n	800e368 <__pow5mult+0xa0>
 800e2ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e2ee:	b97c      	cbnz	r4, 800e310 <__pow5mult+0x48>
 800e2f0:	2010      	movs	r0, #16
 800e2f2:	f7ff fdbf 	bl	800de74 <malloc>
 800e2f6:	4602      	mov	r2, r0
 800e2f8:	6270      	str	r0, [r6, #36]	; 0x24
 800e2fa:	b928      	cbnz	r0, 800e308 <__pow5mult+0x40>
 800e2fc:	4b1d      	ldr	r3, [pc, #116]	; (800e374 <__pow5mult+0xac>)
 800e2fe:	481e      	ldr	r0, [pc, #120]	; (800e378 <__pow5mult+0xb0>)
 800e300:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e304:	f000 fd2e 	bl	800ed64 <__assert_func>
 800e308:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e30c:	6004      	str	r4, [r0, #0]
 800e30e:	60c4      	str	r4, [r0, #12]
 800e310:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e314:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e318:	b94c      	cbnz	r4, 800e32e <__pow5mult+0x66>
 800e31a:	f240 2171 	movw	r1, #625	; 0x271
 800e31e:	4630      	mov	r0, r6
 800e320:	f7ff ff12 	bl	800e148 <__i2b>
 800e324:	2300      	movs	r3, #0
 800e326:	f8c8 0008 	str.w	r0, [r8, #8]
 800e32a:	4604      	mov	r4, r0
 800e32c:	6003      	str	r3, [r0, #0]
 800e32e:	f04f 0900 	mov.w	r9, #0
 800e332:	07eb      	lsls	r3, r5, #31
 800e334:	d50a      	bpl.n	800e34c <__pow5mult+0x84>
 800e336:	4639      	mov	r1, r7
 800e338:	4622      	mov	r2, r4
 800e33a:	4630      	mov	r0, r6
 800e33c:	f7ff ff1a 	bl	800e174 <__multiply>
 800e340:	4639      	mov	r1, r7
 800e342:	4680      	mov	r8, r0
 800e344:	4630      	mov	r0, r6
 800e346:	f7ff fdfd 	bl	800df44 <_Bfree>
 800e34a:	4647      	mov	r7, r8
 800e34c:	106d      	asrs	r5, r5, #1
 800e34e:	d00b      	beq.n	800e368 <__pow5mult+0xa0>
 800e350:	6820      	ldr	r0, [r4, #0]
 800e352:	b938      	cbnz	r0, 800e364 <__pow5mult+0x9c>
 800e354:	4622      	mov	r2, r4
 800e356:	4621      	mov	r1, r4
 800e358:	4630      	mov	r0, r6
 800e35a:	f7ff ff0b 	bl	800e174 <__multiply>
 800e35e:	6020      	str	r0, [r4, #0]
 800e360:	f8c0 9000 	str.w	r9, [r0]
 800e364:	4604      	mov	r4, r0
 800e366:	e7e4      	b.n	800e332 <__pow5mult+0x6a>
 800e368:	4638      	mov	r0, r7
 800e36a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e36e:	bf00      	nop
 800e370:	08010470 	.word	0x08010470
 800e374:	08010226 	.word	0x08010226
 800e378:	08010324 	.word	0x08010324

0800e37c <__lshift>:
 800e37c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e380:	460c      	mov	r4, r1
 800e382:	6849      	ldr	r1, [r1, #4]
 800e384:	6923      	ldr	r3, [r4, #16]
 800e386:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e38a:	68a3      	ldr	r3, [r4, #8]
 800e38c:	4607      	mov	r7, r0
 800e38e:	4691      	mov	r9, r2
 800e390:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e394:	f108 0601 	add.w	r6, r8, #1
 800e398:	42b3      	cmp	r3, r6
 800e39a:	db0b      	blt.n	800e3b4 <__lshift+0x38>
 800e39c:	4638      	mov	r0, r7
 800e39e:	f7ff fd91 	bl	800dec4 <_Balloc>
 800e3a2:	4605      	mov	r5, r0
 800e3a4:	b948      	cbnz	r0, 800e3ba <__lshift+0x3e>
 800e3a6:	4602      	mov	r2, r0
 800e3a8:	4b2a      	ldr	r3, [pc, #168]	; (800e454 <__lshift+0xd8>)
 800e3aa:	482b      	ldr	r0, [pc, #172]	; (800e458 <__lshift+0xdc>)
 800e3ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e3b0:	f000 fcd8 	bl	800ed64 <__assert_func>
 800e3b4:	3101      	adds	r1, #1
 800e3b6:	005b      	lsls	r3, r3, #1
 800e3b8:	e7ee      	b.n	800e398 <__lshift+0x1c>
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	f100 0114 	add.w	r1, r0, #20
 800e3c0:	f100 0210 	add.w	r2, r0, #16
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	4553      	cmp	r3, sl
 800e3c8:	db37      	blt.n	800e43a <__lshift+0xbe>
 800e3ca:	6920      	ldr	r0, [r4, #16]
 800e3cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e3d0:	f104 0314 	add.w	r3, r4, #20
 800e3d4:	f019 091f 	ands.w	r9, r9, #31
 800e3d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e3dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e3e0:	d02f      	beq.n	800e442 <__lshift+0xc6>
 800e3e2:	f1c9 0e20 	rsb	lr, r9, #32
 800e3e6:	468a      	mov	sl, r1
 800e3e8:	f04f 0c00 	mov.w	ip, #0
 800e3ec:	681a      	ldr	r2, [r3, #0]
 800e3ee:	fa02 f209 	lsl.w	r2, r2, r9
 800e3f2:	ea42 020c 	orr.w	r2, r2, ip
 800e3f6:	f84a 2b04 	str.w	r2, [sl], #4
 800e3fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3fe:	4298      	cmp	r0, r3
 800e400:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e404:	d8f2      	bhi.n	800e3ec <__lshift+0x70>
 800e406:	1b03      	subs	r3, r0, r4
 800e408:	3b15      	subs	r3, #21
 800e40a:	f023 0303 	bic.w	r3, r3, #3
 800e40e:	3304      	adds	r3, #4
 800e410:	f104 0215 	add.w	r2, r4, #21
 800e414:	4290      	cmp	r0, r2
 800e416:	bf38      	it	cc
 800e418:	2304      	movcc	r3, #4
 800e41a:	f841 c003 	str.w	ip, [r1, r3]
 800e41e:	f1bc 0f00 	cmp.w	ip, #0
 800e422:	d001      	beq.n	800e428 <__lshift+0xac>
 800e424:	f108 0602 	add.w	r6, r8, #2
 800e428:	3e01      	subs	r6, #1
 800e42a:	4638      	mov	r0, r7
 800e42c:	612e      	str	r6, [r5, #16]
 800e42e:	4621      	mov	r1, r4
 800e430:	f7ff fd88 	bl	800df44 <_Bfree>
 800e434:	4628      	mov	r0, r5
 800e436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e43a:	f842 0f04 	str.w	r0, [r2, #4]!
 800e43e:	3301      	adds	r3, #1
 800e440:	e7c1      	b.n	800e3c6 <__lshift+0x4a>
 800e442:	3904      	subs	r1, #4
 800e444:	f853 2b04 	ldr.w	r2, [r3], #4
 800e448:	f841 2f04 	str.w	r2, [r1, #4]!
 800e44c:	4298      	cmp	r0, r3
 800e44e:	d8f9      	bhi.n	800e444 <__lshift+0xc8>
 800e450:	e7ea      	b.n	800e428 <__lshift+0xac>
 800e452:	bf00      	nop
 800e454:	08010298 	.word	0x08010298
 800e458:	08010324 	.word	0x08010324

0800e45c <__mcmp>:
 800e45c:	b530      	push	{r4, r5, lr}
 800e45e:	6902      	ldr	r2, [r0, #16]
 800e460:	690c      	ldr	r4, [r1, #16]
 800e462:	1b12      	subs	r2, r2, r4
 800e464:	d10e      	bne.n	800e484 <__mcmp+0x28>
 800e466:	f100 0314 	add.w	r3, r0, #20
 800e46a:	3114      	adds	r1, #20
 800e46c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e470:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e474:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e478:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e47c:	42a5      	cmp	r5, r4
 800e47e:	d003      	beq.n	800e488 <__mcmp+0x2c>
 800e480:	d305      	bcc.n	800e48e <__mcmp+0x32>
 800e482:	2201      	movs	r2, #1
 800e484:	4610      	mov	r0, r2
 800e486:	bd30      	pop	{r4, r5, pc}
 800e488:	4283      	cmp	r3, r0
 800e48a:	d3f3      	bcc.n	800e474 <__mcmp+0x18>
 800e48c:	e7fa      	b.n	800e484 <__mcmp+0x28>
 800e48e:	f04f 32ff 	mov.w	r2, #4294967295
 800e492:	e7f7      	b.n	800e484 <__mcmp+0x28>

0800e494 <__mdiff>:
 800e494:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e498:	460c      	mov	r4, r1
 800e49a:	4606      	mov	r6, r0
 800e49c:	4611      	mov	r1, r2
 800e49e:	4620      	mov	r0, r4
 800e4a0:	4690      	mov	r8, r2
 800e4a2:	f7ff ffdb 	bl	800e45c <__mcmp>
 800e4a6:	1e05      	subs	r5, r0, #0
 800e4a8:	d110      	bne.n	800e4cc <__mdiff+0x38>
 800e4aa:	4629      	mov	r1, r5
 800e4ac:	4630      	mov	r0, r6
 800e4ae:	f7ff fd09 	bl	800dec4 <_Balloc>
 800e4b2:	b930      	cbnz	r0, 800e4c2 <__mdiff+0x2e>
 800e4b4:	4b3a      	ldr	r3, [pc, #232]	; (800e5a0 <__mdiff+0x10c>)
 800e4b6:	4602      	mov	r2, r0
 800e4b8:	f240 2132 	movw	r1, #562	; 0x232
 800e4bc:	4839      	ldr	r0, [pc, #228]	; (800e5a4 <__mdiff+0x110>)
 800e4be:	f000 fc51 	bl	800ed64 <__assert_func>
 800e4c2:	2301      	movs	r3, #1
 800e4c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e4c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4cc:	bfa4      	itt	ge
 800e4ce:	4643      	movge	r3, r8
 800e4d0:	46a0      	movge	r8, r4
 800e4d2:	4630      	mov	r0, r6
 800e4d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e4d8:	bfa6      	itte	ge
 800e4da:	461c      	movge	r4, r3
 800e4dc:	2500      	movge	r5, #0
 800e4de:	2501      	movlt	r5, #1
 800e4e0:	f7ff fcf0 	bl	800dec4 <_Balloc>
 800e4e4:	b920      	cbnz	r0, 800e4f0 <__mdiff+0x5c>
 800e4e6:	4b2e      	ldr	r3, [pc, #184]	; (800e5a0 <__mdiff+0x10c>)
 800e4e8:	4602      	mov	r2, r0
 800e4ea:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e4ee:	e7e5      	b.n	800e4bc <__mdiff+0x28>
 800e4f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e4f4:	6926      	ldr	r6, [r4, #16]
 800e4f6:	60c5      	str	r5, [r0, #12]
 800e4f8:	f104 0914 	add.w	r9, r4, #20
 800e4fc:	f108 0514 	add.w	r5, r8, #20
 800e500:	f100 0e14 	add.w	lr, r0, #20
 800e504:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e508:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e50c:	f108 0210 	add.w	r2, r8, #16
 800e510:	46f2      	mov	sl, lr
 800e512:	2100      	movs	r1, #0
 800e514:	f859 3b04 	ldr.w	r3, [r9], #4
 800e518:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e51c:	fa1f f883 	uxth.w	r8, r3
 800e520:	fa11 f18b 	uxtah	r1, r1, fp
 800e524:	0c1b      	lsrs	r3, r3, #16
 800e526:	eba1 0808 	sub.w	r8, r1, r8
 800e52a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e52e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e532:	fa1f f888 	uxth.w	r8, r8
 800e536:	1419      	asrs	r1, r3, #16
 800e538:	454e      	cmp	r6, r9
 800e53a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e53e:	f84a 3b04 	str.w	r3, [sl], #4
 800e542:	d8e7      	bhi.n	800e514 <__mdiff+0x80>
 800e544:	1b33      	subs	r3, r6, r4
 800e546:	3b15      	subs	r3, #21
 800e548:	f023 0303 	bic.w	r3, r3, #3
 800e54c:	3304      	adds	r3, #4
 800e54e:	3415      	adds	r4, #21
 800e550:	42a6      	cmp	r6, r4
 800e552:	bf38      	it	cc
 800e554:	2304      	movcc	r3, #4
 800e556:	441d      	add	r5, r3
 800e558:	4473      	add	r3, lr
 800e55a:	469e      	mov	lr, r3
 800e55c:	462e      	mov	r6, r5
 800e55e:	4566      	cmp	r6, ip
 800e560:	d30e      	bcc.n	800e580 <__mdiff+0xec>
 800e562:	f10c 0203 	add.w	r2, ip, #3
 800e566:	1b52      	subs	r2, r2, r5
 800e568:	f022 0203 	bic.w	r2, r2, #3
 800e56c:	3d03      	subs	r5, #3
 800e56e:	45ac      	cmp	ip, r5
 800e570:	bf38      	it	cc
 800e572:	2200      	movcc	r2, #0
 800e574:	441a      	add	r2, r3
 800e576:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e57a:	b17b      	cbz	r3, 800e59c <__mdiff+0x108>
 800e57c:	6107      	str	r7, [r0, #16]
 800e57e:	e7a3      	b.n	800e4c8 <__mdiff+0x34>
 800e580:	f856 8b04 	ldr.w	r8, [r6], #4
 800e584:	fa11 f288 	uxtah	r2, r1, r8
 800e588:	1414      	asrs	r4, r2, #16
 800e58a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e58e:	b292      	uxth	r2, r2
 800e590:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e594:	f84e 2b04 	str.w	r2, [lr], #4
 800e598:	1421      	asrs	r1, r4, #16
 800e59a:	e7e0      	b.n	800e55e <__mdiff+0xca>
 800e59c:	3f01      	subs	r7, #1
 800e59e:	e7ea      	b.n	800e576 <__mdiff+0xe2>
 800e5a0:	08010298 	.word	0x08010298
 800e5a4:	08010324 	.word	0x08010324

0800e5a8 <__ulp>:
 800e5a8:	b082      	sub	sp, #8
 800e5aa:	ed8d 0b00 	vstr	d0, [sp]
 800e5ae:	9b01      	ldr	r3, [sp, #4]
 800e5b0:	4912      	ldr	r1, [pc, #72]	; (800e5fc <__ulp+0x54>)
 800e5b2:	4019      	ands	r1, r3
 800e5b4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e5b8:	2900      	cmp	r1, #0
 800e5ba:	dd05      	ble.n	800e5c8 <__ulp+0x20>
 800e5bc:	2200      	movs	r2, #0
 800e5be:	460b      	mov	r3, r1
 800e5c0:	ec43 2b10 	vmov	d0, r2, r3
 800e5c4:	b002      	add	sp, #8
 800e5c6:	4770      	bx	lr
 800e5c8:	4249      	negs	r1, r1
 800e5ca:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e5ce:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e5d2:	f04f 0200 	mov.w	r2, #0
 800e5d6:	f04f 0300 	mov.w	r3, #0
 800e5da:	da04      	bge.n	800e5e6 <__ulp+0x3e>
 800e5dc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e5e0:	fa41 f300 	asr.w	r3, r1, r0
 800e5e4:	e7ec      	b.n	800e5c0 <__ulp+0x18>
 800e5e6:	f1a0 0114 	sub.w	r1, r0, #20
 800e5ea:	291e      	cmp	r1, #30
 800e5ec:	bfda      	itte	le
 800e5ee:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e5f2:	fa20 f101 	lsrle.w	r1, r0, r1
 800e5f6:	2101      	movgt	r1, #1
 800e5f8:	460a      	mov	r2, r1
 800e5fa:	e7e1      	b.n	800e5c0 <__ulp+0x18>
 800e5fc:	7ff00000 	.word	0x7ff00000

0800e600 <__b2d>:
 800e600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e602:	6905      	ldr	r5, [r0, #16]
 800e604:	f100 0714 	add.w	r7, r0, #20
 800e608:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e60c:	1f2e      	subs	r6, r5, #4
 800e60e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e612:	4620      	mov	r0, r4
 800e614:	f7ff fd48 	bl	800e0a8 <__hi0bits>
 800e618:	f1c0 0320 	rsb	r3, r0, #32
 800e61c:	280a      	cmp	r0, #10
 800e61e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e69c <__b2d+0x9c>
 800e622:	600b      	str	r3, [r1, #0]
 800e624:	dc14      	bgt.n	800e650 <__b2d+0x50>
 800e626:	f1c0 0e0b 	rsb	lr, r0, #11
 800e62a:	fa24 f10e 	lsr.w	r1, r4, lr
 800e62e:	42b7      	cmp	r7, r6
 800e630:	ea41 030c 	orr.w	r3, r1, ip
 800e634:	bf34      	ite	cc
 800e636:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e63a:	2100      	movcs	r1, #0
 800e63c:	3015      	adds	r0, #21
 800e63e:	fa04 f000 	lsl.w	r0, r4, r0
 800e642:	fa21 f10e 	lsr.w	r1, r1, lr
 800e646:	ea40 0201 	orr.w	r2, r0, r1
 800e64a:	ec43 2b10 	vmov	d0, r2, r3
 800e64e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e650:	42b7      	cmp	r7, r6
 800e652:	bf3a      	itte	cc
 800e654:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e658:	f1a5 0608 	subcc.w	r6, r5, #8
 800e65c:	2100      	movcs	r1, #0
 800e65e:	380b      	subs	r0, #11
 800e660:	d017      	beq.n	800e692 <__b2d+0x92>
 800e662:	f1c0 0c20 	rsb	ip, r0, #32
 800e666:	fa04 f500 	lsl.w	r5, r4, r0
 800e66a:	42be      	cmp	r6, r7
 800e66c:	fa21 f40c 	lsr.w	r4, r1, ip
 800e670:	ea45 0504 	orr.w	r5, r5, r4
 800e674:	bf8c      	ite	hi
 800e676:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e67a:	2400      	movls	r4, #0
 800e67c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e680:	fa01 f000 	lsl.w	r0, r1, r0
 800e684:	fa24 f40c 	lsr.w	r4, r4, ip
 800e688:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e68c:	ea40 0204 	orr.w	r2, r0, r4
 800e690:	e7db      	b.n	800e64a <__b2d+0x4a>
 800e692:	ea44 030c 	orr.w	r3, r4, ip
 800e696:	460a      	mov	r2, r1
 800e698:	e7d7      	b.n	800e64a <__b2d+0x4a>
 800e69a:	bf00      	nop
 800e69c:	3ff00000 	.word	0x3ff00000

0800e6a0 <__d2b>:
 800e6a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e6a4:	4689      	mov	r9, r1
 800e6a6:	2101      	movs	r1, #1
 800e6a8:	ec57 6b10 	vmov	r6, r7, d0
 800e6ac:	4690      	mov	r8, r2
 800e6ae:	f7ff fc09 	bl	800dec4 <_Balloc>
 800e6b2:	4604      	mov	r4, r0
 800e6b4:	b930      	cbnz	r0, 800e6c4 <__d2b+0x24>
 800e6b6:	4602      	mov	r2, r0
 800e6b8:	4b25      	ldr	r3, [pc, #148]	; (800e750 <__d2b+0xb0>)
 800e6ba:	4826      	ldr	r0, [pc, #152]	; (800e754 <__d2b+0xb4>)
 800e6bc:	f240 310a 	movw	r1, #778	; 0x30a
 800e6c0:	f000 fb50 	bl	800ed64 <__assert_func>
 800e6c4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e6c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e6cc:	bb35      	cbnz	r5, 800e71c <__d2b+0x7c>
 800e6ce:	2e00      	cmp	r6, #0
 800e6d0:	9301      	str	r3, [sp, #4]
 800e6d2:	d028      	beq.n	800e726 <__d2b+0x86>
 800e6d4:	4668      	mov	r0, sp
 800e6d6:	9600      	str	r6, [sp, #0]
 800e6d8:	f7ff fd06 	bl	800e0e8 <__lo0bits>
 800e6dc:	9900      	ldr	r1, [sp, #0]
 800e6de:	b300      	cbz	r0, 800e722 <__d2b+0x82>
 800e6e0:	9a01      	ldr	r2, [sp, #4]
 800e6e2:	f1c0 0320 	rsb	r3, r0, #32
 800e6e6:	fa02 f303 	lsl.w	r3, r2, r3
 800e6ea:	430b      	orrs	r3, r1
 800e6ec:	40c2      	lsrs	r2, r0
 800e6ee:	6163      	str	r3, [r4, #20]
 800e6f0:	9201      	str	r2, [sp, #4]
 800e6f2:	9b01      	ldr	r3, [sp, #4]
 800e6f4:	61a3      	str	r3, [r4, #24]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	bf14      	ite	ne
 800e6fa:	2202      	movne	r2, #2
 800e6fc:	2201      	moveq	r2, #1
 800e6fe:	6122      	str	r2, [r4, #16]
 800e700:	b1d5      	cbz	r5, 800e738 <__d2b+0x98>
 800e702:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e706:	4405      	add	r5, r0
 800e708:	f8c9 5000 	str.w	r5, [r9]
 800e70c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e710:	f8c8 0000 	str.w	r0, [r8]
 800e714:	4620      	mov	r0, r4
 800e716:	b003      	add	sp, #12
 800e718:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e71c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e720:	e7d5      	b.n	800e6ce <__d2b+0x2e>
 800e722:	6161      	str	r1, [r4, #20]
 800e724:	e7e5      	b.n	800e6f2 <__d2b+0x52>
 800e726:	a801      	add	r0, sp, #4
 800e728:	f7ff fcde 	bl	800e0e8 <__lo0bits>
 800e72c:	9b01      	ldr	r3, [sp, #4]
 800e72e:	6163      	str	r3, [r4, #20]
 800e730:	2201      	movs	r2, #1
 800e732:	6122      	str	r2, [r4, #16]
 800e734:	3020      	adds	r0, #32
 800e736:	e7e3      	b.n	800e700 <__d2b+0x60>
 800e738:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e73c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e740:	f8c9 0000 	str.w	r0, [r9]
 800e744:	6918      	ldr	r0, [r3, #16]
 800e746:	f7ff fcaf 	bl	800e0a8 <__hi0bits>
 800e74a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e74e:	e7df      	b.n	800e710 <__d2b+0x70>
 800e750:	08010298 	.word	0x08010298
 800e754:	08010324 	.word	0x08010324

0800e758 <__ratio>:
 800e758:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e75c:	4688      	mov	r8, r1
 800e75e:	4669      	mov	r1, sp
 800e760:	4681      	mov	r9, r0
 800e762:	f7ff ff4d 	bl	800e600 <__b2d>
 800e766:	a901      	add	r1, sp, #4
 800e768:	4640      	mov	r0, r8
 800e76a:	ec55 4b10 	vmov	r4, r5, d0
 800e76e:	f7ff ff47 	bl	800e600 <__b2d>
 800e772:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e776:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e77a:	eba3 0c02 	sub.w	ip, r3, r2
 800e77e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e782:	1a9b      	subs	r3, r3, r2
 800e784:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e788:	ec51 0b10 	vmov	r0, r1, d0
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	bfd6      	itet	le
 800e790:	460a      	movle	r2, r1
 800e792:	462a      	movgt	r2, r5
 800e794:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e798:	468b      	mov	fp, r1
 800e79a:	462f      	mov	r7, r5
 800e79c:	bfd4      	ite	le
 800e79e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e7a2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e7a6:	4620      	mov	r0, r4
 800e7a8:	ee10 2a10 	vmov	r2, s0
 800e7ac:	465b      	mov	r3, fp
 800e7ae:	4639      	mov	r1, r7
 800e7b0:	f7f2 f84c 	bl	800084c <__aeabi_ddiv>
 800e7b4:	ec41 0b10 	vmov	d0, r0, r1
 800e7b8:	b003      	add	sp, #12
 800e7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e7be <__copybits>:
 800e7be:	3901      	subs	r1, #1
 800e7c0:	b570      	push	{r4, r5, r6, lr}
 800e7c2:	1149      	asrs	r1, r1, #5
 800e7c4:	6914      	ldr	r4, [r2, #16]
 800e7c6:	3101      	adds	r1, #1
 800e7c8:	f102 0314 	add.w	r3, r2, #20
 800e7cc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e7d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e7d4:	1f05      	subs	r5, r0, #4
 800e7d6:	42a3      	cmp	r3, r4
 800e7d8:	d30c      	bcc.n	800e7f4 <__copybits+0x36>
 800e7da:	1aa3      	subs	r3, r4, r2
 800e7dc:	3b11      	subs	r3, #17
 800e7de:	f023 0303 	bic.w	r3, r3, #3
 800e7e2:	3211      	adds	r2, #17
 800e7e4:	42a2      	cmp	r2, r4
 800e7e6:	bf88      	it	hi
 800e7e8:	2300      	movhi	r3, #0
 800e7ea:	4418      	add	r0, r3
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	4288      	cmp	r0, r1
 800e7f0:	d305      	bcc.n	800e7fe <__copybits+0x40>
 800e7f2:	bd70      	pop	{r4, r5, r6, pc}
 800e7f4:	f853 6b04 	ldr.w	r6, [r3], #4
 800e7f8:	f845 6f04 	str.w	r6, [r5, #4]!
 800e7fc:	e7eb      	b.n	800e7d6 <__copybits+0x18>
 800e7fe:	f840 3b04 	str.w	r3, [r0], #4
 800e802:	e7f4      	b.n	800e7ee <__copybits+0x30>

0800e804 <__any_on>:
 800e804:	f100 0214 	add.w	r2, r0, #20
 800e808:	6900      	ldr	r0, [r0, #16]
 800e80a:	114b      	asrs	r3, r1, #5
 800e80c:	4298      	cmp	r0, r3
 800e80e:	b510      	push	{r4, lr}
 800e810:	db11      	blt.n	800e836 <__any_on+0x32>
 800e812:	dd0a      	ble.n	800e82a <__any_on+0x26>
 800e814:	f011 011f 	ands.w	r1, r1, #31
 800e818:	d007      	beq.n	800e82a <__any_on+0x26>
 800e81a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e81e:	fa24 f001 	lsr.w	r0, r4, r1
 800e822:	fa00 f101 	lsl.w	r1, r0, r1
 800e826:	428c      	cmp	r4, r1
 800e828:	d10b      	bne.n	800e842 <__any_on+0x3e>
 800e82a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e82e:	4293      	cmp	r3, r2
 800e830:	d803      	bhi.n	800e83a <__any_on+0x36>
 800e832:	2000      	movs	r0, #0
 800e834:	bd10      	pop	{r4, pc}
 800e836:	4603      	mov	r3, r0
 800e838:	e7f7      	b.n	800e82a <__any_on+0x26>
 800e83a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e83e:	2900      	cmp	r1, #0
 800e840:	d0f5      	beq.n	800e82e <__any_on+0x2a>
 800e842:	2001      	movs	r0, #1
 800e844:	e7f6      	b.n	800e834 <__any_on+0x30>

0800e846 <_calloc_r>:
 800e846:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e848:	fba1 2402 	umull	r2, r4, r1, r2
 800e84c:	b94c      	cbnz	r4, 800e862 <_calloc_r+0x1c>
 800e84e:	4611      	mov	r1, r2
 800e850:	9201      	str	r2, [sp, #4]
 800e852:	f000 f87b 	bl	800e94c <_malloc_r>
 800e856:	9a01      	ldr	r2, [sp, #4]
 800e858:	4605      	mov	r5, r0
 800e85a:	b930      	cbnz	r0, 800e86a <_calloc_r+0x24>
 800e85c:	4628      	mov	r0, r5
 800e85e:	b003      	add	sp, #12
 800e860:	bd30      	pop	{r4, r5, pc}
 800e862:	220c      	movs	r2, #12
 800e864:	6002      	str	r2, [r0, #0]
 800e866:	2500      	movs	r5, #0
 800e868:	e7f8      	b.n	800e85c <_calloc_r+0x16>
 800e86a:	4621      	mov	r1, r4
 800e86c:	f7fc fbbe 	bl	800afec <memset>
 800e870:	e7f4      	b.n	800e85c <_calloc_r+0x16>
	...

0800e874 <_free_r>:
 800e874:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e876:	2900      	cmp	r1, #0
 800e878:	d044      	beq.n	800e904 <_free_r+0x90>
 800e87a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e87e:	9001      	str	r0, [sp, #4]
 800e880:	2b00      	cmp	r3, #0
 800e882:	f1a1 0404 	sub.w	r4, r1, #4
 800e886:	bfb8      	it	lt
 800e888:	18e4      	addlt	r4, r4, r3
 800e88a:	f000 fab5 	bl	800edf8 <__malloc_lock>
 800e88e:	4a1e      	ldr	r2, [pc, #120]	; (800e908 <_free_r+0x94>)
 800e890:	9801      	ldr	r0, [sp, #4]
 800e892:	6813      	ldr	r3, [r2, #0]
 800e894:	b933      	cbnz	r3, 800e8a4 <_free_r+0x30>
 800e896:	6063      	str	r3, [r4, #4]
 800e898:	6014      	str	r4, [r2, #0]
 800e89a:	b003      	add	sp, #12
 800e89c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e8a0:	f000 bab0 	b.w	800ee04 <__malloc_unlock>
 800e8a4:	42a3      	cmp	r3, r4
 800e8a6:	d908      	bls.n	800e8ba <_free_r+0x46>
 800e8a8:	6825      	ldr	r5, [r4, #0]
 800e8aa:	1961      	adds	r1, r4, r5
 800e8ac:	428b      	cmp	r3, r1
 800e8ae:	bf01      	itttt	eq
 800e8b0:	6819      	ldreq	r1, [r3, #0]
 800e8b2:	685b      	ldreq	r3, [r3, #4]
 800e8b4:	1949      	addeq	r1, r1, r5
 800e8b6:	6021      	streq	r1, [r4, #0]
 800e8b8:	e7ed      	b.n	800e896 <_free_r+0x22>
 800e8ba:	461a      	mov	r2, r3
 800e8bc:	685b      	ldr	r3, [r3, #4]
 800e8be:	b10b      	cbz	r3, 800e8c4 <_free_r+0x50>
 800e8c0:	42a3      	cmp	r3, r4
 800e8c2:	d9fa      	bls.n	800e8ba <_free_r+0x46>
 800e8c4:	6811      	ldr	r1, [r2, #0]
 800e8c6:	1855      	adds	r5, r2, r1
 800e8c8:	42a5      	cmp	r5, r4
 800e8ca:	d10b      	bne.n	800e8e4 <_free_r+0x70>
 800e8cc:	6824      	ldr	r4, [r4, #0]
 800e8ce:	4421      	add	r1, r4
 800e8d0:	1854      	adds	r4, r2, r1
 800e8d2:	42a3      	cmp	r3, r4
 800e8d4:	6011      	str	r1, [r2, #0]
 800e8d6:	d1e0      	bne.n	800e89a <_free_r+0x26>
 800e8d8:	681c      	ldr	r4, [r3, #0]
 800e8da:	685b      	ldr	r3, [r3, #4]
 800e8dc:	6053      	str	r3, [r2, #4]
 800e8de:	4421      	add	r1, r4
 800e8e0:	6011      	str	r1, [r2, #0]
 800e8e2:	e7da      	b.n	800e89a <_free_r+0x26>
 800e8e4:	d902      	bls.n	800e8ec <_free_r+0x78>
 800e8e6:	230c      	movs	r3, #12
 800e8e8:	6003      	str	r3, [r0, #0]
 800e8ea:	e7d6      	b.n	800e89a <_free_r+0x26>
 800e8ec:	6825      	ldr	r5, [r4, #0]
 800e8ee:	1961      	adds	r1, r4, r5
 800e8f0:	428b      	cmp	r3, r1
 800e8f2:	bf04      	itt	eq
 800e8f4:	6819      	ldreq	r1, [r3, #0]
 800e8f6:	685b      	ldreq	r3, [r3, #4]
 800e8f8:	6063      	str	r3, [r4, #4]
 800e8fa:	bf04      	itt	eq
 800e8fc:	1949      	addeq	r1, r1, r5
 800e8fe:	6021      	streq	r1, [r4, #0]
 800e900:	6054      	str	r4, [r2, #4]
 800e902:	e7ca      	b.n	800e89a <_free_r+0x26>
 800e904:	b003      	add	sp, #12
 800e906:	bd30      	pop	{r4, r5, pc}
 800e908:	20000b20 	.word	0x20000b20

0800e90c <sbrk_aligned>:
 800e90c:	b570      	push	{r4, r5, r6, lr}
 800e90e:	4e0e      	ldr	r6, [pc, #56]	; (800e948 <sbrk_aligned+0x3c>)
 800e910:	460c      	mov	r4, r1
 800e912:	6831      	ldr	r1, [r6, #0]
 800e914:	4605      	mov	r5, r0
 800e916:	b911      	cbnz	r1, 800e91e <sbrk_aligned+0x12>
 800e918:	f000 f9f2 	bl	800ed00 <_sbrk_r>
 800e91c:	6030      	str	r0, [r6, #0]
 800e91e:	4621      	mov	r1, r4
 800e920:	4628      	mov	r0, r5
 800e922:	f000 f9ed 	bl	800ed00 <_sbrk_r>
 800e926:	1c43      	adds	r3, r0, #1
 800e928:	d00a      	beq.n	800e940 <sbrk_aligned+0x34>
 800e92a:	1cc4      	adds	r4, r0, #3
 800e92c:	f024 0403 	bic.w	r4, r4, #3
 800e930:	42a0      	cmp	r0, r4
 800e932:	d007      	beq.n	800e944 <sbrk_aligned+0x38>
 800e934:	1a21      	subs	r1, r4, r0
 800e936:	4628      	mov	r0, r5
 800e938:	f000 f9e2 	bl	800ed00 <_sbrk_r>
 800e93c:	3001      	adds	r0, #1
 800e93e:	d101      	bne.n	800e944 <sbrk_aligned+0x38>
 800e940:	f04f 34ff 	mov.w	r4, #4294967295
 800e944:	4620      	mov	r0, r4
 800e946:	bd70      	pop	{r4, r5, r6, pc}
 800e948:	20000b24 	.word	0x20000b24

0800e94c <_malloc_r>:
 800e94c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e950:	1ccd      	adds	r5, r1, #3
 800e952:	f025 0503 	bic.w	r5, r5, #3
 800e956:	3508      	adds	r5, #8
 800e958:	2d0c      	cmp	r5, #12
 800e95a:	bf38      	it	cc
 800e95c:	250c      	movcc	r5, #12
 800e95e:	2d00      	cmp	r5, #0
 800e960:	4607      	mov	r7, r0
 800e962:	db01      	blt.n	800e968 <_malloc_r+0x1c>
 800e964:	42a9      	cmp	r1, r5
 800e966:	d905      	bls.n	800e974 <_malloc_r+0x28>
 800e968:	230c      	movs	r3, #12
 800e96a:	603b      	str	r3, [r7, #0]
 800e96c:	2600      	movs	r6, #0
 800e96e:	4630      	mov	r0, r6
 800e970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e974:	4e2e      	ldr	r6, [pc, #184]	; (800ea30 <_malloc_r+0xe4>)
 800e976:	f000 fa3f 	bl	800edf8 <__malloc_lock>
 800e97a:	6833      	ldr	r3, [r6, #0]
 800e97c:	461c      	mov	r4, r3
 800e97e:	bb34      	cbnz	r4, 800e9ce <_malloc_r+0x82>
 800e980:	4629      	mov	r1, r5
 800e982:	4638      	mov	r0, r7
 800e984:	f7ff ffc2 	bl	800e90c <sbrk_aligned>
 800e988:	1c43      	adds	r3, r0, #1
 800e98a:	4604      	mov	r4, r0
 800e98c:	d14d      	bne.n	800ea2a <_malloc_r+0xde>
 800e98e:	6834      	ldr	r4, [r6, #0]
 800e990:	4626      	mov	r6, r4
 800e992:	2e00      	cmp	r6, #0
 800e994:	d140      	bne.n	800ea18 <_malloc_r+0xcc>
 800e996:	6823      	ldr	r3, [r4, #0]
 800e998:	4631      	mov	r1, r6
 800e99a:	4638      	mov	r0, r7
 800e99c:	eb04 0803 	add.w	r8, r4, r3
 800e9a0:	f000 f9ae 	bl	800ed00 <_sbrk_r>
 800e9a4:	4580      	cmp	r8, r0
 800e9a6:	d13a      	bne.n	800ea1e <_malloc_r+0xd2>
 800e9a8:	6821      	ldr	r1, [r4, #0]
 800e9aa:	3503      	adds	r5, #3
 800e9ac:	1a6d      	subs	r5, r5, r1
 800e9ae:	f025 0503 	bic.w	r5, r5, #3
 800e9b2:	3508      	adds	r5, #8
 800e9b4:	2d0c      	cmp	r5, #12
 800e9b6:	bf38      	it	cc
 800e9b8:	250c      	movcc	r5, #12
 800e9ba:	4629      	mov	r1, r5
 800e9bc:	4638      	mov	r0, r7
 800e9be:	f7ff ffa5 	bl	800e90c <sbrk_aligned>
 800e9c2:	3001      	adds	r0, #1
 800e9c4:	d02b      	beq.n	800ea1e <_malloc_r+0xd2>
 800e9c6:	6823      	ldr	r3, [r4, #0]
 800e9c8:	442b      	add	r3, r5
 800e9ca:	6023      	str	r3, [r4, #0]
 800e9cc:	e00e      	b.n	800e9ec <_malloc_r+0xa0>
 800e9ce:	6822      	ldr	r2, [r4, #0]
 800e9d0:	1b52      	subs	r2, r2, r5
 800e9d2:	d41e      	bmi.n	800ea12 <_malloc_r+0xc6>
 800e9d4:	2a0b      	cmp	r2, #11
 800e9d6:	d916      	bls.n	800ea06 <_malloc_r+0xba>
 800e9d8:	1961      	adds	r1, r4, r5
 800e9da:	42a3      	cmp	r3, r4
 800e9dc:	6025      	str	r5, [r4, #0]
 800e9de:	bf18      	it	ne
 800e9e0:	6059      	strne	r1, [r3, #4]
 800e9e2:	6863      	ldr	r3, [r4, #4]
 800e9e4:	bf08      	it	eq
 800e9e6:	6031      	streq	r1, [r6, #0]
 800e9e8:	5162      	str	r2, [r4, r5]
 800e9ea:	604b      	str	r3, [r1, #4]
 800e9ec:	4638      	mov	r0, r7
 800e9ee:	f104 060b 	add.w	r6, r4, #11
 800e9f2:	f000 fa07 	bl	800ee04 <__malloc_unlock>
 800e9f6:	f026 0607 	bic.w	r6, r6, #7
 800e9fa:	1d23      	adds	r3, r4, #4
 800e9fc:	1af2      	subs	r2, r6, r3
 800e9fe:	d0b6      	beq.n	800e96e <_malloc_r+0x22>
 800ea00:	1b9b      	subs	r3, r3, r6
 800ea02:	50a3      	str	r3, [r4, r2]
 800ea04:	e7b3      	b.n	800e96e <_malloc_r+0x22>
 800ea06:	6862      	ldr	r2, [r4, #4]
 800ea08:	42a3      	cmp	r3, r4
 800ea0a:	bf0c      	ite	eq
 800ea0c:	6032      	streq	r2, [r6, #0]
 800ea0e:	605a      	strne	r2, [r3, #4]
 800ea10:	e7ec      	b.n	800e9ec <_malloc_r+0xa0>
 800ea12:	4623      	mov	r3, r4
 800ea14:	6864      	ldr	r4, [r4, #4]
 800ea16:	e7b2      	b.n	800e97e <_malloc_r+0x32>
 800ea18:	4634      	mov	r4, r6
 800ea1a:	6876      	ldr	r6, [r6, #4]
 800ea1c:	e7b9      	b.n	800e992 <_malloc_r+0x46>
 800ea1e:	230c      	movs	r3, #12
 800ea20:	603b      	str	r3, [r7, #0]
 800ea22:	4638      	mov	r0, r7
 800ea24:	f000 f9ee 	bl	800ee04 <__malloc_unlock>
 800ea28:	e7a1      	b.n	800e96e <_malloc_r+0x22>
 800ea2a:	6025      	str	r5, [r4, #0]
 800ea2c:	e7de      	b.n	800e9ec <_malloc_r+0xa0>
 800ea2e:	bf00      	nop
 800ea30:	20000b20 	.word	0x20000b20

0800ea34 <__ssputs_r>:
 800ea34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea38:	688e      	ldr	r6, [r1, #8]
 800ea3a:	429e      	cmp	r6, r3
 800ea3c:	4682      	mov	sl, r0
 800ea3e:	460c      	mov	r4, r1
 800ea40:	4690      	mov	r8, r2
 800ea42:	461f      	mov	r7, r3
 800ea44:	d838      	bhi.n	800eab8 <__ssputs_r+0x84>
 800ea46:	898a      	ldrh	r2, [r1, #12]
 800ea48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ea4c:	d032      	beq.n	800eab4 <__ssputs_r+0x80>
 800ea4e:	6825      	ldr	r5, [r4, #0]
 800ea50:	6909      	ldr	r1, [r1, #16]
 800ea52:	eba5 0901 	sub.w	r9, r5, r1
 800ea56:	6965      	ldr	r5, [r4, #20]
 800ea58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ea5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ea60:	3301      	adds	r3, #1
 800ea62:	444b      	add	r3, r9
 800ea64:	106d      	asrs	r5, r5, #1
 800ea66:	429d      	cmp	r5, r3
 800ea68:	bf38      	it	cc
 800ea6a:	461d      	movcc	r5, r3
 800ea6c:	0553      	lsls	r3, r2, #21
 800ea6e:	d531      	bpl.n	800ead4 <__ssputs_r+0xa0>
 800ea70:	4629      	mov	r1, r5
 800ea72:	f7ff ff6b 	bl	800e94c <_malloc_r>
 800ea76:	4606      	mov	r6, r0
 800ea78:	b950      	cbnz	r0, 800ea90 <__ssputs_r+0x5c>
 800ea7a:	230c      	movs	r3, #12
 800ea7c:	f8ca 3000 	str.w	r3, [sl]
 800ea80:	89a3      	ldrh	r3, [r4, #12]
 800ea82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea86:	81a3      	strh	r3, [r4, #12]
 800ea88:	f04f 30ff 	mov.w	r0, #4294967295
 800ea8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea90:	6921      	ldr	r1, [r4, #16]
 800ea92:	464a      	mov	r2, r9
 800ea94:	f7ff fa08 	bl	800dea8 <memcpy>
 800ea98:	89a3      	ldrh	r3, [r4, #12]
 800ea9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ea9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eaa2:	81a3      	strh	r3, [r4, #12]
 800eaa4:	6126      	str	r6, [r4, #16]
 800eaa6:	6165      	str	r5, [r4, #20]
 800eaa8:	444e      	add	r6, r9
 800eaaa:	eba5 0509 	sub.w	r5, r5, r9
 800eaae:	6026      	str	r6, [r4, #0]
 800eab0:	60a5      	str	r5, [r4, #8]
 800eab2:	463e      	mov	r6, r7
 800eab4:	42be      	cmp	r6, r7
 800eab6:	d900      	bls.n	800eaba <__ssputs_r+0x86>
 800eab8:	463e      	mov	r6, r7
 800eaba:	6820      	ldr	r0, [r4, #0]
 800eabc:	4632      	mov	r2, r6
 800eabe:	4641      	mov	r1, r8
 800eac0:	f000 f980 	bl	800edc4 <memmove>
 800eac4:	68a3      	ldr	r3, [r4, #8]
 800eac6:	1b9b      	subs	r3, r3, r6
 800eac8:	60a3      	str	r3, [r4, #8]
 800eaca:	6823      	ldr	r3, [r4, #0]
 800eacc:	4433      	add	r3, r6
 800eace:	6023      	str	r3, [r4, #0]
 800ead0:	2000      	movs	r0, #0
 800ead2:	e7db      	b.n	800ea8c <__ssputs_r+0x58>
 800ead4:	462a      	mov	r2, r5
 800ead6:	f000 f99b 	bl	800ee10 <_realloc_r>
 800eada:	4606      	mov	r6, r0
 800eadc:	2800      	cmp	r0, #0
 800eade:	d1e1      	bne.n	800eaa4 <__ssputs_r+0x70>
 800eae0:	6921      	ldr	r1, [r4, #16]
 800eae2:	4650      	mov	r0, sl
 800eae4:	f7ff fec6 	bl	800e874 <_free_r>
 800eae8:	e7c7      	b.n	800ea7a <__ssputs_r+0x46>
	...

0800eaec <_svfiprintf_r>:
 800eaec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaf0:	4698      	mov	r8, r3
 800eaf2:	898b      	ldrh	r3, [r1, #12]
 800eaf4:	061b      	lsls	r3, r3, #24
 800eaf6:	b09d      	sub	sp, #116	; 0x74
 800eaf8:	4607      	mov	r7, r0
 800eafa:	460d      	mov	r5, r1
 800eafc:	4614      	mov	r4, r2
 800eafe:	d50e      	bpl.n	800eb1e <_svfiprintf_r+0x32>
 800eb00:	690b      	ldr	r3, [r1, #16]
 800eb02:	b963      	cbnz	r3, 800eb1e <_svfiprintf_r+0x32>
 800eb04:	2140      	movs	r1, #64	; 0x40
 800eb06:	f7ff ff21 	bl	800e94c <_malloc_r>
 800eb0a:	6028      	str	r0, [r5, #0]
 800eb0c:	6128      	str	r0, [r5, #16]
 800eb0e:	b920      	cbnz	r0, 800eb1a <_svfiprintf_r+0x2e>
 800eb10:	230c      	movs	r3, #12
 800eb12:	603b      	str	r3, [r7, #0]
 800eb14:	f04f 30ff 	mov.w	r0, #4294967295
 800eb18:	e0d1      	b.n	800ecbe <_svfiprintf_r+0x1d2>
 800eb1a:	2340      	movs	r3, #64	; 0x40
 800eb1c:	616b      	str	r3, [r5, #20]
 800eb1e:	2300      	movs	r3, #0
 800eb20:	9309      	str	r3, [sp, #36]	; 0x24
 800eb22:	2320      	movs	r3, #32
 800eb24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eb28:	f8cd 800c 	str.w	r8, [sp, #12]
 800eb2c:	2330      	movs	r3, #48	; 0x30
 800eb2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ecd8 <_svfiprintf_r+0x1ec>
 800eb32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eb36:	f04f 0901 	mov.w	r9, #1
 800eb3a:	4623      	mov	r3, r4
 800eb3c:	469a      	mov	sl, r3
 800eb3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb42:	b10a      	cbz	r2, 800eb48 <_svfiprintf_r+0x5c>
 800eb44:	2a25      	cmp	r2, #37	; 0x25
 800eb46:	d1f9      	bne.n	800eb3c <_svfiprintf_r+0x50>
 800eb48:	ebba 0b04 	subs.w	fp, sl, r4
 800eb4c:	d00b      	beq.n	800eb66 <_svfiprintf_r+0x7a>
 800eb4e:	465b      	mov	r3, fp
 800eb50:	4622      	mov	r2, r4
 800eb52:	4629      	mov	r1, r5
 800eb54:	4638      	mov	r0, r7
 800eb56:	f7ff ff6d 	bl	800ea34 <__ssputs_r>
 800eb5a:	3001      	adds	r0, #1
 800eb5c:	f000 80aa 	beq.w	800ecb4 <_svfiprintf_r+0x1c8>
 800eb60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb62:	445a      	add	r2, fp
 800eb64:	9209      	str	r2, [sp, #36]	; 0x24
 800eb66:	f89a 3000 	ldrb.w	r3, [sl]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	f000 80a2 	beq.w	800ecb4 <_svfiprintf_r+0x1c8>
 800eb70:	2300      	movs	r3, #0
 800eb72:	f04f 32ff 	mov.w	r2, #4294967295
 800eb76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb7a:	f10a 0a01 	add.w	sl, sl, #1
 800eb7e:	9304      	str	r3, [sp, #16]
 800eb80:	9307      	str	r3, [sp, #28]
 800eb82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eb86:	931a      	str	r3, [sp, #104]	; 0x68
 800eb88:	4654      	mov	r4, sl
 800eb8a:	2205      	movs	r2, #5
 800eb8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb90:	4851      	ldr	r0, [pc, #324]	; (800ecd8 <_svfiprintf_r+0x1ec>)
 800eb92:	f7f1 fb25 	bl	80001e0 <memchr>
 800eb96:	9a04      	ldr	r2, [sp, #16]
 800eb98:	b9d8      	cbnz	r0, 800ebd2 <_svfiprintf_r+0xe6>
 800eb9a:	06d0      	lsls	r0, r2, #27
 800eb9c:	bf44      	itt	mi
 800eb9e:	2320      	movmi	r3, #32
 800eba0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eba4:	0711      	lsls	r1, r2, #28
 800eba6:	bf44      	itt	mi
 800eba8:	232b      	movmi	r3, #43	; 0x2b
 800ebaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ebae:	f89a 3000 	ldrb.w	r3, [sl]
 800ebb2:	2b2a      	cmp	r3, #42	; 0x2a
 800ebb4:	d015      	beq.n	800ebe2 <_svfiprintf_r+0xf6>
 800ebb6:	9a07      	ldr	r2, [sp, #28]
 800ebb8:	4654      	mov	r4, sl
 800ebba:	2000      	movs	r0, #0
 800ebbc:	f04f 0c0a 	mov.w	ip, #10
 800ebc0:	4621      	mov	r1, r4
 800ebc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ebc6:	3b30      	subs	r3, #48	; 0x30
 800ebc8:	2b09      	cmp	r3, #9
 800ebca:	d94e      	bls.n	800ec6a <_svfiprintf_r+0x17e>
 800ebcc:	b1b0      	cbz	r0, 800ebfc <_svfiprintf_r+0x110>
 800ebce:	9207      	str	r2, [sp, #28]
 800ebd0:	e014      	b.n	800ebfc <_svfiprintf_r+0x110>
 800ebd2:	eba0 0308 	sub.w	r3, r0, r8
 800ebd6:	fa09 f303 	lsl.w	r3, r9, r3
 800ebda:	4313      	orrs	r3, r2
 800ebdc:	9304      	str	r3, [sp, #16]
 800ebde:	46a2      	mov	sl, r4
 800ebe0:	e7d2      	b.n	800eb88 <_svfiprintf_r+0x9c>
 800ebe2:	9b03      	ldr	r3, [sp, #12]
 800ebe4:	1d19      	adds	r1, r3, #4
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	9103      	str	r1, [sp, #12]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	bfbb      	ittet	lt
 800ebee:	425b      	neglt	r3, r3
 800ebf0:	f042 0202 	orrlt.w	r2, r2, #2
 800ebf4:	9307      	strge	r3, [sp, #28]
 800ebf6:	9307      	strlt	r3, [sp, #28]
 800ebf8:	bfb8      	it	lt
 800ebfa:	9204      	strlt	r2, [sp, #16]
 800ebfc:	7823      	ldrb	r3, [r4, #0]
 800ebfe:	2b2e      	cmp	r3, #46	; 0x2e
 800ec00:	d10c      	bne.n	800ec1c <_svfiprintf_r+0x130>
 800ec02:	7863      	ldrb	r3, [r4, #1]
 800ec04:	2b2a      	cmp	r3, #42	; 0x2a
 800ec06:	d135      	bne.n	800ec74 <_svfiprintf_r+0x188>
 800ec08:	9b03      	ldr	r3, [sp, #12]
 800ec0a:	1d1a      	adds	r2, r3, #4
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	9203      	str	r2, [sp, #12]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	bfb8      	it	lt
 800ec14:	f04f 33ff 	movlt.w	r3, #4294967295
 800ec18:	3402      	adds	r4, #2
 800ec1a:	9305      	str	r3, [sp, #20]
 800ec1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ece8 <_svfiprintf_r+0x1fc>
 800ec20:	7821      	ldrb	r1, [r4, #0]
 800ec22:	2203      	movs	r2, #3
 800ec24:	4650      	mov	r0, sl
 800ec26:	f7f1 fadb 	bl	80001e0 <memchr>
 800ec2a:	b140      	cbz	r0, 800ec3e <_svfiprintf_r+0x152>
 800ec2c:	2340      	movs	r3, #64	; 0x40
 800ec2e:	eba0 000a 	sub.w	r0, r0, sl
 800ec32:	fa03 f000 	lsl.w	r0, r3, r0
 800ec36:	9b04      	ldr	r3, [sp, #16]
 800ec38:	4303      	orrs	r3, r0
 800ec3a:	3401      	adds	r4, #1
 800ec3c:	9304      	str	r3, [sp, #16]
 800ec3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec42:	4826      	ldr	r0, [pc, #152]	; (800ecdc <_svfiprintf_r+0x1f0>)
 800ec44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ec48:	2206      	movs	r2, #6
 800ec4a:	f7f1 fac9 	bl	80001e0 <memchr>
 800ec4e:	2800      	cmp	r0, #0
 800ec50:	d038      	beq.n	800ecc4 <_svfiprintf_r+0x1d8>
 800ec52:	4b23      	ldr	r3, [pc, #140]	; (800ece0 <_svfiprintf_r+0x1f4>)
 800ec54:	bb1b      	cbnz	r3, 800ec9e <_svfiprintf_r+0x1b2>
 800ec56:	9b03      	ldr	r3, [sp, #12]
 800ec58:	3307      	adds	r3, #7
 800ec5a:	f023 0307 	bic.w	r3, r3, #7
 800ec5e:	3308      	adds	r3, #8
 800ec60:	9303      	str	r3, [sp, #12]
 800ec62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec64:	4433      	add	r3, r6
 800ec66:	9309      	str	r3, [sp, #36]	; 0x24
 800ec68:	e767      	b.n	800eb3a <_svfiprintf_r+0x4e>
 800ec6a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ec6e:	460c      	mov	r4, r1
 800ec70:	2001      	movs	r0, #1
 800ec72:	e7a5      	b.n	800ebc0 <_svfiprintf_r+0xd4>
 800ec74:	2300      	movs	r3, #0
 800ec76:	3401      	adds	r4, #1
 800ec78:	9305      	str	r3, [sp, #20]
 800ec7a:	4619      	mov	r1, r3
 800ec7c:	f04f 0c0a 	mov.w	ip, #10
 800ec80:	4620      	mov	r0, r4
 800ec82:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec86:	3a30      	subs	r2, #48	; 0x30
 800ec88:	2a09      	cmp	r2, #9
 800ec8a:	d903      	bls.n	800ec94 <_svfiprintf_r+0x1a8>
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d0c5      	beq.n	800ec1c <_svfiprintf_r+0x130>
 800ec90:	9105      	str	r1, [sp, #20]
 800ec92:	e7c3      	b.n	800ec1c <_svfiprintf_r+0x130>
 800ec94:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec98:	4604      	mov	r4, r0
 800ec9a:	2301      	movs	r3, #1
 800ec9c:	e7f0      	b.n	800ec80 <_svfiprintf_r+0x194>
 800ec9e:	ab03      	add	r3, sp, #12
 800eca0:	9300      	str	r3, [sp, #0]
 800eca2:	462a      	mov	r2, r5
 800eca4:	4b0f      	ldr	r3, [pc, #60]	; (800ece4 <_svfiprintf_r+0x1f8>)
 800eca6:	a904      	add	r1, sp, #16
 800eca8:	4638      	mov	r0, r7
 800ecaa:	f7fc fa47 	bl	800b13c <_printf_float>
 800ecae:	1c42      	adds	r2, r0, #1
 800ecb0:	4606      	mov	r6, r0
 800ecb2:	d1d6      	bne.n	800ec62 <_svfiprintf_r+0x176>
 800ecb4:	89ab      	ldrh	r3, [r5, #12]
 800ecb6:	065b      	lsls	r3, r3, #25
 800ecb8:	f53f af2c 	bmi.w	800eb14 <_svfiprintf_r+0x28>
 800ecbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ecbe:	b01d      	add	sp, #116	; 0x74
 800ecc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecc4:	ab03      	add	r3, sp, #12
 800ecc6:	9300      	str	r3, [sp, #0]
 800ecc8:	462a      	mov	r2, r5
 800ecca:	4b06      	ldr	r3, [pc, #24]	; (800ece4 <_svfiprintf_r+0x1f8>)
 800eccc:	a904      	add	r1, sp, #16
 800ecce:	4638      	mov	r0, r7
 800ecd0:	f7fc fcd8 	bl	800b684 <_printf_i>
 800ecd4:	e7eb      	b.n	800ecae <_svfiprintf_r+0x1c2>
 800ecd6:	bf00      	nop
 800ecd8:	0801047c 	.word	0x0801047c
 800ecdc:	08010486 	.word	0x08010486
 800ece0:	0800b13d 	.word	0x0800b13d
 800ece4:	0800ea35 	.word	0x0800ea35
 800ece8:	08010482 	.word	0x08010482
 800ecec:	00000000 	.word	0x00000000

0800ecf0 <nan>:
 800ecf0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ecf8 <nan+0x8>
 800ecf4:	4770      	bx	lr
 800ecf6:	bf00      	nop
 800ecf8:	00000000 	.word	0x00000000
 800ecfc:	7ff80000 	.word	0x7ff80000

0800ed00 <_sbrk_r>:
 800ed00:	b538      	push	{r3, r4, r5, lr}
 800ed02:	4d06      	ldr	r5, [pc, #24]	; (800ed1c <_sbrk_r+0x1c>)
 800ed04:	2300      	movs	r3, #0
 800ed06:	4604      	mov	r4, r0
 800ed08:	4608      	mov	r0, r1
 800ed0a:	602b      	str	r3, [r5, #0]
 800ed0c:	f7f4 f83a 	bl	8002d84 <_sbrk>
 800ed10:	1c43      	adds	r3, r0, #1
 800ed12:	d102      	bne.n	800ed1a <_sbrk_r+0x1a>
 800ed14:	682b      	ldr	r3, [r5, #0]
 800ed16:	b103      	cbz	r3, 800ed1a <_sbrk_r+0x1a>
 800ed18:	6023      	str	r3, [r4, #0]
 800ed1a:	bd38      	pop	{r3, r4, r5, pc}
 800ed1c:	20000b28 	.word	0x20000b28

0800ed20 <strncmp>:
 800ed20:	b510      	push	{r4, lr}
 800ed22:	b17a      	cbz	r2, 800ed44 <strncmp+0x24>
 800ed24:	4603      	mov	r3, r0
 800ed26:	3901      	subs	r1, #1
 800ed28:	1884      	adds	r4, r0, r2
 800ed2a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ed2e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ed32:	4290      	cmp	r0, r2
 800ed34:	d101      	bne.n	800ed3a <strncmp+0x1a>
 800ed36:	42a3      	cmp	r3, r4
 800ed38:	d101      	bne.n	800ed3e <strncmp+0x1e>
 800ed3a:	1a80      	subs	r0, r0, r2
 800ed3c:	bd10      	pop	{r4, pc}
 800ed3e:	2800      	cmp	r0, #0
 800ed40:	d1f3      	bne.n	800ed2a <strncmp+0xa>
 800ed42:	e7fa      	b.n	800ed3a <strncmp+0x1a>
 800ed44:	4610      	mov	r0, r2
 800ed46:	e7f9      	b.n	800ed3c <strncmp+0x1c>

0800ed48 <__ascii_wctomb>:
 800ed48:	b149      	cbz	r1, 800ed5e <__ascii_wctomb+0x16>
 800ed4a:	2aff      	cmp	r2, #255	; 0xff
 800ed4c:	bf85      	ittet	hi
 800ed4e:	238a      	movhi	r3, #138	; 0x8a
 800ed50:	6003      	strhi	r3, [r0, #0]
 800ed52:	700a      	strbls	r2, [r1, #0]
 800ed54:	f04f 30ff 	movhi.w	r0, #4294967295
 800ed58:	bf98      	it	ls
 800ed5a:	2001      	movls	r0, #1
 800ed5c:	4770      	bx	lr
 800ed5e:	4608      	mov	r0, r1
 800ed60:	4770      	bx	lr
	...

0800ed64 <__assert_func>:
 800ed64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ed66:	4614      	mov	r4, r2
 800ed68:	461a      	mov	r2, r3
 800ed6a:	4b09      	ldr	r3, [pc, #36]	; (800ed90 <__assert_func+0x2c>)
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	4605      	mov	r5, r0
 800ed70:	68d8      	ldr	r0, [r3, #12]
 800ed72:	b14c      	cbz	r4, 800ed88 <__assert_func+0x24>
 800ed74:	4b07      	ldr	r3, [pc, #28]	; (800ed94 <__assert_func+0x30>)
 800ed76:	9100      	str	r1, [sp, #0]
 800ed78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ed7c:	4906      	ldr	r1, [pc, #24]	; (800ed98 <__assert_func+0x34>)
 800ed7e:	462b      	mov	r3, r5
 800ed80:	f000 f80e 	bl	800eda0 <fiprintf>
 800ed84:	f000 fa8c 	bl	800f2a0 <abort>
 800ed88:	4b04      	ldr	r3, [pc, #16]	; (800ed9c <__assert_func+0x38>)
 800ed8a:	461c      	mov	r4, r3
 800ed8c:	e7f3      	b.n	800ed76 <__assert_func+0x12>
 800ed8e:	bf00      	nop
 800ed90:	200000fc 	.word	0x200000fc
 800ed94:	0801048d 	.word	0x0801048d
 800ed98:	0801049a 	.word	0x0801049a
 800ed9c:	080104c8 	.word	0x080104c8

0800eda0 <fiprintf>:
 800eda0:	b40e      	push	{r1, r2, r3}
 800eda2:	b503      	push	{r0, r1, lr}
 800eda4:	4601      	mov	r1, r0
 800eda6:	ab03      	add	r3, sp, #12
 800eda8:	4805      	ldr	r0, [pc, #20]	; (800edc0 <fiprintf+0x20>)
 800edaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800edae:	6800      	ldr	r0, [r0, #0]
 800edb0:	9301      	str	r3, [sp, #4]
 800edb2:	f000 f885 	bl	800eec0 <_vfiprintf_r>
 800edb6:	b002      	add	sp, #8
 800edb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800edbc:	b003      	add	sp, #12
 800edbe:	4770      	bx	lr
 800edc0:	200000fc 	.word	0x200000fc

0800edc4 <memmove>:
 800edc4:	4288      	cmp	r0, r1
 800edc6:	b510      	push	{r4, lr}
 800edc8:	eb01 0402 	add.w	r4, r1, r2
 800edcc:	d902      	bls.n	800edd4 <memmove+0x10>
 800edce:	4284      	cmp	r4, r0
 800edd0:	4623      	mov	r3, r4
 800edd2:	d807      	bhi.n	800ede4 <memmove+0x20>
 800edd4:	1e43      	subs	r3, r0, #1
 800edd6:	42a1      	cmp	r1, r4
 800edd8:	d008      	beq.n	800edec <memmove+0x28>
 800edda:	f811 2b01 	ldrb.w	r2, [r1], #1
 800edde:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ede2:	e7f8      	b.n	800edd6 <memmove+0x12>
 800ede4:	4402      	add	r2, r0
 800ede6:	4601      	mov	r1, r0
 800ede8:	428a      	cmp	r2, r1
 800edea:	d100      	bne.n	800edee <memmove+0x2a>
 800edec:	bd10      	pop	{r4, pc}
 800edee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800edf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800edf6:	e7f7      	b.n	800ede8 <memmove+0x24>

0800edf8 <__malloc_lock>:
 800edf8:	4801      	ldr	r0, [pc, #4]	; (800ee00 <__malloc_lock+0x8>)
 800edfa:	f000 bc11 	b.w	800f620 <__retarget_lock_acquire_recursive>
 800edfe:	bf00      	nop
 800ee00:	20000b2c 	.word	0x20000b2c

0800ee04 <__malloc_unlock>:
 800ee04:	4801      	ldr	r0, [pc, #4]	; (800ee0c <__malloc_unlock+0x8>)
 800ee06:	f000 bc0c 	b.w	800f622 <__retarget_lock_release_recursive>
 800ee0a:	bf00      	nop
 800ee0c:	20000b2c 	.word	0x20000b2c

0800ee10 <_realloc_r>:
 800ee10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee14:	4680      	mov	r8, r0
 800ee16:	4614      	mov	r4, r2
 800ee18:	460e      	mov	r6, r1
 800ee1a:	b921      	cbnz	r1, 800ee26 <_realloc_r+0x16>
 800ee1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee20:	4611      	mov	r1, r2
 800ee22:	f7ff bd93 	b.w	800e94c <_malloc_r>
 800ee26:	b92a      	cbnz	r2, 800ee34 <_realloc_r+0x24>
 800ee28:	f7ff fd24 	bl	800e874 <_free_r>
 800ee2c:	4625      	mov	r5, r4
 800ee2e:	4628      	mov	r0, r5
 800ee30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee34:	f000 fc5c 	bl	800f6f0 <_malloc_usable_size_r>
 800ee38:	4284      	cmp	r4, r0
 800ee3a:	4607      	mov	r7, r0
 800ee3c:	d802      	bhi.n	800ee44 <_realloc_r+0x34>
 800ee3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ee42:	d812      	bhi.n	800ee6a <_realloc_r+0x5a>
 800ee44:	4621      	mov	r1, r4
 800ee46:	4640      	mov	r0, r8
 800ee48:	f7ff fd80 	bl	800e94c <_malloc_r>
 800ee4c:	4605      	mov	r5, r0
 800ee4e:	2800      	cmp	r0, #0
 800ee50:	d0ed      	beq.n	800ee2e <_realloc_r+0x1e>
 800ee52:	42bc      	cmp	r4, r7
 800ee54:	4622      	mov	r2, r4
 800ee56:	4631      	mov	r1, r6
 800ee58:	bf28      	it	cs
 800ee5a:	463a      	movcs	r2, r7
 800ee5c:	f7ff f824 	bl	800dea8 <memcpy>
 800ee60:	4631      	mov	r1, r6
 800ee62:	4640      	mov	r0, r8
 800ee64:	f7ff fd06 	bl	800e874 <_free_r>
 800ee68:	e7e1      	b.n	800ee2e <_realloc_r+0x1e>
 800ee6a:	4635      	mov	r5, r6
 800ee6c:	e7df      	b.n	800ee2e <_realloc_r+0x1e>

0800ee6e <__sfputc_r>:
 800ee6e:	6893      	ldr	r3, [r2, #8]
 800ee70:	3b01      	subs	r3, #1
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	b410      	push	{r4}
 800ee76:	6093      	str	r3, [r2, #8]
 800ee78:	da08      	bge.n	800ee8c <__sfputc_r+0x1e>
 800ee7a:	6994      	ldr	r4, [r2, #24]
 800ee7c:	42a3      	cmp	r3, r4
 800ee7e:	db01      	blt.n	800ee84 <__sfputc_r+0x16>
 800ee80:	290a      	cmp	r1, #10
 800ee82:	d103      	bne.n	800ee8c <__sfputc_r+0x1e>
 800ee84:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee88:	f000 b94a 	b.w	800f120 <__swbuf_r>
 800ee8c:	6813      	ldr	r3, [r2, #0]
 800ee8e:	1c58      	adds	r0, r3, #1
 800ee90:	6010      	str	r0, [r2, #0]
 800ee92:	7019      	strb	r1, [r3, #0]
 800ee94:	4608      	mov	r0, r1
 800ee96:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee9a:	4770      	bx	lr

0800ee9c <__sfputs_r>:
 800ee9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee9e:	4606      	mov	r6, r0
 800eea0:	460f      	mov	r7, r1
 800eea2:	4614      	mov	r4, r2
 800eea4:	18d5      	adds	r5, r2, r3
 800eea6:	42ac      	cmp	r4, r5
 800eea8:	d101      	bne.n	800eeae <__sfputs_r+0x12>
 800eeaa:	2000      	movs	r0, #0
 800eeac:	e007      	b.n	800eebe <__sfputs_r+0x22>
 800eeae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eeb2:	463a      	mov	r2, r7
 800eeb4:	4630      	mov	r0, r6
 800eeb6:	f7ff ffda 	bl	800ee6e <__sfputc_r>
 800eeba:	1c43      	adds	r3, r0, #1
 800eebc:	d1f3      	bne.n	800eea6 <__sfputs_r+0xa>
 800eebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800eec0 <_vfiprintf_r>:
 800eec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eec4:	460d      	mov	r5, r1
 800eec6:	b09d      	sub	sp, #116	; 0x74
 800eec8:	4614      	mov	r4, r2
 800eeca:	4698      	mov	r8, r3
 800eecc:	4606      	mov	r6, r0
 800eece:	b118      	cbz	r0, 800eed8 <_vfiprintf_r+0x18>
 800eed0:	6983      	ldr	r3, [r0, #24]
 800eed2:	b90b      	cbnz	r3, 800eed8 <_vfiprintf_r+0x18>
 800eed4:	f000 fb06 	bl	800f4e4 <__sinit>
 800eed8:	4b89      	ldr	r3, [pc, #548]	; (800f100 <_vfiprintf_r+0x240>)
 800eeda:	429d      	cmp	r5, r3
 800eedc:	d11b      	bne.n	800ef16 <_vfiprintf_r+0x56>
 800eede:	6875      	ldr	r5, [r6, #4]
 800eee0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eee2:	07d9      	lsls	r1, r3, #31
 800eee4:	d405      	bmi.n	800eef2 <_vfiprintf_r+0x32>
 800eee6:	89ab      	ldrh	r3, [r5, #12]
 800eee8:	059a      	lsls	r2, r3, #22
 800eeea:	d402      	bmi.n	800eef2 <_vfiprintf_r+0x32>
 800eeec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eeee:	f000 fb97 	bl	800f620 <__retarget_lock_acquire_recursive>
 800eef2:	89ab      	ldrh	r3, [r5, #12]
 800eef4:	071b      	lsls	r3, r3, #28
 800eef6:	d501      	bpl.n	800eefc <_vfiprintf_r+0x3c>
 800eef8:	692b      	ldr	r3, [r5, #16]
 800eefa:	b9eb      	cbnz	r3, 800ef38 <_vfiprintf_r+0x78>
 800eefc:	4629      	mov	r1, r5
 800eefe:	4630      	mov	r0, r6
 800ef00:	f000 f960 	bl	800f1c4 <__swsetup_r>
 800ef04:	b1c0      	cbz	r0, 800ef38 <_vfiprintf_r+0x78>
 800ef06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ef08:	07dc      	lsls	r4, r3, #31
 800ef0a:	d50e      	bpl.n	800ef2a <_vfiprintf_r+0x6a>
 800ef0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ef10:	b01d      	add	sp, #116	; 0x74
 800ef12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef16:	4b7b      	ldr	r3, [pc, #492]	; (800f104 <_vfiprintf_r+0x244>)
 800ef18:	429d      	cmp	r5, r3
 800ef1a:	d101      	bne.n	800ef20 <_vfiprintf_r+0x60>
 800ef1c:	68b5      	ldr	r5, [r6, #8]
 800ef1e:	e7df      	b.n	800eee0 <_vfiprintf_r+0x20>
 800ef20:	4b79      	ldr	r3, [pc, #484]	; (800f108 <_vfiprintf_r+0x248>)
 800ef22:	429d      	cmp	r5, r3
 800ef24:	bf08      	it	eq
 800ef26:	68f5      	ldreq	r5, [r6, #12]
 800ef28:	e7da      	b.n	800eee0 <_vfiprintf_r+0x20>
 800ef2a:	89ab      	ldrh	r3, [r5, #12]
 800ef2c:	0598      	lsls	r0, r3, #22
 800ef2e:	d4ed      	bmi.n	800ef0c <_vfiprintf_r+0x4c>
 800ef30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef32:	f000 fb76 	bl	800f622 <__retarget_lock_release_recursive>
 800ef36:	e7e9      	b.n	800ef0c <_vfiprintf_r+0x4c>
 800ef38:	2300      	movs	r3, #0
 800ef3a:	9309      	str	r3, [sp, #36]	; 0x24
 800ef3c:	2320      	movs	r3, #32
 800ef3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ef42:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef46:	2330      	movs	r3, #48	; 0x30
 800ef48:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f10c <_vfiprintf_r+0x24c>
 800ef4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ef50:	f04f 0901 	mov.w	r9, #1
 800ef54:	4623      	mov	r3, r4
 800ef56:	469a      	mov	sl, r3
 800ef58:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef5c:	b10a      	cbz	r2, 800ef62 <_vfiprintf_r+0xa2>
 800ef5e:	2a25      	cmp	r2, #37	; 0x25
 800ef60:	d1f9      	bne.n	800ef56 <_vfiprintf_r+0x96>
 800ef62:	ebba 0b04 	subs.w	fp, sl, r4
 800ef66:	d00b      	beq.n	800ef80 <_vfiprintf_r+0xc0>
 800ef68:	465b      	mov	r3, fp
 800ef6a:	4622      	mov	r2, r4
 800ef6c:	4629      	mov	r1, r5
 800ef6e:	4630      	mov	r0, r6
 800ef70:	f7ff ff94 	bl	800ee9c <__sfputs_r>
 800ef74:	3001      	adds	r0, #1
 800ef76:	f000 80aa 	beq.w	800f0ce <_vfiprintf_r+0x20e>
 800ef7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef7c:	445a      	add	r2, fp
 800ef7e:	9209      	str	r2, [sp, #36]	; 0x24
 800ef80:	f89a 3000 	ldrb.w	r3, [sl]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	f000 80a2 	beq.w	800f0ce <_vfiprintf_r+0x20e>
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	f04f 32ff 	mov.w	r2, #4294967295
 800ef90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef94:	f10a 0a01 	add.w	sl, sl, #1
 800ef98:	9304      	str	r3, [sp, #16]
 800ef9a:	9307      	str	r3, [sp, #28]
 800ef9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800efa0:	931a      	str	r3, [sp, #104]	; 0x68
 800efa2:	4654      	mov	r4, sl
 800efa4:	2205      	movs	r2, #5
 800efa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efaa:	4858      	ldr	r0, [pc, #352]	; (800f10c <_vfiprintf_r+0x24c>)
 800efac:	f7f1 f918 	bl	80001e0 <memchr>
 800efb0:	9a04      	ldr	r2, [sp, #16]
 800efb2:	b9d8      	cbnz	r0, 800efec <_vfiprintf_r+0x12c>
 800efb4:	06d1      	lsls	r1, r2, #27
 800efb6:	bf44      	itt	mi
 800efb8:	2320      	movmi	r3, #32
 800efba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800efbe:	0713      	lsls	r3, r2, #28
 800efc0:	bf44      	itt	mi
 800efc2:	232b      	movmi	r3, #43	; 0x2b
 800efc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800efc8:	f89a 3000 	ldrb.w	r3, [sl]
 800efcc:	2b2a      	cmp	r3, #42	; 0x2a
 800efce:	d015      	beq.n	800effc <_vfiprintf_r+0x13c>
 800efd0:	9a07      	ldr	r2, [sp, #28]
 800efd2:	4654      	mov	r4, sl
 800efd4:	2000      	movs	r0, #0
 800efd6:	f04f 0c0a 	mov.w	ip, #10
 800efda:	4621      	mov	r1, r4
 800efdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800efe0:	3b30      	subs	r3, #48	; 0x30
 800efe2:	2b09      	cmp	r3, #9
 800efe4:	d94e      	bls.n	800f084 <_vfiprintf_r+0x1c4>
 800efe6:	b1b0      	cbz	r0, 800f016 <_vfiprintf_r+0x156>
 800efe8:	9207      	str	r2, [sp, #28]
 800efea:	e014      	b.n	800f016 <_vfiprintf_r+0x156>
 800efec:	eba0 0308 	sub.w	r3, r0, r8
 800eff0:	fa09 f303 	lsl.w	r3, r9, r3
 800eff4:	4313      	orrs	r3, r2
 800eff6:	9304      	str	r3, [sp, #16]
 800eff8:	46a2      	mov	sl, r4
 800effa:	e7d2      	b.n	800efa2 <_vfiprintf_r+0xe2>
 800effc:	9b03      	ldr	r3, [sp, #12]
 800effe:	1d19      	adds	r1, r3, #4
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	9103      	str	r1, [sp, #12]
 800f004:	2b00      	cmp	r3, #0
 800f006:	bfbb      	ittet	lt
 800f008:	425b      	neglt	r3, r3
 800f00a:	f042 0202 	orrlt.w	r2, r2, #2
 800f00e:	9307      	strge	r3, [sp, #28]
 800f010:	9307      	strlt	r3, [sp, #28]
 800f012:	bfb8      	it	lt
 800f014:	9204      	strlt	r2, [sp, #16]
 800f016:	7823      	ldrb	r3, [r4, #0]
 800f018:	2b2e      	cmp	r3, #46	; 0x2e
 800f01a:	d10c      	bne.n	800f036 <_vfiprintf_r+0x176>
 800f01c:	7863      	ldrb	r3, [r4, #1]
 800f01e:	2b2a      	cmp	r3, #42	; 0x2a
 800f020:	d135      	bne.n	800f08e <_vfiprintf_r+0x1ce>
 800f022:	9b03      	ldr	r3, [sp, #12]
 800f024:	1d1a      	adds	r2, r3, #4
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	9203      	str	r2, [sp, #12]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	bfb8      	it	lt
 800f02e:	f04f 33ff 	movlt.w	r3, #4294967295
 800f032:	3402      	adds	r4, #2
 800f034:	9305      	str	r3, [sp, #20]
 800f036:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f11c <_vfiprintf_r+0x25c>
 800f03a:	7821      	ldrb	r1, [r4, #0]
 800f03c:	2203      	movs	r2, #3
 800f03e:	4650      	mov	r0, sl
 800f040:	f7f1 f8ce 	bl	80001e0 <memchr>
 800f044:	b140      	cbz	r0, 800f058 <_vfiprintf_r+0x198>
 800f046:	2340      	movs	r3, #64	; 0x40
 800f048:	eba0 000a 	sub.w	r0, r0, sl
 800f04c:	fa03 f000 	lsl.w	r0, r3, r0
 800f050:	9b04      	ldr	r3, [sp, #16]
 800f052:	4303      	orrs	r3, r0
 800f054:	3401      	adds	r4, #1
 800f056:	9304      	str	r3, [sp, #16]
 800f058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f05c:	482c      	ldr	r0, [pc, #176]	; (800f110 <_vfiprintf_r+0x250>)
 800f05e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f062:	2206      	movs	r2, #6
 800f064:	f7f1 f8bc 	bl	80001e0 <memchr>
 800f068:	2800      	cmp	r0, #0
 800f06a:	d03f      	beq.n	800f0ec <_vfiprintf_r+0x22c>
 800f06c:	4b29      	ldr	r3, [pc, #164]	; (800f114 <_vfiprintf_r+0x254>)
 800f06e:	bb1b      	cbnz	r3, 800f0b8 <_vfiprintf_r+0x1f8>
 800f070:	9b03      	ldr	r3, [sp, #12]
 800f072:	3307      	adds	r3, #7
 800f074:	f023 0307 	bic.w	r3, r3, #7
 800f078:	3308      	adds	r3, #8
 800f07a:	9303      	str	r3, [sp, #12]
 800f07c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f07e:	443b      	add	r3, r7
 800f080:	9309      	str	r3, [sp, #36]	; 0x24
 800f082:	e767      	b.n	800ef54 <_vfiprintf_r+0x94>
 800f084:	fb0c 3202 	mla	r2, ip, r2, r3
 800f088:	460c      	mov	r4, r1
 800f08a:	2001      	movs	r0, #1
 800f08c:	e7a5      	b.n	800efda <_vfiprintf_r+0x11a>
 800f08e:	2300      	movs	r3, #0
 800f090:	3401      	adds	r4, #1
 800f092:	9305      	str	r3, [sp, #20]
 800f094:	4619      	mov	r1, r3
 800f096:	f04f 0c0a 	mov.w	ip, #10
 800f09a:	4620      	mov	r0, r4
 800f09c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f0a0:	3a30      	subs	r2, #48	; 0x30
 800f0a2:	2a09      	cmp	r2, #9
 800f0a4:	d903      	bls.n	800f0ae <_vfiprintf_r+0x1ee>
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d0c5      	beq.n	800f036 <_vfiprintf_r+0x176>
 800f0aa:	9105      	str	r1, [sp, #20]
 800f0ac:	e7c3      	b.n	800f036 <_vfiprintf_r+0x176>
 800f0ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800f0b2:	4604      	mov	r4, r0
 800f0b4:	2301      	movs	r3, #1
 800f0b6:	e7f0      	b.n	800f09a <_vfiprintf_r+0x1da>
 800f0b8:	ab03      	add	r3, sp, #12
 800f0ba:	9300      	str	r3, [sp, #0]
 800f0bc:	462a      	mov	r2, r5
 800f0be:	4b16      	ldr	r3, [pc, #88]	; (800f118 <_vfiprintf_r+0x258>)
 800f0c0:	a904      	add	r1, sp, #16
 800f0c2:	4630      	mov	r0, r6
 800f0c4:	f7fc f83a 	bl	800b13c <_printf_float>
 800f0c8:	4607      	mov	r7, r0
 800f0ca:	1c78      	adds	r0, r7, #1
 800f0cc:	d1d6      	bne.n	800f07c <_vfiprintf_r+0x1bc>
 800f0ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f0d0:	07d9      	lsls	r1, r3, #31
 800f0d2:	d405      	bmi.n	800f0e0 <_vfiprintf_r+0x220>
 800f0d4:	89ab      	ldrh	r3, [r5, #12]
 800f0d6:	059a      	lsls	r2, r3, #22
 800f0d8:	d402      	bmi.n	800f0e0 <_vfiprintf_r+0x220>
 800f0da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f0dc:	f000 faa1 	bl	800f622 <__retarget_lock_release_recursive>
 800f0e0:	89ab      	ldrh	r3, [r5, #12]
 800f0e2:	065b      	lsls	r3, r3, #25
 800f0e4:	f53f af12 	bmi.w	800ef0c <_vfiprintf_r+0x4c>
 800f0e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f0ea:	e711      	b.n	800ef10 <_vfiprintf_r+0x50>
 800f0ec:	ab03      	add	r3, sp, #12
 800f0ee:	9300      	str	r3, [sp, #0]
 800f0f0:	462a      	mov	r2, r5
 800f0f2:	4b09      	ldr	r3, [pc, #36]	; (800f118 <_vfiprintf_r+0x258>)
 800f0f4:	a904      	add	r1, sp, #16
 800f0f6:	4630      	mov	r0, r6
 800f0f8:	f7fc fac4 	bl	800b684 <_printf_i>
 800f0fc:	e7e4      	b.n	800f0c8 <_vfiprintf_r+0x208>
 800f0fe:	bf00      	nop
 800f100:	080104ec 	.word	0x080104ec
 800f104:	0801050c 	.word	0x0801050c
 800f108:	080104cc 	.word	0x080104cc
 800f10c:	0801047c 	.word	0x0801047c
 800f110:	08010486 	.word	0x08010486
 800f114:	0800b13d 	.word	0x0800b13d
 800f118:	0800ee9d 	.word	0x0800ee9d
 800f11c:	08010482 	.word	0x08010482

0800f120 <__swbuf_r>:
 800f120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f122:	460e      	mov	r6, r1
 800f124:	4614      	mov	r4, r2
 800f126:	4605      	mov	r5, r0
 800f128:	b118      	cbz	r0, 800f132 <__swbuf_r+0x12>
 800f12a:	6983      	ldr	r3, [r0, #24]
 800f12c:	b90b      	cbnz	r3, 800f132 <__swbuf_r+0x12>
 800f12e:	f000 f9d9 	bl	800f4e4 <__sinit>
 800f132:	4b21      	ldr	r3, [pc, #132]	; (800f1b8 <__swbuf_r+0x98>)
 800f134:	429c      	cmp	r4, r3
 800f136:	d12b      	bne.n	800f190 <__swbuf_r+0x70>
 800f138:	686c      	ldr	r4, [r5, #4]
 800f13a:	69a3      	ldr	r3, [r4, #24]
 800f13c:	60a3      	str	r3, [r4, #8]
 800f13e:	89a3      	ldrh	r3, [r4, #12]
 800f140:	071a      	lsls	r2, r3, #28
 800f142:	d52f      	bpl.n	800f1a4 <__swbuf_r+0x84>
 800f144:	6923      	ldr	r3, [r4, #16]
 800f146:	b36b      	cbz	r3, 800f1a4 <__swbuf_r+0x84>
 800f148:	6923      	ldr	r3, [r4, #16]
 800f14a:	6820      	ldr	r0, [r4, #0]
 800f14c:	1ac0      	subs	r0, r0, r3
 800f14e:	6963      	ldr	r3, [r4, #20]
 800f150:	b2f6      	uxtb	r6, r6
 800f152:	4283      	cmp	r3, r0
 800f154:	4637      	mov	r7, r6
 800f156:	dc04      	bgt.n	800f162 <__swbuf_r+0x42>
 800f158:	4621      	mov	r1, r4
 800f15a:	4628      	mov	r0, r5
 800f15c:	f000 f92e 	bl	800f3bc <_fflush_r>
 800f160:	bb30      	cbnz	r0, 800f1b0 <__swbuf_r+0x90>
 800f162:	68a3      	ldr	r3, [r4, #8]
 800f164:	3b01      	subs	r3, #1
 800f166:	60a3      	str	r3, [r4, #8]
 800f168:	6823      	ldr	r3, [r4, #0]
 800f16a:	1c5a      	adds	r2, r3, #1
 800f16c:	6022      	str	r2, [r4, #0]
 800f16e:	701e      	strb	r6, [r3, #0]
 800f170:	6963      	ldr	r3, [r4, #20]
 800f172:	3001      	adds	r0, #1
 800f174:	4283      	cmp	r3, r0
 800f176:	d004      	beq.n	800f182 <__swbuf_r+0x62>
 800f178:	89a3      	ldrh	r3, [r4, #12]
 800f17a:	07db      	lsls	r3, r3, #31
 800f17c:	d506      	bpl.n	800f18c <__swbuf_r+0x6c>
 800f17e:	2e0a      	cmp	r6, #10
 800f180:	d104      	bne.n	800f18c <__swbuf_r+0x6c>
 800f182:	4621      	mov	r1, r4
 800f184:	4628      	mov	r0, r5
 800f186:	f000 f919 	bl	800f3bc <_fflush_r>
 800f18a:	b988      	cbnz	r0, 800f1b0 <__swbuf_r+0x90>
 800f18c:	4638      	mov	r0, r7
 800f18e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f190:	4b0a      	ldr	r3, [pc, #40]	; (800f1bc <__swbuf_r+0x9c>)
 800f192:	429c      	cmp	r4, r3
 800f194:	d101      	bne.n	800f19a <__swbuf_r+0x7a>
 800f196:	68ac      	ldr	r4, [r5, #8]
 800f198:	e7cf      	b.n	800f13a <__swbuf_r+0x1a>
 800f19a:	4b09      	ldr	r3, [pc, #36]	; (800f1c0 <__swbuf_r+0xa0>)
 800f19c:	429c      	cmp	r4, r3
 800f19e:	bf08      	it	eq
 800f1a0:	68ec      	ldreq	r4, [r5, #12]
 800f1a2:	e7ca      	b.n	800f13a <__swbuf_r+0x1a>
 800f1a4:	4621      	mov	r1, r4
 800f1a6:	4628      	mov	r0, r5
 800f1a8:	f000 f80c 	bl	800f1c4 <__swsetup_r>
 800f1ac:	2800      	cmp	r0, #0
 800f1ae:	d0cb      	beq.n	800f148 <__swbuf_r+0x28>
 800f1b0:	f04f 37ff 	mov.w	r7, #4294967295
 800f1b4:	e7ea      	b.n	800f18c <__swbuf_r+0x6c>
 800f1b6:	bf00      	nop
 800f1b8:	080104ec 	.word	0x080104ec
 800f1bc:	0801050c 	.word	0x0801050c
 800f1c0:	080104cc 	.word	0x080104cc

0800f1c4 <__swsetup_r>:
 800f1c4:	4b32      	ldr	r3, [pc, #200]	; (800f290 <__swsetup_r+0xcc>)
 800f1c6:	b570      	push	{r4, r5, r6, lr}
 800f1c8:	681d      	ldr	r5, [r3, #0]
 800f1ca:	4606      	mov	r6, r0
 800f1cc:	460c      	mov	r4, r1
 800f1ce:	b125      	cbz	r5, 800f1da <__swsetup_r+0x16>
 800f1d0:	69ab      	ldr	r3, [r5, #24]
 800f1d2:	b913      	cbnz	r3, 800f1da <__swsetup_r+0x16>
 800f1d4:	4628      	mov	r0, r5
 800f1d6:	f000 f985 	bl	800f4e4 <__sinit>
 800f1da:	4b2e      	ldr	r3, [pc, #184]	; (800f294 <__swsetup_r+0xd0>)
 800f1dc:	429c      	cmp	r4, r3
 800f1de:	d10f      	bne.n	800f200 <__swsetup_r+0x3c>
 800f1e0:	686c      	ldr	r4, [r5, #4]
 800f1e2:	89a3      	ldrh	r3, [r4, #12]
 800f1e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f1e8:	0719      	lsls	r1, r3, #28
 800f1ea:	d42c      	bmi.n	800f246 <__swsetup_r+0x82>
 800f1ec:	06dd      	lsls	r5, r3, #27
 800f1ee:	d411      	bmi.n	800f214 <__swsetup_r+0x50>
 800f1f0:	2309      	movs	r3, #9
 800f1f2:	6033      	str	r3, [r6, #0]
 800f1f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f1f8:	81a3      	strh	r3, [r4, #12]
 800f1fa:	f04f 30ff 	mov.w	r0, #4294967295
 800f1fe:	e03e      	b.n	800f27e <__swsetup_r+0xba>
 800f200:	4b25      	ldr	r3, [pc, #148]	; (800f298 <__swsetup_r+0xd4>)
 800f202:	429c      	cmp	r4, r3
 800f204:	d101      	bne.n	800f20a <__swsetup_r+0x46>
 800f206:	68ac      	ldr	r4, [r5, #8]
 800f208:	e7eb      	b.n	800f1e2 <__swsetup_r+0x1e>
 800f20a:	4b24      	ldr	r3, [pc, #144]	; (800f29c <__swsetup_r+0xd8>)
 800f20c:	429c      	cmp	r4, r3
 800f20e:	bf08      	it	eq
 800f210:	68ec      	ldreq	r4, [r5, #12]
 800f212:	e7e6      	b.n	800f1e2 <__swsetup_r+0x1e>
 800f214:	0758      	lsls	r0, r3, #29
 800f216:	d512      	bpl.n	800f23e <__swsetup_r+0x7a>
 800f218:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f21a:	b141      	cbz	r1, 800f22e <__swsetup_r+0x6a>
 800f21c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f220:	4299      	cmp	r1, r3
 800f222:	d002      	beq.n	800f22a <__swsetup_r+0x66>
 800f224:	4630      	mov	r0, r6
 800f226:	f7ff fb25 	bl	800e874 <_free_r>
 800f22a:	2300      	movs	r3, #0
 800f22c:	6363      	str	r3, [r4, #52]	; 0x34
 800f22e:	89a3      	ldrh	r3, [r4, #12]
 800f230:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f234:	81a3      	strh	r3, [r4, #12]
 800f236:	2300      	movs	r3, #0
 800f238:	6063      	str	r3, [r4, #4]
 800f23a:	6923      	ldr	r3, [r4, #16]
 800f23c:	6023      	str	r3, [r4, #0]
 800f23e:	89a3      	ldrh	r3, [r4, #12]
 800f240:	f043 0308 	orr.w	r3, r3, #8
 800f244:	81a3      	strh	r3, [r4, #12]
 800f246:	6923      	ldr	r3, [r4, #16]
 800f248:	b94b      	cbnz	r3, 800f25e <__swsetup_r+0x9a>
 800f24a:	89a3      	ldrh	r3, [r4, #12]
 800f24c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f254:	d003      	beq.n	800f25e <__swsetup_r+0x9a>
 800f256:	4621      	mov	r1, r4
 800f258:	4630      	mov	r0, r6
 800f25a:	f000 fa09 	bl	800f670 <__smakebuf_r>
 800f25e:	89a0      	ldrh	r0, [r4, #12]
 800f260:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f264:	f010 0301 	ands.w	r3, r0, #1
 800f268:	d00a      	beq.n	800f280 <__swsetup_r+0xbc>
 800f26a:	2300      	movs	r3, #0
 800f26c:	60a3      	str	r3, [r4, #8]
 800f26e:	6963      	ldr	r3, [r4, #20]
 800f270:	425b      	negs	r3, r3
 800f272:	61a3      	str	r3, [r4, #24]
 800f274:	6923      	ldr	r3, [r4, #16]
 800f276:	b943      	cbnz	r3, 800f28a <__swsetup_r+0xc6>
 800f278:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f27c:	d1ba      	bne.n	800f1f4 <__swsetup_r+0x30>
 800f27e:	bd70      	pop	{r4, r5, r6, pc}
 800f280:	0781      	lsls	r1, r0, #30
 800f282:	bf58      	it	pl
 800f284:	6963      	ldrpl	r3, [r4, #20]
 800f286:	60a3      	str	r3, [r4, #8]
 800f288:	e7f4      	b.n	800f274 <__swsetup_r+0xb0>
 800f28a:	2000      	movs	r0, #0
 800f28c:	e7f7      	b.n	800f27e <__swsetup_r+0xba>
 800f28e:	bf00      	nop
 800f290:	200000fc 	.word	0x200000fc
 800f294:	080104ec 	.word	0x080104ec
 800f298:	0801050c 	.word	0x0801050c
 800f29c:	080104cc 	.word	0x080104cc

0800f2a0 <abort>:
 800f2a0:	b508      	push	{r3, lr}
 800f2a2:	2006      	movs	r0, #6
 800f2a4:	f000 fa54 	bl	800f750 <raise>
 800f2a8:	2001      	movs	r0, #1
 800f2aa:	f7f3 fcf3 	bl	8002c94 <_exit>
	...

0800f2b0 <__sflush_r>:
 800f2b0:	898a      	ldrh	r2, [r1, #12]
 800f2b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2b6:	4605      	mov	r5, r0
 800f2b8:	0710      	lsls	r0, r2, #28
 800f2ba:	460c      	mov	r4, r1
 800f2bc:	d458      	bmi.n	800f370 <__sflush_r+0xc0>
 800f2be:	684b      	ldr	r3, [r1, #4]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	dc05      	bgt.n	800f2d0 <__sflush_r+0x20>
 800f2c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	dc02      	bgt.n	800f2d0 <__sflush_r+0x20>
 800f2ca:	2000      	movs	r0, #0
 800f2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f2d2:	2e00      	cmp	r6, #0
 800f2d4:	d0f9      	beq.n	800f2ca <__sflush_r+0x1a>
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f2dc:	682f      	ldr	r7, [r5, #0]
 800f2de:	602b      	str	r3, [r5, #0]
 800f2e0:	d032      	beq.n	800f348 <__sflush_r+0x98>
 800f2e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f2e4:	89a3      	ldrh	r3, [r4, #12]
 800f2e6:	075a      	lsls	r2, r3, #29
 800f2e8:	d505      	bpl.n	800f2f6 <__sflush_r+0x46>
 800f2ea:	6863      	ldr	r3, [r4, #4]
 800f2ec:	1ac0      	subs	r0, r0, r3
 800f2ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f2f0:	b10b      	cbz	r3, 800f2f6 <__sflush_r+0x46>
 800f2f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f2f4:	1ac0      	subs	r0, r0, r3
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	4602      	mov	r2, r0
 800f2fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f2fc:	6a21      	ldr	r1, [r4, #32]
 800f2fe:	4628      	mov	r0, r5
 800f300:	47b0      	blx	r6
 800f302:	1c43      	adds	r3, r0, #1
 800f304:	89a3      	ldrh	r3, [r4, #12]
 800f306:	d106      	bne.n	800f316 <__sflush_r+0x66>
 800f308:	6829      	ldr	r1, [r5, #0]
 800f30a:	291d      	cmp	r1, #29
 800f30c:	d82c      	bhi.n	800f368 <__sflush_r+0xb8>
 800f30e:	4a2a      	ldr	r2, [pc, #168]	; (800f3b8 <__sflush_r+0x108>)
 800f310:	40ca      	lsrs	r2, r1
 800f312:	07d6      	lsls	r6, r2, #31
 800f314:	d528      	bpl.n	800f368 <__sflush_r+0xb8>
 800f316:	2200      	movs	r2, #0
 800f318:	6062      	str	r2, [r4, #4]
 800f31a:	04d9      	lsls	r1, r3, #19
 800f31c:	6922      	ldr	r2, [r4, #16]
 800f31e:	6022      	str	r2, [r4, #0]
 800f320:	d504      	bpl.n	800f32c <__sflush_r+0x7c>
 800f322:	1c42      	adds	r2, r0, #1
 800f324:	d101      	bne.n	800f32a <__sflush_r+0x7a>
 800f326:	682b      	ldr	r3, [r5, #0]
 800f328:	b903      	cbnz	r3, 800f32c <__sflush_r+0x7c>
 800f32a:	6560      	str	r0, [r4, #84]	; 0x54
 800f32c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f32e:	602f      	str	r7, [r5, #0]
 800f330:	2900      	cmp	r1, #0
 800f332:	d0ca      	beq.n	800f2ca <__sflush_r+0x1a>
 800f334:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f338:	4299      	cmp	r1, r3
 800f33a:	d002      	beq.n	800f342 <__sflush_r+0x92>
 800f33c:	4628      	mov	r0, r5
 800f33e:	f7ff fa99 	bl	800e874 <_free_r>
 800f342:	2000      	movs	r0, #0
 800f344:	6360      	str	r0, [r4, #52]	; 0x34
 800f346:	e7c1      	b.n	800f2cc <__sflush_r+0x1c>
 800f348:	6a21      	ldr	r1, [r4, #32]
 800f34a:	2301      	movs	r3, #1
 800f34c:	4628      	mov	r0, r5
 800f34e:	47b0      	blx	r6
 800f350:	1c41      	adds	r1, r0, #1
 800f352:	d1c7      	bne.n	800f2e4 <__sflush_r+0x34>
 800f354:	682b      	ldr	r3, [r5, #0]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d0c4      	beq.n	800f2e4 <__sflush_r+0x34>
 800f35a:	2b1d      	cmp	r3, #29
 800f35c:	d001      	beq.n	800f362 <__sflush_r+0xb2>
 800f35e:	2b16      	cmp	r3, #22
 800f360:	d101      	bne.n	800f366 <__sflush_r+0xb6>
 800f362:	602f      	str	r7, [r5, #0]
 800f364:	e7b1      	b.n	800f2ca <__sflush_r+0x1a>
 800f366:	89a3      	ldrh	r3, [r4, #12]
 800f368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f36c:	81a3      	strh	r3, [r4, #12]
 800f36e:	e7ad      	b.n	800f2cc <__sflush_r+0x1c>
 800f370:	690f      	ldr	r7, [r1, #16]
 800f372:	2f00      	cmp	r7, #0
 800f374:	d0a9      	beq.n	800f2ca <__sflush_r+0x1a>
 800f376:	0793      	lsls	r3, r2, #30
 800f378:	680e      	ldr	r6, [r1, #0]
 800f37a:	bf08      	it	eq
 800f37c:	694b      	ldreq	r3, [r1, #20]
 800f37e:	600f      	str	r7, [r1, #0]
 800f380:	bf18      	it	ne
 800f382:	2300      	movne	r3, #0
 800f384:	eba6 0807 	sub.w	r8, r6, r7
 800f388:	608b      	str	r3, [r1, #8]
 800f38a:	f1b8 0f00 	cmp.w	r8, #0
 800f38e:	dd9c      	ble.n	800f2ca <__sflush_r+0x1a>
 800f390:	6a21      	ldr	r1, [r4, #32]
 800f392:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f394:	4643      	mov	r3, r8
 800f396:	463a      	mov	r2, r7
 800f398:	4628      	mov	r0, r5
 800f39a:	47b0      	blx	r6
 800f39c:	2800      	cmp	r0, #0
 800f39e:	dc06      	bgt.n	800f3ae <__sflush_r+0xfe>
 800f3a0:	89a3      	ldrh	r3, [r4, #12]
 800f3a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f3a6:	81a3      	strh	r3, [r4, #12]
 800f3a8:	f04f 30ff 	mov.w	r0, #4294967295
 800f3ac:	e78e      	b.n	800f2cc <__sflush_r+0x1c>
 800f3ae:	4407      	add	r7, r0
 800f3b0:	eba8 0800 	sub.w	r8, r8, r0
 800f3b4:	e7e9      	b.n	800f38a <__sflush_r+0xda>
 800f3b6:	bf00      	nop
 800f3b8:	20400001 	.word	0x20400001

0800f3bc <_fflush_r>:
 800f3bc:	b538      	push	{r3, r4, r5, lr}
 800f3be:	690b      	ldr	r3, [r1, #16]
 800f3c0:	4605      	mov	r5, r0
 800f3c2:	460c      	mov	r4, r1
 800f3c4:	b913      	cbnz	r3, 800f3cc <_fflush_r+0x10>
 800f3c6:	2500      	movs	r5, #0
 800f3c8:	4628      	mov	r0, r5
 800f3ca:	bd38      	pop	{r3, r4, r5, pc}
 800f3cc:	b118      	cbz	r0, 800f3d6 <_fflush_r+0x1a>
 800f3ce:	6983      	ldr	r3, [r0, #24]
 800f3d0:	b90b      	cbnz	r3, 800f3d6 <_fflush_r+0x1a>
 800f3d2:	f000 f887 	bl	800f4e4 <__sinit>
 800f3d6:	4b14      	ldr	r3, [pc, #80]	; (800f428 <_fflush_r+0x6c>)
 800f3d8:	429c      	cmp	r4, r3
 800f3da:	d11b      	bne.n	800f414 <_fflush_r+0x58>
 800f3dc:	686c      	ldr	r4, [r5, #4]
 800f3de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d0ef      	beq.n	800f3c6 <_fflush_r+0xa>
 800f3e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f3e8:	07d0      	lsls	r0, r2, #31
 800f3ea:	d404      	bmi.n	800f3f6 <_fflush_r+0x3a>
 800f3ec:	0599      	lsls	r1, r3, #22
 800f3ee:	d402      	bmi.n	800f3f6 <_fflush_r+0x3a>
 800f3f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f3f2:	f000 f915 	bl	800f620 <__retarget_lock_acquire_recursive>
 800f3f6:	4628      	mov	r0, r5
 800f3f8:	4621      	mov	r1, r4
 800f3fa:	f7ff ff59 	bl	800f2b0 <__sflush_r>
 800f3fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f400:	07da      	lsls	r2, r3, #31
 800f402:	4605      	mov	r5, r0
 800f404:	d4e0      	bmi.n	800f3c8 <_fflush_r+0xc>
 800f406:	89a3      	ldrh	r3, [r4, #12]
 800f408:	059b      	lsls	r3, r3, #22
 800f40a:	d4dd      	bmi.n	800f3c8 <_fflush_r+0xc>
 800f40c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f40e:	f000 f908 	bl	800f622 <__retarget_lock_release_recursive>
 800f412:	e7d9      	b.n	800f3c8 <_fflush_r+0xc>
 800f414:	4b05      	ldr	r3, [pc, #20]	; (800f42c <_fflush_r+0x70>)
 800f416:	429c      	cmp	r4, r3
 800f418:	d101      	bne.n	800f41e <_fflush_r+0x62>
 800f41a:	68ac      	ldr	r4, [r5, #8]
 800f41c:	e7df      	b.n	800f3de <_fflush_r+0x22>
 800f41e:	4b04      	ldr	r3, [pc, #16]	; (800f430 <_fflush_r+0x74>)
 800f420:	429c      	cmp	r4, r3
 800f422:	bf08      	it	eq
 800f424:	68ec      	ldreq	r4, [r5, #12]
 800f426:	e7da      	b.n	800f3de <_fflush_r+0x22>
 800f428:	080104ec 	.word	0x080104ec
 800f42c:	0801050c 	.word	0x0801050c
 800f430:	080104cc 	.word	0x080104cc

0800f434 <std>:
 800f434:	2300      	movs	r3, #0
 800f436:	b510      	push	{r4, lr}
 800f438:	4604      	mov	r4, r0
 800f43a:	e9c0 3300 	strd	r3, r3, [r0]
 800f43e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f442:	6083      	str	r3, [r0, #8]
 800f444:	8181      	strh	r1, [r0, #12]
 800f446:	6643      	str	r3, [r0, #100]	; 0x64
 800f448:	81c2      	strh	r2, [r0, #14]
 800f44a:	6183      	str	r3, [r0, #24]
 800f44c:	4619      	mov	r1, r3
 800f44e:	2208      	movs	r2, #8
 800f450:	305c      	adds	r0, #92	; 0x5c
 800f452:	f7fb fdcb 	bl	800afec <memset>
 800f456:	4b05      	ldr	r3, [pc, #20]	; (800f46c <std+0x38>)
 800f458:	6263      	str	r3, [r4, #36]	; 0x24
 800f45a:	4b05      	ldr	r3, [pc, #20]	; (800f470 <std+0x3c>)
 800f45c:	62a3      	str	r3, [r4, #40]	; 0x28
 800f45e:	4b05      	ldr	r3, [pc, #20]	; (800f474 <std+0x40>)
 800f460:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f462:	4b05      	ldr	r3, [pc, #20]	; (800f478 <std+0x44>)
 800f464:	6224      	str	r4, [r4, #32]
 800f466:	6323      	str	r3, [r4, #48]	; 0x30
 800f468:	bd10      	pop	{r4, pc}
 800f46a:	bf00      	nop
 800f46c:	0800f789 	.word	0x0800f789
 800f470:	0800f7ab 	.word	0x0800f7ab
 800f474:	0800f7e3 	.word	0x0800f7e3
 800f478:	0800f807 	.word	0x0800f807

0800f47c <_cleanup_r>:
 800f47c:	4901      	ldr	r1, [pc, #4]	; (800f484 <_cleanup_r+0x8>)
 800f47e:	f000 b8af 	b.w	800f5e0 <_fwalk_reent>
 800f482:	bf00      	nop
 800f484:	0800f3bd 	.word	0x0800f3bd

0800f488 <__sfmoreglue>:
 800f488:	b570      	push	{r4, r5, r6, lr}
 800f48a:	2268      	movs	r2, #104	; 0x68
 800f48c:	1e4d      	subs	r5, r1, #1
 800f48e:	4355      	muls	r5, r2
 800f490:	460e      	mov	r6, r1
 800f492:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f496:	f7ff fa59 	bl	800e94c <_malloc_r>
 800f49a:	4604      	mov	r4, r0
 800f49c:	b140      	cbz	r0, 800f4b0 <__sfmoreglue+0x28>
 800f49e:	2100      	movs	r1, #0
 800f4a0:	e9c0 1600 	strd	r1, r6, [r0]
 800f4a4:	300c      	adds	r0, #12
 800f4a6:	60a0      	str	r0, [r4, #8]
 800f4a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f4ac:	f7fb fd9e 	bl	800afec <memset>
 800f4b0:	4620      	mov	r0, r4
 800f4b2:	bd70      	pop	{r4, r5, r6, pc}

0800f4b4 <__sfp_lock_acquire>:
 800f4b4:	4801      	ldr	r0, [pc, #4]	; (800f4bc <__sfp_lock_acquire+0x8>)
 800f4b6:	f000 b8b3 	b.w	800f620 <__retarget_lock_acquire_recursive>
 800f4ba:	bf00      	nop
 800f4bc:	20000b2d 	.word	0x20000b2d

0800f4c0 <__sfp_lock_release>:
 800f4c0:	4801      	ldr	r0, [pc, #4]	; (800f4c8 <__sfp_lock_release+0x8>)
 800f4c2:	f000 b8ae 	b.w	800f622 <__retarget_lock_release_recursive>
 800f4c6:	bf00      	nop
 800f4c8:	20000b2d 	.word	0x20000b2d

0800f4cc <__sinit_lock_acquire>:
 800f4cc:	4801      	ldr	r0, [pc, #4]	; (800f4d4 <__sinit_lock_acquire+0x8>)
 800f4ce:	f000 b8a7 	b.w	800f620 <__retarget_lock_acquire_recursive>
 800f4d2:	bf00      	nop
 800f4d4:	20000b2e 	.word	0x20000b2e

0800f4d8 <__sinit_lock_release>:
 800f4d8:	4801      	ldr	r0, [pc, #4]	; (800f4e0 <__sinit_lock_release+0x8>)
 800f4da:	f000 b8a2 	b.w	800f622 <__retarget_lock_release_recursive>
 800f4de:	bf00      	nop
 800f4e0:	20000b2e 	.word	0x20000b2e

0800f4e4 <__sinit>:
 800f4e4:	b510      	push	{r4, lr}
 800f4e6:	4604      	mov	r4, r0
 800f4e8:	f7ff fff0 	bl	800f4cc <__sinit_lock_acquire>
 800f4ec:	69a3      	ldr	r3, [r4, #24]
 800f4ee:	b11b      	cbz	r3, 800f4f8 <__sinit+0x14>
 800f4f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4f4:	f7ff bff0 	b.w	800f4d8 <__sinit_lock_release>
 800f4f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f4fc:	6523      	str	r3, [r4, #80]	; 0x50
 800f4fe:	4b13      	ldr	r3, [pc, #76]	; (800f54c <__sinit+0x68>)
 800f500:	4a13      	ldr	r2, [pc, #76]	; (800f550 <__sinit+0x6c>)
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	62a2      	str	r2, [r4, #40]	; 0x28
 800f506:	42a3      	cmp	r3, r4
 800f508:	bf04      	itt	eq
 800f50a:	2301      	moveq	r3, #1
 800f50c:	61a3      	streq	r3, [r4, #24]
 800f50e:	4620      	mov	r0, r4
 800f510:	f000 f820 	bl	800f554 <__sfp>
 800f514:	6060      	str	r0, [r4, #4]
 800f516:	4620      	mov	r0, r4
 800f518:	f000 f81c 	bl	800f554 <__sfp>
 800f51c:	60a0      	str	r0, [r4, #8]
 800f51e:	4620      	mov	r0, r4
 800f520:	f000 f818 	bl	800f554 <__sfp>
 800f524:	2200      	movs	r2, #0
 800f526:	60e0      	str	r0, [r4, #12]
 800f528:	2104      	movs	r1, #4
 800f52a:	6860      	ldr	r0, [r4, #4]
 800f52c:	f7ff ff82 	bl	800f434 <std>
 800f530:	68a0      	ldr	r0, [r4, #8]
 800f532:	2201      	movs	r2, #1
 800f534:	2109      	movs	r1, #9
 800f536:	f7ff ff7d 	bl	800f434 <std>
 800f53a:	68e0      	ldr	r0, [r4, #12]
 800f53c:	2202      	movs	r2, #2
 800f53e:	2112      	movs	r1, #18
 800f540:	f7ff ff78 	bl	800f434 <std>
 800f544:	2301      	movs	r3, #1
 800f546:	61a3      	str	r3, [r4, #24]
 800f548:	e7d2      	b.n	800f4f0 <__sinit+0xc>
 800f54a:	bf00      	nop
 800f54c:	08010088 	.word	0x08010088
 800f550:	0800f47d 	.word	0x0800f47d

0800f554 <__sfp>:
 800f554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f556:	4607      	mov	r7, r0
 800f558:	f7ff ffac 	bl	800f4b4 <__sfp_lock_acquire>
 800f55c:	4b1e      	ldr	r3, [pc, #120]	; (800f5d8 <__sfp+0x84>)
 800f55e:	681e      	ldr	r6, [r3, #0]
 800f560:	69b3      	ldr	r3, [r6, #24]
 800f562:	b913      	cbnz	r3, 800f56a <__sfp+0x16>
 800f564:	4630      	mov	r0, r6
 800f566:	f7ff ffbd 	bl	800f4e4 <__sinit>
 800f56a:	3648      	adds	r6, #72	; 0x48
 800f56c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f570:	3b01      	subs	r3, #1
 800f572:	d503      	bpl.n	800f57c <__sfp+0x28>
 800f574:	6833      	ldr	r3, [r6, #0]
 800f576:	b30b      	cbz	r3, 800f5bc <__sfp+0x68>
 800f578:	6836      	ldr	r6, [r6, #0]
 800f57a:	e7f7      	b.n	800f56c <__sfp+0x18>
 800f57c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f580:	b9d5      	cbnz	r5, 800f5b8 <__sfp+0x64>
 800f582:	4b16      	ldr	r3, [pc, #88]	; (800f5dc <__sfp+0x88>)
 800f584:	60e3      	str	r3, [r4, #12]
 800f586:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f58a:	6665      	str	r5, [r4, #100]	; 0x64
 800f58c:	f000 f847 	bl	800f61e <__retarget_lock_init_recursive>
 800f590:	f7ff ff96 	bl	800f4c0 <__sfp_lock_release>
 800f594:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f598:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f59c:	6025      	str	r5, [r4, #0]
 800f59e:	61a5      	str	r5, [r4, #24]
 800f5a0:	2208      	movs	r2, #8
 800f5a2:	4629      	mov	r1, r5
 800f5a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f5a8:	f7fb fd20 	bl	800afec <memset>
 800f5ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f5b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f5b4:	4620      	mov	r0, r4
 800f5b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5b8:	3468      	adds	r4, #104	; 0x68
 800f5ba:	e7d9      	b.n	800f570 <__sfp+0x1c>
 800f5bc:	2104      	movs	r1, #4
 800f5be:	4638      	mov	r0, r7
 800f5c0:	f7ff ff62 	bl	800f488 <__sfmoreglue>
 800f5c4:	4604      	mov	r4, r0
 800f5c6:	6030      	str	r0, [r6, #0]
 800f5c8:	2800      	cmp	r0, #0
 800f5ca:	d1d5      	bne.n	800f578 <__sfp+0x24>
 800f5cc:	f7ff ff78 	bl	800f4c0 <__sfp_lock_release>
 800f5d0:	230c      	movs	r3, #12
 800f5d2:	603b      	str	r3, [r7, #0]
 800f5d4:	e7ee      	b.n	800f5b4 <__sfp+0x60>
 800f5d6:	bf00      	nop
 800f5d8:	08010088 	.word	0x08010088
 800f5dc:	ffff0001 	.word	0xffff0001

0800f5e0 <_fwalk_reent>:
 800f5e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5e4:	4606      	mov	r6, r0
 800f5e6:	4688      	mov	r8, r1
 800f5e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f5ec:	2700      	movs	r7, #0
 800f5ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f5f2:	f1b9 0901 	subs.w	r9, r9, #1
 800f5f6:	d505      	bpl.n	800f604 <_fwalk_reent+0x24>
 800f5f8:	6824      	ldr	r4, [r4, #0]
 800f5fa:	2c00      	cmp	r4, #0
 800f5fc:	d1f7      	bne.n	800f5ee <_fwalk_reent+0xe>
 800f5fe:	4638      	mov	r0, r7
 800f600:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f604:	89ab      	ldrh	r3, [r5, #12]
 800f606:	2b01      	cmp	r3, #1
 800f608:	d907      	bls.n	800f61a <_fwalk_reent+0x3a>
 800f60a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f60e:	3301      	adds	r3, #1
 800f610:	d003      	beq.n	800f61a <_fwalk_reent+0x3a>
 800f612:	4629      	mov	r1, r5
 800f614:	4630      	mov	r0, r6
 800f616:	47c0      	blx	r8
 800f618:	4307      	orrs	r7, r0
 800f61a:	3568      	adds	r5, #104	; 0x68
 800f61c:	e7e9      	b.n	800f5f2 <_fwalk_reent+0x12>

0800f61e <__retarget_lock_init_recursive>:
 800f61e:	4770      	bx	lr

0800f620 <__retarget_lock_acquire_recursive>:
 800f620:	4770      	bx	lr

0800f622 <__retarget_lock_release_recursive>:
 800f622:	4770      	bx	lr

0800f624 <__swhatbuf_r>:
 800f624:	b570      	push	{r4, r5, r6, lr}
 800f626:	460e      	mov	r6, r1
 800f628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f62c:	2900      	cmp	r1, #0
 800f62e:	b096      	sub	sp, #88	; 0x58
 800f630:	4614      	mov	r4, r2
 800f632:	461d      	mov	r5, r3
 800f634:	da08      	bge.n	800f648 <__swhatbuf_r+0x24>
 800f636:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f63a:	2200      	movs	r2, #0
 800f63c:	602a      	str	r2, [r5, #0]
 800f63e:	061a      	lsls	r2, r3, #24
 800f640:	d410      	bmi.n	800f664 <__swhatbuf_r+0x40>
 800f642:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f646:	e00e      	b.n	800f666 <__swhatbuf_r+0x42>
 800f648:	466a      	mov	r2, sp
 800f64a:	f000 f903 	bl	800f854 <_fstat_r>
 800f64e:	2800      	cmp	r0, #0
 800f650:	dbf1      	blt.n	800f636 <__swhatbuf_r+0x12>
 800f652:	9a01      	ldr	r2, [sp, #4]
 800f654:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f658:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f65c:	425a      	negs	r2, r3
 800f65e:	415a      	adcs	r2, r3
 800f660:	602a      	str	r2, [r5, #0]
 800f662:	e7ee      	b.n	800f642 <__swhatbuf_r+0x1e>
 800f664:	2340      	movs	r3, #64	; 0x40
 800f666:	2000      	movs	r0, #0
 800f668:	6023      	str	r3, [r4, #0]
 800f66a:	b016      	add	sp, #88	; 0x58
 800f66c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f670 <__smakebuf_r>:
 800f670:	898b      	ldrh	r3, [r1, #12]
 800f672:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f674:	079d      	lsls	r5, r3, #30
 800f676:	4606      	mov	r6, r0
 800f678:	460c      	mov	r4, r1
 800f67a:	d507      	bpl.n	800f68c <__smakebuf_r+0x1c>
 800f67c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f680:	6023      	str	r3, [r4, #0]
 800f682:	6123      	str	r3, [r4, #16]
 800f684:	2301      	movs	r3, #1
 800f686:	6163      	str	r3, [r4, #20]
 800f688:	b002      	add	sp, #8
 800f68a:	bd70      	pop	{r4, r5, r6, pc}
 800f68c:	ab01      	add	r3, sp, #4
 800f68e:	466a      	mov	r2, sp
 800f690:	f7ff ffc8 	bl	800f624 <__swhatbuf_r>
 800f694:	9900      	ldr	r1, [sp, #0]
 800f696:	4605      	mov	r5, r0
 800f698:	4630      	mov	r0, r6
 800f69a:	f7ff f957 	bl	800e94c <_malloc_r>
 800f69e:	b948      	cbnz	r0, 800f6b4 <__smakebuf_r+0x44>
 800f6a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6a4:	059a      	lsls	r2, r3, #22
 800f6a6:	d4ef      	bmi.n	800f688 <__smakebuf_r+0x18>
 800f6a8:	f023 0303 	bic.w	r3, r3, #3
 800f6ac:	f043 0302 	orr.w	r3, r3, #2
 800f6b0:	81a3      	strh	r3, [r4, #12]
 800f6b2:	e7e3      	b.n	800f67c <__smakebuf_r+0xc>
 800f6b4:	4b0d      	ldr	r3, [pc, #52]	; (800f6ec <__smakebuf_r+0x7c>)
 800f6b6:	62b3      	str	r3, [r6, #40]	; 0x28
 800f6b8:	89a3      	ldrh	r3, [r4, #12]
 800f6ba:	6020      	str	r0, [r4, #0]
 800f6bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f6c0:	81a3      	strh	r3, [r4, #12]
 800f6c2:	9b00      	ldr	r3, [sp, #0]
 800f6c4:	6163      	str	r3, [r4, #20]
 800f6c6:	9b01      	ldr	r3, [sp, #4]
 800f6c8:	6120      	str	r0, [r4, #16]
 800f6ca:	b15b      	cbz	r3, 800f6e4 <__smakebuf_r+0x74>
 800f6cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f6d0:	4630      	mov	r0, r6
 800f6d2:	f000 f8d1 	bl	800f878 <_isatty_r>
 800f6d6:	b128      	cbz	r0, 800f6e4 <__smakebuf_r+0x74>
 800f6d8:	89a3      	ldrh	r3, [r4, #12]
 800f6da:	f023 0303 	bic.w	r3, r3, #3
 800f6de:	f043 0301 	orr.w	r3, r3, #1
 800f6e2:	81a3      	strh	r3, [r4, #12]
 800f6e4:	89a0      	ldrh	r0, [r4, #12]
 800f6e6:	4305      	orrs	r5, r0
 800f6e8:	81a5      	strh	r5, [r4, #12]
 800f6ea:	e7cd      	b.n	800f688 <__smakebuf_r+0x18>
 800f6ec:	0800f47d 	.word	0x0800f47d

0800f6f0 <_malloc_usable_size_r>:
 800f6f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f6f4:	1f18      	subs	r0, r3, #4
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	bfbc      	itt	lt
 800f6fa:	580b      	ldrlt	r3, [r1, r0]
 800f6fc:	18c0      	addlt	r0, r0, r3
 800f6fe:	4770      	bx	lr

0800f700 <_raise_r>:
 800f700:	291f      	cmp	r1, #31
 800f702:	b538      	push	{r3, r4, r5, lr}
 800f704:	4604      	mov	r4, r0
 800f706:	460d      	mov	r5, r1
 800f708:	d904      	bls.n	800f714 <_raise_r+0x14>
 800f70a:	2316      	movs	r3, #22
 800f70c:	6003      	str	r3, [r0, #0]
 800f70e:	f04f 30ff 	mov.w	r0, #4294967295
 800f712:	bd38      	pop	{r3, r4, r5, pc}
 800f714:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f716:	b112      	cbz	r2, 800f71e <_raise_r+0x1e>
 800f718:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f71c:	b94b      	cbnz	r3, 800f732 <_raise_r+0x32>
 800f71e:	4620      	mov	r0, r4
 800f720:	f000 f830 	bl	800f784 <_getpid_r>
 800f724:	462a      	mov	r2, r5
 800f726:	4601      	mov	r1, r0
 800f728:	4620      	mov	r0, r4
 800f72a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f72e:	f000 b817 	b.w	800f760 <_kill_r>
 800f732:	2b01      	cmp	r3, #1
 800f734:	d00a      	beq.n	800f74c <_raise_r+0x4c>
 800f736:	1c59      	adds	r1, r3, #1
 800f738:	d103      	bne.n	800f742 <_raise_r+0x42>
 800f73a:	2316      	movs	r3, #22
 800f73c:	6003      	str	r3, [r0, #0]
 800f73e:	2001      	movs	r0, #1
 800f740:	e7e7      	b.n	800f712 <_raise_r+0x12>
 800f742:	2400      	movs	r4, #0
 800f744:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f748:	4628      	mov	r0, r5
 800f74a:	4798      	blx	r3
 800f74c:	2000      	movs	r0, #0
 800f74e:	e7e0      	b.n	800f712 <_raise_r+0x12>

0800f750 <raise>:
 800f750:	4b02      	ldr	r3, [pc, #8]	; (800f75c <raise+0xc>)
 800f752:	4601      	mov	r1, r0
 800f754:	6818      	ldr	r0, [r3, #0]
 800f756:	f7ff bfd3 	b.w	800f700 <_raise_r>
 800f75a:	bf00      	nop
 800f75c:	200000fc 	.word	0x200000fc

0800f760 <_kill_r>:
 800f760:	b538      	push	{r3, r4, r5, lr}
 800f762:	4d07      	ldr	r5, [pc, #28]	; (800f780 <_kill_r+0x20>)
 800f764:	2300      	movs	r3, #0
 800f766:	4604      	mov	r4, r0
 800f768:	4608      	mov	r0, r1
 800f76a:	4611      	mov	r1, r2
 800f76c:	602b      	str	r3, [r5, #0]
 800f76e:	f7f3 fa81 	bl	8002c74 <_kill>
 800f772:	1c43      	adds	r3, r0, #1
 800f774:	d102      	bne.n	800f77c <_kill_r+0x1c>
 800f776:	682b      	ldr	r3, [r5, #0]
 800f778:	b103      	cbz	r3, 800f77c <_kill_r+0x1c>
 800f77a:	6023      	str	r3, [r4, #0]
 800f77c:	bd38      	pop	{r3, r4, r5, pc}
 800f77e:	bf00      	nop
 800f780:	20000b28 	.word	0x20000b28

0800f784 <_getpid_r>:
 800f784:	f7f3 ba6e 	b.w	8002c64 <_getpid>

0800f788 <__sread>:
 800f788:	b510      	push	{r4, lr}
 800f78a:	460c      	mov	r4, r1
 800f78c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f790:	f000 f894 	bl	800f8bc <_read_r>
 800f794:	2800      	cmp	r0, #0
 800f796:	bfab      	itete	ge
 800f798:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f79a:	89a3      	ldrhlt	r3, [r4, #12]
 800f79c:	181b      	addge	r3, r3, r0
 800f79e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f7a2:	bfac      	ite	ge
 800f7a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800f7a6:	81a3      	strhlt	r3, [r4, #12]
 800f7a8:	bd10      	pop	{r4, pc}

0800f7aa <__swrite>:
 800f7aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7ae:	461f      	mov	r7, r3
 800f7b0:	898b      	ldrh	r3, [r1, #12]
 800f7b2:	05db      	lsls	r3, r3, #23
 800f7b4:	4605      	mov	r5, r0
 800f7b6:	460c      	mov	r4, r1
 800f7b8:	4616      	mov	r6, r2
 800f7ba:	d505      	bpl.n	800f7c8 <__swrite+0x1e>
 800f7bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7c0:	2302      	movs	r3, #2
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	f000 f868 	bl	800f898 <_lseek_r>
 800f7c8:	89a3      	ldrh	r3, [r4, #12]
 800f7ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f7ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f7d2:	81a3      	strh	r3, [r4, #12]
 800f7d4:	4632      	mov	r2, r6
 800f7d6:	463b      	mov	r3, r7
 800f7d8:	4628      	mov	r0, r5
 800f7da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f7de:	f000 b817 	b.w	800f810 <_write_r>

0800f7e2 <__sseek>:
 800f7e2:	b510      	push	{r4, lr}
 800f7e4:	460c      	mov	r4, r1
 800f7e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7ea:	f000 f855 	bl	800f898 <_lseek_r>
 800f7ee:	1c43      	adds	r3, r0, #1
 800f7f0:	89a3      	ldrh	r3, [r4, #12]
 800f7f2:	bf15      	itete	ne
 800f7f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800f7f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f7fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f7fe:	81a3      	strheq	r3, [r4, #12]
 800f800:	bf18      	it	ne
 800f802:	81a3      	strhne	r3, [r4, #12]
 800f804:	bd10      	pop	{r4, pc}

0800f806 <__sclose>:
 800f806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f80a:	f000 b813 	b.w	800f834 <_close_r>
	...

0800f810 <_write_r>:
 800f810:	b538      	push	{r3, r4, r5, lr}
 800f812:	4d07      	ldr	r5, [pc, #28]	; (800f830 <_write_r+0x20>)
 800f814:	4604      	mov	r4, r0
 800f816:	4608      	mov	r0, r1
 800f818:	4611      	mov	r1, r2
 800f81a:	2200      	movs	r2, #0
 800f81c:	602a      	str	r2, [r5, #0]
 800f81e:	461a      	mov	r2, r3
 800f820:	f7f3 fa5f 	bl	8002ce2 <_write>
 800f824:	1c43      	adds	r3, r0, #1
 800f826:	d102      	bne.n	800f82e <_write_r+0x1e>
 800f828:	682b      	ldr	r3, [r5, #0]
 800f82a:	b103      	cbz	r3, 800f82e <_write_r+0x1e>
 800f82c:	6023      	str	r3, [r4, #0]
 800f82e:	bd38      	pop	{r3, r4, r5, pc}
 800f830:	20000b28 	.word	0x20000b28

0800f834 <_close_r>:
 800f834:	b538      	push	{r3, r4, r5, lr}
 800f836:	4d06      	ldr	r5, [pc, #24]	; (800f850 <_close_r+0x1c>)
 800f838:	2300      	movs	r3, #0
 800f83a:	4604      	mov	r4, r0
 800f83c:	4608      	mov	r0, r1
 800f83e:	602b      	str	r3, [r5, #0]
 800f840:	f7f3 fa6b 	bl	8002d1a <_close>
 800f844:	1c43      	adds	r3, r0, #1
 800f846:	d102      	bne.n	800f84e <_close_r+0x1a>
 800f848:	682b      	ldr	r3, [r5, #0]
 800f84a:	b103      	cbz	r3, 800f84e <_close_r+0x1a>
 800f84c:	6023      	str	r3, [r4, #0]
 800f84e:	bd38      	pop	{r3, r4, r5, pc}
 800f850:	20000b28 	.word	0x20000b28

0800f854 <_fstat_r>:
 800f854:	b538      	push	{r3, r4, r5, lr}
 800f856:	4d07      	ldr	r5, [pc, #28]	; (800f874 <_fstat_r+0x20>)
 800f858:	2300      	movs	r3, #0
 800f85a:	4604      	mov	r4, r0
 800f85c:	4608      	mov	r0, r1
 800f85e:	4611      	mov	r1, r2
 800f860:	602b      	str	r3, [r5, #0]
 800f862:	f7f3 fa66 	bl	8002d32 <_fstat>
 800f866:	1c43      	adds	r3, r0, #1
 800f868:	d102      	bne.n	800f870 <_fstat_r+0x1c>
 800f86a:	682b      	ldr	r3, [r5, #0]
 800f86c:	b103      	cbz	r3, 800f870 <_fstat_r+0x1c>
 800f86e:	6023      	str	r3, [r4, #0]
 800f870:	bd38      	pop	{r3, r4, r5, pc}
 800f872:	bf00      	nop
 800f874:	20000b28 	.word	0x20000b28

0800f878 <_isatty_r>:
 800f878:	b538      	push	{r3, r4, r5, lr}
 800f87a:	4d06      	ldr	r5, [pc, #24]	; (800f894 <_isatty_r+0x1c>)
 800f87c:	2300      	movs	r3, #0
 800f87e:	4604      	mov	r4, r0
 800f880:	4608      	mov	r0, r1
 800f882:	602b      	str	r3, [r5, #0]
 800f884:	f7f3 fa65 	bl	8002d52 <_isatty>
 800f888:	1c43      	adds	r3, r0, #1
 800f88a:	d102      	bne.n	800f892 <_isatty_r+0x1a>
 800f88c:	682b      	ldr	r3, [r5, #0]
 800f88e:	b103      	cbz	r3, 800f892 <_isatty_r+0x1a>
 800f890:	6023      	str	r3, [r4, #0]
 800f892:	bd38      	pop	{r3, r4, r5, pc}
 800f894:	20000b28 	.word	0x20000b28

0800f898 <_lseek_r>:
 800f898:	b538      	push	{r3, r4, r5, lr}
 800f89a:	4d07      	ldr	r5, [pc, #28]	; (800f8b8 <_lseek_r+0x20>)
 800f89c:	4604      	mov	r4, r0
 800f89e:	4608      	mov	r0, r1
 800f8a0:	4611      	mov	r1, r2
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	602a      	str	r2, [r5, #0]
 800f8a6:	461a      	mov	r2, r3
 800f8a8:	f7f3 fa5e 	bl	8002d68 <_lseek>
 800f8ac:	1c43      	adds	r3, r0, #1
 800f8ae:	d102      	bne.n	800f8b6 <_lseek_r+0x1e>
 800f8b0:	682b      	ldr	r3, [r5, #0]
 800f8b2:	b103      	cbz	r3, 800f8b6 <_lseek_r+0x1e>
 800f8b4:	6023      	str	r3, [r4, #0]
 800f8b6:	bd38      	pop	{r3, r4, r5, pc}
 800f8b8:	20000b28 	.word	0x20000b28

0800f8bc <_read_r>:
 800f8bc:	b538      	push	{r3, r4, r5, lr}
 800f8be:	4d07      	ldr	r5, [pc, #28]	; (800f8dc <_read_r+0x20>)
 800f8c0:	4604      	mov	r4, r0
 800f8c2:	4608      	mov	r0, r1
 800f8c4:	4611      	mov	r1, r2
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	602a      	str	r2, [r5, #0]
 800f8ca:	461a      	mov	r2, r3
 800f8cc:	f7f3 f9ec 	bl	8002ca8 <_read>
 800f8d0:	1c43      	adds	r3, r0, #1
 800f8d2:	d102      	bne.n	800f8da <_read_r+0x1e>
 800f8d4:	682b      	ldr	r3, [r5, #0]
 800f8d6:	b103      	cbz	r3, 800f8da <_read_r+0x1e>
 800f8d8:	6023      	str	r3, [r4, #0]
 800f8da:	bd38      	pop	{r3, r4, r5, pc}
 800f8dc:	20000b28 	.word	0x20000b28

0800f8e0 <atan2>:
 800f8e0:	f000 b802 	b.w	800f8e8 <__ieee754_atan2>
 800f8e4:	0000      	movs	r0, r0
	...

0800f8e8 <__ieee754_atan2>:
 800f8e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8ec:	ec57 6b11 	vmov	r6, r7, d1
 800f8f0:	4273      	negs	r3, r6
 800f8f2:	f8df e184 	ldr.w	lr, [pc, #388]	; 800fa78 <__ieee754_atan2+0x190>
 800f8f6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800f8fa:	4333      	orrs	r3, r6
 800f8fc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800f900:	4573      	cmp	r3, lr
 800f902:	ec51 0b10 	vmov	r0, r1, d0
 800f906:	ee11 8a10 	vmov	r8, s2
 800f90a:	d80a      	bhi.n	800f922 <__ieee754_atan2+0x3a>
 800f90c:	4244      	negs	r4, r0
 800f90e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f912:	4304      	orrs	r4, r0
 800f914:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800f918:	4574      	cmp	r4, lr
 800f91a:	ee10 9a10 	vmov	r9, s0
 800f91e:	468c      	mov	ip, r1
 800f920:	d907      	bls.n	800f932 <__ieee754_atan2+0x4a>
 800f922:	4632      	mov	r2, r6
 800f924:	463b      	mov	r3, r7
 800f926:	f7f0 fcb1 	bl	800028c <__adddf3>
 800f92a:	ec41 0b10 	vmov	d0, r0, r1
 800f92e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f932:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800f936:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f93a:	4334      	orrs	r4, r6
 800f93c:	d103      	bne.n	800f946 <__ieee754_atan2+0x5e>
 800f93e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f942:	f000 b89d 	b.w	800fa80 <atan>
 800f946:	17bc      	asrs	r4, r7, #30
 800f948:	f004 0402 	and.w	r4, r4, #2
 800f94c:	ea53 0909 	orrs.w	r9, r3, r9
 800f950:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800f954:	d107      	bne.n	800f966 <__ieee754_atan2+0x7e>
 800f956:	2c02      	cmp	r4, #2
 800f958:	d060      	beq.n	800fa1c <__ieee754_atan2+0x134>
 800f95a:	2c03      	cmp	r4, #3
 800f95c:	d1e5      	bne.n	800f92a <__ieee754_atan2+0x42>
 800f95e:	a142      	add	r1, pc, #264	; (adr r1, 800fa68 <__ieee754_atan2+0x180>)
 800f960:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f964:	e7e1      	b.n	800f92a <__ieee754_atan2+0x42>
 800f966:	ea52 0808 	orrs.w	r8, r2, r8
 800f96a:	d106      	bne.n	800f97a <__ieee754_atan2+0x92>
 800f96c:	f1bc 0f00 	cmp.w	ip, #0
 800f970:	da5f      	bge.n	800fa32 <__ieee754_atan2+0x14a>
 800f972:	a13f      	add	r1, pc, #252	; (adr r1, 800fa70 <__ieee754_atan2+0x188>)
 800f974:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f978:	e7d7      	b.n	800f92a <__ieee754_atan2+0x42>
 800f97a:	4572      	cmp	r2, lr
 800f97c:	d10f      	bne.n	800f99e <__ieee754_atan2+0xb6>
 800f97e:	4293      	cmp	r3, r2
 800f980:	f104 34ff 	add.w	r4, r4, #4294967295
 800f984:	d107      	bne.n	800f996 <__ieee754_atan2+0xae>
 800f986:	2c02      	cmp	r4, #2
 800f988:	d84c      	bhi.n	800fa24 <__ieee754_atan2+0x13c>
 800f98a:	4b35      	ldr	r3, [pc, #212]	; (800fa60 <__ieee754_atan2+0x178>)
 800f98c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800f990:	e9d4 0100 	ldrd	r0, r1, [r4]
 800f994:	e7c9      	b.n	800f92a <__ieee754_atan2+0x42>
 800f996:	2c02      	cmp	r4, #2
 800f998:	d848      	bhi.n	800fa2c <__ieee754_atan2+0x144>
 800f99a:	4b32      	ldr	r3, [pc, #200]	; (800fa64 <__ieee754_atan2+0x17c>)
 800f99c:	e7f6      	b.n	800f98c <__ieee754_atan2+0xa4>
 800f99e:	4573      	cmp	r3, lr
 800f9a0:	d0e4      	beq.n	800f96c <__ieee754_atan2+0x84>
 800f9a2:	1a9b      	subs	r3, r3, r2
 800f9a4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800f9a8:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f9ac:	da1e      	bge.n	800f9ec <__ieee754_atan2+0x104>
 800f9ae:	2f00      	cmp	r7, #0
 800f9b0:	da01      	bge.n	800f9b6 <__ieee754_atan2+0xce>
 800f9b2:	323c      	adds	r2, #60	; 0x3c
 800f9b4:	db1e      	blt.n	800f9f4 <__ieee754_atan2+0x10c>
 800f9b6:	4632      	mov	r2, r6
 800f9b8:	463b      	mov	r3, r7
 800f9ba:	f7f0 ff47 	bl	800084c <__aeabi_ddiv>
 800f9be:	ec41 0b10 	vmov	d0, r0, r1
 800f9c2:	f000 f9fd 	bl	800fdc0 <fabs>
 800f9c6:	f000 f85b 	bl	800fa80 <atan>
 800f9ca:	ec51 0b10 	vmov	r0, r1, d0
 800f9ce:	2c01      	cmp	r4, #1
 800f9d0:	d013      	beq.n	800f9fa <__ieee754_atan2+0x112>
 800f9d2:	2c02      	cmp	r4, #2
 800f9d4:	d015      	beq.n	800fa02 <__ieee754_atan2+0x11a>
 800f9d6:	2c00      	cmp	r4, #0
 800f9d8:	d0a7      	beq.n	800f92a <__ieee754_atan2+0x42>
 800f9da:	a319      	add	r3, pc, #100	; (adr r3, 800fa40 <__ieee754_atan2+0x158>)
 800f9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9e0:	f7f0 fc52 	bl	8000288 <__aeabi_dsub>
 800f9e4:	a318      	add	r3, pc, #96	; (adr r3, 800fa48 <__ieee754_atan2+0x160>)
 800f9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ea:	e014      	b.n	800fa16 <__ieee754_atan2+0x12e>
 800f9ec:	a118      	add	r1, pc, #96	; (adr r1, 800fa50 <__ieee754_atan2+0x168>)
 800f9ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f9f2:	e7ec      	b.n	800f9ce <__ieee754_atan2+0xe6>
 800f9f4:	2000      	movs	r0, #0
 800f9f6:	2100      	movs	r1, #0
 800f9f8:	e7e9      	b.n	800f9ce <__ieee754_atan2+0xe6>
 800f9fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f9fe:	4619      	mov	r1, r3
 800fa00:	e793      	b.n	800f92a <__ieee754_atan2+0x42>
 800fa02:	a30f      	add	r3, pc, #60	; (adr r3, 800fa40 <__ieee754_atan2+0x158>)
 800fa04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa08:	f7f0 fc3e 	bl	8000288 <__aeabi_dsub>
 800fa0c:	4602      	mov	r2, r0
 800fa0e:	460b      	mov	r3, r1
 800fa10:	a10d      	add	r1, pc, #52	; (adr r1, 800fa48 <__ieee754_atan2+0x160>)
 800fa12:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa16:	f7f0 fc37 	bl	8000288 <__aeabi_dsub>
 800fa1a:	e786      	b.n	800f92a <__ieee754_atan2+0x42>
 800fa1c:	a10a      	add	r1, pc, #40	; (adr r1, 800fa48 <__ieee754_atan2+0x160>)
 800fa1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa22:	e782      	b.n	800f92a <__ieee754_atan2+0x42>
 800fa24:	a10c      	add	r1, pc, #48	; (adr r1, 800fa58 <__ieee754_atan2+0x170>)
 800fa26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa2a:	e77e      	b.n	800f92a <__ieee754_atan2+0x42>
 800fa2c:	2000      	movs	r0, #0
 800fa2e:	2100      	movs	r1, #0
 800fa30:	e77b      	b.n	800f92a <__ieee754_atan2+0x42>
 800fa32:	a107      	add	r1, pc, #28	; (adr r1, 800fa50 <__ieee754_atan2+0x168>)
 800fa34:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa38:	e777      	b.n	800f92a <__ieee754_atan2+0x42>
 800fa3a:	bf00      	nop
 800fa3c:	f3af 8000 	nop.w
 800fa40:	33145c07 	.word	0x33145c07
 800fa44:	3ca1a626 	.word	0x3ca1a626
 800fa48:	54442d18 	.word	0x54442d18
 800fa4c:	400921fb 	.word	0x400921fb
 800fa50:	54442d18 	.word	0x54442d18
 800fa54:	3ff921fb 	.word	0x3ff921fb
 800fa58:	54442d18 	.word	0x54442d18
 800fa5c:	3fe921fb 	.word	0x3fe921fb
 800fa60:	08010530 	.word	0x08010530
 800fa64:	08010548 	.word	0x08010548
 800fa68:	54442d18 	.word	0x54442d18
 800fa6c:	c00921fb 	.word	0xc00921fb
 800fa70:	54442d18 	.word	0x54442d18
 800fa74:	bff921fb 	.word	0xbff921fb
 800fa78:	7ff00000 	.word	0x7ff00000
 800fa7c:	00000000 	.word	0x00000000

0800fa80 <atan>:
 800fa80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa84:	ec55 4b10 	vmov	r4, r5, d0
 800fa88:	4bc3      	ldr	r3, [pc, #780]	; (800fd98 <atan+0x318>)
 800fa8a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fa8e:	429e      	cmp	r6, r3
 800fa90:	46ab      	mov	fp, r5
 800fa92:	dd18      	ble.n	800fac6 <atan+0x46>
 800fa94:	4bc1      	ldr	r3, [pc, #772]	; (800fd9c <atan+0x31c>)
 800fa96:	429e      	cmp	r6, r3
 800fa98:	dc01      	bgt.n	800fa9e <atan+0x1e>
 800fa9a:	d109      	bne.n	800fab0 <atan+0x30>
 800fa9c:	b144      	cbz	r4, 800fab0 <atan+0x30>
 800fa9e:	4622      	mov	r2, r4
 800faa0:	462b      	mov	r3, r5
 800faa2:	4620      	mov	r0, r4
 800faa4:	4629      	mov	r1, r5
 800faa6:	f7f0 fbf1 	bl	800028c <__adddf3>
 800faaa:	4604      	mov	r4, r0
 800faac:	460d      	mov	r5, r1
 800faae:	e006      	b.n	800fabe <atan+0x3e>
 800fab0:	f1bb 0f00 	cmp.w	fp, #0
 800fab4:	f300 8131 	bgt.w	800fd1a <atan+0x29a>
 800fab8:	a59b      	add	r5, pc, #620	; (adr r5, 800fd28 <atan+0x2a8>)
 800faba:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fabe:	ec45 4b10 	vmov	d0, r4, r5
 800fac2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fac6:	4bb6      	ldr	r3, [pc, #728]	; (800fda0 <atan+0x320>)
 800fac8:	429e      	cmp	r6, r3
 800faca:	dc14      	bgt.n	800faf6 <atan+0x76>
 800facc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800fad0:	429e      	cmp	r6, r3
 800fad2:	dc0d      	bgt.n	800faf0 <atan+0x70>
 800fad4:	a396      	add	r3, pc, #600	; (adr r3, 800fd30 <atan+0x2b0>)
 800fad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fada:	ee10 0a10 	vmov	r0, s0
 800fade:	4629      	mov	r1, r5
 800fae0:	f7f0 fbd4 	bl	800028c <__adddf3>
 800fae4:	4baf      	ldr	r3, [pc, #700]	; (800fda4 <atan+0x324>)
 800fae6:	2200      	movs	r2, #0
 800fae8:	f7f1 f816 	bl	8000b18 <__aeabi_dcmpgt>
 800faec:	2800      	cmp	r0, #0
 800faee:	d1e6      	bne.n	800fabe <atan+0x3e>
 800faf0:	f04f 3aff 	mov.w	sl, #4294967295
 800faf4:	e02b      	b.n	800fb4e <atan+0xce>
 800faf6:	f000 f963 	bl	800fdc0 <fabs>
 800fafa:	4bab      	ldr	r3, [pc, #684]	; (800fda8 <atan+0x328>)
 800fafc:	429e      	cmp	r6, r3
 800fafe:	ec55 4b10 	vmov	r4, r5, d0
 800fb02:	f300 80bf 	bgt.w	800fc84 <atan+0x204>
 800fb06:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800fb0a:	429e      	cmp	r6, r3
 800fb0c:	f300 80a0 	bgt.w	800fc50 <atan+0x1d0>
 800fb10:	ee10 2a10 	vmov	r2, s0
 800fb14:	ee10 0a10 	vmov	r0, s0
 800fb18:	462b      	mov	r3, r5
 800fb1a:	4629      	mov	r1, r5
 800fb1c:	f7f0 fbb6 	bl	800028c <__adddf3>
 800fb20:	4ba0      	ldr	r3, [pc, #640]	; (800fda4 <atan+0x324>)
 800fb22:	2200      	movs	r2, #0
 800fb24:	f7f0 fbb0 	bl	8000288 <__aeabi_dsub>
 800fb28:	2200      	movs	r2, #0
 800fb2a:	4606      	mov	r6, r0
 800fb2c:	460f      	mov	r7, r1
 800fb2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fb32:	4620      	mov	r0, r4
 800fb34:	4629      	mov	r1, r5
 800fb36:	f7f0 fba9 	bl	800028c <__adddf3>
 800fb3a:	4602      	mov	r2, r0
 800fb3c:	460b      	mov	r3, r1
 800fb3e:	4630      	mov	r0, r6
 800fb40:	4639      	mov	r1, r7
 800fb42:	f7f0 fe83 	bl	800084c <__aeabi_ddiv>
 800fb46:	f04f 0a00 	mov.w	sl, #0
 800fb4a:	4604      	mov	r4, r0
 800fb4c:	460d      	mov	r5, r1
 800fb4e:	4622      	mov	r2, r4
 800fb50:	462b      	mov	r3, r5
 800fb52:	4620      	mov	r0, r4
 800fb54:	4629      	mov	r1, r5
 800fb56:	f7f0 fd4f 	bl	80005f8 <__aeabi_dmul>
 800fb5a:	4602      	mov	r2, r0
 800fb5c:	460b      	mov	r3, r1
 800fb5e:	4680      	mov	r8, r0
 800fb60:	4689      	mov	r9, r1
 800fb62:	f7f0 fd49 	bl	80005f8 <__aeabi_dmul>
 800fb66:	a374      	add	r3, pc, #464	; (adr r3, 800fd38 <atan+0x2b8>)
 800fb68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb6c:	4606      	mov	r6, r0
 800fb6e:	460f      	mov	r7, r1
 800fb70:	f7f0 fd42 	bl	80005f8 <__aeabi_dmul>
 800fb74:	a372      	add	r3, pc, #456	; (adr r3, 800fd40 <atan+0x2c0>)
 800fb76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb7a:	f7f0 fb87 	bl	800028c <__adddf3>
 800fb7e:	4632      	mov	r2, r6
 800fb80:	463b      	mov	r3, r7
 800fb82:	f7f0 fd39 	bl	80005f8 <__aeabi_dmul>
 800fb86:	a370      	add	r3, pc, #448	; (adr r3, 800fd48 <atan+0x2c8>)
 800fb88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb8c:	f7f0 fb7e 	bl	800028c <__adddf3>
 800fb90:	4632      	mov	r2, r6
 800fb92:	463b      	mov	r3, r7
 800fb94:	f7f0 fd30 	bl	80005f8 <__aeabi_dmul>
 800fb98:	a36d      	add	r3, pc, #436	; (adr r3, 800fd50 <atan+0x2d0>)
 800fb9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb9e:	f7f0 fb75 	bl	800028c <__adddf3>
 800fba2:	4632      	mov	r2, r6
 800fba4:	463b      	mov	r3, r7
 800fba6:	f7f0 fd27 	bl	80005f8 <__aeabi_dmul>
 800fbaa:	a36b      	add	r3, pc, #428	; (adr r3, 800fd58 <atan+0x2d8>)
 800fbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbb0:	f7f0 fb6c 	bl	800028c <__adddf3>
 800fbb4:	4632      	mov	r2, r6
 800fbb6:	463b      	mov	r3, r7
 800fbb8:	f7f0 fd1e 	bl	80005f8 <__aeabi_dmul>
 800fbbc:	a368      	add	r3, pc, #416	; (adr r3, 800fd60 <atan+0x2e0>)
 800fbbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbc2:	f7f0 fb63 	bl	800028c <__adddf3>
 800fbc6:	4642      	mov	r2, r8
 800fbc8:	464b      	mov	r3, r9
 800fbca:	f7f0 fd15 	bl	80005f8 <__aeabi_dmul>
 800fbce:	a366      	add	r3, pc, #408	; (adr r3, 800fd68 <atan+0x2e8>)
 800fbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbd4:	4680      	mov	r8, r0
 800fbd6:	4689      	mov	r9, r1
 800fbd8:	4630      	mov	r0, r6
 800fbda:	4639      	mov	r1, r7
 800fbdc:	f7f0 fd0c 	bl	80005f8 <__aeabi_dmul>
 800fbe0:	a363      	add	r3, pc, #396	; (adr r3, 800fd70 <atan+0x2f0>)
 800fbe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbe6:	f7f0 fb4f 	bl	8000288 <__aeabi_dsub>
 800fbea:	4632      	mov	r2, r6
 800fbec:	463b      	mov	r3, r7
 800fbee:	f7f0 fd03 	bl	80005f8 <__aeabi_dmul>
 800fbf2:	a361      	add	r3, pc, #388	; (adr r3, 800fd78 <atan+0x2f8>)
 800fbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbf8:	f7f0 fb46 	bl	8000288 <__aeabi_dsub>
 800fbfc:	4632      	mov	r2, r6
 800fbfe:	463b      	mov	r3, r7
 800fc00:	f7f0 fcfa 	bl	80005f8 <__aeabi_dmul>
 800fc04:	a35e      	add	r3, pc, #376	; (adr r3, 800fd80 <atan+0x300>)
 800fc06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc0a:	f7f0 fb3d 	bl	8000288 <__aeabi_dsub>
 800fc0e:	4632      	mov	r2, r6
 800fc10:	463b      	mov	r3, r7
 800fc12:	f7f0 fcf1 	bl	80005f8 <__aeabi_dmul>
 800fc16:	a35c      	add	r3, pc, #368	; (adr r3, 800fd88 <atan+0x308>)
 800fc18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc1c:	f7f0 fb34 	bl	8000288 <__aeabi_dsub>
 800fc20:	4632      	mov	r2, r6
 800fc22:	463b      	mov	r3, r7
 800fc24:	f7f0 fce8 	bl	80005f8 <__aeabi_dmul>
 800fc28:	4602      	mov	r2, r0
 800fc2a:	460b      	mov	r3, r1
 800fc2c:	4640      	mov	r0, r8
 800fc2e:	4649      	mov	r1, r9
 800fc30:	f7f0 fb2c 	bl	800028c <__adddf3>
 800fc34:	4622      	mov	r2, r4
 800fc36:	462b      	mov	r3, r5
 800fc38:	f7f0 fcde 	bl	80005f8 <__aeabi_dmul>
 800fc3c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800fc40:	4602      	mov	r2, r0
 800fc42:	460b      	mov	r3, r1
 800fc44:	d14b      	bne.n	800fcde <atan+0x25e>
 800fc46:	4620      	mov	r0, r4
 800fc48:	4629      	mov	r1, r5
 800fc4a:	f7f0 fb1d 	bl	8000288 <__aeabi_dsub>
 800fc4e:	e72c      	b.n	800faaa <atan+0x2a>
 800fc50:	ee10 0a10 	vmov	r0, s0
 800fc54:	4b53      	ldr	r3, [pc, #332]	; (800fda4 <atan+0x324>)
 800fc56:	2200      	movs	r2, #0
 800fc58:	4629      	mov	r1, r5
 800fc5a:	f7f0 fb15 	bl	8000288 <__aeabi_dsub>
 800fc5e:	4b51      	ldr	r3, [pc, #324]	; (800fda4 <atan+0x324>)
 800fc60:	4606      	mov	r6, r0
 800fc62:	460f      	mov	r7, r1
 800fc64:	2200      	movs	r2, #0
 800fc66:	4620      	mov	r0, r4
 800fc68:	4629      	mov	r1, r5
 800fc6a:	f7f0 fb0f 	bl	800028c <__adddf3>
 800fc6e:	4602      	mov	r2, r0
 800fc70:	460b      	mov	r3, r1
 800fc72:	4630      	mov	r0, r6
 800fc74:	4639      	mov	r1, r7
 800fc76:	f7f0 fde9 	bl	800084c <__aeabi_ddiv>
 800fc7a:	f04f 0a01 	mov.w	sl, #1
 800fc7e:	4604      	mov	r4, r0
 800fc80:	460d      	mov	r5, r1
 800fc82:	e764      	b.n	800fb4e <atan+0xce>
 800fc84:	4b49      	ldr	r3, [pc, #292]	; (800fdac <atan+0x32c>)
 800fc86:	429e      	cmp	r6, r3
 800fc88:	da1d      	bge.n	800fcc6 <atan+0x246>
 800fc8a:	ee10 0a10 	vmov	r0, s0
 800fc8e:	4b48      	ldr	r3, [pc, #288]	; (800fdb0 <atan+0x330>)
 800fc90:	2200      	movs	r2, #0
 800fc92:	4629      	mov	r1, r5
 800fc94:	f7f0 faf8 	bl	8000288 <__aeabi_dsub>
 800fc98:	4b45      	ldr	r3, [pc, #276]	; (800fdb0 <atan+0x330>)
 800fc9a:	4606      	mov	r6, r0
 800fc9c:	460f      	mov	r7, r1
 800fc9e:	2200      	movs	r2, #0
 800fca0:	4620      	mov	r0, r4
 800fca2:	4629      	mov	r1, r5
 800fca4:	f7f0 fca8 	bl	80005f8 <__aeabi_dmul>
 800fca8:	4b3e      	ldr	r3, [pc, #248]	; (800fda4 <atan+0x324>)
 800fcaa:	2200      	movs	r2, #0
 800fcac:	f7f0 faee 	bl	800028c <__adddf3>
 800fcb0:	4602      	mov	r2, r0
 800fcb2:	460b      	mov	r3, r1
 800fcb4:	4630      	mov	r0, r6
 800fcb6:	4639      	mov	r1, r7
 800fcb8:	f7f0 fdc8 	bl	800084c <__aeabi_ddiv>
 800fcbc:	f04f 0a02 	mov.w	sl, #2
 800fcc0:	4604      	mov	r4, r0
 800fcc2:	460d      	mov	r5, r1
 800fcc4:	e743      	b.n	800fb4e <atan+0xce>
 800fcc6:	462b      	mov	r3, r5
 800fcc8:	ee10 2a10 	vmov	r2, s0
 800fccc:	4939      	ldr	r1, [pc, #228]	; (800fdb4 <atan+0x334>)
 800fcce:	2000      	movs	r0, #0
 800fcd0:	f7f0 fdbc 	bl	800084c <__aeabi_ddiv>
 800fcd4:	f04f 0a03 	mov.w	sl, #3
 800fcd8:	4604      	mov	r4, r0
 800fcda:	460d      	mov	r5, r1
 800fcdc:	e737      	b.n	800fb4e <atan+0xce>
 800fcde:	4b36      	ldr	r3, [pc, #216]	; (800fdb8 <atan+0x338>)
 800fce0:	4e36      	ldr	r6, [pc, #216]	; (800fdbc <atan+0x33c>)
 800fce2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800fce6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800fcea:	e9da 2300 	ldrd	r2, r3, [sl]
 800fcee:	f7f0 facb 	bl	8000288 <__aeabi_dsub>
 800fcf2:	4622      	mov	r2, r4
 800fcf4:	462b      	mov	r3, r5
 800fcf6:	f7f0 fac7 	bl	8000288 <__aeabi_dsub>
 800fcfa:	4602      	mov	r2, r0
 800fcfc:	460b      	mov	r3, r1
 800fcfe:	e9d6 0100 	ldrd	r0, r1, [r6]
 800fd02:	f7f0 fac1 	bl	8000288 <__aeabi_dsub>
 800fd06:	f1bb 0f00 	cmp.w	fp, #0
 800fd0a:	4604      	mov	r4, r0
 800fd0c:	460d      	mov	r5, r1
 800fd0e:	f6bf aed6 	bge.w	800fabe <atan+0x3e>
 800fd12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fd16:	461d      	mov	r5, r3
 800fd18:	e6d1      	b.n	800fabe <atan+0x3e>
 800fd1a:	a51d      	add	r5, pc, #116	; (adr r5, 800fd90 <atan+0x310>)
 800fd1c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fd20:	e6cd      	b.n	800fabe <atan+0x3e>
 800fd22:	bf00      	nop
 800fd24:	f3af 8000 	nop.w
 800fd28:	54442d18 	.word	0x54442d18
 800fd2c:	bff921fb 	.word	0xbff921fb
 800fd30:	8800759c 	.word	0x8800759c
 800fd34:	7e37e43c 	.word	0x7e37e43c
 800fd38:	e322da11 	.word	0xe322da11
 800fd3c:	3f90ad3a 	.word	0x3f90ad3a
 800fd40:	24760deb 	.word	0x24760deb
 800fd44:	3fa97b4b 	.word	0x3fa97b4b
 800fd48:	a0d03d51 	.word	0xa0d03d51
 800fd4c:	3fb10d66 	.word	0x3fb10d66
 800fd50:	c54c206e 	.word	0xc54c206e
 800fd54:	3fb745cd 	.word	0x3fb745cd
 800fd58:	920083ff 	.word	0x920083ff
 800fd5c:	3fc24924 	.word	0x3fc24924
 800fd60:	5555550d 	.word	0x5555550d
 800fd64:	3fd55555 	.word	0x3fd55555
 800fd68:	2c6a6c2f 	.word	0x2c6a6c2f
 800fd6c:	bfa2b444 	.word	0xbfa2b444
 800fd70:	52defd9a 	.word	0x52defd9a
 800fd74:	3fadde2d 	.word	0x3fadde2d
 800fd78:	af749a6d 	.word	0xaf749a6d
 800fd7c:	3fb3b0f2 	.word	0x3fb3b0f2
 800fd80:	fe231671 	.word	0xfe231671
 800fd84:	3fbc71c6 	.word	0x3fbc71c6
 800fd88:	9998ebc4 	.word	0x9998ebc4
 800fd8c:	3fc99999 	.word	0x3fc99999
 800fd90:	54442d18 	.word	0x54442d18
 800fd94:	3ff921fb 	.word	0x3ff921fb
 800fd98:	440fffff 	.word	0x440fffff
 800fd9c:	7ff00000 	.word	0x7ff00000
 800fda0:	3fdbffff 	.word	0x3fdbffff
 800fda4:	3ff00000 	.word	0x3ff00000
 800fda8:	3ff2ffff 	.word	0x3ff2ffff
 800fdac:	40038000 	.word	0x40038000
 800fdb0:	3ff80000 	.word	0x3ff80000
 800fdb4:	bff00000 	.word	0xbff00000
 800fdb8:	08010580 	.word	0x08010580
 800fdbc:	08010560 	.word	0x08010560

0800fdc0 <fabs>:
 800fdc0:	ec51 0b10 	vmov	r0, r1, d0
 800fdc4:	ee10 2a10 	vmov	r2, s0
 800fdc8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fdcc:	ec43 2b10 	vmov	d0, r2, r3
 800fdd0:	4770      	bx	lr
	...

0800fdd4 <_init>:
 800fdd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdd6:	bf00      	nop
 800fdd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fdda:	bc08      	pop	{r3}
 800fddc:	469e      	mov	lr, r3
 800fdde:	4770      	bx	lr

0800fde0 <_fini>:
 800fde0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fde2:	bf00      	nop
 800fde4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fde6:	bc08      	pop	{r3}
 800fde8:	469e      	mov	lr, r3
 800fdea:	4770      	bx	lr
